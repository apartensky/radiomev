/*app/views/dataset/_controllers/DatasetProjectViewVM*/
define('app/views/dataset/_controllers/DatasetProjectViewVM', [
    'ng',
    'lodash'
], function (ng, _) {
    'use strict';
    var DatasetProjectViewVM = function DatasetViewVM($scope, $stateParams, $state, DatasetResourceService, dataset, project, AnalysisEventBus, AnalysisTypes, mevAnalysisTypes, mevPathwayEnrichmentAnalysisType, mevGseaAnalysisType, mevPcaAnalysisType, mevHclAnalysisType, mevTopgoAnalysisType, mevNormalizationAnalysisType, mevEdgerAnalysisType, mevWgcnaAnalysisType) {
        var that = this;
        console.debug('DatasetProjectViewVM', dataset, project);
        this.project = project;
        this.getProject = function () {
            return project;
        };
        this.getProjectName = function () {
            return project.name;
        };
        this.node = { nodeName: 'Dataset' };
        console.debug('***dataset', dataset, project);
        this.analysisTypes = mevAnalysisTypes.all();
        this.PathwayEnrichmentAnalysisType = mevPathwayEnrichmentAnalysisType;
        this.GseaAnalsyisType = mevGseaAnalysisType;
        project.generateView({
            viewType: 'heatmapView',
            note: 'DatasetProjectViewVM',
            labels: {
                row: { keys: dataset.row.keys },
                column: { keys: dataset.column.keys }
            },
            expression: {
                min: dataset.expression.min,
                max: dataset.expression.max,
                avg: dataset.expression.avg
            }
        });
        function isAnalysisInDashbaord(analysis) {
            return _.find(project.dataset.dashboardItems, function (item) {
                return item.name === analysis.name;
            });
        }
        function filterDatasetNames(datasetNames) {
            var filteredNames = datasetNames.filter(function (item) {
                return item.indexOf(that.parentDatasetName) === 0;
            });
            if (filteredNames.length === 0)
                filteredNames.push(dataset.id);
            return filteredNames;
        }
        function switchDataset() {
            $state.go('root.dataset.home', { datasetId: that.curDatasetName });
        }
        DatasetResourceService.getAll();
        that.curDatasetName = dataset.id;
        that.parentDatasetName = dataset.id.split('--')[0];
        that.switchDataset = switchDataset;
        $scope.$on('mev:datasets:list:refreshed', function ($event, data) {
            that.datasetNames = filterDatasetNames(data);
        });
        $scope.$on('ui:projectTree:nodeSelected', function ($event, node) {
            if (node.nodeData.status && node.nodeData.status === 'ERROR')
                $state.go('root.dataset.analysisError', {
                    datasetId: dataset.id,
                    analysisId: node.nodeData.name
                });
            else if (node.nodeData.params && mevAnalysisTypes.all()[node.nodeData.params.analysisType]) {
                that.node = node;
                if (node.nodeData.params.analysisType === 'normalization')
                    $state.go('root.dataset.home', { datasetId: node.nodeData.params.exportName });
                else
                    $state.go('root.dataset.analysisType' + '.' + node.nodeData.params.analysisType, {
                        datasetId: dataset.id,
                        analysisId: node.nodeData.name
                    });
            } else if (node.nodeData.type && mevAnalysisTypes.all()[node.nodeData.type]) {
                $state.go('root.dataset.analysisType' + '.' + node.nodeData.type, {
                    datasetId: dataset.id,
                    analysisId: node.nodeData.name
                });
                that.node = node;
            } else {
                node.activate();
                that.node = node;
            }
        });
        $scope.$on('root.dataset.selectionSet.delete', function ($event, dimension, selection) {
            console.debug('nodeDeleted', selection, $event);
            dataset.deleteSelection(dimension, selection.name);
        });
        $scope.$on('mui:error:sessionTimeout', function ($event, error) {
            $state.go('root.dataset.home.sessionTimeout', { datasetId: dataset.id });
        });
        $scope.$on('root.dataset.analysis.delete', function ($event, analysis) {
            console.debug('analysis nodeDeleted', analysis, $event);
            dataset.analysis.delete({
                datasetName: dataset.id,
                analysisName: analysis.name
            }).$promise.then(function () {
                console.debug(that, that.node, $stateParams, $state);
                _.remove(dataset.analyses, function (item) {
                    return item.name == analysis.name;
                });
                _.remove(dataset.dashboardItems, function (item) {
                    return item.name === analysis.name;
                });
                $scope.$broadcast('ui:projectTree:dataChanged');
                $scope.$broadcast('ui:dashboard:removeItem', { name: analysis.name });
                if ($state.$current.locals.globals.analysis && $state.$current.locals.globals.analysis.name === analysis.name)
                    $state.go('root.dataset.home', { datasetId: dataset.id });
            });
        });
        AnalysisEventBus.onAnalysisStarted($scope, function (type, name, data) {
            console.debug('DatasetProjectViewVM onAnalysisStarted');
            var analysis = data.response;
            dataset.analyses.push(analysis);
            $scope.$broadcast('ui:projectTree:dataChanged');
        });
        AnalysisEventBus.onAnalysisSuccess($scope, function (type, name, data) {
            var analysis = data.response;
            var found = _.findIndex(dataset.analyses, function (analysis) {
                return analysis.name === name;
            });
            if (found > -1) {
                dataset.analyses[found] = analysis;
            } else {
                dataset.analyses.push(analysis);
            }
            console.debug('DatasetProjectViewVM onAnalysisSuccess', type, name, analysis);
            if (isAnalysisInDashbaord(analysis))
                console.debug('dashbaord: analysis is in dashbaord - Refresh!!');
            $scope.$broadcast('ui:projectTree:dataChanged');
        });
        AnalysisEventBus.onAnalysisFailure($scope, function (type, name, data) {
            var found = _.findIndex(dataset.analyses, function (analysis) {
                return analysis.name === name;
            });
            if (found > -1) {
                if (data.response.type) {
                    dataset.analyses[found] = data.response;
                } else {
                    var analysis = dataset.analyses[found];
                    analysis.status = 'ERROR';
                    if (_.isNumber(data.response.status)) {
                        analysis.error = data.response.data;
                        analysis.httpResponse = data.response;
                    }
                }
            } else {
                if (data.response && data.response.type)
                    dataset.analyses.push(data.response);
                else
                    console.error('Invalid analysis error response', type, name, data);
            }
            $scope.$broadcast('ui:projectTree:dataChanged');
        });
        AnalysisEventBus.onAnalysisLoadedAll($scope, function ($event, analyses) {
            console.debug('DatasetProjectViewVM onAnalysisLoadedAll');
            analyses.forEach(function (analysis) {
                var analysisType = mevAnalysisTypes.get(analysis.params.analysisType || analysis.type || analysis.params.type);
                if (analysisType && _.isFunction(analysisType.modelDecorator))
                    analysisType.modelDecorator(response);
            });
            $scope.$broadcast('ui:projectTree:dataChanged');
        });
        $scope.$on('mui:dataset:selections:added', function (event, dimensionType, params, selection, response) {
            dataset.resetSelections(dimensionType).$promise.then(function () {
                $scope.$broadcast('ui:projectTree:dataChanged');
            });
        });
        $scope.$on('mui:dataset:selections:deleted', function (event, dimensionType, params, response) {
            $scope.$broadcast('ui:projectTree:dataChanged');
        });
        _.forEach(project.dataset.dashboardItems, function (item) {
            if (item.launch && !_.find(project.dataset.analyses, function (analysis) {
                    return analysis.name === item.launch.analysisName;
                })) {
                var params = _.extend(item.launch, { datasetName: project.dataset.datasetName });
                console.debug('dashbaord: launching', item, params);
                project.dataset.analysis.put(params, {});
            }
        });
    };
    DatasetProjectViewVM.$name = 'DatasetProjectViewVM';
    DatasetProjectViewVM.$provider = 'controller';
    DatasetProjectViewVM.$inject = [
        '$scope',
        '$stateParams',
        '$state',
        'mevDatasetRest',
        'dataset',
        'project',
        'mevAnalysisEventBus',
        'AnalysisTypes',
        'mevAnalysisTypes',
        'mevPathwayEnrichmentAnalysisType',
        'mevGseaAnalysisType',
        'mevPcaAnalysisType',
        'mevHclAnalysisType',
        'mevTopgoAnalysisType',
        'mevNormalizationAnalysisType',
        'mevEdgerAnalysisType',
        'mevWgcnaAnalysisType',
        'mevLimmaAnalysisType',
        'mevtTestAnalysisType',
        'mevAnovaAnalysisType',
        'mevDeseqAnalysisType',
        'mevVoomAnalysisType',
        'mevKmeansAnalysisType',
        'mevSurvivalAnalysisType',
        'mevGeneMADAnalysisType'
    ];
    return DatasetProjectViewVM;
});
/*app/views/dataset/_controllers/DatasetHomeVM*/
define('app/views/dataset/_controllers/DatasetHomeVM', [
    'ng',
    'lodash'
], function (ng, _) {
    var DatasetHomeVM = function DatasetViewVM($scope, $stateParams, $state, dataset, project) {
        that = this;
        this.project = project;
        this.dataset = dataset;
        console.debug('DatasetHomeVM', dataset, project);
        console.debug('***dataset home', dataset, project);
        this.heatmapView = project.generateView({
            viewType: 'heatmapView',
            note: 'dataset.home',
            labels: {
                row: { keys: dataset.row.keys },
                column: { keys: dataset.column.keys }
            },
            expression: {
                min: dataset.expression.min,
                max: dataset.expression.max,
                avg: dataset.expression.avg
            }
        });
        this.getDownloadFileName = function () {
            return _.endsWith(project.dataset.datasetName, '.tsv') ? project.dataset.datasetName : project.dataset.datasetName + '.tsv';
        };
    };
    DatasetHomeVM.$name = 'DatasetHomeVM';
    DatasetHomeVM.$provider = 'controller';
    DatasetHomeVM.$inject = [
        '$scope',
        '$stateParams',
        '$state',
        'dataset',
        'project'
    ];
    return DatasetHomeVM;
});
/*app/views/dataset/_controllers/DatasetHeatmapVMFactory*/
define('app/views/dataset/_controllers/DatasetHeatmapVMFactory', ['ng'], function (ng) {
    var DatasetHeatmapVMFactory = function () {
        return function DatasetHeatmapVMFactory($scope, project) {
            var _self = this;
            this.project = project;
            this.dataset = project.dataset;
            console.debug('DatasetHeatmapVMFactory', project);
            console.debug('***dataset home', project);
            this.heatmapView = project.generateView({
                viewType: 'heatmapView',
                note: 'dataset.heatmap',
                labels: {
                    row: { keys: _self.dataset.row.keys },
                    column: { keys: _self.dataset.column.keys }
                },
                expression: {
                    min: _self.dataset.expression.min,
                    max: _self.dataset.expression.max,
                    avg: _self.dataset.expression.avg
                }
            });
        };
    };
    DatasetHeatmapVMFactory.$inject = [];
    DatasetHeatmapVMFactory.$name = 'DatasetHeatmapVMFactory';
    DatasetHeatmapVMFactory.$provider = 'factory';
    return DatasetHeatmapVMFactory;
});
/*app/views/dataset/annotations/AnnotationsViewVM*/
define('app/views/dataset/annotations/AnnotationsViewVM', ['ng'], function (ng) {
    var AnnotationsViewVM = function AnnotationsViewVM(dataset, annotations) {
        this.dataset = dataset;
        this.annotations = annotations;
    };
    AnnotationsViewVM.$name = 'AnnotationsViewVM';
    AnnotationsViewVM.$inject = [
        'dataset',
        'annotations'
    ];
    AnnotationsViewVM.$provider = 'controller';
    return AnnotationsViewVM;
});
/*angular-color-picker@1.0.10#angular-color-picker*/
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('angular-color-picker@1.0.10#angular-color-picker', [
            'module',
            'angular'
        ], function (module, angular) {
            module.exports = factory(angular);
        });
    } else if (typeof module === 'object') {
        module.exports = factory(require('angular'));
    } else {
        if (!root.mp) {
            root.mp = {};
        }
        root.mp.colorPicker = factory(root.angular);
    }
}(this, function (angular) {
    'use strict';
    function hsvToHexRgb(h, s, v) {
        if (typeof h === 'object') {
            s = h.s;
            v = h.v;
            h = h.h;
        }
        var i = Math.floor(h * 6), f = h * 6 - i, p = v * (1 - s), q = v * (1 - f * s), t = v * (1 - (1 - f) * s);
        var r, g, b;
        switch (i % 6) {
        case 0:
            r = v;
            g = t;
            b = p;
            break;
        case 1:
            r = q;
            g = v;
            b = p;
            break;
        case 2:
            r = p;
            g = v;
            b = t;
            break;
        case 3:
            r = p;
            g = q;
            b = v;
            break;
        case 4:
            r = t;
            g = p;
            b = v;
            break;
        case 5:
            r = v;
            g = p;
            b = q;
            break;
        }
        r = Math.floor(r * 255) + 256;
        g = Math.floor(g * 255) + 256;
        b = Math.floor(b * 255) + 256;
        return '#' + r.toString(16).slice(1) + g.toString(16).slice(1) + b.toString(16).slice(1);
    }
    function hexRgbToHsv(hexRgb) {
        var tokens = /^#(..)(..)(..)$/.exec(hexRgb);
        if (tokens) {
            var rgb = tokens.slice(1).map(function (hex) {
                return parseInt(hex, 16) / 255;
            });
            var r = rgb[0], g = rgb[1], b = rgb[2], h, s, v = Math.max(r, g, b), diff = v - Math.min(r, g, b), diffc = function (c) {
                    return (v - c) / 6 / diff + 1 / 2;
                };
            if (diff === 0) {
                h = s = 0;
            } else {
                s = diff / v;
                var rr = diffc(r), gg = diffc(g), bb = diffc(b);
                if (r === v) {
                    h = bb - gg;
                } else if (g === v) {
                    h = 1 / 3 + rr - bb;
                } else if (b === v) {
                    h = 2 / 3 + gg - rr;
                }
                if (h < 0) {
                    h += 1;
                } else if (h > 1) {
                    h -= 1;
                }
            }
            return {
                h: h,
                s: s,
                v: v
            };
        }
    }
    return angular.module('mp.colorPicker', []).directive('colorPicker', [
        '$window',
        function ($window) {
            $window.document.createElement('color-picker');
            var tmpl = '' + '<div class="angular-color-picker">' + '    <div class="_variations" ng-style="{ backgroundColor: hueBackgroundColor }">' + '        <div class="_whites">' + '            <div class="_blacks">' + '                <div class="_cursor" ng-if="colorCursor" ng-style="{ left: colorCursor.x - 5 + \'px\', top: colorCursor.y - 5 + \'px\' }"></div>' + '                <div class="_mouse-trap" ng-mousedown="startDrag($event, \'color\')"></div>' + '            </div>' + '        </div>' + '    </div>' + '' + '    <div class="_hues">' + '        <div class="_ie-1"></div>' + '        <div class="_ie-2"></div>' + '        <div class="_ie-3"></div>' + '        <div class="_ie-4"></div>' + '        <div class="_ie-5"></div>' + '        <div class="_ie-6"></div>' + '        <div class="_cursor" ng-style="{ top: hueCursor - 5 + \'px\' }"></div>' + '        <div class="_mouse-trap" ng-mousedown="startDrag($event, \'hue\')"></div>' + '    </div>' + '</div>';
            return {
                restrict: 'AE',
                template: tmpl,
                replace: true,
                require: '?ngModel',
                scope: {},
                link: function ($scope, $element, $attributes, ngModel) {
                    $scope.hsv = {
                        h: 0,
                        s: 0,
                        v: 0
                    };
                    if (ngModel) {
                        ngModel.$render = function () {
                            if (/^#[0-9A-Fa-f]{6}$/.test(ngModel.$viewValue)) {
                                $scope.color = ngModel.$viewValue;
                                $scope.hsv = hexRgbToHsv($scope.color);
                                $scope.colorCursor = {
                                    x: $scope.hsv.s * 200,
                                    y: (1 - $scope.hsv.v) * 200
                                };
                            } else {
                                $scope.color = null;
                                $scope.hsv = { h: 0.5 };
                                $scope.colorCursor = null;
                            }
                            $scope.hueBackgroundColor = hsvToHexRgb($scope.hsv.h, 1, 1);
                            $scope.hueCursor = $scope.hsv.h * 200;
                        };
                    }
                    var dragSubject, dragRect;
                    function doDrag(x, y) {
                        x = Math.max(Math.min(x, dragRect.width), 0);
                        y = Math.max(Math.min(y, dragRect.height), 0);
                        if (dragSubject === 'hue') {
                            $scope.hueCursor = y;
                            $scope.hsv.h = y / dragRect.height;
                            $scope.hueBackgroundColor = hsvToHexRgb($scope.hsv.h, 1, 1);
                        } else {
                            $scope.colorCursor = {
                                x: x,
                                y: y
                            };
                            $scope.hsv.s = x / dragRect.width;
                            $scope.hsv.v = 1 - y / dragRect.height;
                        }
                        if (typeof $scope.hsv.s !== 'undefined') {
                            $scope.color = hsvToHexRgb($scope.hsv);
                            if (ngModel) {
                                ngModel.$setViewValue($scope.color);
                            }
                        }
                    }
                    function onMouseMove(evt) {
                        evt.preventDefault();
                        $scope.$apply(function () {
                            doDrag(evt.clientX - dragRect.x, evt.clientY - dragRect.y);
                        });
                    }
                    $scope.startDrag = function (evt, subject) {
                        var rect = evt.target.getBoundingClientRect();
                        dragSubject = subject;
                        dragRect = {
                            x: rect.left,
                            y: rect.top,
                            width: rect.right - rect.left,
                            height: rect.bottom - rect.top
                        };
                        doDrag(evt.offsetX || evt.layerX, evt.offsetY || evt.layerY);
                        angular.element($window).on('mousemove', onMouseMove).one('mouseup', function () {
                            angular.element($window).off('mousemove', onMouseMove);
                        });
                    };
                }
            };
        }
    ]);
}));
/*app/views/dataset/selectionSets/controllers/SelectionSetsViewVM*/
define('app/views/dataset/selectionSets/controllers/SelectionSetsViewVM', ['ng'], function (ng) {
    var SelectionSetsViewVM = function ($scope, $stateParams, $state, dataset, dimension) {
        that = this;
        this.dataset = dataset;
        $scope.selections = dataset[dimension].selections;
        $scope.dataset = dataset[dimension].selections;
        $scope.heatmapData = dataset;
        $scope.vm = {
            addRowSelection: function () {
                $state.go('root.dataset.rowSet', { datasetId: dataset.id });
            },
            addColumnSelection: function () {
                $state.go('root.dataset.columnSet', { datasetId: dataset.id });
            },
            getSelectedKeys: function () {
                dataset.selections.union(dimension, $scope.getSelected());
            }
        };
    };
    SelectionSetsViewVM.$inject = [
        '$scope',
        '$stateParams',
        '$state',
        'dataset',
        'dimension'
    ];
    SelectionSetsViewVM.$provider = 'controller';
    SelectionSetsViewVM.$name = 'SelectionSetsViewVM';
    return SelectionSetsViewVM;
});
/*app/views/dataset/selectionSets/controllers/SelectionSetViewVM*/
define('app/views/dataset/selectionSets/controllers/SelectionSetViewVM', ['ng'], function (ng) {
    var selectionSetViewVM = function DatasetViewVM($scope, $stateParams, $state, dataset, selectionSet) {
        that = this;
        this.selectionSet = selectionSet;
        console.debug('selectionSetViewVM', dataset, selectionSet);
        this.baseUrl = '/annotations/' + $stateParams.datasetId + '/annotation';
        this.annotationsUrl = this.baseUrl + '/' + selectionSet.type + '/';
        this.annotationsUrl += selectionSet.name + '/dataset/';
        var randomProjectId = Math.floor(Math.random() * 11);
        if (selectionSet.properties && selectionSet.properties.selectionFacetLink && selectionSet.properties.selectionFacetLink.indexOf('.starred') === -1 && selectionSet.properties.selectionFacetLink.indexOf('.flagged') === -1) {
            this.annotationsUrl += selectionSet.properties.selectionFacetLink;
        } else if (selectionSet.properties) {
            var facetUrl = '{"facets":[{"c":{"type":"text","name":"ID","columnName":"MEVID","mode":"regex","caseSensitive":false,"query":"' + selectionSet.keys.map(function (key) {
                return '^' + key + '$';
            }).join('|') + '"}}]}';
            this.annotationsUrl += 'project?project=MEV-' + randomProjectId + '&ui=' + window.escape(facetUrl);
        } else if (selectionSet.name === 'new') {
            this.annotationsUrl += '?' + randomProjectId;
        }
    };
    selectionSetViewVM.$inject = [
        '$scope',
        '$stateParams',
        '$state',
        'dataset',
        'selectionSet'
    ];
    selectionSetViewVM.$provider = 'controller';
    selectionSetViewVM.$name = 'SelectionSetViewVM';
    return selectionSetViewVM;
});
/*app/views/dataset/selectionSets/resolvers/SelectionSetResolver*/
define('app/views/dataset/selectionSets/resolvers/SelectionSetResolver', ['mui'], function (mui) {
    var factory = function () {
        var resolver = function SelectionSetResolver($stateParams, dataset, dimension) {
            var reset = dataset.resetSelections(dimension);
            console.debug('resolve selectionSet', reset);
            return reset.$promise.then(function () {
                if ($stateParams.setId === 'new') {
                    return {
                        name: 'new',
                        type: dimension
                    };
                }
                var selectionSet = _.find(dataset[dimension].selections, function (selection) {
                    return selection.name === $stateParams.setId;
                });
                if (!selectionSet) {
                    throw new Error('Selection Set \'' + $stateParams.setId + '\' not found');
                }
                console.debug('resolved selectionSet', selectionSet);
                return selectionSet;
            });
        };
        resolver.$inject = [
            '$stateParams',
            'dataset',
            'dimension'
        ];
        return resolver;
    };
    factory.$name = 'SelectionSetResolver';
    factory.$provider = 'factory';
    factory.$inject = [];
    return factory;
});
/*app/views/dataset/selectionSets/edit/SelectionSetsEditOnEnter*/
define('app/views/dataset/selectionSets/edit/SelectionSetsEditOnEnter', [], function () {
    var factory = function () {
        function SelectionSetEdit_OnEnter($state, $modal, selectionSet, dataset, dimension) {
            $modal.open({
                template: '<selection-set-edit></selection-set-edit>',
                resolve: {
                    selectionSet: function () {
                        return selectionSet;
                    }
                },
                controller: [
                    '$scope',
                    'selectionSet',
                    function (scope, selectionSet) {
                        scope.selectionSet = _.cloneDeep(selectionSet);
                        scope.dismiss = function () {
                            scope.$dismiss();
                        };
                        scope.save = function () {
                            _.assign(selectionSet, scope.selectionSet);
                            dataset.selection.put({
                                datasetName: dataset.datasetName,
                                dimension: dimension
                            }, selectionSet, function (response) {
                                dataset.resetSelections(dimension);
                            });
                            scope.$close(true);
                        };
                    }
                ]
            }).result.finally(function () {
                $state.go('^');
            });
        }
        SelectionSetEdit_OnEnter.$inject = [
            '$state',
            '$uibModal',
            'selectionSet',
            'dataset',
            'dimension'
        ];
        return SelectionSetEdit_OnEnter;
    };
    factory.$name = 'SelectionSetsEditOnEnter';
    factory.$provider = 'factory';
    return factory;
});
/*app/views/dataset/selectionSets/edit/views.dataset.selectionSets.edit.tpl.html!system-text@0.1.0#text*/
define('app/views/dataset/selectionSets/edit/views.dataset.selectionSets.edit.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">\n\n        <div class="modal-content">\n            <div class="modal-header">\n                <button type="button" class="close" ng-click="dismiss()" aria-hidden="true">\xD7</button>\n                <h3 id="myModalLabel">Edit Selection {{selectionSet.name}}</h3>\n            </div>\n            <div class="modal-body">\n\n                <form role="form">\n                    <div class="form-group">\n                        <!--<label for="color" class="control-label">Color</label>-->\n                        <!--<input id="color" colorpicker colorpicker-parent="true" colorpicker-position="right" type="text" ng-model="selectionSet.properties.color" />-->\n                        <color-picker id="color" ng-model="selectionSet.properties.selectionColor"></color-picker>\n                    </div>\n\n                    <!--button ng-click="testInit()">hehe</button-->\n                    <a class="btn btn-success btn-block" ng-click="save()" aria-hidden="true">Save</a>\n                    <a class="btn btn-info btn-block" ng-click="dismiss()" aria-hidden="true">Cancel</a>\n                </form>\n\n\n            </div>\n        </div>\n\n</div>\n';
});
/*app/views/dataset/selectionSets/edit/SelectionSetsEditDirective*/
define('app/views/dataset/selectionSets/edit/SelectionSetsEditDirective', [
    './views.dataset.selectionSets.edit.tpl.html',
    'angular-color-picker',
    'angular-color-picker/angular-color-picker.css'
], function (template) {
    var directive = function () {
        return {
            restrict: 'AEC',
            replace: true,
            template: template
        };
    };
    directive.$name = 'SelectionSetEdit';
    directive.$provider = 'directive';
    return directive;
});
/*app/views/dataset/selectionSets/views.dataset.selectionSets.module*/
define('app/views/dataset/selectionSets/views.dataset.selectionSets.module', [
    'ng',
    'lodash',
    'angular-color-picker',
    'angular-color-picker/angular-color-picker.css',
    './controllers/SelectionSetsViewVM',
    './controllers/SelectionSetViewVM',
    './resolvers/SelectionSetResolver',
    './edit/SelectionSetsEditOnEnter',
    './edit/SelectionSetsEditDirective'
], function (ng, _, SelectionSetsViewVM, SelectionSetViewVM) {
    var module = ng.module('mui.views.dataset.SelectionSets', arguments, arguments);
    return module;
});
/*app/views/dataset/columnSets/edit/views.dataset.columnSets.edit.module*/
define('app/views/dataset/columnSets/edit/views.dataset.columnSets.edit.module', [
    'mui',
    'lodash',
    '../../selectionSets/views.dataset.selectionSets.module'
], function (ng, _, ngColorPicker, template) {
    var module = ng.module('mui.views.dataset.columnSets.edit', arguments, arguments);
    module.config([
        '$stateProvider',
        'SelectionSetResolverProvider',
        'SelectionSetsEditOnEnterProvider',
        function ($stateProvider, SelectionSetResolverProvider, SelectionSetsEditOnEnterProvider) {
            $stateProvider.state('root.dataset.columnSets.edit', {
                parent: 'root.dataset.columnSets',
                params: { setId: undefined },
                resolve: { selectionSet: SelectionSetResolverProvider.$get() },
                onEnter: SelectionSetsEditOnEnterProvider.$get()
            });
        }
    ]);
    return module;
});
/*js/setmanager/SetManager*/
define('js/setmanager/SetManager', [
    'jquery',
    'mui'
], function (jquery, ng) {
    return ng.module('Mev.SetManager', ['mevDomainCommon']).directive('selectionSetManager', [function () {
            return {
                scope: {
                    heatmapId: '@',
                    heatmapData: '=',
                    selections: '='
                },
                controller: 'SelectionSetManagerCtl',
                restrict: 'EA',
                templateUrl: '/container/view/elements/setmanager/selectionSetManager',
                link: function (scope, elm, attr) {
                    return;
                }
            };
        }]).directive('selectionSetList', [function () {
            return {
                scope: {
                    selections: '=mevSelections',
                    baseUrl: '@mevBaseUrl',
                    setSelected: '&mevSayHello',
                    dimension: '@mevDemintion'
                },
                restrict: 'EA',
                transclude: true,
                replace: true,
                controller: 'SelectionSetManagerCtl',
                templateUrl: '/container/view/elements/setmanager/selectionSetList',
                link: function (scope, iElement, iAttrs, controller) {
                }
            };
        }]).directive('selectionSetEditForm', [function () {
            return {
                restrict: 'EA',
                replace: true,
                require: '^selectionSetList',
                templateUrl: '/container/view/elements/setmanager/selectionSetEditForm'
            };
        }]).controller('SelectionSetManagerCtl', [
        '$scope',
        '$element',
        '$attrs',
        '$routeParams',
        '$http',
        'mevContext',
        '$rootScope',
        function ($scope, $element, $attrs, $routeParams, $http, mevContext, $rootScope) {
            $scope.sayHelloCtl = function () {
                alert($scope.heatmapId + ':' + $scope.dataset.selections.column.values.length + ':' + $scope.$id);
            };
            $scope.annotationsUrl = 'about:blank';
            $scope.setSelected = function (item) {
                $scope.selectedItem = item;
                $scope.selectedItemTmp = angular.copy(item);
            };
            $scope.saveItem = function (item) {
                $scope.selectedItem.name = item.name;
                $scope.selectedItem.properties = item.properties;
            };
            $scope.showAnnotations = function (selection, dimention, annotationSource) {
                $scope.$emit('ViewAnnotationsEvent', selection, dimention, annotationSource);
            };
            $scope.selectionParams = {
                column: { name: undefined },
                row: { name: undefined },
                special: undefined
            };
            $scope.exportParams = {
                column: { name: undefined },
                row: { name: undefined },
                special: undefined
            };
            function getSelected(dimension) {
                return $scope.heatmapData[dimension].selections.filter(function (d) {
                    return d.setSelectionChecked;
                });
            }
            ;
            $scope.getSelected = getSelected;
            function pushNewSelection(dimension, selectedSets) {
                var selection = {
                    name: $scope.selectionParams[dimension].name,
                    properties: {
                        selectionDescription: '',
                        selectionColor: '#' + ('00000' + (Math.random() * 16777215 << 0)).toString(16).substr(-6)
                    },
                    keys: selectedSets
                };
                $http({
                    method: 'POST',
                    url: '/dataset/' + ($routeParams.datasetName || $scope.heatmapData.id) + '/' + dimension + '/selection/',
                    data: selection
                }).success(function (response) {
                    $scope.$emit('SeletionAddedEvent', dimension);
                    var message = 'Added selection with name ' + $scope.selectionParams[dimension].name + '.';
                    var header = 'Heatmap Selection Addition';
                    $rootScope.$broadcast('mui:dataset:selections:added', dimension.toLowerCase(), selection);
                    alertService.success(message, header);
                }).error(function (data, status, headers, config) {
                    var message = 'Couldn\'t add new selection. If ' + 'problem persists, please contact us.';
                    var header = 'Heatmap Selection Problem (Error Code: ' + status + ')';
                    alertService.error(message, header);
                });
            }
            ;
            function pushNewDataset(dimension, selectedSets) {
                var selectionData = {
                    name: $scope.exportParams[dimension].name,
                    properties: {
                        selectionDescription: '',
                        selectionColor: '#ffffff'
                    },
                    keys: selectedSets
                };
                mevContext.current().selection.export({
                    datasetName: $routeParams.datasetName || $scope.heatmapData.id,
                    dimension: dimension
                }, selectionData, function (response) {
                    mevContext.current().resetSelections(dimension);
                    var message = 'Added ' + $scope.exportParams[dimension].name + ' as new Dataset!';
                    var header = 'New Dataset Export';
                    alertService.success(message, header);
                }, function (data, status, headers, config) {
                    var message = 'Couldn\'t export new dataset. If ' + 'problem persists, please contact us.';
                    var header = 'New Dataset Export Problem (Error Code: ' + status + ')';
                    alertService.error(message, header);
                });
            }
            ;
            $scope.addDifferenceSelection = function (dimension) {
                var selectedGroups = getSelected(dimension);
                if (selectedGroups.length > 1) {
                    var sumOfElements = {};
                    selectedGroups.map(function (group) {
                        group.keys.map(function (element) {
                            sumOfElements.hasOwnProperty(element) ? sumOfElements[element]++ : sumOfElements[element] = 1;
                        });
                    });
                    var difference = Object.getOwnPropertyNames(sumOfElements).filter(function (element) {
                        return sumOfElements[element] === 1 && $scope.selectionParams.special[dimension].keys.indexOf(element) > -1 ? true : false;
                    });
                    if (difference.length > 0) {
                        pushNewSelection(dimension, difference);
                    } else {
                        var message = 'Difference has no values.';
                        var header = 'Heatmap Selection Info';
                        alertService.info(message, header);
                    }
                } else {
                    var message = 'Cannot merge a single selection set.';
                    var header = 'Heatmap Selection Info';
                    alertService.info(message, header);
                }
                ;
            };
            $scope.addIntersectionSelection = function (dimension) {
                var selectedGroups = getSelected(dimension);
                if (selectedGroups.length > 1) {
                    var sumOfElements = {};
                    selectedGroups.map(function (group) {
                        group.keys.map(function (element) {
                            sumOfElements.hasOwnProperty(element) ? sumOfElements[element]++ : sumOfElements[element] = 1;
                        });
                    });
                    var intersection = Object.getOwnPropertyNames(sumOfElements).filter(function (element) {
                        return sumOfElements[element] == selectedGroups.length ? true : false;
                    });
                    if (intersection.length > 0) {
                        pushNewSelection(dimension, intersection);
                    } else {
                        var message = 'Intersection has no values.';
                        var header = 'Heatmap Selection Info';
                        alertService.info(message, header);
                    }
                } else {
                    var message = 'Cannot merge a single selection set.';
                    var header = 'Heatmap Selection Info';
                    alertService.info(message, header);
                }
                ;
            };
            $scope.addMergedSelection = function (dimension) {
                var selectedGroups = getSelected(dimension);
                if (selectedGroups.length > 1) {
                    var newSelectionElements = [];
                    selectedGroups.map(function (group) {
                        group.keys.map(function (j) {
                            if (newSelectionElements.indexOf(j) < 0) {
                                newSelectionElements.push(j);
                            }
                        });
                    });
                    pushNewSelection(dimension, newSelectionElements);
                } else {
                    var message = 'Cannot merge a single selection set.';
                    var header = 'Heatmap Selection Info';
                    alertService.info(message, header);
                }
                ;
            };
            $scope.exportSelection = function (dimension) {
                var selectedGroups = getSelected(dimension);
                if (selectedGroups.length > 0) {
                    var newSelectionElements = [];
                    selectedGroups.map(function (group) {
                        group.keys.map(function (j) {
                            if (newSelectionElements.indexOf(j) < 0) {
                                newSelectionElements.push(j);
                            }
                        });
                    });
                    pushNewDataset(dimension, newSelectionElements);
                } else {
                    var message = 'Please check of at least one selection to export.';
                    var header = 'Export Selection as New Dataset Info';
                    alertService.info(message, header);
                }
                ;
            };
            $scope.addItem = function (item) {
                $scope.$emit('SeletionAddedEvent', item.dimension.toLowerCase());
            };
        }
    ]);
});
/*app/views/dataset/columnSets/views.dataset.columnSets.module*/
define('app/views/dataset/columnSets/views.dataset.columnSets.module', [
    'mui',
    'lodash',
    './edit/views.dataset.columnSets.edit.module',
    '../selectionSets/views.dataset.selectionSets.module',
    'js/setmanager/SetManager'
], function (ng, _) {
    var module = ng.module('mui.views.dataset.columnSets', arguments, arguments);
    module.config([
        '$stateProvider',
        'SelectionSetResolverProvider',
        function ($stateProvider, SelectionSetResolverProvider) {
            $stateProvider.state('root.dataset.columnSets', {
                url: 'columnSets',
                parent: 'root.dataset',
                templateUrl: 'app/views/dataset/columnSets/templates/views.dataset.columnSets.tpl.html',
                controller: 'SelectionSetsViewVM',
                controllerAs: 'ColumnSetsViewVM',
                displayName: 'column sets',
                resolve: {
                    dimension: function () {
                        return 'column';
                    }
                }
            }).state('root.dataset.columnSet', {
                url: 'columnSets/{setId}',
                params: { setId: 'new' },
                displayName: '{{selectionSet.name}} column set',
                parent: 'root.dataset',
                templateUrl: 'app/views/dataset/columnSets/templates/views.dataset.columnSet.tpl.html',
                controller: 'SelectionSetViewVM',
                controllerAs: 'ColumnSetViewVM',
                resolve: {
                    dimension: function () {
                        return 'column';
                    },
                    selectionSet: SelectionSetResolverProvider.$get()
                }
            });
        }
    ]);
    return module;
});
/*app/views/dataset/rowSets/edit/views.dataset.rowSets.edit.module*/
define('app/views/dataset/rowSets/edit/views.dataset.rowSets.edit.module', [
    'mui',
    'lodash',
    '../../selectionSets/views.dataset.selectionSets.module'
], function (ng, _, ngColorPicker, template) {
    var module = ng.module('mui.views.dataset.rowSets.edit', arguments, arguments);
    module.config([
        '$stateProvider',
        'SelectionSetResolverProvider',
        'SelectionSetsEditOnEnterProvider',
        function ($stateProvider, SelectionSetResolverProvider, SelectionSetsEditOnEnterProvider) {
            $stateProvider.state('root.dataset.rowSets.edit', {
                parent: 'root.dataset.rowSets',
                params: { setId: undefined },
                resolve: { selectionSet: SelectionSetResolverProvider.$get() },
                onEnter: SelectionSetsEditOnEnterProvider.$get()
            });
        }
    ]);
    return module;
});
/*app/views/dataset/rowSets/views.dataset.rowSets.module*/
define('app/views/dataset/rowSets/views.dataset.rowSets.module', [
    'mui',
    'lodash',
    './edit/views.dataset.rowSets.edit.module',
    '../selectionSets/views.dataset.selectionSets.module',
    'js/setmanager/SetManager'
], function (ng, _) {
    var module = ng.module('mui.views.dataset.rowSets', arguments, arguments);
    module.config([
        '$stateProvider',
        'SelectionSetResolverProvider',
        function ($stateProvider, SelectionSetResolverProvider) {
            $stateProvider.state('root.dataset.rowSets', {
                url: 'rowSets',
                parent: 'root.dataset',
                templateUrl: 'app/views/dataset/rowSets/templates/views.dataset.rowSets.tpl.html',
                controller: 'SelectionSetsViewVM',
                controllerAs: 'RowSetsViewVM',
                displayName: 'row sets',
                resolve: {
                    dimension: function () {
                        return 'row';
                    }
                }
            }).state('root.dataset.rowSet', {
                url: 'rowSets/{setId}',
                params: { setId: 'new' },
                displayName: '{{selectionSet.name}} row set',
                parent: 'root.dataset',
                templateUrl: 'app/views/dataset/rowSets/templates/views.dataset.rowSet.tpl.html',
                controller: 'SelectionSetViewVM',
                controllerAs: 'RowSetViewVM',
                resolve: {
                    dimension: function () {
                        return 'row';
                    },
                    selectionSet: SelectionSetResolverProvider.$get()
                }
            });
        }
    ]);
    return module;
});
/*app/views/dataset/analysis/kmeans/views.dataset.analysis.kmeans.module*/
define('app/views/dataset/analysis/kmeans/views.dataset.analysis.kmeans.module', [
    'ng',
    'lodash'
], function (ng, _) {
    var module = ng.module('mui.views.dataset.analysis.kmeans', []);
    module.config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
        }
    ]).factory('KMeansVMFactory', function () {
        return function ($scope, project, analysis) {
            this.analysisId = analysis.name;
            this.analysis = analysis;
            this.project = project;
            $scope.isItOpen = true;
            function traverse(clusters) {
                var labels = [];
                for (var i = 0; i < clusters.length; i++) {
                    labels = labels.concat(clusters[i]);
                }
                ;
                return labels;
            }
            var labels = traverse(analysis.clusters);
            if (analysis.dimension == 'column') {
                this.heatmapView = project.generateView({
                    viewType: 'heatmapView',
                    note: analysis.name,
                    labels: {
                        row: { keys: project.dataset.row.keys },
                        column: { keys: labels }
                    },
                    expression: {
                        min: project.dataset.expression.min,
                        max: project.dataset.expression.max,
                        avg: project.dataset.expression.avg
                    },
                    panel: {
                        top: analysis,
                        side: {}
                    }
                });
            } else {
                this.heatmapView = project.generateView({
                    viewType: 'heatmapView',
                    note: analysis.name,
                    labels: {
                        column: { keys: project.dataset.column.keys },
                        row: { keys: labels }
                    },
                    expression: {
                        min: project.dataset.expression.min,
                        max: project.dataset.expression.max,
                        avg: project.dataset.expression.avg
                    },
                    panel: {
                        side: analysis,
                        top: {}
                    }
                });
            }
        };
    }).controller('KMeansVM', [
        '$scope',
        'project',
        'analysis',
        'KMeansVMFactory',
        function ($scope, project, analysis, KMeansVMFactory) {
            KMeansVMFactory.call(this, $scope, project, analysis);
        }
    ]);
    module.$inject = [];
    return module;
});
/*app/views/dataset/analysis/nmf/views.dataset.analysis.nmf.module*/
define('app/views/dataset/analysis/nmf/views.dataset.analysis.nmf.module', [
    'ng',
    'lodash'
], function (ng, _) {
    var module = ng.module('mui.views.dataset.analysis.nmf', []);
    module.config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
        }
    ]).factory('NmfVMFactory', [function () {
            return function NmfVMFactory($scope, project, analysis) {
                this.analysisId = analysis.name;
                this.analysis = analysis;
                this.project = project;
            };
        }]).controller('NmfVM', [
        '$scope',
        '$state',
        '$stateParams',
        'project',
        'analysis',
        'NmfVMFactory',
        function ($scope, $state, $stateParams, project, analysis, NmfVMFactory) {
            NmfVMFactory.call(this, $scope, project, analysis);
        }
    ]);
    return module;
});
/*app/views/dataset/analysis/histogram/views.dataset.analysis.histogram.module*/
define('app/views/dataset/analysis/histogram/views.dataset.analysis.histogram.module', [
    'ng',
    'lodash'
], function (ng, _) {
    var module = ng.module('mui.views.dataset.analysis.histogram', []).factory('HistogramVMFactory', [
        '$stateParams',
        function ($stateParams) {
            return function HistogramVMFactory($scope, $stateParams, project, analysis) {
                this.analysisId = $stateParams.analysisId;
                this.analysis = analysis;
                this.project = project;
                $scope.dataset = project.dataset;
            };
        }
    ]).controller('HistogramVM', [
        '$scope',
        '$stateParams',
        'project',
        'analysis',
        'HistogramVMFactory',
        function ($scope, $stateParams, project, analysis, HistogramVMFactory) {
            HistogramVMFactory.call(this, $scope, $stateParams, project, analysis);
        }
    ]);
    return module;
});
/*app/views/dataset/analysis/genesd/views.dataset.analysis.genesd.module*/
define('app/views/dataset/analysis/genesd/views.dataset.analysis.genesd.module', [
    'ng',
    'lodash'
], function (ng, _) {
    var module = ng.module('mui.views.dataset.analysis.genesd', []).factory('GeneSDVMFactory', [
        '$stateParams',
        'SigGenes',
        function ($stateParams, SigGenes) {
            return function GeneSDVMFactory($scope, $stateParams, project, analysis) {
                var _self = this;
                this.analysisId = $stateParams.analysisId;
                this.analysis = analysis;
                this.project = project;
                $scope.dataset = project.dataset;
                this.sigGenesTop = SigGenes(500, analysis.result.genes, analysis.result.sd, 'SD');
                this.heatmapViewTop = project.generateView({
                    viewType: 'heatmapView',
                    note: analysis.name + '_geneSDTop',
                    labels: { row: { keys: this.sigGenesTop.keys } }
                });
                this.heatmapViewBottom = project.generateView({
                    viewType: 'heatmapView',
                    note: analysis.name + '_geneSDBottom',
                    labels: {}
                });
                this.filteredResultsTop = [];
                $scope.$on('ui:resultsTable:filteredResults', function ($event, filteredResults) {
                    if ($event.targetScope.id === _self.heatmapViewTop.id) {
                        var labels = filteredResults.map(function (gene) {
                            return gene.geneId;
                        });
                        _self.heatmapViewTop = _self.heatmapViewTop.applyFilter('row', labels);
                    }
                });
            };
        }
    ]).controller('GeneSDVM', [
        '$scope',
        '$stateParams',
        'project',
        'analysis',
        'GeneSDVMFactory',
        function ($scope, $stateParams, project, analysis, GeneSDVMFactory) {
            GeneSDVMFactory.call(this, $scope, $stateParams, project, analysis);
        }
    ]);
    return module;
});
/*d3@3.5.17#d3*/
!function () {
    var d3 = { version: '3.5.17' };
    var d3_arraySlice = [].slice, d3_array = function (list) {
            return d3_arraySlice.call(list);
        };
    var d3_document = this.document;
    function d3_documentElement(node) {
        return node && (node.ownerDocument || node.document || node).documentElement;
    }
    function d3_window(node) {
        return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
    }
    if (d3_document) {
        try {
            d3_array(d3_document.documentElement.childNodes)[0].nodeType;
        } catch (e) {
            d3_array = function (list) {
                var i = list.length, array = new Array(i);
                while (i--)
                    array[i] = list[i];
                return array;
            };
        }
    }
    if (!Date.now)
        Date.now = function () {
            return +new Date();
        };
    if (d3_document) {
        try {
            d3_document.createElement('DIV').style.setProperty('opacity', 0, '');
        } catch (error) {
            var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
            d3_element_prototype.setAttribute = function (name, value) {
                d3_element_setAttribute.call(this, name, value + '');
            };
            d3_element_prototype.setAttributeNS = function (space, local, value) {
                d3_element_setAttributeNS.call(this, space, local, value + '');
            };
            d3_style_prototype.setProperty = function (name, value, priority) {
                d3_style_setProperty.call(this, name, value + '', priority);
            };
        }
    }
    d3.ascending = d3_ascending;
    function d3_ascending(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }
    d3.descending = function (a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    };
    d3.min = function (array, f) {
        var i = -1, n = array.length, a, b;
        if (arguments.length === 1) {
            while (++i < n)
                if ((b = array[i]) != null && b >= b) {
                    a = b;
                    break;
                }
            while (++i < n)
                if ((b = array[i]) != null && a > b)
                    a = b;
        } else {
            while (++i < n)
                if ((b = f.call(array, array[i], i)) != null && b >= b) {
                    a = b;
                    break;
                }
            while (++i < n)
                if ((b = f.call(array, array[i], i)) != null && a > b)
                    a = b;
        }
        return a;
    };
    d3.max = function (array, f) {
        var i = -1, n = array.length, a, b;
        if (arguments.length === 1) {
            while (++i < n)
                if ((b = array[i]) != null && b >= b) {
                    a = b;
                    break;
                }
            while (++i < n)
                if ((b = array[i]) != null && b > a)
                    a = b;
        } else {
            while (++i < n)
                if ((b = f.call(array, array[i], i)) != null && b >= b) {
                    a = b;
                    break;
                }
            while (++i < n)
                if ((b = f.call(array, array[i], i)) != null && b > a)
                    a = b;
        }
        return a;
    };
    d3.extent = function (array, f) {
        var i = -1, n = array.length, a, b, c;
        if (arguments.length === 1) {
            while (++i < n)
                if ((b = array[i]) != null && b >= b) {
                    a = c = b;
                    break;
                }
            while (++i < n)
                if ((b = array[i]) != null) {
                    if (a > b)
                        a = b;
                    if (c < b)
                        c = b;
                }
        } else {
            while (++i < n)
                if ((b = f.call(array, array[i], i)) != null && b >= b) {
                    a = c = b;
                    break;
                }
            while (++i < n)
                if ((b = f.call(array, array[i], i)) != null) {
                    if (a > b)
                        a = b;
                    if (c < b)
                        c = b;
                }
        }
        return [
            a,
            c
        ];
    };
    function d3_number(x) {
        return x === null ? NaN : +x;
    }
    function d3_numeric(x) {
        return !isNaN(x);
    }
    d3.sum = function (array, f) {
        var s = 0, n = array.length, a, i = -1;
        if (arguments.length === 1) {
            while (++i < n)
                if (d3_numeric(a = +array[i]))
                    s += a;
        } else {
            while (++i < n)
                if (d3_numeric(a = +f.call(array, array[i], i)))
                    s += a;
        }
        return s;
    };
    d3.mean = function (array, f) {
        var s = 0, n = array.length, a, i = -1, j = n;
        if (arguments.length === 1) {
            while (++i < n)
                if (d3_numeric(a = d3_number(array[i])))
                    s += a;
                else
                    --j;
        } else {
            while (++i < n)
                if (d3_numeric(a = d3_number(f.call(array, array[i], i))))
                    s += a;
                else
                    --j;
        }
        if (j)
            return s / j;
    };
    d3.quantile = function (values, p) {
        var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
        return e ? v + e * (values[h] - v) : v;
    };
    d3.median = function (array, f) {
        var numbers = [], n = array.length, a, i = -1;
        if (arguments.length === 1) {
            while (++i < n)
                if (d3_numeric(a = d3_number(array[i])))
                    numbers.push(a);
        } else {
            while (++i < n)
                if (d3_numeric(a = d3_number(f.call(array, array[i], i))))
                    numbers.push(a);
        }
        if (numbers.length)
            return d3.quantile(numbers.sort(d3_ascending), 0.5);
    };
    d3.variance = function (array, f) {
        var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
        if (arguments.length === 1) {
            while (++i < n) {
                if (d3_numeric(a = d3_number(array[i]))) {
                    d = a - m;
                    m += d / ++j;
                    s += d * (a - m);
                }
            }
        } else {
            while (++i < n) {
                if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
                    d = a - m;
                    m += d / ++j;
                    s += d * (a - m);
                }
            }
        }
        if (j > 1)
            return s / (j - 1);
    };
    d3.deviation = function () {
        var v = d3.variance.apply(this, arguments);
        return v ? Math.sqrt(v) : v;
    };
    function d3_bisector(compare) {
        return {
            left: function (a, x, lo, hi) {
                if (arguments.length < 3)
                    lo = 0;
                if (arguments.length < 4)
                    hi = a.length;
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) < 0)
                        lo = mid + 1;
                    else
                        hi = mid;
                }
                return lo;
            },
            right: function (a, x, lo, hi) {
                if (arguments.length < 3)
                    lo = 0;
                if (arguments.length < 4)
                    hi = a.length;
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) > 0)
                        hi = mid;
                    else
                        lo = mid + 1;
                }
                return lo;
            }
        };
    }
    var d3_bisect = d3_bisector(d3_ascending);
    d3.bisectLeft = d3_bisect.left;
    d3.bisect = d3.bisectRight = d3_bisect.right;
    d3.bisector = function (f) {
        return d3_bisector(f.length === 1 ? function (d, x) {
            return d3_ascending(f(d), x);
        } : f);
    };
    d3.shuffle = function (array, i0, i1) {
        if ((m = arguments.length) < 3) {
            i1 = array.length;
            if (m < 2)
                i0 = 0;
        }
        var m = i1 - i0, t, i;
        while (m) {
            i = Math.random() * m-- | 0;
            t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
        }
        return array;
    };
    d3.permute = function (array, indexes) {
        var i = indexes.length, permutes = new Array(i);
        while (i--)
            permutes[i] = array[indexes[i]];
        return permutes;
    };
    d3.pairs = function (array) {
        var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
        while (i < n)
            pairs[i] = [
                p0 = p1,
                p1 = array[++i]
            ];
        return pairs;
    };
    d3.transpose = function (matrix) {
        if (!(n = matrix.length))
            return [];
        for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m;) {
            for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
                row[j] = matrix[j][i];
            }
        }
        return transpose;
    };
    function d3_transposeLength(d) {
        return d.length;
    }
    d3.zip = function () {
        return d3.transpose(arguments);
    };
    d3.keys = function (map) {
        var keys = [];
        for (var key in map)
            keys.push(key);
        return keys;
    };
    d3.values = function (map) {
        var values = [];
        for (var key in map)
            values.push(map[key]);
        return values;
    };
    d3.entries = function (map) {
        var entries = [];
        for (var key in map)
            entries.push({
                key: key,
                value: map[key]
            });
        return entries;
    };
    d3.merge = function (arrays) {
        var n = arrays.length, m, i = -1, j = 0, merged, array;
        while (++i < n)
            j += arrays[i].length;
        merged = new Array(j);
        while (--n >= 0) {
            array = arrays[n];
            m = array.length;
            while (--m >= 0) {
                merged[--j] = array[m];
            }
        }
        return merged;
    };
    var abs = Math.abs;
    d3.range = function (start, stop, step) {
        if (arguments.length < 3) {
            step = 1;
            if (arguments.length < 2) {
                stop = start;
                start = 0;
            }
        }
        if ((stop - start) / step === Infinity)
            throw new Error('infinite range');
        var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
        start *= k, stop *= k, step *= k;
        if (step < 0)
            while ((j = start + step * ++i) > stop)
                range.push(j / k);
        else
            while ((j = start + step * ++i) < stop)
                range.push(j / k);
        return range;
    };
    function d3_range_integerScale(x) {
        var k = 1;
        while (x * k % 1)
            k *= 10;
        return k;
    }
    function d3_class(ctor, properties) {
        for (var key in properties) {
            Object.defineProperty(ctor.prototype, key, {
                value: properties[key],
                enumerable: false
            });
        }
    }
    d3.map = function (object, f) {
        var map = new d3_Map();
        if (object instanceof d3_Map) {
            object.forEach(function (key, value) {
                map.set(key, value);
            });
        } else if (Array.isArray(object)) {
            var i = -1, n = object.length, o;
            if (arguments.length === 1)
                while (++i < n)
                    map.set(i, object[i]);
            else
                while (++i < n)
                    map.set(f.call(object, o = object[i], i), o);
        } else {
            for (var key in object)
                map.set(key, object[key]);
        }
        return map;
    };
    function d3_Map() {
        this._ = Object.create(null);
    }
    var d3_map_proto = '__proto__', d3_map_zero = '\0';
    d3_class(d3_Map, {
        has: d3_map_has,
        get: function (key) {
            return this._[d3_map_escape(key)];
        },
        set: function (key, value) {
            return this._[d3_map_escape(key)] = value;
        },
        remove: d3_map_remove,
        keys: d3_map_keys,
        values: function () {
            var values = [];
            for (var key in this._)
                values.push(this._[key]);
            return values;
        },
        entries: function () {
            var entries = [];
            for (var key in this._)
                entries.push({
                    key: d3_map_unescape(key),
                    value: this._[key]
                });
            return entries;
        },
        size: d3_map_size,
        empty: d3_map_empty,
        forEach: function (f) {
            for (var key in this._)
                f.call(this, d3_map_unescape(key), this._[key]);
        }
    });
    function d3_map_escape(key) {
        return (key += '') === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
    }
    function d3_map_unescape(key) {
        return (key += '')[0] === d3_map_zero ? key.slice(1) : key;
    }
    function d3_map_has(key) {
        return d3_map_escape(key) in this._;
    }
    function d3_map_remove(key) {
        return (key = d3_map_escape(key)) in this._ && delete this._[key];
    }
    function d3_map_keys() {
        var keys = [];
        for (var key in this._)
            keys.push(d3_map_unescape(key));
        return keys;
    }
    function d3_map_size() {
        var size = 0;
        for (var key in this._)
            ++size;
        return size;
    }
    function d3_map_empty() {
        for (var key in this._)
            return false;
        return true;
    }
    d3.nest = function () {
        var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
        function map(mapType, array, depth) {
            if (depth >= keys.length)
                return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
            var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
            while (++i < n) {
                if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
                    values.push(object);
                } else {
                    valuesByKey.set(keyValue, [object]);
                }
            }
            if (mapType) {
                object = mapType();
                setter = function (keyValue, values) {
                    object.set(keyValue, map(mapType, values, depth));
                };
            } else {
                object = {};
                setter = function (keyValue, values) {
                    object[keyValue] = map(mapType, values, depth);
                };
            }
            valuesByKey.forEach(setter);
            return object;
        }
        function entries(map, depth) {
            if (depth >= keys.length)
                return map;
            var array = [], sortKey = sortKeys[depth++];
            map.forEach(function (key, keyMap) {
                array.push({
                    key: key,
                    values: entries(keyMap, depth)
                });
            });
            return sortKey ? array.sort(function (a, b) {
                return sortKey(a.key, b.key);
            }) : array;
        }
        nest.map = function (array, mapType) {
            return map(mapType, array, 0);
        };
        nest.entries = function (array) {
            return entries(map(d3.map, array, 0), 0);
        };
        nest.key = function (d) {
            keys.push(d);
            return nest;
        };
        nest.sortKeys = function (order) {
            sortKeys[keys.length - 1] = order;
            return nest;
        };
        nest.sortValues = function (order) {
            sortValues = order;
            return nest;
        };
        nest.rollup = function (f) {
            rollup = f;
            return nest;
        };
        return nest;
    };
    d3.set = function (array) {
        var set = new d3_Set();
        if (array)
            for (var i = 0, n = array.length; i < n; ++i)
                set.add(array[i]);
        return set;
    };
    function d3_Set() {
        this._ = Object.create(null);
    }
    d3_class(d3_Set, {
        has: d3_map_has,
        add: function (key) {
            this._[d3_map_escape(key += '')] = true;
            return key;
        },
        remove: d3_map_remove,
        values: d3_map_keys,
        size: d3_map_size,
        empty: d3_map_empty,
        forEach: function (f) {
            for (var key in this._)
                f.call(this, d3_map_unescape(key));
        }
    });
    d3.behavior = {};
    function d3_identity(d) {
        return d;
    }
    d3.rebind = function (target, source) {
        var i = 1, n = arguments.length, method;
        while (++i < n)
            target[method = arguments[i]] = d3_rebind(target, source, source[method]);
        return target;
    };
    function d3_rebind(target, source, method) {
        return function () {
            var value = method.apply(source, arguments);
            return value === source ? target : value;
        };
    }
    function d3_vendorSymbol(object, name) {
        if (name in object)
            return name;
        name = name.charAt(0).toUpperCase() + name.slice(1);
        for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
            var prefixName = d3_vendorPrefixes[i] + name;
            if (prefixName in object)
                return prefixName;
        }
    }
    var d3_vendorPrefixes = [
        'webkit',
        'ms',
        'moz',
        'Moz',
        'o',
        'O'
    ];
    function d3_noop() {
    }
    d3.dispatch = function () {
        var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
        while (++i < n)
            dispatch[arguments[i]] = d3_dispatch_event(dispatch);
        return dispatch;
    };
    function d3_dispatch() {
    }
    d3_dispatch.prototype.on = function (type, listener) {
        var i = type.indexOf('.'), name = '';
        if (i >= 0) {
            name = type.slice(i + 1);
            type = type.slice(0, i);
        }
        if (type)
            return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
        if (arguments.length === 2) {
            if (listener == null)
                for (type in this) {
                    if (this.hasOwnProperty(type))
                        this[type].on(name, null);
                }
            return this;
        }
    };
    function d3_dispatch_event(dispatch) {
        var listeners = [], listenerByName = new d3_Map();
        function event() {
            var z = listeners, i = -1, n = z.length, l;
            while (++i < n)
                if (l = z[i].on)
                    l.apply(this, arguments);
            return dispatch;
        }
        event.on = function (name, listener) {
            var l = listenerByName.get(name), i;
            if (arguments.length < 2)
                return l && l.on;
            if (l) {
                l.on = null;
                listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
                listenerByName.remove(name);
            }
            if (listener)
                listeners.push(listenerByName.set(name, { on: listener }));
            return dispatch;
        };
        return event;
    }
    d3.event = null;
    function d3_eventPreventDefault() {
        d3.event.preventDefault();
    }
    function d3_eventSource() {
        var e = d3.event, s;
        while (s = e.sourceEvent)
            e = s;
        return e;
    }
    function d3_eventDispatch(target) {
        var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
        while (++i < n)
            dispatch[arguments[i]] = d3_dispatch_event(dispatch);
        dispatch.of = function (thiz, argumentz) {
            return function (e1) {
                try {
                    var e0 = e1.sourceEvent = d3.event;
                    e1.target = target;
                    d3.event = e1;
                    dispatch[e1.type].apply(thiz, argumentz);
                } finally {
                    d3.event = e0;
                }
            };
        };
        return dispatch;
    }
    d3.requote = function (s) {
        return s.replace(d3_requote_re, '\\$&');
    };
    var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
    var d3_subclass = {}.__proto__ ? function (object, prototype) {
        object.__proto__ = prototype;
    } : function (object, prototype) {
        for (var property in prototype)
            object[property] = prototype[property];
    };
    function d3_selection(groups) {
        d3_subclass(groups, d3_selectionPrototype);
        return groups;
    }
    var d3_select = function (s, n) {
            return n.querySelector(s);
        }, d3_selectAll = function (s, n) {
            return n.querySelectorAll(s);
        }, d3_selectMatches = function (n, s) {
            var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, 'matchesSelector')];
            d3_selectMatches = function (n, s) {
                return d3_selectMatcher.call(n, s);
            };
            return d3_selectMatches(n, s);
        };
    if (typeof Sizzle === 'function') {
        d3_select = function (s, n) {
            return Sizzle(s, n)[0] || null;
        };
        d3_selectAll = Sizzle;
        d3_selectMatches = Sizzle.matchesSelector;
    }
    d3.selection = function () {
        return d3.select(d3_document.documentElement);
    };
    var d3_selectionPrototype = d3.selection.prototype = [];
    d3_selectionPrototype.select = function (selector) {
        var subgroups = [], subgroup, subnode, group, node;
        selector = d3_selection_selector(selector);
        for (var j = -1, m = this.length; ++j < m;) {
            subgroups.push(subgroup = []);
            subgroup.parentNode = (group = this[j]).parentNode;
            for (var i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    subgroup.push(subnode = selector.call(node, node.__data__, i, j));
                    if (subnode && '__data__' in node)
                        subnode.__data__ = node.__data__;
                } else {
                    subgroup.push(null);
                }
            }
        }
        return d3_selection(subgroups);
    };
    function d3_selection_selector(selector) {
        return typeof selector === 'function' ? selector : function () {
            return d3_select(selector, this);
        };
    }
    d3_selectionPrototype.selectAll = function (selector) {
        var subgroups = [], subgroup, node;
        selector = d3_selection_selectorAll(selector);
        for (var j = -1, m = this.length; ++j < m;) {
            for (var group = this[j], i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
                    subgroup.parentNode = node;
                }
            }
        }
        return d3_selection(subgroups);
    };
    function d3_selection_selectorAll(selector) {
        return typeof selector === 'function' ? selector : function () {
            return d3_selectAll(selector, this);
        };
    }
    var d3_nsXhtml = 'http://www.w3.org/1999/xhtml';
    var d3_nsPrefix = {
        svg: 'http://www.w3.org/2000/svg',
        xhtml: d3_nsXhtml,
        xlink: 'http://www.w3.org/1999/xlink',
        xml: 'http://www.w3.org/XML/1998/namespace',
        xmlns: 'http://www.w3.org/2000/xmlns/'
    };
    d3.ns = {
        prefix: d3_nsPrefix,
        qualify: function (name) {
            var i = name.indexOf(':'), prefix = name;
            if (i >= 0 && (prefix = name.slice(0, i)) !== 'xmlns')
                name = name.slice(i + 1);
            return d3_nsPrefix.hasOwnProperty(prefix) ? {
                space: d3_nsPrefix[prefix],
                local: name
            } : name;
        }
    };
    d3_selectionPrototype.attr = function (name, value) {
        if (arguments.length < 2) {
            if (typeof name === 'string') {
                var node = this.node();
                name = d3.ns.qualify(name);
                return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
            }
            for (value in name)
                this.each(d3_selection_attr(value, name[value]));
            return this;
        }
        return this.each(d3_selection_attr(name, value));
    };
    function d3_selection_attr(name, value) {
        name = d3.ns.qualify(name);
        function attrNull() {
            this.removeAttribute(name);
        }
        function attrNullNS() {
            this.removeAttributeNS(name.space, name.local);
        }
        function attrConstant() {
            this.setAttribute(name, value);
        }
        function attrConstantNS() {
            this.setAttributeNS(name.space, name.local, value);
        }
        function attrFunction() {
            var x = value.apply(this, arguments);
            if (x == null)
                this.removeAttribute(name);
            else
                this.setAttribute(name, x);
        }
        function attrFunctionNS() {
            var x = value.apply(this, arguments);
            if (x == null)
                this.removeAttributeNS(name.space, name.local);
            else
                this.setAttributeNS(name.space, name.local, x);
        }
        return value == null ? name.local ? attrNullNS : attrNull : typeof value === 'function' ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
    }
    function d3_collapse(s) {
        return s.trim().replace(/\s+/g, ' ');
    }
    d3_selectionPrototype.classed = function (name, value) {
        if (arguments.length < 2) {
            if (typeof name === 'string') {
                var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
                if (value = node.classList) {
                    while (++i < n)
                        if (!value.contains(name[i]))
                            return false;
                } else {
                    value = node.getAttribute('class');
                    while (++i < n)
                        if (!d3_selection_classedRe(name[i]).test(value))
                            return false;
                }
                return true;
            }
            for (value in name)
                this.each(d3_selection_classed(value, name[value]));
            return this;
        }
        return this.each(d3_selection_classed(name, value));
    };
    function d3_selection_classedRe(name) {
        return new RegExp('(?:^|\\s+)' + d3.requote(name) + '(?:\\s+|$)', 'g');
    }
    function d3_selection_classes(name) {
        return (name + '').trim().split(/^|\s+/);
    }
    function d3_selection_classed(name, value) {
        name = d3_selection_classes(name).map(d3_selection_classedName);
        var n = name.length;
        function classedConstant() {
            var i = -1;
            while (++i < n)
                name[i](this, value);
        }
        function classedFunction() {
            var i = -1, x = value.apply(this, arguments);
            while (++i < n)
                name[i](this, x);
        }
        return typeof value === 'function' ? classedFunction : classedConstant;
    }
    function d3_selection_classedName(name) {
        var re = d3_selection_classedRe(name);
        return function (node, value) {
            if (c = node.classList)
                return value ? c.add(name) : c.remove(name);
            var c = node.getAttribute('class') || '';
            if (value) {
                re.lastIndex = 0;
                if (!re.test(c))
                    node.setAttribute('class', d3_collapse(c + ' ' + name));
            } else {
                node.setAttribute('class', d3_collapse(c.replace(re, ' ')));
            }
        };
    }
    d3_selectionPrototype.style = function (name, value, priority) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof name !== 'string') {
                if (n < 2)
                    value = '';
                for (priority in name)
                    this.each(d3_selection_style(priority, name[priority], value));
                return this;
            }
            if (n < 2) {
                var node = this.node();
                return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
            }
            priority = '';
        }
        return this.each(d3_selection_style(name, value, priority));
    };
    function d3_selection_style(name, value, priority) {
        function styleNull() {
            this.style.removeProperty(name);
        }
        function styleConstant() {
            this.style.setProperty(name, value, priority);
        }
        function styleFunction() {
            var x = value.apply(this, arguments);
            if (x == null)
                this.style.removeProperty(name);
            else
                this.style.setProperty(name, x, priority);
        }
        return value == null ? styleNull : typeof value === 'function' ? styleFunction : styleConstant;
    }
    d3_selectionPrototype.property = function (name, value) {
        if (arguments.length < 2) {
            if (typeof name === 'string')
                return this.node()[name];
            for (value in name)
                this.each(d3_selection_property(value, name[value]));
            return this;
        }
        return this.each(d3_selection_property(name, value));
    };
    function d3_selection_property(name, value) {
        function propertyNull() {
            delete this[name];
        }
        function propertyConstant() {
            this[name] = value;
        }
        function propertyFunction() {
            var x = value.apply(this, arguments);
            if (x == null)
                delete this[name];
            else
                this[name] = x;
        }
        return value == null ? propertyNull : typeof value === 'function' ? propertyFunction : propertyConstant;
    }
    d3_selectionPrototype.text = function (value) {
        return arguments.length ? this.each(typeof value === 'function' ? function () {
            var v = value.apply(this, arguments);
            this.textContent = v == null ? '' : v;
        } : value == null ? function () {
            this.textContent = '';
        } : function () {
            this.textContent = value;
        }) : this.node().textContent;
    };
    d3_selectionPrototype.html = function (value) {
        return arguments.length ? this.each(typeof value === 'function' ? function () {
            var v = value.apply(this, arguments);
            this.innerHTML = v == null ? '' : v;
        } : value == null ? function () {
            this.innerHTML = '';
        } : function () {
            this.innerHTML = value;
        }) : this.node().innerHTML;
    };
    d3_selectionPrototype.append = function (name) {
        name = d3_selection_creator(name);
        return this.select(function () {
            return this.appendChild(name.apply(this, arguments));
        });
    };
    function d3_selection_creator(name) {
        function create() {
            var document = this.ownerDocument, namespace = this.namespaceURI;
            return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
        }
        function createNS() {
            return this.ownerDocument.createElementNS(name.space, name.local);
        }
        return typeof name === 'function' ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
    }
    d3_selectionPrototype.insert = function (name, before) {
        name = d3_selection_creator(name);
        before = d3_selection_selector(before);
        return this.select(function () {
            return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
        });
    };
    d3_selectionPrototype.remove = function () {
        return this.each(d3_selectionRemove);
    };
    function d3_selectionRemove() {
        var parent = this.parentNode;
        if (parent)
            parent.removeChild(this);
    }
    d3_selectionPrototype.data = function (value, key) {
        var i = -1, n = this.length, group, node;
        if (!arguments.length) {
            value = new Array(n = (group = this[0]).length);
            while (++i < n) {
                if (node = group[i]) {
                    value[i] = node.__data__;
                }
            }
            return value;
        }
        function bind(group, groupData) {
            var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
            if (key) {
                var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
                for (i = -1; ++i < n;) {
                    if (node = group[i]) {
                        if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
                            exitNodes[i] = node;
                        } else {
                            nodeByKeyValue.set(keyValue, node);
                        }
                        keyValues[i] = keyValue;
                    }
                }
                for (i = -1; ++i < m;) {
                    if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
                        enterNodes[i] = d3_selection_dataNode(nodeData);
                    } else if (node !== true) {
                        updateNodes[i] = node;
                        node.__data__ = nodeData;
                    }
                    nodeByKeyValue.set(keyValue, true);
                }
                for (i = -1; ++i < n;) {
                    if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
                        exitNodes[i] = group[i];
                    }
                }
            } else {
                for (i = -1; ++i < n0;) {
                    node = group[i];
                    nodeData = groupData[i];
                    if (node) {
                        node.__data__ = nodeData;
                        updateNodes[i] = node;
                    } else {
                        enterNodes[i] = d3_selection_dataNode(nodeData);
                    }
                }
                for (; i < m; ++i) {
                    enterNodes[i] = d3_selection_dataNode(groupData[i]);
                }
                for (; i < n; ++i) {
                    exitNodes[i] = group[i];
                }
            }
            enterNodes.update = updateNodes;
            enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
            enter.push(enterNodes);
            update.push(updateNodes);
            exit.push(exitNodes);
        }
        var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
        if (typeof value === 'function') {
            while (++i < n) {
                bind(group = this[i], value.call(group, group.parentNode.__data__, i));
            }
        } else {
            while (++i < n) {
                bind(group = this[i], value);
            }
        }
        update.enter = function () {
            return enter;
        };
        update.exit = function () {
            return exit;
        };
        return update;
    };
    function d3_selection_dataNode(data) {
        return { __data__: data };
    }
    d3_selectionPrototype.datum = function (value) {
        return arguments.length ? this.property('__data__', value) : this.property('__data__');
    };
    d3_selectionPrototype.filter = function (filter) {
        var subgroups = [], subgroup, group, node;
        if (typeof filter !== 'function')
            filter = d3_selection_filter(filter);
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            subgroup.parentNode = (group = this[j]).parentNode;
            for (var i = 0, n = group.length; i < n; i++) {
                if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
                    subgroup.push(node);
                }
            }
        }
        return d3_selection(subgroups);
    };
    function d3_selection_filter(selector) {
        return function () {
            return d3_selectMatches(this, selector);
        };
    }
    d3_selectionPrototype.order = function () {
        for (var j = -1, m = this.length; ++j < m;) {
            for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
                if (node = group[i]) {
                    if (next && next !== node.nextSibling)
                        next.parentNode.insertBefore(node, next);
                    next = node;
                }
            }
        }
        return this;
    };
    d3_selectionPrototype.sort = function (comparator) {
        comparator = d3_selection_sortComparator.apply(this, arguments);
        for (var j = -1, m = this.length; ++j < m;)
            this[j].sort(comparator);
        return this.order();
    };
    function d3_selection_sortComparator(comparator) {
        if (!arguments.length)
            comparator = d3_ascending;
        return function (a, b) {
            return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
        };
    }
    d3_selectionPrototype.each = function (callback) {
        return d3_selection_each(this, function (node, i, j) {
            callback.call(node, node.__data__, i, j);
        });
    };
    function d3_selection_each(groups, callback) {
        for (var j = 0, m = groups.length; j < m; j++) {
            for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
                if (node = group[i])
                    callback(node, i, j);
            }
        }
        return groups;
    }
    d3_selectionPrototype.call = function (callback) {
        var args = d3_array(arguments);
        callback.apply(args[0] = this, args);
        return this;
    };
    d3_selectionPrototype.empty = function () {
        return !this.node();
    };
    d3_selectionPrototype.node = function () {
        for (var j = 0, m = this.length; j < m; j++) {
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                var node = group[i];
                if (node)
                    return node;
            }
        }
        return null;
    };
    d3_selectionPrototype.size = function () {
        var n = 0;
        d3_selection_each(this, function () {
            ++n;
        });
        return n;
    };
    function d3_selection_enter(selection) {
        d3_subclass(selection, d3_selection_enterPrototype);
        return selection;
    }
    var d3_selection_enterPrototype = [];
    d3.selection.enter = d3_selection_enter;
    d3.selection.enter.prototype = d3_selection_enterPrototype;
    d3_selection_enterPrototype.append = d3_selectionPrototype.append;
    d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
    d3_selection_enterPrototype.node = d3_selectionPrototype.node;
    d3_selection_enterPrototype.call = d3_selectionPrototype.call;
    d3_selection_enterPrototype.size = d3_selectionPrototype.size;
    d3_selection_enterPrototype.select = function (selector) {
        var subgroups = [], subgroup, subnode, upgroup, group, node;
        for (var j = -1, m = this.length; ++j < m;) {
            upgroup = (group = this[j]).update;
            subgroups.push(subgroup = []);
            subgroup.parentNode = group.parentNode;
            for (var i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
                    subnode.__data__ = node.__data__;
                } else {
                    subgroup.push(null);
                }
            }
        }
        return d3_selection(subgroups);
    };
    d3_selection_enterPrototype.insert = function (name, before) {
        if (arguments.length < 2)
            before = d3_selection_enterInsertBefore(this);
        return d3_selectionPrototype.insert.call(this, name, before);
    };
    function d3_selection_enterInsertBefore(enter) {
        var i0, j0;
        return function (d, i, j) {
            var group = enter[j].update, n = group.length, node;
            if (j != j0)
                j0 = j, i0 = 0;
            if (i >= i0)
                i0 = i + 1;
            while (!(node = group[i0]) && ++i0 < n);
            return node;
        };
    }
    d3.select = function (node) {
        var group;
        if (typeof node === 'string') {
            group = [d3_select(node, d3_document)];
            group.parentNode = d3_document.documentElement;
        } else {
            group = [node];
            group.parentNode = d3_documentElement(node);
        }
        return d3_selection([group]);
    };
    d3.selectAll = function (nodes) {
        var group;
        if (typeof nodes === 'string') {
            group = d3_array(d3_selectAll(nodes, d3_document));
            group.parentNode = d3_document.documentElement;
        } else {
            group = d3_array(nodes);
            group.parentNode = null;
        }
        return d3_selection([group]);
    };
    d3_selectionPrototype.on = function (type, listener, capture) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof type !== 'string') {
                if (n < 2)
                    listener = false;
                for (capture in type)
                    this.each(d3_selection_on(capture, type[capture], listener));
                return this;
            }
            if (n < 2)
                return (n = this.node()['__on' + type]) && n._;
            capture = false;
        }
        return this.each(d3_selection_on(type, listener, capture));
    };
    function d3_selection_on(type, listener, capture) {
        var name = '__on' + type, i = type.indexOf('.'), wrap = d3_selection_onListener;
        if (i > 0)
            type = type.slice(0, i);
        var filter = d3_selection_onFilters.get(type);
        if (filter)
            type = filter, wrap = d3_selection_onFilter;
        function onRemove() {
            var l = this[name];
            if (l) {
                this.removeEventListener(type, l, l.$);
                delete this[name];
            }
        }
        function onAdd() {
            var l = wrap(listener, d3_array(arguments));
            onRemove.call(this);
            this.addEventListener(type, this[name] = l, l.$ = capture);
            l._ = listener;
        }
        function removeAll() {
            var re = new RegExp('^__on([^.]+)' + d3.requote(type) + '$'), match;
            for (var name in this) {
                if (match = name.match(re)) {
                    var l = this[name];
                    this.removeEventListener(match[1], l, l.$);
                    delete this[name];
                }
            }
        }
        return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
    }
    var d3_selection_onFilters = d3.map({
        mouseenter: 'mouseover',
        mouseleave: 'mouseout'
    });
    if (d3_document) {
        d3_selection_onFilters.forEach(function (k) {
            if ('on' + k in d3_document)
                d3_selection_onFilters.remove(k);
        });
    }
    function d3_selection_onListener(listener, argumentz) {
        return function (e) {
            var o = d3.event;
            d3.event = e;
            argumentz[0] = this.__data__;
            try {
                listener.apply(this, argumentz);
            } finally {
                d3.event = o;
            }
        };
    }
    function d3_selection_onFilter(listener, argumentz) {
        var l = d3_selection_onListener(listener, argumentz);
        return function (e) {
            var target = this, related = e.relatedTarget;
            if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
                l.call(target, e);
            }
        };
    }
    var d3_event_dragSelect, d3_event_dragId = 0;
    function d3_event_dragSuppress(node) {
        var name = '.dragsuppress-' + ++d3_event_dragId, click = 'click' + name, w = d3.select(d3_window(node)).on('touchmove' + name, d3_eventPreventDefault).on('dragstart' + name, d3_eventPreventDefault).on('selectstart' + name, d3_eventPreventDefault);
        if (d3_event_dragSelect == null) {
            d3_event_dragSelect = 'onselectstart' in node ? false : d3_vendorSymbol(node.style, 'userSelect');
        }
        if (d3_event_dragSelect) {
            var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
            style[d3_event_dragSelect] = 'none';
        }
        return function (suppressClick) {
            w.on(name, null);
            if (d3_event_dragSelect)
                style[d3_event_dragSelect] = select;
            if (suppressClick) {
                var off = function () {
                    w.on(click, null);
                };
                w.on(click, function () {
                    d3_eventPreventDefault();
                    off();
                }, true);
                setTimeout(off, 0);
            }
        };
    }
    d3.mouse = function (container) {
        return d3_mousePoint(container, d3_eventSource());
    };
    var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
    function d3_mousePoint(container, e) {
        if (e.changedTouches)
            e = e.changedTouches[0];
        var svg = container.ownerSVGElement || container;
        if (svg.createSVGPoint) {
            var point = svg.createSVGPoint();
            if (d3_mouse_bug44083 < 0) {
                var window = d3_window(container);
                if (window.scrollX || window.scrollY) {
                    svg = d3.select('body').append('svg').style({
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        margin: 0,
                        padding: 0,
                        border: 'none'
                    }, 'important');
                    var ctm = svg[0][0].getScreenCTM();
                    d3_mouse_bug44083 = !(ctm.f || ctm.e);
                    svg.remove();
                }
            }
            if (d3_mouse_bug44083)
                point.x = e.pageX, point.y = e.pageY;
            else
                point.x = e.clientX, point.y = e.clientY;
            point = point.matrixTransform(container.getScreenCTM().inverse());
            return [
                point.x,
                point.y
            ];
        }
        var rect = container.getBoundingClientRect();
        return [
            e.clientX - rect.left - container.clientLeft,
            e.clientY - rect.top - container.clientTop
        ];
    }
    d3.touch = function (container, touches, identifier) {
        if (arguments.length < 3)
            identifier = touches, touches = d3_eventSource().changedTouches;
        if (touches)
            for (var i = 0, n = touches.length, touch; i < n; ++i) {
                if ((touch = touches[i]).identifier === identifier) {
                    return d3_mousePoint(container, touch);
                }
            }
    };
    d3.behavior.drag = function () {
        var event = d3_eventDispatch(drag, 'drag', 'dragstart', 'dragend'), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, 'mousemove', 'mouseup'), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, 'touchmove', 'touchend');
        function drag() {
            this.on('mousedown.drag', mousedown).on('touchstart.drag', touchstart);
        }
        function dragstart(id, position, subject, move, end) {
            return function () {
                var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = '.drag' + (dragId == null ? '' : '-' + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
                if (origin) {
                    dragOffset = origin.apply(that, arguments);
                    dragOffset = [
                        dragOffset.x - position0[0],
                        dragOffset.y - position0[1]
                    ];
                } else {
                    dragOffset = [
                        0,
                        0
                    ];
                }
                dispatch({ type: 'dragstart' });
                function moved() {
                    var position1 = position(parent, dragId), dx, dy;
                    if (!position1)
                        return;
                    dx = position1[0] - position0[0];
                    dy = position1[1] - position0[1];
                    dragged |= dx | dy;
                    position0 = position1;
                    dispatch({
                        type: 'drag',
                        x: position1[0] + dragOffset[0],
                        y: position1[1] + dragOffset[1],
                        dx: dx,
                        dy: dy
                    });
                }
                function ended() {
                    if (!position(parent, dragId))
                        return;
                    dragSubject.on(move + dragName, null).on(end + dragName, null);
                    dragRestore(dragged);
                    dispatch({ type: 'dragend' });
                }
            };
        }
        drag.origin = function (x) {
            if (!arguments.length)
                return origin;
            origin = x;
            return drag;
        };
        return d3.rebind(drag, event, 'on');
    };
    function d3_behavior_dragTouchId() {
        return d3.event.changedTouches[0].identifier;
    }
    d3.touches = function (container, touches) {
        if (arguments.length < 2)
            touches = d3_eventSource().touches;
        return touches ? d3_array(touches).map(function (touch) {
            var point = d3_mousePoint(container, touch);
            point.identifier = touch.identifier;
            return point;
        }) : [];
    };
    var ε = 0.000001, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
    function d3_sgn(x) {
        return x > 0 ? 1 : x < 0 ? -1 : 0;
    }
    function d3_cross2d(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
    }
    function d3_acos(x) {
        return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
    }
    function d3_asin(x) {
        return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
    }
    function d3_sinh(x) {
        return ((x = Math.exp(x)) - 1 / x) / 2;
    }
    function d3_cosh(x) {
        return ((x = Math.exp(x)) + 1 / x) / 2;
    }
    function d3_tanh(x) {
        return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }
    function d3_haversin(x) {
        return (x = Math.sin(x / 2)) * x;
    }
    var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
    d3.interpolateZoom = function (p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
        if (d2 < ε2) {
            S = Math.log(w1 / w0) / ρ;
            i = function (t) {
                return [
                    ux0 + t * dx,
                    uy0 + t * dy,
                    w0 * Math.exp(ρ * t * S)
                ];
            };
        } else {
            var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / ρ;
            i = function (t) {
                var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
                return [
                    ux0 + u * dx,
                    uy0 + u * dy,
                    w0 * coshr0 / d3_cosh(ρ * s + r0)
                ];
            };
        }
        i.duration = S * 1000;
        return i;
    };
    d3.behavior.zoom = function () {
        var view = {
                x: 0,
                y: 0,
                k: 1
            }, translate0, center0, center, size = [
                960,
                500
            ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = 'mousedown.zoom', mousemove = 'mousemove.zoom', mouseup = 'mouseup.zoom', mousewheelTimer, touchstart = 'touchstart.zoom', touchtime, event = d3_eventDispatch(zoom, 'zoomstart', 'zoom', 'zoomend'), x0, x1, y0, y1;
        if (!d3_behavior_zoomWheel) {
            d3_behavior_zoomWheel = 'onwheel' in d3_document ? (d3_behavior_zoomDelta = function () {
                return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
            }, 'wheel') : 'onmousewheel' in d3_document ? (d3_behavior_zoomDelta = function () {
                return d3.event.wheelDelta;
            }, 'mousewheel') : (d3_behavior_zoomDelta = function () {
                return -d3.event.detail;
            }, 'MozMousePixelScroll');
        }
        function zoom(g) {
            g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + '.zoom', mousewheeled).on('dblclick.zoom', dblclicked).on(touchstart, touchstarted);
        }
        zoom.event = function (g) {
            g.each(function () {
                var dispatch = event.of(this, arguments), view1 = view;
                if (d3_transitionInheritId) {
                    d3.select(this).transition().each('start.zoom', function () {
                        view = this.__chart__ || {
                            x: 0,
                            y: 0,
                            k: 1
                        };
                        zoomstarted(dispatch);
                    }).tween('zoom:zoom', function () {
                        var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([
                                (cx - view.x) / view.k,
                                (cy - view.y) / view.k,
                                dx / view.k
                            ], [
                                (cx - view1.x) / view1.k,
                                (cy - view1.y) / view1.k,
                                dx / view1.k
                            ]);
                        return function (t) {
                            var l = i(t), k = dx / l[2];
                            this.__chart__ = view = {
                                x: cx - l[0] * k,
                                y: cy - l[1] * k,
                                k: k
                            };
                            zoomed(dispatch);
                        };
                    }).each('interrupt.zoom', function () {
                        zoomended(dispatch);
                    }).each('end.zoom', function () {
                        zoomended(dispatch);
                    });
                } else {
                    this.__chart__ = view;
                    zoomstarted(dispatch);
                    zoomed(dispatch);
                    zoomended(dispatch);
                }
            });
        };
        zoom.translate = function (_) {
            if (!arguments.length)
                return [
                    view.x,
                    view.y
                ];
            view = {
                x: +_[0],
                y: +_[1],
                k: view.k
            };
            rescale();
            return zoom;
        };
        zoom.scale = function (_) {
            if (!arguments.length)
                return view.k;
            view = {
                x: view.x,
                y: view.y,
                k: null
            };
            scaleTo(+_);
            rescale();
            return zoom;
        };
        zoom.scaleExtent = function (_) {
            if (!arguments.length)
                return scaleExtent;
            scaleExtent = _ == null ? d3_behavior_zoomInfinity : [
                +_[0],
                +_[1]
            ];
            return zoom;
        };
        zoom.center = function (_) {
            if (!arguments.length)
                return center;
            center = _ && [
                +_[0],
                +_[1]
            ];
            return zoom;
        };
        zoom.size = function (_) {
            if (!arguments.length)
                return size;
            size = _ && [
                +_[0],
                +_[1]
            ];
            return zoom;
        };
        zoom.duration = function (_) {
            if (!arguments.length)
                return duration;
            duration = +_;
            return zoom;
        };
        zoom.x = function (z) {
            if (!arguments.length)
                return x1;
            x1 = z;
            x0 = z.copy();
            view = {
                x: 0,
                y: 0,
                k: 1
            };
            return zoom;
        };
        zoom.y = function (z) {
            if (!arguments.length)
                return y1;
            y1 = z;
            y0 = z.copy();
            view = {
                x: 0,
                y: 0,
                k: 1
            };
            return zoom;
        };
        function location(p) {
            return [
                (p[0] - view.x) / view.k,
                (p[1] - view.y) / view.k
            ];
        }
        function point(l) {
            return [
                l[0] * view.k + view.x,
                l[1] * view.k + view.y
            ];
        }
        function scaleTo(s) {
            view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
        }
        function translateTo(p, l) {
            l = point(l);
            view.x += p[0] - l[0];
            view.y += p[1] - l[1];
        }
        function zoomTo(that, p, l, k) {
            that.__chart__ = {
                x: view.x,
                y: view.y,
                k: view.k
            };
            scaleTo(Math.pow(2, k));
            translateTo(center0 = p, l);
            that = d3.select(that);
            if (duration > 0)
                that = that.transition().duration(duration);
            that.call(zoom.event);
        }
        function rescale() {
            if (x1)
                x1.domain(x0.range().map(function (x) {
                    return (x - view.x) / view.k;
                }).map(x0.invert));
            if (y1)
                y1.domain(y0.range().map(function (y) {
                    return (y - view.y) / view.k;
                }).map(y0.invert));
        }
        function zoomstarted(dispatch) {
            if (!zooming++)
                dispatch({ type: 'zoomstart' });
        }
        function zoomed(dispatch) {
            rescale();
            dispatch({
                type: 'zoom',
                scale: view.k,
                translate: [
                    view.x,
                    view.y
                ]
            });
        }
        function zoomended(dispatch) {
            if (!--zooming)
                dispatch({ type: 'zoomend' }), center0 = null;
        }
        function mousedowned() {
            var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
            d3_selection_interrupt.call(that);
            zoomstarted(dispatch);
            function moved() {
                dragged = 1;
                translateTo(d3.mouse(that), location0);
                zoomed(dispatch);
            }
            function ended() {
                subject.on(mousemove, null).on(mouseup, null);
                dragRestore(dragged);
                zoomended(dispatch);
            }
        }
        function touchstarted() {
            var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = '.zoom-' + d3.event.changedTouches[0].identifier, touchmove = 'touchmove' + zoomName, touchend = 'touchend' + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
            started();
            zoomstarted(dispatch);
            subject.on(mousedown, null).on(touchstart, started);
            function relocate() {
                var touches = d3.touches(that);
                scale0 = view.k;
                touches.forEach(function (t) {
                    if (t.identifier in locations0)
                        locations0[t.identifier] = location(t);
                });
                return touches;
            }
            function started() {
                var target = d3.event.target;
                d3.select(target).on(touchmove, moved).on(touchend, ended);
                targets.push(target);
                var changed = d3.event.changedTouches;
                for (var i = 0, n = changed.length; i < n; ++i) {
                    locations0[changed[i].identifier] = null;
                }
                var touches = relocate(), now = Date.now();
                if (touches.length === 1) {
                    if (now - touchtime < 500) {
                        var p = touches[0];
                        zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
                        d3_eventPreventDefault();
                    }
                    touchtime = now;
                } else if (touches.length > 1) {
                    var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
                    distance0 = dx * dx + dy * dy;
                }
            }
            function moved() {
                var touches = d3.touches(that), p0, l0, p1, l1;
                d3_selection_interrupt.call(that);
                for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
                    p1 = touches[i];
                    if (l1 = locations0[p1.identifier]) {
                        if (l0)
                            break;
                        p0 = p1, l0 = l1;
                    }
                }
                if (l1) {
                    var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
                    p0 = [
                        (p0[0] + p1[0]) / 2,
                        (p0[1] + p1[1]) / 2
                    ];
                    l0 = [
                        (l0[0] + l1[0]) / 2,
                        (l0[1] + l1[1]) / 2
                    ];
                    scaleTo(scale1 * scale0);
                }
                touchtime = null;
                translateTo(p0, l0);
                zoomed(dispatch);
            }
            function ended() {
                if (d3.event.touches.length) {
                    var changed = d3.event.changedTouches;
                    for (var i = 0, n = changed.length; i < n; ++i) {
                        delete locations0[changed[i].identifier];
                    }
                    for (var identifier in locations0) {
                        return void relocate();
                    }
                }
                d3.selectAll(targets).on(zoomName, null);
                subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
                dragRestore();
                zoomended(dispatch);
            }
        }
        function mousewheeled() {
            var dispatch = event.of(this, arguments);
            if (mousewheelTimer)
                clearTimeout(mousewheelTimer);
            else
                d3_selection_interrupt.call(this), translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
            mousewheelTimer = setTimeout(function () {
                mousewheelTimer = null;
                zoomended(dispatch);
            }, 50);
            d3_eventPreventDefault();
            scaleTo(Math.pow(2, d3_behavior_zoomDelta() * 0.002) * view.k);
            translateTo(center0, translate0);
            zoomed(dispatch);
        }
        function dblclicked() {
            var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
            zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
        }
        return d3.rebind(zoom, event, 'on');
    };
    var d3_behavior_zoomInfinity = [
            0,
            Infinity
        ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
    d3.color = d3_color;
    function d3_color() {
    }
    d3_color.prototype.toString = function () {
        return this.rgb() + '';
    };
    d3.hsl = d3_hsl;
    function d3_hsl(h, s, l) {
        return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse('' + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
    }
    var d3_hslPrototype = d3_hsl.prototype = new d3_color();
    d3_hslPrototype.brighter = function (k) {
        k = Math.pow(0.7, arguments.length ? k : 1);
        return new d3_hsl(this.h, this.s, this.l / k);
    };
    d3_hslPrototype.darker = function (k) {
        k = Math.pow(0.7, arguments.length ? k : 1);
        return new d3_hsl(this.h, this.s, k * this.l);
    };
    d3_hslPrototype.rgb = function () {
        return d3_hsl_rgb(this.h, this.s, this.l);
    };
    function d3_hsl_rgb(h, s, l) {
        var m1, m2;
        h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
        s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
        l = l < 0 ? 0 : l > 1 ? 1 : l;
        m2 = l <= 0.5 ? l * (1 + s) : l + s - l * s;
        m1 = 2 * l - m2;
        function v(h) {
            if (h > 360)
                h -= 360;
            else if (h < 0)
                h += 360;
            if (h < 60)
                return m1 + (m2 - m1) * h / 60;
            if (h < 180)
                return m2;
            if (h < 240)
                return m1 + (m2 - m1) * (240 - h) / 60;
            return m1;
        }
        function vv(h) {
            return Math.round(v(h) * 255);
        }
        return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
    }
    d3.hcl = d3_hcl;
    function d3_hcl(h, c, l) {
        return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
    }
    var d3_hclPrototype = d3_hcl.prototype = new d3_color();
    d3_hclPrototype.brighter = function (k) {
        return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
    };
    d3_hclPrototype.darker = function (k) {
        return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
    };
    d3_hclPrototype.rgb = function () {
        return d3_hcl_lab(this.h, this.c, this.l).rgb();
    };
    function d3_hcl_lab(h, c, l) {
        if (isNaN(h))
            h = 0;
        if (isNaN(c))
            c = 0;
        return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
    }
    d3.lab = d3_lab;
    function d3_lab(l, a, b) {
        return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
    }
    var d3_lab_K = 18;
    var d3_lab_X = 0.95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
    var d3_labPrototype = d3_lab.prototype = new d3_color();
    d3_labPrototype.brighter = function (k) {
        return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
    };
    d3_labPrototype.darker = function (k) {
        return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
    };
    d3_labPrototype.rgb = function () {
        return d3_lab_rgb(this.l, this.a, this.b);
    };
    function d3_lab_rgb(l, a, b) {
        var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
        x = d3_lab_xyz(x) * d3_lab_X;
        y = d3_lab_xyz(y) * d3_lab_Y;
        z = d3_lab_xyz(z) * d3_lab_Z;
        return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), d3_xyz_rgb(-0.969266 * x + 1.8760108 * y + 0.041556 * z), d3_xyz_rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z));
    }
    function d3_lab_hcl(l, a, b) {
        return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
    }
    function d3_lab_xyz(x) {
        return x > 0.206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
    }
    function d3_xyz_lab(x) {
        return x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
    }
    function d3_xyz_rgb(r) {
        return Math.round(255 * (r <= 0.00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055));
    }
    d3.rgb = d3_rgb;
    function d3_rgb(r, g, b) {
        return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse('' + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
    }
    function d3_rgbNumber(value) {
        return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
    }
    function d3_rgbString(value) {
        return d3_rgbNumber(value) + '';
    }
    var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
    d3_rgbPrototype.brighter = function (k) {
        k = Math.pow(0.7, arguments.length ? k : 1);
        var r = this.r, g = this.g, b = this.b, i = 30;
        if (!r && !g && !b)
            return new d3_rgb(i, i, i);
        if (r && r < i)
            r = i;
        if (g && g < i)
            g = i;
        if (b && b < i)
            b = i;
        return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
    };
    d3_rgbPrototype.darker = function (k) {
        k = Math.pow(0.7, arguments.length ? k : 1);
        return new d3_rgb(k * this.r, k * this.g, k * this.b);
    };
    d3_rgbPrototype.hsl = function () {
        return d3_rgb_hsl(this.r, this.g, this.b);
    };
    d3_rgbPrototype.toString = function () {
        return '#' + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
    };
    function d3_rgb_hex(v) {
        return v < 16 ? '0' + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
    }
    function d3_rgb_parse(format, rgb, hsl) {
        var r = 0, g = 0, b = 0, m1, m2, color;
        m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
        if (m1) {
            m2 = m1[2].split(',');
            switch (m1[1]) {
            case 'hsl': {
                    return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
                }
            case 'rgb': {
                    return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
                }
            }
        }
        if (color = d3_rgb_names.get(format)) {
            return rgb(color.r, color.g, color.b);
        }
        if (format != null && format.charAt(0) === '#' && !isNaN(color = parseInt(format.slice(1), 16))) {
            if (format.length === 4) {
                r = (color & 3840) >> 4;
                r = r >> 4 | r;
                g = color & 240;
                g = g >> 4 | g;
                b = color & 15;
                b = b << 4 | b;
            } else if (format.length === 7) {
                r = (color & 16711680) >> 16;
                g = (color & 65280) >> 8;
                b = color & 255;
            }
        }
        return rgb(r, g, b);
    }
    function d3_rgb_hsl(r, g, b) {
        var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
        if (d) {
            s = l < 0.5 ? d / (max + min) : d / (2 - max - min);
            if (r == max)
                h = (g - b) / d + (g < b ? 6 : 0);
            else if (g == max)
                h = (b - r) / d + 2;
            else
                h = (r - g) / d + 4;
            h *= 60;
        } else {
            h = NaN;
            s = l > 0 && l < 1 ? 0 : h;
        }
        return new d3_hsl(h, s, l);
    }
    function d3_rgb_lab(r, g, b) {
        r = d3_rgb_xyz(r);
        g = d3_rgb_xyz(g);
        b = d3_rgb_xyz(b);
        var x = d3_xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / d3_lab_X), y = d3_xyz_lab((0.2126729 * r + 0.7151522 * g + 0.072175 * b) / d3_lab_Y), z = d3_xyz_lab((0.0193339 * r + 0.119192 * g + 0.9503041 * b) / d3_lab_Z);
        return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
    }
    function d3_rgb_xyz(r) {
        return (r /= 255) <= 0.04045 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
    }
    function d3_rgb_parseNumber(c) {
        var f = parseFloat(c);
        return c.charAt(c.length - 1) === '%' ? Math.round(f * 2.55) : f;
    }
    var d3_rgb_names = d3.map({
        aliceblue: 15792383,
        antiquewhite: 16444375,
        aqua: 65535,
        aquamarine: 8388564,
        azure: 15794175,
        beige: 16119260,
        bisque: 16770244,
        black: 0,
        blanchedalmond: 16772045,
        blue: 255,
        blueviolet: 9055202,
        brown: 10824234,
        burlywood: 14596231,
        cadetblue: 6266528,
        chartreuse: 8388352,
        chocolate: 13789470,
        coral: 16744272,
        cornflowerblue: 6591981,
        cornsilk: 16775388,
        crimson: 14423100,
        cyan: 65535,
        darkblue: 139,
        darkcyan: 35723,
        darkgoldenrod: 12092939,
        darkgray: 11119017,
        darkgreen: 25600,
        darkgrey: 11119017,
        darkkhaki: 12433259,
        darkmagenta: 9109643,
        darkolivegreen: 5597999,
        darkorange: 16747520,
        darkorchid: 10040012,
        darkred: 9109504,
        darksalmon: 15308410,
        darkseagreen: 9419919,
        darkslateblue: 4734347,
        darkslategray: 3100495,
        darkslategrey: 3100495,
        darkturquoise: 52945,
        darkviolet: 9699539,
        deeppink: 16716947,
        deepskyblue: 49151,
        dimgray: 6908265,
        dimgrey: 6908265,
        dodgerblue: 2003199,
        firebrick: 11674146,
        floralwhite: 16775920,
        forestgreen: 2263842,
        fuchsia: 16711935,
        gainsboro: 14474460,
        ghostwhite: 16316671,
        gold: 16766720,
        goldenrod: 14329120,
        gray: 8421504,
        green: 32768,
        greenyellow: 11403055,
        grey: 8421504,
        honeydew: 15794160,
        hotpink: 16738740,
        indianred: 13458524,
        indigo: 4915330,
        ivory: 16777200,
        khaki: 15787660,
        lavender: 15132410,
        lavenderblush: 16773365,
        lawngreen: 8190976,
        lemonchiffon: 16775885,
        lightblue: 11393254,
        lightcoral: 15761536,
        lightcyan: 14745599,
        lightgoldenrodyellow: 16448210,
        lightgray: 13882323,
        lightgreen: 9498256,
        lightgrey: 13882323,
        lightpink: 16758465,
        lightsalmon: 16752762,
        lightseagreen: 2142890,
        lightskyblue: 8900346,
        lightslategray: 7833753,
        lightslategrey: 7833753,
        lightsteelblue: 11584734,
        lightyellow: 16777184,
        lime: 65280,
        limegreen: 3329330,
        linen: 16445670,
        magenta: 16711935,
        maroon: 8388608,
        mediumaquamarine: 6737322,
        mediumblue: 205,
        mediumorchid: 12211667,
        mediumpurple: 9662683,
        mediumseagreen: 3978097,
        mediumslateblue: 8087790,
        mediumspringgreen: 64154,
        mediumturquoise: 4772300,
        mediumvioletred: 13047173,
        midnightblue: 1644912,
        mintcream: 16121850,
        mistyrose: 16770273,
        moccasin: 16770229,
        navajowhite: 16768685,
        navy: 128,
        oldlace: 16643558,
        olive: 8421376,
        olivedrab: 7048739,
        orange: 16753920,
        orangered: 16729344,
        orchid: 14315734,
        palegoldenrod: 15657130,
        palegreen: 10025880,
        paleturquoise: 11529966,
        palevioletred: 14381203,
        papayawhip: 16773077,
        peachpuff: 16767673,
        peru: 13468991,
        pink: 16761035,
        plum: 14524637,
        powderblue: 11591910,
        purple: 8388736,
        rebeccapurple: 6697881,
        red: 16711680,
        rosybrown: 12357519,
        royalblue: 4286945,
        saddlebrown: 9127187,
        salmon: 16416882,
        sandybrown: 16032864,
        seagreen: 3050327,
        seashell: 16774638,
        sienna: 10506797,
        silver: 12632256,
        skyblue: 8900331,
        slateblue: 6970061,
        slategray: 7372944,
        slategrey: 7372944,
        snow: 16775930,
        springgreen: 65407,
        steelblue: 4620980,
        tan: 13808780,
        teal: 32896,
        thistle: 14204888,
        tomato: 16737095,
        turquoise: 4251856,
        violet: 15631086,
        wheat: 16113331,
        white: 16777215,
        whitesmoke: 16119285,
        yellow: 16776960,
        yellowgreen: 10145074
    });
    d3_rgb_names.forEach(function (key, value) {
        d3_rgb_names.set(key, d3_rgbNumber(value));
    });
    function d3_functor(v) {
        return typeof v === 'function' ? v : function () {
            return v;
        };
    }
    d3.functor = d3_functor;
    d3.xhr = d3_xhrType(d3_identity);
    function d3_xhrType(response) {
        return function (url, mimeType, callback) {
            if (arguments.length === 2 && typeof mimeType === 'function')
                callback = mimeType, mimeType = null;
            return d3_xhr(url, mimeType, response, callback);
        };
    }
    function d3_xhr(url, mimeType, response, callback) {
        var xhr = {}, dispatch = d3.dispatch('beforesend', 'progress', 'load', 'error'), headers = {}, request = new XMLHttpRequest(), responseType = null;
        if (this.XDomainRequest && !('withCredentials' in request) && /^(http(s)?:)?\/\//.test(url))
            request = new XDomainRequest();
        'onload' in request ? request.onload = request.onerror = respond : request.onreadystatechange = function () {
            request.readyState > 3 && respond();
        };
        function respond() {
            var status = request.status, result;
            if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
                try {
                    result = response.call(xhr, request);
                } catch (e) {
                    dispatch.error.call(xhr, e);
                    return;
                }
                dispatch.load.call(xhr, result);
            } else {
                dispatch.error.call(xhr, request);
            }
        }
        request.onprogress = function (event) {
            var o = d3.event;
            d3.event = event;
            try {
                dispatch.progress.call(xhr, request);
            } finally {
                d3.event = o;
            }
        };
        xhr.header = function (name, value) {
            name = (name + '').toLowerCase();
            if (arguments.length < 2)
                return headers[name];
            if (value == null)
                delete headers[name];
            else
                headers[name] = value + '';
            return xhr;
        };
        xhr.mimeType = function (value) {
            if (!arguments.length)
                return mimeType;
            mimeType = value == null ? null : value + '';
            return xhr;
        };
        xhr.responseType = function (value) {
            if (!arguments.length)
                return responseType;
            responseType = value;
            return xhr;
        };
        xhr.response = function (value) {
            response = value;
            return xhr;
        };
        [
            'get',
            'post'
        ].forEach(function (method) {
            xhr[method] = function () {
                return xhr.send.apply(xhr, [method].concat(d3_array(arguments)));
            };
        });
        xhr.send = function (method, data, callback) {
            if (arguments.length === 2 && typeof data === 'function')
                callback = data, data = null;
            request.open(method, url, true);
            if (mimeType != null && !('accept' in headers))
                headers['accept'] = mimeType + ',*/*';
            if (request.setRequestHeader)
                for (var name in headers)
                    request.setRequestHeader(name, headers[name]);
            if (mimeType != null && request.overrideMimeType)
                request.overrideMimeType(mimeType);
            if (responseType != null)
                request.responseType = responseType;
            if (callback != null)
                xhr.on('error', callback).on('load', function (request) {
                    callback(null, request);
                });
            dispatch.beforesend.call(xhr, request);
            request.send(data == null ? null : data);
            return xhr;
        };
        xhr.abort = function () {
            request.abort();
            return xhr;
        };
        d3.rebind(xhr, dispatch, 'on');
        return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
    }
    function d3_xhr_fixCallback(callback) {
        return callback.length === 1 ? function (error, request) {
            callback(error == null ? request : null);
        } : callback;
    }
    function d3_xhrHasResponse(request) {
        var type = request.responseType;
        return type && type !== 'text' ? request.response : request.responseText;
    }
    d3.dsv = function (delimiter, mimeType) {
        var reFormat = new RegExp('["' + delimiter + '\n]'), delimiterCode = delimiter.charCodeAt(0);
        function dsv(url, row, callback) {
            if (arguments.length < 3)
                callback = row, row = null;
            var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
            xhr.row = function (_) {
                return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
            };
            return xhr;
        }
        function response(request) {
            return dsv.parse(request.responseText);
        }
        function typedResponse(f) {
            return function (request) {
                return dsv.parse(request.responseText, f);
            };
        }
        dsv.parse = function (text, f) {
            var o;
            return dsv.parseRows(text, function (row, i) {
                if (o)
                    return o(row, i - 1);
                var a = new Function('d', 'return {' + row.map(function (name, i) {
                    return JSON.stringify(name) + ': d[' + i + ']';
                }).join(',') + '}');
                o = f ? function (row, i) {
                    return f(a(row), i);
                } : a;
            });
        };
        dsv.parseRows = function (text, f) {
            var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
            function token() {
                if (I >= N)
                    return EOF;
                if (eol)
                    return eol = false, EOL;
                var j = I;
                if (text.charCodeAt(j) === 34) {
                    var i = j;
                    while (i++ < N) {
                        if (text.charCodeAt(i) === 34) {
                            if (text.charCodeAt(i + 1) !== 34)
                                break;
                            ++i;
                        }
                    }
                    I = i + 2;
                    var c = text.charCodeAt(i + 1);
                    if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(i + 2) === 10)
                            ++I;
                    } else if (c === 10) {
                        eol = true;
                    }
                    return text.slice(j + 1, i).replace(/""/g, '"');
                }
                while (I < N) {
                    var c = text.charCodeAt(I++), k = 1;
                    if (c === 10)
                        eol = true;
                    else if (c === 13) {
                        eol = true;
                        if (text.charCodeAt(I) === 10)
                            ++I, ++k;
                    } else if (c !== delimiterCode)
                        continue;
                    return text.slice(j, I - k);
                }
                return text.slice(j);
            }
            while ((t = token()) !== EOF) {
                var a = [];
                while (t !== EOL && t !== EOF) {
                    a.push(t);
                    t = token();
                }
                if (f && (a = f(a, n++)) == null)
                    continue;
                rows.push(a);
            }
            return rows;
        };
        dsv.format = function (rows) {
            if (Array.isArray(rows[0]))
                return dsv.formatRows(rows);
            var fieldSet = new d3_Set(), fields = [];
            rows.forEach(function (row) {
                for (var field in row) {
                    if (!fieldSet.has(field)) {
                        fields.push(fieldSet.add(field));
                    }
                }
            });
            return [fields.map(formatValue).join(delimiter)].concat(rows.map(function (row) {
                return fields.map(function (field) {
                    return formatValue(row[field]);
                }).join(delimiter);
            })).join('\n');
        };
        dsv.formatRows = function (rows) {
            return rows.map(formatRow).join('\n');
        };
        function formatRow(row) {
            return row.map(formatValue).join(delimiter);
        }
        function formatValue(text) {
            return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
        }
        return dsv;
    };
    d3.csv = d3.dsv(',', 'text/csv');
    d3.tsv = d3.dsv('\t', 'text/tab-separated-values');
    var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, 'requestAnimationFrame')] || function (callback) {
            setTimeout(callback, 17);
        };
    d3.timer = function () {
        d3_timer.apply(this, arguments);
    };
    function d3_timer(callback, delay, then) {
        var n = arguments.length;
        if (n < 2)
            delay = 0;
        if (n < 3)
            then = Date.now();
        var time = then + delay, timer = {
                c: callback,
                t: time,
                n: null
            };
        if (d3_timer_queueTail)
            d3_timer_queueTail.n = timer;
        else
            d3_timer_queueHead = timer;
        d3_timer_queueTail = timer;
        if (!d3_timer_interval) {
            d3_timer_timeout = clearTimeout(d3_timer_timeout);
            d3_timer_interval = 1;
            d3_timer_frame(d3_timer_step);
        }
        return timer;
    }
    function d3_timer_step() {
        var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
        if (delay > 24) {
            if (isFinite(delay)) {
                clearTimeout(d3_timer_timeout);
                d3_timer_timeout = setTimeout(d3_timer_step, delay);
            }
            d3_timer_interval = 0;
        } else {
            d3_timer_interval = 1;
            d3_timer_frame(d3_timer_step);
        }
    }
    d3.timer.flush = function () {
        d3_timer_mark();
        d3_timer_sweep();
    };
    function d3_timer_mark() {
        var now = Date.now(), timer = d3_timer_queueHead;
        while (timer) {
            if (now >= timer.t && timer.c(now - timer.t))
                timer.c = null;
            timer = timer.n;
        }
        return now;
    }
    function d3_timer_sweep() {
        var t0, t1 = d3_timer_queueHead, time = Infinity;
        while (t1) {
            if (t1.c) {
                if (t1.t < time)
                    time = t1.t;
                t1 = (t0 = t1).n;
            } else {
                t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
            }
        }
        d3_timer_queueTail = t0;
        return time;
    }
    function d3_format_precision(x, p) {
        return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
    }
    d3.round = function (x, n) {
        return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
    };
    var d3_formatPrefixes = [
        'y',
        'z',
        'a',
        'f',
        'p',
        'n',
        'µ',
        'm',
        '',
        'k',
        'M',
        'G',
        'T',
        'P',
        'E',
        'Z',
        'Y'
    ].map(d3_formatPrefix);
    d3.formatPrefix = function (value, precision) {
        var i = 0;
        if (value = +value) {
            if (value < 0)
                value *= -1;
            if (precision)
                value = d3.round(value, d3_format_precision(value, precision));
            i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
            i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
        }
        return d3_formatPrefixes[8 + i / 3];
    };
    function d3_formatPrefix(d, i) {
        var k = Math.pow(10, abs(8 - i) * 3);
        return {
            scale: i > 8 ? function (d) {
                return d / k;
            } : function (d) {
                return d * k;
            },
            symbol: d
        };
    }
    function d3_locale_numberFormat(locale) {
        var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function (value, width) {
                var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
                while (i > 0 && g > 0) {
                    if (length + g + 1 > width)
                        g = Math.max(1, width - length);
                    t.push(value.substring(i -= g, i + g));
                    if ((length += g + 1) > width)
                        break;
                    g = locale_grouping[j = (j + 1) % locale_grouping.length];
                }
                return t.reverse().join(locale_thousands);
            } : d3_identity;
        return function (specifier) {
            var match = d3_format_re.exec(specifier), fill = match[1] || ' ', align = match[2] || '>', sign = match[3] || '-', symbol = match[4] || '', zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = '', suffix = '', integer = false, exponent = true;
            if (precision)
                precision = +precision.substring(1);
            if (zfill || fill === '0' && align === '=') {
                zfill = fill = '0';
                align = '=';
            }
            switch (type) {
            case 'n':
                comma = true;
                type = 'g';
                break;
            case '%':
                scale = 100;
                suffix = '%';
                type = 'f';
                break;
            case 'p':
                scale = 100;
                suffix = '%';
                type = 'r';
                break;
            case 'b':
            case 'o':
            case 'x':
            case 'X':
                if (symbol === '#')
                    prefix = '0' + type.toLowerCase();
            case 'c':
                exponent = false;
            case 'd':
                integer = true;
                precision = 0;
                break;
            case 's':
                scale = -1;
                type = 'r';
                break;
            }
            if (symbol === '$')
                prefix = locale_currency[0], suffix = locale_currency[1];
            if (type == 'r' && !precision)
                type = 'g';
            if (precision != null) {
                if (type == 'g')
                    precision = Math.max(1, Math.min(21, precision));
                else if (type == 'e' || type == 'f')
                    precision = Math.max(0, Math.min(20, precision));
            }
            type = d3_format_types.get(type) || d3_format_typeDefault;
            var zcomma = zfill && comma;
            return function (value) {
                var fullSuffix = suffix;
                if (integer && value % 1)
                    return '';
                var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, '-') : sign === '-' ? '' : sign;
                if (scale < 0) {
                    var unit = d3.formatPrefix(value, precision);
                    value = unit.scale(value);
                    fullSuffix = unit.symbol + suffix;
                } else {
                    value *= scale;
                }
                value = type(value, precision);
                var i = value.lastIndexOf('.'), before, after;
                if (i < 0) {
                    var j = exponent ? value.lastIndexOf('e') : -1;
                    if (j < 0)
                        before = value, after = '';
                    else
                        before = value.substring(0, j), after = value.substring(j);
                } else {
                    before = value.substring(0, i);
                    after = locale_decimal + value.substring(i + 1);
                }
                if (!zfill && comma)
                    before = formatGroup(before, Infinity);
                var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : '';
                if (zcomma)
                    before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
                negative += prefix;
                value = before + after;
                return (align === '<' ? negative + value + padding : align === '>' ? padding + negative + value : align === '^' ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
            };
        };
    }
    var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
    var d3_format_types = d3.map({
        b: function (x) {
            return x.toString(2);
        },
        c: function (x) {
            return String.fromCharCode(x);
        },
        o: function (x) {
            return x.toString(8);
        },
        x: function (x) {
            return x.toString(16);
        },
        X: function (x) {
            return x.toString(16).toUpperCase();
        },
        g: function (x, p) {
            return x.toPrecision(p);
        },
        e: function (x, p) {
            return x.toExponential(p);
        },
        f: function (x, p) {
            return x.toFixed(p);
        },
        r: function (x, p) {
            return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
        }
    });
    function d3_format_typeDefault(x) {
        return x + '';
    }
    var d3_time = d3.time = {}, d3_date = Date;
    function d3_date_utc() {
        this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
    }
    d3_date_utc.prototype = {
        getDate: function () {
            return this._.getUTCDate();
        },
        getDay: function () {
            return this._.getUTCDay();
        },
        getFullYear: function () {
            return this._.getUTCFullYear();
        },
        getHours: function () {
            return this._.getUTCHours();
        },
        getMilliseconds: function () {
            return this._.getUTCMilliseconds();
        },
        getMinutes: function () {
            return this._.getUTCMinutes();
        },
        getMonth: function () {
            return this._.getUTCMonth();
        },
        getSeconds: function () {
            return this._.getUTCSeconds();
        },
        getTime: function () {
            return this._.getTime();
        },
        getTimezoneOffset: function () {
            return 0;
        },
        valueOf: function () {
            return this._.valueOf();
        },
        setDate: function () {
            d3_time_prototype.setUTCDate.apply(this._, arguments);
        },
        setDay: function () {
            d3_time_prototype.setUTCDay.apply(this._, arguments);
        },
        setFullYear: function () {
            d3_time_prototype.setUTCFullYear.apply(this._, arguments);
        },
        setHours: function () {
            d3_time_prototype.setUTCHours.apply(this._, arguments);
        },
        setMilliseconds: function () {
            d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
        },
        setMinutes: function () {
            d3_time_prototype.setUTCMinutes.apply(this._, arguments);
        },
        setMonth: function () {
            d3_time_prototype.setUTCMonth.apply(this._, arguments);
        },
        setSeconds: function () {
            d3_time_prototype.setUTCSeconds.apply(this._, arguments);
        },
        setTime: function () {
            d3_time_prototype.setTime.apply(this._, arguments);
        }
    };
    var d3_time_prototype = Date.prototype;
    function d3_time_interval(local, step, number) {
        function round(date) {
            var d0 = local(date), d1 = offset(d0, 1);
            return date - d0 < d1 - date ? d0 : d1;
        }
        function ceil(date) {
            step(date = local(new d3_date(date - 1)), 1);
            return date;
        }
        function offset(date, k) {
            step(date = new d3_date(+date), k);
            return date;
        }
        function range(t0, t1, dt) {
            var time = ceil(t0), times = [];
            if (dt > 1) {
                while (time < t1) {
                    if (!(number(time) % dt))
                        times.push(new Date(+time));
                    step(time, 1);
                }
            } else {
                while (time < t1)
                    times.push(new Date(+time)), step(time, 1);
            }
            return times;
        }
        function range_utc(t0, t1, dt) {
            try {
                d3_date = d3_date_utc;
                var utc = new d3_date_utc();
                utc._ = t0;
                return range(utc, t1, dt);
            } finally {
                d3_date = Date;
            }
        }
        local.floor = local;
        local.round = round;
        local.ceil = ceil;
        local.offset = offset;
        local.range = range;
        var utc = local.utc = d3_time_interval_utc(local);
        utc.floor = utc;
        utc.round = d3_time_interval_utc(round);
        utc.ceil = d3_time_interval_utc(ceil);
        utc.offset = d3_time_interval_utc(offset);
        utc.range = range_utc;
        return local;
    }
    function d3_time_interval_utc(method) {
        return function (date, k) {
            try {
                d3_date = d3_date_utc;
                var utc = new d3_date_utc();
                utc._ = date;
                return method(utc, k)._;
            } finally {
                d3_date = Date;
            }
        };
    }
    d3_time.year = d3_time_interval(function (date) {
        date = d3_time.day(date);
        date.setMonth(0, 1);
        return date;
    }, function (date, offset) {
        date.setFullYear(date.getFullYear() + offset);
    }, function (date) {
        return date.getFullYear();
    });
    d3_time.years = d3_time.year.range;
    d3_time.years.utc = d3_time.year.utc.range;
    d3_time.day = d3_time_interval(function (date) {
        var day = new d3_date(2000, 0);
        day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
        return day;
    }, function (date, offset) {
        date.setDate(date.getDate() + offset);
    }, function (date) {
        return date.getDate() - 1;
    });
    d3_time.days = d3_time.day.range;
    d3_time.days.utc = d3_time.day.utc.range;
    d3_time.dayOfYear = function (date) {
        var year = d3_time.year(date);
        return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 60000) / 86400000);
    };
    [
        'sunday',
        'monday',
        'tuesday',
        'wednesday',
        'thursday',
        'friday',
        'saturday'
    ].forEach(function (day, i) {
        i = 7 - i;
        var interval = d3_time[day] = d3_time_interval(function (date) {
            (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
            return date;
        }, function (date, offset) {
            date.setDate(date.getDate() + Math.floor(offset) * 7);
        }, function (date) {
            var day = d3_time.year(date).getDay();
            return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
        });
        d3_time[day + 's'] = interval.range;
        d3_time[day + 's'].utc = interval.utc.range;
        d3_time[day + 'OfYear'] = function (date) {
            var day = d3_time.year(date).getDay();
            return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
        };
    });
    d3_time.week = d3_time.sunday;
    d3_time.weeks = d3_time.sunday.range;
    d3_time.weeks.utc = d3_time.sunday.utc.range;
    d3_time.weekOfYear = d3_time.sundayOfYear;
    function d3_locale_timeFormat(locale) {
        var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
        function d3_time_format(template) {
            var n = template.length;
            function format(date) {
                var string = [], i = -1, j = 0, c, p, f;
                while (++i < n) {
                    if (template.charCodeAt(i) === 37) {
                        string.push(template.slice(j, i));
                        if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null)
                            c = template.charAt(++i);
                        if (f = d3_time_formats[c])
                            c = f(date, p == null ? c === 'e' ? ' ' : '0' : p);
                        string.push(c);
                        j = i + 1;
                    }
                }
                string.push(template.slice(j, i));
                return string.join('');
            }
            format.parse = function (string) {
                var d = {
                        y: 1900,
                        m: 0,
                        d: 1,
                        H: 0,
                        M: 0,
                        S: 0,
                        L: 0,
                        Z: null
                    }, i = d3_time_parse(d, template, string, 0);
                if (i != string.length)
                    return null;
                if ('p' in d)
                    d.H = d.H % 12 + d.p * 12;
                var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
                if ('j' in d)
                    date.setFullYear(d.y, 0, d.j);
                else if ('W' in d || 'U' in d) {
                    if (!('w' in d))
                        d.w = 'W' in d ? 1 : 0;
                    date.setFullYear(d.y, 0, 1);
                    date.setFullYear(d.y, 0, 'W' in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
                } else
                    date.setFullYear(d.y, d.m, d.d);
                date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
                return localZ ? date._ : date;
            };
            format.toString = function () {
                return template;
            };
            return format;
        }
        function d3_time_parse(date, template, string, j) {
            var c, p, t, i = 0, n = template.length, m = string.length;
            while (i < n) {
                if (j >= m)
                    return -1;
                c = template.charCodeAt(i++);
                if (c === 37) {
                    t = template.charAt(i++);
                    p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
                    if (!p || (j = p(date, string, j)) < 0)
                        return -1;
                } else if (c != string.charCodeAt(j++)) {
                    return -1;
                }
            }
            return j;
        }
        d3_time_format.utc = function (template) {
            var local = d3_time_format(template);
            function format(date) {
                try {
                    d3_date = d3_date_utc;
                    var utc = new d3_date();
                    utc._ = date;
                    return local(utc);
                } finally {
                    d3_date = Date;
                }
            }
            format.parse = function (string) {
                try {
                    d3_date = d3_date_utc;
                    var date = local.parse(string);
                    return date && date._;
                } finally {
                    d3_date = Date;
                }
            };
            format.toString = local.toString;
            return format;
        };
        d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
        var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
        locale_periods.forEach(function (p, i) {
            d3_time_periodLookup.set(p.toLowerCase(), i);
        });
        var d3_time_formats = {
            a: function (d) {
                return locale_shortDays[d.getDay()];
            },
            A: function (d) {
                return locale_days[d.getDay()];
            },
            b: function (d) {
                return locale_shortMonths[d.getMonth()];
            },
            B: function (d) {
                return locale_months[d.getMonth()];
            },
            c: d3_time_format(locale_dateTime),
            d: function (d, p) {
                return d3_time_formatPad(d.getDate(), p, 2);
            },
            e: function (d, p) {
                return d3_time_formatPad(d.getDate(), p, 2);
            },
            H: function (d, p) {
                return d3_time_formatPad(d.getHours(), p, 2);
            },
            I: function (d, p) {
                return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
            },
            j: function (d, p) {
                return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
            },
            L: function (d, p) {
                return d3_time_formatPad(d.getMilliseconds(), p, 3);
            },
            m: function (d, p) {
                return d3_time_formatPad(d.getMonth() + 1, p, 2);
            },
            M: function (d, p) {
                return d3_time_formatPad(d.getMinutes(), p, 2);
            },
            p: function (d) {
                return locale_periods[+(d.getHours() >= 12)];
            },
            S: function (d, p) {
                return d3_time_formatPad(d.getSeconds(), p, 2);
            },
            U: function (d, p) {
                return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
            },
            w: function (d) {
                return d.getDay();
            },
            W: function (d, p) {
                return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
            },
            x: d3_time_format(locale_date),
            X: d3_time_format(locale_time),
            y: function (d, p) {
                return d3_time_formatPad(d.getFullYear() % 100, p, 2);
            },
            Y: function (d, p) {
                return d3_time_formatPad(d.getFullYear() % 10000, p, 4);
            },
            Z: d3_time_zone,
            '%': function () {
                return '%';
            }
        };
        var d3_time_parsers = {
            a: d3_time_parseWeekdayAbbrev,
            A: d3_time_parseWeekday,
            b: d3_time_parseMonthAbbrev,
            B: d3_time_parseMonth,
            c: d3_time_parseLocaleFull,
            d: d3_time_parseDay,
            e: d3_time_parseDay,
            H: d3_time_parseHour24,
            I: d3_time_parseHour24,
            j: d3_time_parseDayOfYear,
            L: d3_time_parseMilliseconds,
            m: d3_time_parseMonthNumber,
            M: d3_time_parseMinutes,
            p: d3_time_parseAmPm,
            S: d3_time_parseSeconds,
            U: d3_time_parseWeekNumberSunday,
            w: d3_time_parseWeekdayNumber,
            W: d3_time_parseWeekNumberMonday,
            x: d3_time_parseLocaleDate,
            X: d3_time_parseLocaleTime,
            y: d3_time_parseYear,
            Y: d3_time_parseFullYear,
            Z: d3_time_parseZone,
            '%': d3_time_parseLiteralPercent
        };
        function d3_time_parseWeekdayAbbrev(date, string, i) {
            d3_time_dayAbbrevRe.lastIndex = 0;
            var n = d3_time_dayAbbrevRe.exec(string.slice(i));
            return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseWeekday(date, string, i) {
            d3_time_dayRe.lastIndex = 0;
            var n = d3_time_dayRe.exec(string.slice(i));
            return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseMonthAbbrev(date, string, i) {
            d3_time_monthAbbrevRe.lastIndex = 0;
            var n = d3_time_monthAbbrevRe.exec(string.slice(i));
            return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseMonth(date, string, i) {
            d3_time_monthRe.lastIndex = 0;
            var n = d3_time_monthRe.exec(string.slice(i));
            return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
        }
        function d3_time_parseLocaleFull(date, string, i) {
            return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
        }
        function d3_time_parseLocaleDate(date, string, i) {
            return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
        }
        function d3_time_parseLocaleTime(date, string, i) {
            return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
        }
        function d3_time_parseAmPm(date, string, i) {
            var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
            return n == null ? -1 : (date.p = n, i);
        }
        return d3_time_format;
    }
    var d3_time_formatPads = {
            '-': '',
            _: ' ',
            '0': '0'
        }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
    function d3_time_formatPad(value, fill, width) {
        var sign = value < 0 ? '-' : '', string = (sign ? -value : value) + '', length = string.length;
        return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }
    function d3_time_formatRe(names) {
        return new RegExp('^(?:' + names.map(d3.requote).join('|') + ')', 'i');
    }
    function d3_time_formatLookup(names) {
        var map = new d3_Map(), i = -1, n = names.length;
        while (++i < n)
            map.set(names[i].toLowerCase(), i);
        return map;
    }
    function d3_time_parseWeekdayNumber(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 1));
        return n ? (date.w = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseWeekNumberSunday(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i));
        return n ? (date.U = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseWeekNumberMonday(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i));
        return n ? (date.W = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseFullYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 4));
        return n ? (date.y = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
    }
    function d3_time_parseZone(date, string, i) {
        return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, i + 5) : -1;
    }
    function d3_time_expandYear(d) {
        return d + (d > 68 ? 1900 : 2000);
    }
    function d3_time_parseMonthNumber(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
    }
    function d3_time_parseDay(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.d = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseDayOfYear(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 3));
        return n ? (date.j = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseHour24(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.H = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseMinutes(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.M = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseSeconds(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 2));
        return n ? (date.S = +n[0], i + n[0].length) : -1;
    }
    function d3_time_parseMilliseconds(date, string, i) {
        d3_time_numberRe.lastIndex = 0;
        var n = d3_time_numberRe.exec(string.slice(i, i + 3));
        return n ? (date.L = +n[0], i + n[0].length) : -1;
    }
    function d3_time_zone(d) {
        var z = d.getTimezoneOffset(), zs = z > 0 ? '-' : '+', zh = abs(z) / 60 | 0, zm = abs(z) % 60;
        return zs + d3_time_formatPad(zh, '0', 2) + d3_time_formatPad(zm, '0', 2);
    }
    function d3_time_parseLiteralPercent(date, string, i) {
        d3_time_percentRe.lastIndex = 0;
        var n = d3_time_percentRe.exec(string.slice(i, i + 1));
        return n ? i + n[0].length : -1;
    }
    function d3_time_formatMulti(formats) {
        var n = formats.length, i = -1;
        while (++i < n)
            formats[i][0] = this(formats[i][0]);
        return function (date) {
            var i = 0, f = formats[i];
            while (!f[1](date))
                f = formats[++i];
            return f[0](date);
        };
    }
    d3.locale = function (locale) {
        return {
            numberFormat: d3_locale_numberFormat(locale),
            timeFormat: d3_locale_timeFormat(locale)
        };
    };
    var d3_locale_enUS = d3.locale({
        decimal: '.',
        thousands: ',',
        grouping: [3],
        currency: [
            '$',
            ''
        ],
        dateTime: '%a %b %e %X %Y',
        date: '%m/%d/%Y',
        time: '%H:%M:%S',
        periods: [
            'AM',
            'PM'
        ],
        days: [
            'Sunday',
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
            'Saturday'
        ],
        shortDays: [
            'Sun',
            'Mon',
            'Tue',
            'Wed',
            'Thu',
            'Fri',
            'Sat'
        ],
        months: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ],
        shortMonths: [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec'
        ]
    });
    d3.format = d3_locale_enUS.numberFormat;
    d3.geo = {};
    function d3_adder() {
    }
    d3_adder.prototype = {
        s: 0,
        t: 0,
        add: function (y) {
            d3_adderSum(y, this.t, d3_adderTemp);
            d3_adderSum(d3_adderTemp.s, this.s, this);
            if (this.s)
                this.t += d3_adderTemp.t;
            else
                this.s = d3_adderTemp.t;
        },
        reset: function () {
            this.s = this.t = 0;
        },
        valueOf: function () {
            return this.s;
        }
    };
    var d3_adderTemp = new d3_adder();
    function d3_adderSum(a, b, o) {
        var x = o.s = a + b, bv = x - a, av = x - bv;
        o.t = a - av + (b - bv);
    }
    d3.geo.stream = function (object, listener) {
        if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
            d3_geo_streamObjectType[object.type](object, listener);
        } else {
            d3_geo_streamGeometry(object, listener);
        }
    };
    function d3_geo_streamGeometry(geometry, listener) {
        if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
            d3_geo_streamGeometryType[geometry.type](geometry, listener);
        }
    }
    var d3_geo_streamObjectType = {
        Feature: function (feature, listener) {
            d3_geo_streamGeometry(feature.geometry, listener);
        },
        FeatureCollection: function (object, listener) {
            var features = object.features, i = -1, n = features.length;
            while (++i < n)
                d3_geo_streamGeometry(features[i].geometry, listener);
        }
    };
    var d3_geo_streamGeometryType = {
        Sphere: function (object, listener) {
            listener.sphere();
        },
        Point: function (object, listener) {
            object = object.coordinates;
            listener.point(object[0], object[1], object[2]);
        },
        MultiPoint: function (object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n)
                object = coordinates[i], listener.point(object[0], object[1], object[2]);
        },
        LineString: function (object, listener) {
            d3_geo_streamLine(object.coordinates, listener, 0);
        },
        MultiLineString: function (object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n)
                d3_geo_streamLine(coordinates[i], listener, 0);
        },
        Polygon: function (object, listener) {
            d3_geo_streamPolygon(object.coordinates, listener);
        },
        MultiPolygon: function (object, listener) {
            var coordinates = object.coordinates, i = -1, n = coordinates.length;
            while (++i < n)
                d3_geo_streamPolygon(coordinates[i], listener);
        },
        GeometryCollection: function (object, listener) {
            var geometries = object.geometries, i = -1, n = geometries.length;
            while (++i < n)
                d3_geo_streamGeometry(geometries[i], listener);
        }
    };
    function d3_geo_streamLine(coordinates, listener, closed) {
        var i = -1, n = coordinates.length - closed, coordinate;
        listener.lineStart();
        while (++i < n)
            coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
        listener.lineEnd();
    }
    function d3_geo_streamPolygon(coordinates, listener) {
        var i = -1, n = coordinates.length;
        listener.polygonStart();
        while (++i < n)
            d3_geo_streamLine(coordinates[i], listener, 1);
        listener.polygonEnd();
    }
    d3.geo.area = function (object) {
        d3_geo_areaSum = 0;
        d3.geo.stream(object, d3_geo_area);
        return d3_geo_areaSum;
    };
    var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
    var d3_geo_area = {
        sphere: function () {
            d3_geo_areaSum += 4 * π;
        },
        point: d3_noop,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: function () {
            d3_geo_areaRingSum.reset();
            d3_geo_area.lineStart = d3_geo_areaRingStart;
        },
        polygonEnd: function () {
            var area = 2 * d3_geo_areaRingSum;
            d3_geo_areaSum += area < 0 ? 4 * π + area : area;
            d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
        }
    };
    function d3_geo_areaRingStart() {
        var λ00, φ00, λ0, cosφ0, sinφ0;
        d3_geo_area.point = function (λ, φ) {
            d3_geo_area.point = nextPoint;
            λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), sinφ0 = Math.sin(φ);
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            φ = φ * d3_radians / 2 + π / 4;
            var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
            d3_geo_areaRingSum.add(Math.atan2(v, u));
            λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
        }
        d3_geo_area.lineEnd = function () {
            nextPoint(λ00, φ00);
        };
    }
    function d3_geo_cartesian(spherical) {
        var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
        return [
            cosφ * Math.cos(λ),
            cosφ * Math.sin(λ),
            Math.sin(φ)
        ];
    }
    function d3_geo_cartesianDot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    function d3_geo_cartesianCross(a, b) {
        return [
            a[1] * b[2] - a[2] * b[1],
            a[2] * b[0] - a[0] * b[2],
            a[0] * b[1] - a[1] * b[0]
        ];
    }
    function d3_geo_cartesianAdd(a, b) {
        a[0] += b[0];
        a[1] += b[1];
        a[2] += b[2];
    }
    function d3_geo_cartesianScale(vector, k) {
        return [
            vector[0] * k,
            vector[1] * k,
            vector[2] * k
        ];
    }
    function d3_geo_cartesianNormalize(d) {
        var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
        d[0] /= l;
        d[1] /= l;
        d[2] /= l;
    }
    function d3_geo_spherical(cartesian) {
        return [
            Math.atan2(cartesian[1], cartesian[0]),
            d3_asin(cartesian[2])
        ];
    }
    function d3_geo_sphericalEqual(a, b) {
        return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
    }
    d3.geo.bounds = function () {
        var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
        var bound = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function () {
                bound.point = ringPoint;
                bound.lineStart = ringStart;
                bound.lineEnd = ringEnd;
                dλSum = 0;
                d3_geo_area.polygonStart();
            },
            polygonEnd: function () {
                d3_geo_area.polygonEnd();
                bound.point = point;
                bound.lineStart = lineStart;
                bound.lineEnd = lineEnd;
                if (d3_geo_areaRingSum < 0)
                    λ0 = -(λ1 = 180), φ0 = -(φ1 = 90);
                else if (dλSum > ε)
                    φ1 = 90;
                else if (dλSum < -ε)
                    φ0 = -90;
                range[0] = λ0, range[1] = λ1;
            }
        };
        function point(λ, φ) {
            ranges.push(range = [
                λ0 = λ,
                λ1 = λ
            ]);
            if (φ < φ0)
                φ0 = φ;
            if (φ > φ1)
                φ1 = φ;
        }
        function linePoint(λ, φ) {
            var p = d3_geo_cartesian([
                λ * d3_radians,
                φ * d3_radians
            ]);
            if (p0) {
                var normal = d3_geo_cartesianCross(p0, p), equatorial = [
                        normal[1],
                        -normal[0],
                        0
                    ], inflection = d3_geo_cartesianCross(equatorial, normal);
                d3_geo_cartesianNormalize(inflection);
                inflection = d3_geo_spherical(inflection);
                var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
                if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
                    var φi = inflection[1] * d3_degrees;
                    if (φi > φ1)
                        φ1 = φi;
                } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
                    var φi = -inflection[1] * d3_degrees;
                    if (φi < φ0)
                        φ0 = φi;
                } else {
                    if (φ < φ0)
                        φ0 = φ;
                    if (φ > φ1)
                        φ1 = φ;
                }
                if (antimeridian) {
                    if (λ < λ_) {
                        if (angle(λ0, λ) > angle(λ0, λ1))
                            λ1 = λ;
                    } else {
                        if (angle(λ, λ1) > angle(λ0, λ1))
                            λ0 = λ;
                    }
                } else {
                    if (λ1 >= λ0) {
                        if (λ < λ0)
                            λ0 = λ;
                        if (λ > λ1)
                            λ1 = λ;
                    } else {
                        if (λ > λ_) {
                            if (angle(λ0, λ) > angle(λ0, λ1))
                                λ1 = λ;
                        } else {
                            if (angle(λ, λ1) > angle(λ0, λ1))
                                λ0 = λ;
                        }
                    }
                }
            } else {
                point(λ, φ);
            }
            p0 = p, λ_ = λ;
        }
        function lineStart() {
            bound.point = linePoint;
        }
        function lineEnd() {
            range[0] = λ0, range[1] = λ1;
            bound.point = point;
            p0 = null;
        }
        function ringPoint(λ, φ) {
            if (p0) {
                var dλ = λ - λ_;
                dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
            } else
                λ__ = λ, φ__ = φ;
            d3_geo_area.point(λ, φ);
            linePoint(λ, φ);
        }
        function ringStart() {
            d3_geo_area.lineStart();
        }
        function ringEnd() {
            ringPoint(λ__, φ__);
            d3_geo_area.lineEnd();
            if (abs(dλSum) > ε)
                λ0 = -(λ1 = 180);
            range[0] = λ0, range[1] = λ1;
            p0 = null;
        }
        function angle(λ0, λ1) {
            return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
        }
        function compareRanges(a, b) {
            return a[0] - b[0];
        }
        function withinRange(x, range) {
            return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
        }
        return function (feature) {
            φ1 = λ1 = -(λ0 = φ0 = Infinity);
            ranges = [];
            d3.geo.stream(feature, bound);
            var n = ranges.length;
            if (n) {
                ranges.sort(compareRanges);
                for (var i = 1, a = ranges[0], b, merged = [a]; i < n; ++i) {
                    b = ranges[i];
                    if (withinRange(b[0], a) || withinRange(b[1], a)) {
                        if (angle(a[0], b[1]) > angle(a[0], a[1]))
                            a[1] = b[1];
                        if (angle(b[0], a[1]) > angle(a[0], a[1]))
                            a[0] = b[0];
                    } else {
                        merged.push(a = b);
                    }
                }
                var best = -Infinity, dλ;
                for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
                    b = merged[i];
                    if ((dλ = angle(a[1], b[0])) > best)
                        best = dλ, λ0 = b[0], λ1 = a[1];
                }
            }
            ranges = range = null;
            return λ0 === Infinity || φ0 === Infinity ? [
                [
                    NaN,
                    NaN
                ],
                [
                    NaN,
                    NaN
                ]
            ] : [
                [
                    λ0,
                    φ0
                ],
                [
                    λ1,
                    φ1
                ]
            ];
        };
    }();
    d3.geo.centroid = function (object) {
        d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
        d3.geo.stream(object, d3_geo_centroid);
        var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
        if (m < ε2) {
            x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
            if (d3_geo_centroidW1 < ε)
                x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
            m = x * x + y * y + z * z;
            if (m < ε2)
                return [
                    NaN,
                    NaN
                ];
        }
        return [
            Math.atan2(y, x) * d3_degrees,
            d3_asin(z / Math.sqrt(m)) * d3_degrees
        ];
    };
    var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
    var d3_geo_centroid = {
        sphere: d3_noop,
        point: d3_geo_centroidPoint,
        lineStart: d3_geo_centroidLineStart,
        lineEnd: d3_geo_centroidLineEnd,
        polygonStart: function () {
            d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
        },
        polygonEnd: function () {
            d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
        }
    };
    function d3_geo_centroidPoint(λ, φ) {
        λ *= d3_radians;
        var cosφ = Math.cos(φ *= d3_radians);
        d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
    }
    function d3_geo_centroidPointXYZ(x, y, z) {
        ++d3_geo_centroidW0;
        d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
        d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
        d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
    }
    function d3_geo_centroidLineStart() {
        var x0, y0, z0;
        d3_geo_centroid.point = function (λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians);
            x0 = cosφ * Math.cos(λ);
            y0 = cosφ * Math.sin(λ);
            z0 = Math.sin(φ);
            d3_geo_centroid.point = nextPoint;
            d3_geo_centroidPointXYZ(x0, y0, z0);
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
            d3_geo_centroidW1 += w;
            d3_geo_centroidX1 += w * (x0 + (x0 = x));
            d3_geo_centroidY1 += w * (y0 + (y0 = y));
            d3_geo_centroidZ1 += w * (z0 + (z0 = z));
            d3_geo_centroidPointXYZ(x0, y0, z0);
        }
    }
    function d3_geo_centroidLineEnd() {
        d3_geo_centroid.point = d3_geo_centroidPoint;
    }
    function d3_geo_centroidRingStart() {
        var λ00, φ00, x0, y0, z0;
        d3_geo_centroid.point = function (λ, φ) {
            λ00 = λ, φ00 = φ;
            d3_geo_centroid.point = nextPoint;
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians);
            x0 = cosφ * Math.cos(λ);
            y0 = cosφ * Math.sin(λ);
            z0 = Math.sin(φ);
            d3_geo_centroidPointXYZ(x0, y0, z0);
        };
        d3_geo_centroid.lineEnd = function () {
            nextPoint(λ00, φ00);
            d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
            d3_geo_centroid.point = d3_geo_centroidPoint;
        };
        function nextPoint(λ, φ) {
            λ *= d3_radians;
            var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
            d3_geo_centroidX2 += v * cx;
            d3_geo_centroidY2 += v * cy;
            d3_geo_centroidZ2 += v * cz;
            d3_geo_centroidW1 += w;
            d3_geo_centroidX1 += w * (x0 + (x0 = x));
            d3_geo_centroidY1 += w * (y0 + (y0 = y));
            d3_geo_centroidZ1 += w * (z0 + (z0 = z));
            d3_geo_centroidPointXYZ(x0, y0, z0);
        }
    }
    function d3_geo_compose(a, b) {
        function compose(x, y) {
            return x = a(x, y), b(x[0], x[1]);
        }
        if (a.invert && b.invert)
            compose.invert = function (x, y) {
                return x = b.invert(x, y), x && a.invert(x[0], x[1]);
            };
        return compose;
    }
    function d3_true() {
        return true;
    }
    function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
        var subject = [], clip = [];
        segments.forEach(function (segment) {
            if ((n = segment.length - 1) <= 0)
                return;
            var n, p0 = segment[0], p1 = segment[n];
            if (d3_geo_sphericalEqual(p0, p1)) {
                listener.lineStart();
                for (var i = 0; i < n; ++i)
                    listener.point((p0 = segment[i])[0], p0[1]);
                listener.lineEnd();
                return;
            }
            var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
            a.o = b;
            subject.push(a);
            clip.push(b);
            a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
            b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
            a.o = b;
            subject.push(a);
            clip.push(b);
        });
        clip.sort(compare);
        d3_geo_clipPolygonLinkCircular(subject);
        d3_geo_clipPolygonLinkCircular(clip);
        if (!subject.length)
            return;
        for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
            clip[i].e = entry = !entry;
        }
        var start = subject[0], points, point;
        while (1) {
            var current = start, isSubject = true;
            while (current.v)
                if ((current = current.n) === start)
                    return;
            points = current.z;
            listener.lineStart();
            do {
                current.v = current.o.v = true;
                if (current.e) {
                    if (isSubject) {
                        for (var i = 0, n = points.length; i < n; ++i)
                            listener.point((point = points[i])[0], point[1]);
                    } else {
                        interpolate(current.x, current.n.x, 1, listener);
                    }
                    current = current.n;
                } else {
                    if (isSubject) {
                        points = current.p.z;
                        for (var i = points.length - 1; i >= 0; --i)
                            listener.point((point = points[i])[0], point[1]);
                    } else {
                        interpolate(current.x, current.p.x, -1, listener);
                    }
                    current = current.p;
                }
                current = current.o;
                points = current.z;
                isSubject = !isSubject;
            } while (!current.v);
            listener.lineEnd();
        }
    }
    function d3_geo_clipPolygonLinkCircular(array) {
        if (!(n = array.length))
            return;
        var n, i = 0, a = array[0], b;
        while (++i < n) {
            a.n = b = array[i];
            b.p = a;
            a = b;
        }
        a.n = b = array[0];
        b.p = a;
    }
    function d3_geo_clipPolygonIntersection(point, points, other, entry) {
        this.x = point;
        this.z = points;
        this.o = other;
        this.e = entry;
        this.v = false;
        this.n = this.p = null;
    }
    function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
        return function (rotate, listener) {
            var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
            var clip = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function () {
                    clip.point = pointRing;
                    clip.lineStart = ringStart;
                    clip.lineEnd = ringEnd;
                    segments = [];
                    polygon = [];
                },
                polygonEnd: function () {
                    clip.point = point;
                    clip.lineStart = lineStart;
                    clip.lineEnd = lineEnd;
                    segments = d3.merge(segments);
                    var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
                    if (segments.length) {
                        if (!polygonStarted)
                            listener.polygonStart(), polygonStarted = true;
                        d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
                    } else if (clipStartInside) {
                        if (!polygonStarted)
                            listener.polygonStart(), polygonStarted = true;
                        listener.lineStart();
                        interpolate(null, null, 1, listener);
                        listener.lineEnd();
                    }
                    if (polygonStarted)
                        listener.polygonEnd(), polygonStarted = false;
                    segments = polygon = null;
                },
                sphere: function () {
                    listener.polygonStart();
                    listener.lineStart();
                    interpolate(null, null, 1, listener);
                    listener.lineEnd();
                    listener.polygonEnd();
                }
            };
            function point(λ, φ) {
                var point = rotate(λ, φ);
                if (pointVisible(λ = point[0], φ = point[1]))
                    listener.point(λ, φ);
            }
            function pointLine(λ, φ) {
                var point = rotate(λ, φ);
                line.point(point[0], point[1]);
            }
            function lineStart() {
                clip.point = pointLine;
                line.lineStart();
            }
            function lineEnd() {
                clip.point = point;
                line.lineEnd();
            }
            var segments;
            var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
            function pointRing(λ, φ) {
                ring.push([
                    λ,
                    φ
                ]);
                var point = rotate(λ, φ);
                ringListener.point(point[0], point[1]);
            }
            function ringStart() {
                ringListener.lineStart();
                ring = [];
            }
            function ringEnd() {
                pointRing(ring[0][0], ring[0][1]);
                ringListener.lineEnd();
                var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
                ring.pop();
                polygon.push(ring);
                ring = null;
                if (!n)
                    return;
                if (clean & 1) {
                    segment = ringSegments[0];
                    var n = segment.length - 1, i = -1, point;
                    if (n > 0) {
                        if (!polygonStarted)
                            listener.polygonStart(), polygonStarted = true;
                        listener.lineStart();
                        while (++i < n)
                            listener.point((point = segment[i])[0], point[1]);
                        listener.lineEnd();
                    }
                    return;
                }
                if (n > 1 && clean & 2)
                    ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
                segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
            }
            return clip;
        };
    }
    function d3_geo_clipSegmentLength1(segment) {
        return segment.length > 1;
    }
    function d3_geo_clipBufferListener() {
        var lines = [], line;
        return {
            lineStart: function () {
                lines.push(line = []);
            },
            point: function (λ, φ) {
                line.push([
                    λ,
                    φ
                ]);
            },
            lineEnd: d3_noop,
            buffer: function () {
                var buffer = lines;
                lines = [];
                line = null;
                return buffer;
            },
            rejoin: function () {
                if (lines.length > 1)
                    lines.push(lines.pop().concat(lines.shift()));
            }
        };
    }
    function d3_geo_clipSort(a, b) {
        return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
    }
    var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [
        -π,
        -π / 2
    ]);
    function d3_geo_clipAntimeridianLine(listener) {
        var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
        return {
            lineStart: function () {
                listener.lineStart();
                clean = 1;
            },
            point: function (λ1, φ1) {
                var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
                if (abs(dλ - π) < ε) {
                    listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
                    listener.point(sλ0, φ0);
                    listener.lineEnd();
                    listener.lineStart();
                    listener.point(sλ1, φ0);
                    listener.point(λ1, φ0);
                    clean = 0;
                } else if (sλ0 !== sλ1 && dλ >= π) {
                    if (abs(λ0 - sλ0) < ε)
                        λ0 -= sλ0 * ε;
                    if (abs(λ1 - sλ1) < ε)
                        λ1 -= sλ1 * ε;
                    φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
                    listener.point(sλ0, φ0);
                    listener.lineEnd();
                    listener.lineStart();
                    listener.point(sλ1, φ0);
                    clean = 0;
                }
                listener.point(λ0 = λ1, φ0 = φ1);
                sλ0 = sλ1;
            },
            lineEnd: function () {
                listener.lineEnd();
                λ0 = φ0 = NaN;
            },
            clean: function () {
                return 2 - clean;
            }
        };
    }
    function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
        var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
        return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
    }
    function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
        var φ;
        if (from == null) {
            φ = direction * halfπ;
            listener.point(-π, φ);
            listener.point(0, φ);
            listener.point(π, φ);
            listener.point(π, 0);
            listener.point(π, -φ);
            listener.point(0, -φ);
            listener.point(-π, -φ);
            listener.point(-π, 0);
            listener.point(-π, φ);
        } else if (abs(from[0] - to[0]) > ε) {
            var s = from[0] < to[0] ? π : -π;
            φ = direction * s / 2;
            listener.point(-s, φ);
            listener.point(0, φ);
            listener.point(s, φ);
        } else {
            listener.point(to[0], to[1]);
        }
    }
    function d3_geo_pointInPolygon(point, polygon) {
        var meridian = point[0], parallel = point[1], meridianNormal = [
                Math.sin(meridian),
                -Math.cos(meridian),
                0
            ], polarAngle = 0, winding = 0;
        d3_geo_areaRingSum.reset();
        for (var i = 0, n = polygon.length; i < n; ++i) {
            var ring = polygon[i], m = ring.length;
            if (!m)
                continue;
            var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
            while (true) {
                if (j === m)
                    j = 0;
                point = ring[j];
                var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
                d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
                polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
                if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
                    var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
                    d3_geo_cartesianNormalize(arc);
                    var intersection = d3_geo_cartesianCross(meridianNormal, arc);
                    d3_geo_cartesianNormalize(intersection);
                    var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
                    if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
                        winding += antimeridian ^ dλ >= 0 ? 1 : -1;
                    }
                }
                if (!j++)
                    break;
                λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
            }
        }
        return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
    }
    function d3_geo_clipCircle(radius) {
        var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
        return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [
            0,
            -radius
        ] : [
            -π,
            radius - π
        ]);
        function visible(λ, φ) {
            return Math.cos(λ) * Math.cos(φ) > cr;
        }
        function clipLine(listener) {
            var point0, c0, v0, v00, clean;
            return {
                lineStart: function () {
                    v00 = v0 = false;
                    clean = 1;
                },
                point: function (λ, φ) {
                    var point1 = [
                            λ,
                            φ
                        ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
                    if (!point0 && (v00 = v0 = v))
                        listener.lineStart();
                    if (v !== v0) {
                        point2 = intersect(point0, point1);
                        if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
                            point1[0] += ε;
                            point1[1] += ε;
                            v = visible(point1[0], point1[1]);
                        }
                    }
                    if (v !== v0) {
                        clean = 0;
                        if (v) {
                            listener.lineStart();
                            point2 = intersect(point1, point0);
                            listener.point(point2[0], point2[1]);
                        } else {
                            point2 = intersect(point0, point1);
                            listener.point(point2[0], point2[1]);
                            listener.lineEnd();
                        }
                        point0 = point2;
                    } else if (notHemisphere && point0 && smallRadius ^ v) {
                        var t;
                        if (!(c & c0) && (t = intersect(point1, point0, true))) {
                            clean = 0;
                            if (smallRadius) {
                                listener.lineStart();
                                listener.point(t[0][0], t[0][1]);
                                listener.point(t[1][0], t[1][1]);
                                listener.lineEnd();
                            } else {
                                listener.point(t[1][0], t[1][1]);
                                listener.lineEnd();
                                listener.lineStart();
                                listener.point(t[0][0], t[0][1]);
                            }
                        }
                    }
                    if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
                        listener.point(point1[0], point1[1]);
                    }
                    point0 = point1, v0 = v, c0 = c;
                },
                lineEnd: function () {
                    if (v0)
                        listener.lineEnd();
                    point0 = null;
                },
                clean: function () {
                    return clean | (v00 && v0) << 1;
                }
            };
        }
        function intersect(a, b, two) {
            var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
            var n1 = [
                    1,
                    0,
                    0
                ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
            if (!determinant)
                return !two && a;
            var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
            d3_geo_cartesianAdd(A, B);
            var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
            if (t2 < 0)
                return;
            var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
            d3_geo_cartesianAdd(q, A);
            q = d3_geo_spherical(q);
            if (!two)
                return q;
            var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
            if (λ1 < λ0)
                z = λ0, λ0 = λ1, λ1 = z;
            var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
            if (!polar && φ1 < φ0)
                z = φ0, φ0 = φ1, φ1 = z;
            if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
                var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
                d3_geo_cartesianAdd(q1, A);
                return [
                    q,
                    d3_geo_spherical(q1)
                ];
            }
        }
        function code(λ, φ) {
            var r = smallRadius ? radius : π - radius, code = 0;
            if (λ < -r)
                code |= 1;
            else if (λ > r)
                code |= 2;
            if (φ < -r)
                code |= 4;
            else if (φ > r)
                code |= 8;
            return code;
        }
    }
    function d3_geom_clipLine(x0, y0, x1, y1) {
        return function (line) {
            var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
            r = x0 - ax;
            if (!dx && r > 0)
                return;
            r /= dx;
            if (dx < 0) {
                if (r < t0)
                    return;
                if (r < t1)
                    t1 = r;
            } else if (dx > 0) {
                if (r > t1)
                    return;
                if (r > t0)
                    t0 = r;
            }
            r = x1 - ax;
            if (!dx && r < 0)
                return;
            r /= dx;
            if (dx < 0) {
                if (r > t1)
                    return;
                if (r > t0)
                    t0 = r;
            } else if (dx > 0) {
                if (r < t0)
                    return;
                if (r < t1)
                    t1 = r;
            }
            r = y0 - ay;
            if (!dy && r > 0)
                return;
            r /= dy;
            if (dy < 0) {
                if (r < t0)
                    return;
                if (r < t1)
                    t1 = r;
            } else if (dy > 0) {
                if (r > t1)
                    return;
                if (r > t0)
                    t0 = r;
            }
            r = y1 - ay;
            if (!dy && r < 0)
                return;
            r /= dy;
            if (dy < 0) {
                if (r > t1)
                    return;
                if (r > t0)
                    t0 = r;
            } else if (dy > 0) {
                if (r < t0)
                    return;
                if (r < t1)
                    t1 = r;
            }
            if (t0 > 0)
                line.a = {
                    x: ax + t0 * dx,
                    y: ay + t0 * dy
                };
            if (t1 < 1)
                line.b = {
                    x: ax + t1 * dx,
                    y: ay + t1 * dy
                };
            return line;
        };
    }
    var d3_geo_clipExtentMAX = 1000000000;
    d3.geo.clipExtent = function () {
        var x0, y0, x1, y1, stream, clip, clipExtent = {
                stream: function (output) {
                    if (stream)
                        stream.valid = false;
                    stream = clip(output);
                    stream.valid = true;
                    return stream;
                },
                extent: function (_) {
                    if (!arguments.length)
                        return [
                            [
                                x0,
                                y0
                            ],
                            [
                                x1,
                                y1
                            ]
                        ];
                    clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
                    if (stream)
                        stream.valid = false, stream = null;
                    return clipExtent;
                }
            };
        return clipExtent.extent([
            [
                0,
                0
            ],
            [
                960,
                500
            ]
        ]);
    };
    function d3_geo_clipExtent(x0, y0, x1, y1) {
        return function (listener) {
            var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
            var clip = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function () {
                    listener = bufferListener;
                    segments = [];
                    polygon = [];
                    clean = true;
                },
                polygonEnd: function () {
                    listener = listener_;
                    segments = d3.merge(segments);
                    var clipStartInside = insidePolygon([
                            x0,
                            y1
                        ]), inside = clean && clipStartInside, visible = segments.length;
                    if (inside || visible) {
                        listener.polygonStart();
                        if (inside) {
                            listener.lineStart();
                            interpolate(null, null, 1, listener);
                            listener.lineEnd();
                        }
                        if (visible) {
                            d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
                        }
                        listener.polygonEnd();
                    }
                    segments = polygon = ring = null;
                }
            };
            function insidePolygon(p) {
                var wn = 0, n = polygon.length, y = p[1];
                for (var i = 0; i < n; ++i) {
                    for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
                        b = v[j];
                        if (a[1] <= y) {
                            if (b[1] > y && d3_cross2d(a, b, p) > 0)
                                ++wn;
                        } else {
                            if (b[1] <= y && d3_cross2d(a, b, p) < 0)
                                --wn;
                        }
                        a = b;
                    }
                }
                return wn !== 0;
            }
            function interpolate(from, to, direction, listener) {
                var a = 0, a1 = 0;
                if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
                    do {
                        listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
                    } while ((a = (a + direction + 4) % 4) !== a1);
                } else {
                    listener.point(to[0], to[1]);
                }
            }
            function pointVisible(x, y) {
                return x0 <= x && x <= x1 && y0 <= y && y <= y1;
            }
            function point(x, y) {
                if (pointVisible(x, y))
                    listener.point(x, y);
            }
            var x__, y__, v__, x_, y_, v_, first, clean;
            function lineStart() {
                clip.point = linePoint;
                if (polygon)
                    polygon.push(ring = []);
                first = true;
                v_ = false;
                x_ = y_ = NaN;
            }
            function lineEnd() {
                if (segments) {
                    linePoint(x__, y__);
                    if (v__ && v_)
                        bufferListener.rejoin();
                    segments.push(bufferListener.buffer());
                }
                clip.point = point;
                if (v_)
                    listener.lineEnd();
            }
            function linePoint(x, y) {
                x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
                y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
                var v = pointVisible(x, y);
                if (polygon)
                    ring.push([
                        x,
                        y
                    ]);
                if (first) {
                    x__ = x, y__ = y, v__ = v;
                    first = false;
                    if (v) {
                        listener.lineStart();
                        listener.point(x, y);
                    }
                } else {
                    if (v && v_)
                        listener.point(x, y);
                    else {
                        var l = {
                            a: {
                                x: x_,
                                y: y_
                            },
                            b: {
                                x: x,
                                y: y
                            }
                        };
                        if (clipLine(l)) {
                            if (!v_) {
                                listener.lineStart();
                                listener.point(l.a.x, l.a.y);
                            }
                            listener.point(l.b.x, l.b.y);
                            if (!v)
                                listener.lineEnd();
                            clean = false;
                        } else if (v) {
                            listener.lineStart();
                            listener.point(x, y);
                            clean = false;
                        }
                    }
                }
                x_ = x, y_ = y, v_ = v;
            }
            return clip;
        };
        function corner(p, direction) {
            return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
        }
        function compare(a, b) {
            return comparePoints(a.x, b.x);
        }
        function comparePoints(a, b) {
            var ca = corner(a, 1), cb = corner(b, 1);
            return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
        }
    }
    function d3_geo_conic(projectAt) {
        var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
        p.parallels = function (_) {
            if (!arguments.length)
                return [
                    φ0 / π * 180,
                    φ1 / π * 180
                ];
            return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
        };
        return p;
    }
    function d3_geo_conicEqualArea(φ0, φ1) {
        var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
        function forward(λ, φ) {
            var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
            return [
                ρ * Math.sin(λ *= n),
                ρ0 - ρ * Math.cos(λ)
            ];
        }
        forward.invert = function (x, y) {
            var ρ0_y = ρ0 - y;
            return [
                Math.atan2(x, ρ0_y) / n,
                d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n))
            ];
        };
        return forward;
    }
    (d3.geo.conicEqualArea = function () {
        return d3_geo_conic(d3_geo_conicEqualArea);
    }).raw = d3_geo_conicEqualArea;
    d3.geo.albers = function () {
        return d3.geo.conicEqualArea().rotate([
            96,
            0
        ]).center([
            -0.6,
            38.7
        ]).parallels([
            29.5,
            45.5
        ]).scale(1070);
    };
    d3.geo.albersUsa = function () {
        var lower48 = d3.geo.albers();
        var alaska = d3.geo.conicEqualArea().rotate([
            154,
            0
        ]).center([
            -2,
            58.5
        ]).parallels([
            55,
            65
        ]);
        var hawaii = d3.geo.conicEqualArea().rotate([
            157,
            0
        ]).center([
            -3,
            19.9
        ]).parallels([
            8,
            18
        ]);
        var point, pointStream = {
                point: function (x, y) {
                    point = [
                        x,
                        y
                    ];
                }
            }, lower48Point, alaskaPoint, hawaiiPoint;
        function albersUsa(coordinates) {
            var x = coordinates[0], y = coordinates[1];
            point = null;
            (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
            return point;
        }
        albersUsa.invert = function (coordinates) {
            var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
            return (y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
        };
        albersUsa.stream = function (stream) {
            var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
            return {
                point: function (x, y) {
                    lower48Stream.point(x, y);
                    alaskaStream.point(x, y);
                    hawaiiStream.point(x, y);
                },
                sphere: function () {
                    lower48Stream.sphere();
                    alaskaStream.sphere();
                    hawaiiStream.sphere();
                },
                lineStart: function () {
                    lower48Stream.lineStart();
                    alaskaStream.lineStart();
                    hawaiiStream.lineStart();
                },
                lineEnd: function () {
                    lower48Stream.lineEnd();
                    alaskaStream.lineEnd();
                    hawaiiStream.lineEnd();
                },
                polygonStart: function () {
                    lower48Stream.polygonStart();
                    alaskaStream.polygonStart();
                    hawaiiStream.polygonStart();
                },
                polygonEnd: function () {
                    lower48Stream.polygonEnd();
                    alaskaStream.polygonEnd();
                    hawaiiStream.polygonEnd();
                }
            };
        };
        albersUsa.precision = function (_) {
            if (!arguments.length)
                return lower48.precision();
            lower48.precision(_);
            alaska.precision(_);
            hawaii.precision(_);
            return albersUsa;
        };
        albersUsa.scale = function (_) {
            if (!arguments.length)
                return lower48.scale();
            lower48.scale(_);
            alaska.scale(_ * 0.35);
            hawaii.scale(_);
            return albersUsa.translate(lower48.translate());
        };
        albersUsa.translate = function (_) {
            if (!arguments.length)
                return lower48.translate();
            var k = lower48.scale(), x = +_[0], y = +_[1];
            lower48Point = lower48.translate(_).clipExtent([
                [
                    x - 0.455 * k,
                    y - 0.238 * k
                ],
                [
                    x + 0.455 * k,
                    y + 0.238 * k
                ]
            ]).stream(pointStream).point;
            alaskaPoint = alaska.translate([
                x - 0.307 * k,
                y + 0.201 * k
            ]).clipExtent([
                [
                    x - 0.425 * k + ε,
                    y + 0.12 * k + ε
                ],
                [
                    x - 0.214 * k - ε,
                    y + 0.234 * k - ε
                ]
            ]).stream(pointStream).point;
            hawaiiPoint = hawaii.translate([
                x - 0.205 * k,
                y + 0.212 * k
            ]).clipExtent([
                [
                    x - 0.214 * k + ε,
                    y + 0.166 * k + ε
                ],
                [
                    x - 0.115 * k - ε,
                    y + 0.234 * k - ε
                ]
            ]).stream(pointStream).point;
            return albersUsa;
        };
        return albersUsa.scale(1070);
    };
    var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
            point: d3_noop,
            lineStart: d3_noop,
            lineEnd: d3_noop,
            polygonStart: function () {
                d3_geo_pathAreaPolygon = 0;
                d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
            },
            polygonEnd: function () {
                d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
                d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
            }
        };
    function d3_geo_pathAreaRingStart() {
        var x00, y00, x0, y0;
        d3_geo_pathArea.point = function (x, y) {
            d3_geo_pathArea.point = nextPoint;
            x00 = x0 = x, y00 = y0 = y;
        };
        function nextPoint(x, y) {
            d3_geo_pathAreaPolygon += y0 * x - x0 * y;
            x0 = x, y0 = y;
        }
        d3_geo_pathArea.lineEnd = function () {
            nextPoint(x00, y00);
        };
    }
    var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
    var d3_geo_pathBounds = {
        point: d3_geo_pathBoundsPoint,
        lineStart: d3_noop,
        lineEnd: d3_noop,
        polygonStart: d3_noop,
        polygonEnd: d3_noop
    };
    function d3_geo_pathBoundsPoint(x, y) {
        if (x < d3_geo_pathBoundsX0)
            d3_geo_pathBoundsX0 = x;
        if (x > d3_geo_pathBoundsX1)
            d3_geo_pathBoundsX1 = x;
        if (y < d3_geo_pathBoundsY0)
            d3_geo_pathBoundsY0 = y;
        if (y > d3_geo_pathBoundsY1)
            d3_geo_pathBoundsY1 = y;
    }
    function d3_geo_pathBuffer() {
        var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
        var stream = {
            point: point,
            lineStart: function () {
                stream.point = pointLineStart;
            },
            lineEnd: lineEnd,
            polygonStart: function () {
                stream.lineEnd = lineEndPolygon;
            },
            polygonEnd: function () {
                stream.lineEnd = lineEnd;
                stream.point = point;
            },
            pointRadius: function (_) {
                pointCircle = d3_geo_pathBufferCircle(_);
                return stream;
            },
            result: function () {
                if (buffer.length) {
                    var result = buffer.join('');
                    buffer = [];
                    return result;
                }
            }
        };
        function point(x, y) {
            buffer.push('M', x, ',', y, pointCircle);
        }
        function pointLineStart(x, y) {
            buffer.push('M', x, ',', y);
            stream.point = pointLine;
        }
        function pointLine(x, y) {
            buffer.push('L', x, ',', y);
        }
        function lineEnd() {
            stream.point = point;
        }
        function lineEndPolygon() {
            buffer.push('Z');
        }
        return stream;
    }
    function d3_geo_pathBufferCircle(radius) {
        return 'm0,' + radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + -2 * radius + 'a' + radius + ',' + radius + ' 0 1,1 0,' + 2 * radius + 'z';
    }
    var d3_geo_pathCentroid = {
        point: d3_geo_pathCentroidPoint,
        lineStart: d3_geo_pathCentroidLineStart,
        lineEnd: d3_geo_pathCentroidLineEnd,
        polygonStart: function () {
            d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
        },
        polygonEnd: function () {
            d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
            d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
            d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
        }
    };
    function d3_geo_pathCentroidPoint(x, y) {
        d3_geo_centroidX0 += x;
        d3_geo_centroidY0 += y;
        ++d3_geo_centroidZ0;
    }
    function d3_geo_pathCentroidLineStart() {
        var x0, y0;
        d3_geo_pathCentroid.point = function (x, y) {
            d3_geo_pathCentroid.point = nextPoint;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y);
        };
        function nextPoint(x, y) {
            var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
            d3_geo_centroidX1 += z * (x0 + x) / 2;
            d3_geo_centroidY1 += z * (y0 + y) / 2;
            d3_geo_centroidZ1 += z;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y);
        }
    }
    function d3_geo_pathCentroidLineEnd() {
        d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
    }
    function d3_geo_pathCentroidRingStart() {
        var x00, y00, x0, y0;
        d3_geo_pathCentroid.point = function (x, y) {
            d3_geo_pathCentroid.point = nextPoint;
            d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
        };
        function nextPoint(x, y) {
            var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
            d3_geo_centroidX1 += z * (x0 + x) / 2;
            d3_geo_centroidY1 += z * (y0 + y) / 2;
            d3_geo_centroidZ1 += z;
            z = y0 * x - x0 * y;
            d3_geo_centroidX2 += z * (x0 + x);
            d3_geo_centroidY2 += z * (y0 + y);
            d3_geo_centroidZ2 += z * 3;
            d3_geo_pathCentroidPoint(x0 = x, y0 = y);
        }
        d3_geo_pathCentroid.lineEnd = function () {
            nextPoint(x00, y00);
        };
    }
    function d3_geo_pathContext(context) {
        var pointRadius = 4.5;
        var stream = {
            point: point,
            lineStart: function () {
                stream.point = pointLineStart;
            },
            lineEnd: lineEnd,
            polygonStart: function () {
                stream.lineEnd = lineEndPolygon;
            },
            polygonEnd: function () {
                stream.lineEnd = lineEnd;
                stream.point = point;
            },
            pointRadius: function (_) {
                pointRadius = _;
                return stream;
            },
            result: d3_noop
        };
        function point(x, y) {
            context.moveTo(x + pointRadius, y);
            context.arc(x, y, pointRadius, 0, τ);
        }
        function pointLineStart(x, y) {
            context.moveTo(x, y);
            stream.point = pointLine;
        }
        function pointLine(x, y) {
            context.lineTo(x, y);
        }
        function lineEnd() {
            stream.point = point;
        }
        function lineEndPolygon() {
            context.closePath();
        }
        return stream;
    }
    function d3_geo_resample(project) {
        var δ2 = 0.5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
        function resample(stream) {
            return (maxDepth ? resampleRecursive : resampleNone)(stream);
        }
        function resampleNone(stream) {
            return d3_geo_transformPoint(stream, function (x, y) {
                x = project(x, y);
                stream.point(x[0], x[1]);
            });
        }
        function resampleRecursive(stream) {
            var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
            var resample = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function () {
                    stream.polygonStart();
                    resample.lineStart = ringStart;
                },
                polygonEnd: function () {
                    stream.polygonEnd();
                    resample.lineStart = lineStart;
                }
            };
            function point(x, y) {
                x = project(x, y);
                stream.point(x[0], x[1]);
            }
            function lineStart() {
                x0 = NaN;
                resample.point = linePoint;
                stream.lineStart();
            }
            function linePoint(λ, φ) {
                var c = d3_geo_cartesian([
                        λ,
                        φ
                    ]), p = project(λ, φ);
                resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
                stream.point(x0, y0);
            }
            function lineEnd() {
                resample.point = point;
                stream.lineEnd();
            }
            function ringStart() {
                lineStart();
                resample.point = ringPoint;
                resample.lineEnd = ringEnd;
            }
            function ringPoint(λ, φ) {
                linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
                resample.point = linePoint;
            }
            function ringEnd() {
                resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
                resample.lineEnd = lineEnd;
                lineEnd();
            }
            return resample;
        }
        function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
            var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
            if (d2 > 4 * δ2 && depth--) {
                var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
                if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                    resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
                    stream.point(x2, y2);
                    resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
                }
            }
        }
        resample.precision = function (_) {
            if (!arguments.length)
                return Math.sqrt(δ2);
            maxDepth = (δ2 = _ * _) > 0 && 16;
            return resample;
        };
        return resample;
    }
    d3.geo.path = function () {
        var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
        function path(object) {
            if (object) {
                if (typeof pointRadius === 'function')
                    contextStream.pointRadius(+pointRadius.apply(this, arguments));
                if (!cacheStream || !cacheStream.valid)
                    cacheStream = projectStream(contextStream);
                d3.geo.stream(object, cacheStream);
            }
            return contextStream.result();
        }
        path.area = function (object) {
            d3_geo_pathAreaSum = 0;
            d3.geo.stream(object, projectStream(d3_geo_pathArea));
            return d3_geo_pathAreaSum;
        };
        path.centroid = function (object) {
            d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
            d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
            return d3_geo_centroidZ2 ? [
                d3_geo_centroidX2 / d3_geo_centroidZ2,
                d3_geo_centroidY2 / d3_geo_centroidZ2
            ] : d3_geo_centroidZ1 ? [
                d3_geo_centroidX1 / d3_geo_centroidZ1,
                d3_geo_centroidY1 / d3_geo_centroidZ1
            ] : d3_geo_centroidZ0 ? [
                d3_geo_centroidX0 / d3_geo_centroidZ0,
                d3_geo_centroidY0 / d3_geo_centroidZ0
            ] : [
                NaN,
                NaN
            ];
        };
        path.bounds = function (object) {
            d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
            d3.geo.stream(object, projectStream(d3_geo_pathBounds));
            return [
                [
                    d3_geo_pathBoundsX0,
                    d3_geo_pathBoundsY0
                ],
                [
                    d3_geo_pathBoundsX1,
                    d3_geo_pathBoundsY1
                ]
            ];
        };
        path.projection = function (_) {
            if (!arguments.length)
                return projection;
            projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
            return reset();
        };
        path.context = function (_) {
            if (!arguments.length)
                return context;
            contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
            if (typeof pointRadius !== 'function')
                contextStream.pointRadius(pointRadius);
            return reset();
        };
        path.pointRadius = function (_) {
            if (!arguments.length)
                return pointRadius;
            pointRadius = typeof _ === 'function' ? _ : (contextStream.pointRadius(+_), +_);
            return path;
        };
        function reset() {
            cacheStream = null;
            return path;
        }
        return path.projection(d3.geo.albersUsa()).context(null);
    };
    function d3_geo_pathProjectStream(project) {
        var resample = d3_geo_resample(function (x, y) {
            return project([
                x * d3_degrees,
                y * d3_degrees
            ]);
        });
        return function (stream) {
            return d3_geo_projectionRadians(resample(stream));
        };
    }
    d3.geo.transform = function (methods) {
        return {
            stream: function (stream) {
                var transform = new d3_geo_transform(stream);
                for (var k in methods)
                    transform[k] = methods[k];
                return transform;
            }
        };
    };
    function d3_geo_transform(stream) {
        this.stream = stream;
    }
    d3_geo_transform.prototype = {
        point: function (x, y) {
            this.stream.point(x, y);
        },
        sphere: function () {
            this.stream.sphere();
        },
        lineStart: function () {
            this.stream.lineStart();
        },
        lineEnd: function () {
            this.stream.lineEnd();
        },
        polygonStart: function () {
            this.stream.polygonStart();
        },
        polygonEnd: function () {
            this.stream.polygonEnd();
        }
    };
    function d3_geo_transformPoint(stream, point) {
        return {
            point: point,
            sphere: function () {
                stream.sphere();
            },
            lineStart: function () {
                stream.lineStart();
            },
            lineEnd: function () {
                stream.lineEnd();
            },
            polygonStart: function () {
                stream.polygonStart();
            },
            polygonEnd: function () {
                stream.polygonEnd();
            }
        };
    }
    d3.geo.projection = d3_geo_projection;
    d3.geo.projectionMutator = d3_geo_projectionMutator;
    function d3_geo_projection(project) {
        return d3_geo_projectionMutator(function () {
            return project;
        })();
    }
    function d3_geo_projectionMutator(projectAt) {
        var project, rotate, projectRotate, projectResample = d3_geo_resample(function (x, y) {
                x = project(x, y);
                return [
                    x[0] * k + δx,
                    δy - x[1] * k
                ];
            }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
        function projection(point) {
            point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
            return [
                point[0] * k + δx,
                δy - point[1] * k
            ];
        }
        function invert(point) {
            point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
            return point && [
                point[0] * d3_degrees,
                point[1] * d3_degrees
            ];
        }
        projection.stream = function (output) {
            if (stream)
                stream.valid = false;
            stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
            stream.valid = true;
            return stream;
        };
        projection.clipAngle = function (_) {
            if (!arguments.length)
                return clipAngle;
            preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
            return invalidate();
        };
        projection.clipExtent = function (_) {
            if (!arguments.length)
                return clipExtent;
            clipExtent = _;
            postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
            return invalidate();
        };
        projection.scale = function (_) {
            if (!arguments.length)
                return k;
            k = +_;
            return reset();
        };
        projection.translate = function (_) {
            if (!arguments.length)
                return [
                    x,
                    y
                ];
            x = +_[0];
            y = +_[1];
            return reset();
        };
        projection.center = function (_) {
            if (!arguments.length)
                return [
                    λ * d3_degrees,
                    φ * d3_degrees
                ];
            λ = _[0] % 360 * d3_radians;
            φ = _[1] % 360 * d3_radians;
            return reset();
        };
        projection.rotate = function (_) {
            if (!arguments.length)
                return [
                    δλ * d3_degrees,
                    δφ * d3_degrees,
                    δγ * d3_degrees
                ];
            δλ = _[0] % 360 * d3_radians;
            δφ = _[1] % 360 * d3_radians;
            δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
            return reset();
        };
        d3.rebind(projection, projectResample, 'precision');
        function reset() {
            projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
            var center = project(λ, φ);
            δx = x - center[0] * k;
            δy = y + center[1] * k;
            return invalidate();
        }
        function invalidate() {
            if (stream)
                stream.valid = false, stream = null;
            return projection;
        }
        return function () {
            project = projectAt.apply(this, arguments);
            projection.invert = project.invert && invert;
            return reset();
        };
    }
    function d3_geo_projectionRadians(stream) {
        return d3_geo_transformPoint(stream, function (x, y) {
            stream.point(x * d3_radians, y * d3_radians);
        });
    }
    function d3_geo_equirectangular(λ, φ) {
        return [
            λ,
            φ
        ];
    }
    (d3.geo.equirectangular = function () {
        return d3_geo_projection(d3_geo_equirectangular);
    }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
    d3.geo.rotation = function (rotate) {
        rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
        function forward(coordinates) {
            coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
            return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
        }
        forward.invert = function (coordinates) {
            coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
            return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
        };
        return forward;
    };
    function d3_geo_identityRotation(λ, φ) {
        return [
            λ > π ? λ - τ : λ < -π ? λ + τ : λ,
            φ
        ];
    }
    d3_geo_identityRotation.invert = d3_geo_equirectangular;
    function d3_geo_rotation(δλ, δφ, δγ) {
        return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
    }
    function d3_geo_forwardRotationλ(δλ) {
        return function (λ, φ) {
            return λ += δλ, [
                λ > π ? λ - τ : λ < -π ? λ + τ : λ,
                φ
            ];
        };
    }
    function d3_geo_rotationλ(δλ) {
        var rotation = d3_geo_forwardRotationλ(δλ);
        rotation.invert = d3_geo_forwardRotationλ(-δλ);
        return rotation;
    }
    function d3_geo_rotationφγ(δφ, δγ) {
        var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
        function rotation(λ, φ) {
            var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
            return [
                Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ),
                d3_asin(k * cosδγ + y * sinδγ)
            ];
        }
        rotation.invert = function (λ, φ) {
            var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
            return [
                Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ),
                d3_asin(k * cosδφ - x * sinδφ)
            ];
        };
        return rotation;
    }
    d3.geo.circle = function () {
        var origin = [
                0,
                0
            ], angle, precision = 6, interpolate;
        function circle() {
            var center = typeof origin === 'function' ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
            interpolate(null, null, 1, {
                point: function (x, y) {
                    ring.push(x = rotate(x, y));
                    x[0] *= d3_degrees, x[1] *= d3_degrees;
                }
            });
            return {
                type: 'Polygon',
                coordinates: [ring]
            };
        }
        circle.origin = function (x) {
            if (!arguments.length)
                return origin;
            origin = x;
            return circle;
        };
        circle.angle = function (x) {
            if (!arguments.length)
                return angle;
            interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
            return circle;
        };
        circle.precision = function (_) {
            if (!arguments.length)
                return precision;
            interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
            return circle;
        };
        return circle.angle(90);
    };
    function d3_geo_circleInterpolate(radius, precision) {
        var cr = Math.cos(radius), sr = Math.sin(radius);
        return function (from, to, direction, listener) {
            var step = direction * precision;
            if (from != null) {
                from = d3_geo_circleAngle(cr, from);
                to = d3_geo_circleAngle(cr, to);
                if (direction > 0 ? from < to : from > to)
                    from += direction * τ;
            } else {
                from = radius + direction * τ;
                to = radius - 0.5 * step;
            }
            for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
                listener.point((point = d3_geo_spherical([
                    cr,
                    -sr * Math.cos(t),
                    -sr * Math.sin(t)
                ]))[0], point[1]);
            }
        };
    }
    function d3_geo_circleAngle(cr, point) {
        var a = d3_geo_cartesian(point);
        a[0] -= cr;
        d3_geo_cartesianNormalize(a);
        var angle = d3_acos(-a[1]);
        return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
    }
    d3.geo.distance = function (a, b) {
        var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
        return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
    };
    d3.geo.graticule = function () {
        var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
        function graticule() {
            return {
                type: 'MultiLineString',
                coordinates: lines()
            };
        }
        function lines() {
            return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
                return abs(x % DX) > ε;
            }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
                return abs(y % DY) > ε;
            }).map(y));
        }
        graticule.lines = function () {
            return lines().map(function (coordinates) {
                return {
                    type: 'LineString',
                    coordinates: coordinates
                };
            });
        };
        graticule.outline = function () {
            return {
                type: 'Polygon',
                coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
            };
        };
        graticule.extent = function (_) {
            if (!arguments.length)
                return graticule.minorExtent();
            return graticule.majorExtent(_).minorExtent(_);
        };
        graticule.majorExtent = function (_) {
            if (!arguments.length)
                return [
                    [
                        X0,
                        Y0
                    ],
                    [
                        X1,
                        Y1
                    ]
                ];
            X0 = +_[0][0], X1 = +_[1][0];
            Y0 = +_[0][1], Y1 = +_[1][1];
            if (X0 > X1)
                _ = X0, X0 = X1, X1 = _;
            if (Y0 > Y1)
                _ = Y0, Y0 = Y1, Y1 = _;
            return graticule.precision(precision);
        };
        graticule.minorExtent = function (_) {
            if (!arguments.length)
                return [
                    [
                        x0,
                        y0
                    ],
                    [
                        x1,
                        y1
                    ]
                ];
            x0 = +_[0][0], x1 = +_[1][0];
            y0 = +_[0][1], y1 = +_[1][1];
            if (x0 > x1)
                _ = x0, x0 = x1, x1 = _;
            if (y0 > y1)
                _ = y0, y0 = y1, y1 = _;
            return graticule.precision(precision);
        };
        graticule.step = function (_) {
            if (!arguments.length)
                return graticule.minorStep();
            return graticule.majorStep(_).minorStep(_);
        };
        graticule.majorStep = function (_) {
            if (!arguments.length)
                return [
                    DX,
                    DY
                ];
            DX = +_[0], DY = +_[1];
            return graticule;
        };
        graticule.minorStep = function (_) {
            if (!arguments.length)
                return [
                    dx,
                    dy
                ];
            dx = +_[0], dy = +_[1];
            return graticule;
        };
        graticule.precision = function (_) {
            if (!arguments.length)
                return precision;
            precision = +_;
            x = d3_geo_graticuleX(y0, y1, 90);
            y = d3_geo_graticuleY(x0, x1, precision);
            X = d3_geo_graticuleX(Y0, Y1, 90);
            Y = d3_geo_graticuleY(X0, X1, precision);
            return graticule;
        };
        return graticule.majorExtent([
            [
                -180,
                -90 + ε
            ],
            [
                180,
                90 - ε
            ]
        ]).minorExtent([
            [
                -180,
                -80 - ε
            ],
            [
                180,
                80 + ε
            ]
        ]);
    };
    function d3_geo_graticuleX(y0, y1, dy) {
        var y = d3.range(y0, y1 - ε, dy).concat(y1);
        return function (x) {
            return y.map(function (y) {
                return [
                    x,
                    y
                ];
            });
        };
    }
    function d3_geo_graticuleY(x0, x1, dx) {
        var x = d3.range(x0, x1 - ε, dx).concat(x1);
        return function (y) {
            return x.map(function (x) {
                return [
                    x,
                    y
                ];
            });
        };
    }
    function d3_source(d) {
        return d.source;
    }
    function d3_target(d) {
        return d.target;
    }
    d3.geo.greatArc = function () {
        var source = d3_source, source_, target = d3_target, target_;
        function greatArc() {
            return {
                type: 'LineString',
                coordinates: [
                    source_ || source.apply(this, arguments),
                    target_ || target.apply(this, arguments)
                ]
            };
        }
        greatArc.distance = function () {
            return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
        };
        greatArc.source = function (_) {
            if (!arguments.length)
                return source;
            source = _, source_ = typeof _ === 'function' ? null : _;
            return greatArc;
        };
        greatArc.target = function (_) {
            if (!arguments.length)
                return target;
            target = _, target_ = typeof _ === 'function' ? null : _;
            return greatArc;
        };
        greatArc.precision = function () {
            return arguments.length ? greatArc : 0;
        };
        return greatArc;
    };
    d3.geo.interpolate = function (source, target) {
        return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
    };
    function d3_geo_interpolate(x0, y0, x1, y1) {
        var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
        var interpolate = d ? function (t) {
            var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
            return [
                Math.atan2(y, x) * d3_degrees,
                Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees
            ];
        } : function () {
            return [
                x0 * d3_degrees,
                y0 * d3_degrees
            ];
        };
        interpolate.distance = d;
        return interpolate;
    }
    d3.geo.length = function (object) {
        d3_geo_lengthSum = 0;
        d3.geo.stream(object, d3_geo_length);
        return d3_geo_lengthSum;
    };
    var d3_geo_lengthSum;
    var d3_geo_length = {
        sphere: d3_noop,
        point: d3_noop,
        lineStart: d3_geo_lengthLineStart,
        lineEnd: d3_noop,
        polygonStart: d3_noop,
        polygonEnd: d3_noop
    };
    function d3_geo_lengthLineStart() {
        var λ0, sinφ0, cosφ0;
        d3_geo_length.point = function (λ, φ) {
            λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
            d3_geo_length.point = nextPoint;
        };
        d3_geo_length.lineEnd = function () {
            d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
        };
        function nextPoint(λ, φ) {
            var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
            d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
            λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
        }
    }
    function d3_geo_azimuthal(scale, angle) {
        function azimuthal(λ, φ) {
            var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
            return [
                k * cosφ * Math.sin(λ),
                k * Math.sin(φ)
            ];
        }
        azimuthal.invert = function (x, y) {
            var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
            return [
                Math.atan2(x * sinc, ρ * cosc),
                Math.asin(ρ && y * sinc / ρ)
            ];
        };
        return azimuthal;
    }
    var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function (cosλcosφ) {
        return Math.sqrt(2 / (1 + cosλcosφ));
    }, function (ρ) {
        return 2 * Math.asin(ρ / 2);
    });
    (d3.geo.azimuthalEqualArea = function () {
        return d3_geo_projection(d3_geo_azimuthalEqualArea);
    }).raw = d3_geo_azimuthalEqualArea;
    var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function (cosλcosφ) {
        var c = Math.acos(cosλcosφ);
        return c && c / Math.sin(c);
    }, d3_identity);
    (d3.geo.azimuthalEquidistant = function () {
        return d3_geo_projection(d3_geo_azimuthalEquidistant);
    }).raw = d3_geo_azimuthalEquidistant;
    function d3_geo_conicConformal(φ0, φ1) {
        var cosφ0 = Math.cos(φ0), t = function (φ) {
                return Math.tan(π / 4 + φ / 2);
            }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
        if (!n)
            return d3_geo_mercator;
        function forward(λ, φ) {
            if (F > 0) {
                if (φ < -halfπ + ε)
                    φ = -halfπ + ε;
            } else {
                if (φ > halfπ - ε)
                    φ = halfπ - ε;
            }
            var ρ = F / Math.pow(t(φ), n);
            return [
                ρ * Math.sin(n * λ),
                F - ρ * Math.cos(n * λ)
            ];
        }
        forward.invert = function (x, y) {
            var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
            return [
                Math.atan2(x, ρ0_y) / n,
                2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ
            ];
        };
        return forward;
    }
    (d3.geo.conicConformal = function () {
        return d3_geo_conic(d3_geo_conicConformal);
    }).raw = d3_geo_conicConformal;
    function d3_geo_conicEquidistant(φ0, φ1) {
        var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
        if (abs(n) < ε)
            return d3_geo_equirectangular;
        function forward(λ, φ) {
            var ρ = G - φ;
            return [
                ρ * Math.sin(n * λ),
                G - ρ * Math.cos(n * λ)
            ];
        }
        forward.invert = function (x, y) {
            var ρ0_y = G - y;
            return [
                Math.atan2(x, ρ0_y) / n,
                G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y)
            ];
        };
        return forward;
    }
    (d3.geo.conicEquidistant = function () {
        return d3_geo_conic(d3_geo_conicEquidistant);
    }).raw = d3_geo_conicEquidistant;
    var d3_geo_gnomonic = d3_geo_azimuthal(function (cosλcosφ) {
        return 1 / cosλcosφ;
    }, Math.atan);
    (d3.geo.gnomonic = function () {
        return d3_geo_projection(d3_geo_gnomonic);
    }).raw = d3_geo_gnomonic;
    function d3_geo_mercator(λ, φ) {
        return [
            λ,
            Math.log(Math.tan(π / 4 + φ / 2))
        ];
    }
    d3_geo_mercator.invert = function (x, y) {
        return [
            x,
            2 * Math.atan(Math.exp(y)) - halfπ
        ];
    };
    function d3_geo_mercatorProjection(project) {
        var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
        m.scale = function () {
            var v = scale.apply(m, arguments);
            return v === m ? clipAuto ? m.clipExtent(null) : m : v;
        };
        m.translate = function () {
            var v = translate.apply(m, arguments);
            return v === m ? clipAuto ? m.clipExtent(null) : m : v;
        };
        m.clipExtent = function (_) {
            var v = clipExtent.apply(m, arguments);
            if (v === m) {
                if (clipAuto = _ == null) {
                    var k = π * scale(), t = translate();
                    clipExtent([
                        [
                            t[0] - k,
                            t[1] - k
                        ],
                        [
                            t[0] + k,
                            t[1] + k
                        ]
                    ]);
                }
            } else if (clipAuto) {
                v = null;
            }
            return v;
        };
        return m.clipExtent(null);
    }
    (d3.geo.mercator = function () {
        return d3_geo_mercatorProjection(d3_geo_mercator);
    }).raw = d3_geo_mercator;
    var d3_geo_orthographic = d3_geo_azimuthal(function () {
        return 1;
    }, Math.asin);
    (d3.geo.orthographic = function () {
        return d3_geo_projection(d3_geo_orthographic);
    }).raw = d3_geo_orthographic;
    var d3_geo_stereographic = d3_geo_azimuthal(function (cosλcosφ) {
        return 1 / (1 + cosλcosφ);
    }, function (ρ) {
        return 2 * Math.atan(ρ);
    });
    (d3.geo.stereographic = function () {
        return d3_geo_projection(d3_geo_stereographic);
    }).raw = d3_geo_stereographic;
    function d3_geo_transverseMercator(λ, φ) {
        return [
            Math.log(Math.tan(π / 4 + φ / 2)),
            -λ
        ];
    }
    d3_geo_transverseMercator.invert = function (x, y) {
        return [
            -y,
            2 * Math.atan(Math.exp(x)) - halfπ
        ];
    };
    (d3.geo.transverseMercator = function () {
        var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
        projection.center = function (_) {
            return _ ? center([
                -_[1],
                _[0]
            ]) : (_ = center(), [
                _[1],
                -_[0]
            ]);
        };
        projection.rotate = function (_) {
            return _ ? rotate([
                _[0],
                _[1],
                _.length > 2 ? _[2] + 90 : 90
            ]) : (_ = rotate(), [
                _[0],
                _[1],
                _[2] - 90
            ]);
        };
        return rotate([
            0,
            0,
            90
        ]);
    }).raw = d3_geo_transverseMercator;
    d3.geom = {};
    function d3_geom_pointX(d) {
        return d[0];
    }
    function d3_geom_pointY(d) {
        return d[1];
    }
    d3.geom.hull = function (vertices) {
        var x = d3_geom_pointX, y = d3_geom_pointY;
        if (arguments.length)
            return hull(vertices);
        function hull(data) {
            if (data.length < 3)
                return [];
            var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
            for (i = 0; i < n; i++) {
                points.push([
                    +fx.call(this, data[i], i),
                    +fy.call(this, data[i], i),
                    i
                ]);
            }
            points.sort(d3_geom_hullOrder);
            for (i = 0; i < n; i++)
                flippedPoints.push([
                    points[i][0],
                    -points[i][1]
                ]);
            var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
            var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
            for (i = upper.length - 1; i >= 0; --i)
                polygon.push(data[points[upper[i]][2]]);
            for (i = +skipLeft; i < lower.length - skipRight; ++i)
                polygon.push(data[points[lower[i]][2]]);
            return polygon;
        }
        hull.x = function (_) {
            return arguments.length ? (x = _, hull) : x;
        };
        hull.y = function (_) {
            return arguments.length ? (y = _, hull) : y;
        };
        return hull;
    };
    function d3_geom_hullUpper(points) {
        var n = points.length, hull = [
                0,
                1
            ], hs = 2;
        for (var i = 2; i < n; i++) {
            while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0)
                --hs;
            hull[hs++] = i;
        }
        return hull.slice(0, hs);
    }
    function d3_geom_hullOrder(a, b) {
        return a[0] - b[0] || a[1] - b[1];
    }
    d3.geom.polygon = function (coordinates) {
        d3_subclass(coordinates, d3_geom_polygonPrototype);
        return coordinates;
    };
    var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
    d3_geom_polygonPrototype.area = function () {
        var i = -1, n = this.length, a, b = this[n - 1], area = 0;
        while (++i < n) {
            a = b;
            b = this[i];
            area += a[1] * b[0] - a[0] * b[1];
        }
        return area * 0.5;
    };
    d3_geom_polygonPrototype.centroid = function (k) {
        var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
        if (!arguments.length)
            k = -1 / (6 * this.area());
        while (++i < n) {
            a = b;
            b = this[i];
            c = a[0] * b[1] - b[0] * a[1];
            x += (a[0] + b[0]) * c;
            y += (a[1] + b[1]) * c;
        }
        return [
            x * k,
            y * k
        ];
    };
    d3_geom_polygonPrototype.clip = function (subject) {
        var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
        while (++i < n) {
            input = subject.slice();
            subject.length = 0;
            b = this[i];
            c = input[(m = input.length - closed) - 1];
            j = -1;
            while (++j < m) {
                d = input[j];
                if (d3_geom_polygonInside(d, a, b)) {
                    if (!d3_geom_polygonInside(c, a, b)) {
                        subject.push(d3_geom_polygonIntersect(c, d, a, b));
                    }
                    subject.push(d);
                } else if (d3_geom_polygonInside(c, a, b)) {
                    subject.push(d3_geom_polygonIntersect(c, d, a, b));
                }
                c = d;
            }
            if (closed)
                subject.push(subject[0]);
            a = b;
        }
        return subject;
    };
    function d3_geom_polygonInside(p, a, b) {
        return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
    }
    function d3_geom_polygonIntersect(c, d, a, b) {
        var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
        return [
            x1 + ua * x21,
            y1 + ua * y21
        ];
    }
    function d3_geom_polygonClosed(coordinates) {
        var a = coordinates[0], b = coordinates[coordinates.length - 1];
        return !(a[0] - b[0] || a[1] - b[1]);
    }
    var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
    function d3_geom_voronoiBeach() {
        d3_geom_voronoiRedBlackNode(this);
        this.edge = this.site = this.circle = null;
    }
    function d3_geom_voronoiCreateBeach(site) {
        var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
        beach.site = site;
        return beach;
    }
    function d3_geom_voronoiDetachBeach(beach) {
        d3_geom_voronoiDetachCircle(beach);
        d3_geom_voronoiBeaches.remove(beach);
        d3_geom_voronoiBeachPool.push(beach);
        d3_geom_voronoiRedBlackNode(beach);
    }
    function d3_geom_voronoiRemoveBeach(beach) {
        var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
                x: x,
                y: y
            }, previous = beach.P, next = beach.N, disappearing = [beach];
        d3_geom_voronoiDetachBeach(beach);
        var lArc = previous;
        while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
            previous = lArc.P;
            disappearing.unshift(lArc);
            d3_geom_voronoiDetachBeach(lArc);
            lArc = previous;
        }
        disappearing.unshift(lArc);
        d3_geom_voronoiDetachCircle(lArc);
        var rArc = next;
        while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
            next = rArc.N;
            disappearing.push(rArc);
            d3_geom_voronoiDetachBeach(rArc);
            rArc = next;
        }
        disappearing.push(rArc);
        d3_geom_voronoiDetachCircle(rArc);
        var nArcs = disappearing.length, iArc;
        for (iArc = 1; iArc < nArcs; ++iArc) {
            rArc = disappearing[iArc];
            lArc = disappearing[iArc - 1];
            d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
        }
        lArc = disappearing[0];
        rArc = disappearing[nArcs - 1];
        rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc);
    }
    function d3_geom_voronoiAddBeach(site) {
        var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
        while (node) {
            dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
            if (dxl > ε)
                node = node.L;
            else {
                dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
                if (dxr > ε) {
                    if (!node.R) {
                        lArc = node;
                        break;
                    }
                    node = node.R;
                } else {
                    if (dxl > -ε) {
                        lArc = node.P;
                        rArc = node;
                    } else if (dxr > -ε) {
                        lArc = node;
                        rArc = node.N;
                    } else {
                        lArc = rArc = node;
                    }
                    break;
                }
            }
        }
        var newArc = d3_geom_voronoiCreateBeach(site);
        d3_geom_voronoiBeaches.insert(lArc, newArc);
        if (!lArc && !rArc)
            return;
        if (lArc === rArc) {
            d3_geom_voronoiDetachCircle(lArc);
            rArc = d3_geom_voronoiCreateBeach(lArc.site);
            d3_geom_voronoiBeaches.insert(newArc, rArc);
            newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
            d3_geom_voronoiAttachCircle(lArc);
            d3_geom_voronoiAttachCircle(rArc);
            return;
        }
        if (!rArc) {
            newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
            return;
        }
        d3_geom_voronoiDetachCircle(lArc);
        d3_geom_voronoiDetachCircle(rArc);
        var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
                x: (cy * hb - by * hc) / d + ax,
                y: (bx * hc - cx * hb) / d + ay
            };
        d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
        newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
        rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
        d3_geom_voronoiAttachCircle(lArc);
        d3_geom_voronoiAttachCircle(rArc);
    }
    function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
        var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
        if (!pby2)
            return rfocx;
        var lArc = arc.P;
        if (!lArc)
            return -Infinity;
        site = lArc.site;
        var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
        if (!plby2)
            return lfocx;
        var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
        if (aby2)
            return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
        return (rfocx + lfocx) / 2;
    }
    function d3_geom_voronoiRightBreakPoint(arc, directrix) {
        var rArc = arc.N;
        if (rArc)
            return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
        var site = arc.site;
        return site.y === directrix ? site.x : Infinity;
    }
    function d3_geom_voronoiCell(site) {
        this.site = site;
        this.edges = [];
    }
    d3_geom_voronoiCell.prototype.prepare = function () {
        var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
        while (iHalfEdge--) {
            edge = halfEdges[iHalfEdge].edge;
            if (!edge.b || !edge.a)
                halfEdges.splice(iHalfEdge, 1);
        }
        halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
        return halfEdges.length;
    };
    function d3_geom_voronoiCloseCells(extent) {
        var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
        while (iCell--) {
            cell = cells[iCell];
            if (!cell || !cell.prepare())
                continue;
            halfEdges = cell.edges;
            nHalfEdges = halfEdges.length;
            iHalfEdge = 0;
            while (iHalfEdge < nHalfEdges) {
                end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
                start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
                if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
                    halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
                        x: x0,
                        y: abs(x2 - x0) < ε ? y2 : y1
                    } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
                        x: abs(y2 - y1) < ε ? x2 : x1,
                        y: y1
                    } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
                        x: x1,
                        y: abs(x2 - x1) < ε ? y2 : y0
                    } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
                        x: abs(y2 - y0) < ε ? x2 : x0,
                        y: y0
                    } : null), cell.site, null));
                    ++nHalfEdges;
                }
            }
        }
    }
    function d3_geom_voronoiHalfEdgeOrder(a, b) {
        return b.angle - a.angle;
    }
    function d3_geom_voronoiCircle() {
        d3_geom_voronoiRedBlackNode(this);
        this.x = this.y = this.arc = this.site = this.cy = null;
    }
    function d3_geom_voronoiAttachCircle(arc) {
        var lArc = arc.P, rArc = arc.N;
        if (!lArc || !rArc)
            return;
        var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
        if (lSite === rSite)
            return;
        var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
        var d = 2 * (ax * cy - ay * cx);
        if (d >= -ε2)
            return;
        var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
        var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
        circle.arc = arc;
        circle.site = cSite;
        circle.x = x + bx;
        circle.y = cy + Math.sqrt(x * x + y * y);
        circle.cy = cy;
        arc.circle = circle;
        var before = null, node = d3_geom_voronoiCircles._;
        while (node) {
            if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
                if (node.L)
                    node = node.L;
                else {
                    before = node.P;
                    break;
                }
            } else {
                if (node.R)
                    node = node.R;
                else {
                    before = node;
                    break;
                }
            }
        }
        d3_geom_voronoiCircles.insert(before, circle);
        if (!before)
            d3_geom_voronoiFirstCircle = circle;
    }
    function d3_geom_voronoiDetachCircle(arc) {
        var circle = arc.circle;
        if (circle) {
            if (!circle.P)
                d3_geom_voronoiFirstCircle = circle.N;
            d3_geom_voronoiCircles.remove(circle);
            d3_geom_voronoiCirclePool.push(circle);
            d3_geom_voronoiRedBlackNode(circle);
            arc.circle = null;
        }
    }
    function d3_geom_voronoiClipEdges(extent) {
        var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
        while (i--) {
            e = edges[i];
            if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
                e.a = e.b = null;
                edges.splice(i, 1);
            }
        }
    }
    function d3_geom_voronoiConnectEdge(edge, extent) {
        var vb = edge.b;
        if (vb)
            return true;
        var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
        if (ry === ly) {
            if (fx < x0 || fx >= x1)
                return;
            if (lx > rx) {
                if (!va)
                    va = {
                        x: fx,
                        y: y0
                    };
                else if (va.y >= y1)
                    return;
                vb = {
                    x: fx,
                    y: y1
                };
            } else {
                if (!va)
                    va = {
                        x: fx,
                        y: y1
                    };
                else if (va.y < y0)
                    return;
                vb = {
                    x: fx,
                    y: y0
                };
            }
        } else {
            fm = (lx - rx) / (ry - ly);
            fb = fy - fm * fx;
            if (fm < -1 || fm > 1) {
                if (lx > rx) {
                    if (!va)
                        va = {
                            x: (y0 - fb) / fm,
                            y: y0
                        };
                    else if (va.y >= y1)
                        return;
                    vb = {
                        x: (y1 - fb) / fm,
                        y: y1
                    };
                } else {
                    if (!va)
                        va = {
                            x: (y1 - fb) / fm,
                            y: y1
                        };
                    else if (va.y < y0)
                        return;
                    vb = {
                        x: (y0 - fb) / fm,
                        y: y0
                    };
                }
            } else {
                if (ly < ry) {
                    if (!va)
                        va = {
                            x: x0,
                            y: fm * x0 + fb
                        };
                    else if (va.x >= x1)
                        return;
                    vb = {
                        x: x1,
                        y: fm * x1 + fb
                    };
                } else {
                    if (!va)
                        va = {
                            x: x1,
                            y: fm * x1 + fb
                        };
                    else if (va.x < x0)
                        return;
                    vb = {
                        x: x0,
                        y: fm * x0 + fb
                    };
                }
            }
        }
        edge.a = va;
        edge.b = vb;
        return true;
    }
    function d3_geom_voronoiEdge(lSite, rSite) {
        this.l = lSite;
        this.r = rSite;
        this.a = this.b = null;
    }
    function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
        var edge = new d3_geom_voronoiEdge(lSite, rSite);
        d3_geom_voronoiEdges.push(edge);
        if (va)
            d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
        if (vb)
            d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
        d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
        d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
        return edge;
    }
    function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
        var edge = new d3_geom_voronoiEdge(lSite, null);
        edge.a = va;
        edge.b = vb;
        d3_geom_voronoiEdges.push(edge);
        return edge;
    }
    function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
        if (!edge.a && !edge.b) {
            edge.a = vertex;
            edge.l = lSite;
            edge.r = rSite;
        } else if (edge.l === rSite) {
            edge.b = vertex;
        } else {
            edge.a = vertex;
        }
    }
    function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
        var va = edge.a, vb = edge.b;
        this.edge = edge;
        this.site = lSite;
        this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
    }
    d3_geom_voronoiHalfEdge.prototype = {
        start: function () {
            return this.edge.l === this.site ? this.edge.a : this.edge.b;
        },
        end: function () {
            return this.edge.l === this.site ? this.edge.b : this.edge.a;
        }
    };
    function d3_geom_voronoiRedBlackTree() {
        this._ = null;
    }
    function d3_geom_voronoiRedBlackNode(node) {
        node.U = node.C = node.L = node.R = node.P = node.N = null;
    }
    d3_geom_voronoiRedBlackTree.prototype = {
        insert: function (after, node) {
            var parent, grandpa, uncle;
            if (after) {
                node.P = after;
                node.N = after.N;
                if (after.N)
                    after.N.P = node;
                after.N = node;
                if (after.R) {
                    after = after.R;
                    while (after.L)
                        after = after.L;
                    after.L = node;
                } else {
                    after.R = node;
                }
                parent = after;
            } else if (this._) {
                after = d3_geom_voronoiRedBlackFirst(this._);
                node.P = null;
                node.N = after;
                after.P = after.L = node;
                parent = after;
            } else {
                node.P = node.N = null;
                this._ = node;
                parent = null;
            }
            node.L = node.R = null;
            node.U = parent;
            node.C = true;
            after = node;
            while (parent && parent.C) {
                grandpa = parent.U;
                if (parent === grandpa.L) {
                    uncle = grandpa.R;
                    if (uncle && uncle.C) {
                        parent.C = uncle.C = false;
                        grandpa.C = true;
                        after = grandpa;
                    } else {
                        if (after === parent.R) {
                            d3_geom_voronoiRedBlackRotateLeft(this, parent);
                            after = parent;
                            parent = after.U;
                        }
                        parent.C = false;
                        grandpa.C = true;
                        d3_geom_voronoiRedBlackRotateRight(this, grandpa);
                    }
                } else {
                    uncle = grandpa.L;
                    if (uncle && uncle.C) {
                        parent.C = uncle.C = false;
                        grandpa.C = true;
                        after = grandpa;
                    } else {
                        if (after === parent.L) {
                            d3_geom_voronoiRedBlackRotateRight(this, parent);
                            after = parent;
                            parent = after.U;
                        }
                        parent.C = false;
                        grandpa.C = true;
                        d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
                    }
                }
                parent = after.U;
            }
            this._.C = false;
        },
        remove: function (node) {
            if (node.N)
                node.N.P = node.P;
            if (node.P)
                node.P.N = node.N;
            node.N = node.P = null;
            var parent = node.U, sibling, left = node.L, right = node.R, next, red;
            if (!left)
                next = right;
            else if (!right)
                next = left;
            else
                next = d3_geom_voronoiRedBlackFirst(right);
            if (parent) {
                if (parent.L === node)
                    parent.L = next;
                else
                    parent.R = next;
            } else {
                this._ = next;
            }
            if (left && right) {
                red = next.C;
                next.C = node.C;
                next.L = left;
                left.U = next;
                if (next !== right) {
                    parent = next.U;
                    next.U = node.U;
                    node = next.R;
                    parent.L = node;
                    next.R = right;
                    right.U = next;
                } else {
                    next.U = parent;
                    parent = next;
                    node = next.R;
                }
            } else {
                red = node.C;
                node = next;
            }
            if (node)
                node.U = parent;
            if (red)
                return;
            if (node && node.C) {
                node.C = false;
                return;
            }
            do {
                if (node === this._)
                    break;
                if (node === parent.L) {
                    sibling = parent.R;
                    if (sibling.C) {
                        sibling.C = false;
                        parent.C = true;
                        d3_geom_voronoiRedBlackRotateLeft(this, parent);
                        sibling = parent.R;
                    }
                    if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                        if (!sibling.R || !sibling.R.C) {
                            sibling.L.C = false;
                            sibling.C = true;
                            d3_geom_voronoiRedBlackRotateRight(this, sibling);
                            sibling = parent.R;
                        }
                        sibling.C = parent.C;
                        parent.C = sibling.R.C = false;
                        d3_geom_voronoiRedBlackRotateLeft(this, parent);
                        node = this._;
                        break;
                    }
                } else {
                    sibling = parent.L;
                    if (sibling.C) {
                        sibling.C = false;
                        parent.C = true;
                        d3_geom_voronoiRedBlackRotateRight(this, parent);
                        sibling = parent.L;
                    }
                    if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
                        if (!sibling.L || !sibling.L.C) {
                            sibling.R.C = false;
                            sibling.C = true;
                            d3_geom_voronoiRedBlackRotateLeft(this, sibling);
                            sibling = parent.L;
                        }
                        sibling.C = parent.C;
                        parent.C = sibling.L.C = false;
                        d3_geom_voronoiRedBlackRotateRight(this, parent);
                        node = this._;
                        break;
                    }
                }
                sibling.C = true;
                node = parent;
                parent = parent.U;
            } while (!node.C);
            if (node)
                node.C = false;
        }
    };
    function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
        var p = node, q = node.R, parent = p.U;
        if (parent) {
            if (parent.L === p)
                parent.L = q;
            else
                parent.R = q;
        } else {
            tree._ = q;
        }
        q.U = parent;
        p.U = q;
        p.R = q.L;
        if (p.R)
            p.R.U = p;
        q.L = p;
    }
    function d3_geom_voronoiRedBlackRotateRight(tree, node) {
        var p = node, q = node.L, parent = p.U;
        if (parent) {
            if (parent.L === p)
                parent.L = q;
            else
                parent.R = q;
        } else {
            tree._ = q;
        }
        q.U = parent;
        p.U = q;
        p.L = q.R;
        if (p.L)
            p.L.U = p;
        q.R = p;
    }
    function d3_geom_voronoiRedBlackFirst(node) {
        while (node.L)
            node = node.L;
        return node;
    }
    function d3_geom_voronoi(sites, bbox) {
        var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
        d3_geom_voronoiEdges = [];
        d3_geom_voronoiCells = new Array(sites.length);
        d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
        d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
        while (true) {
            circle = d3_geom_voronoiFirstCircle;
            if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
                if (site.x !== x0 || site.y !== y0) {
                    d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
                    d3_geom_voronoiAddBeach(site);
                    x0 = site.x, y0 = site.y;
                }
                site = sites.pop();
            } else if (circle) {
                d3_geom_voronoiRemoveBeach(circle.arc);
            } else {
                break;
            }
        }
        if (bbox)
            d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
        var diagram = {
            cells: d3_geom_voronoiCells,
            edges: d3_geom_voronoiEdges
        };
        d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
        return diagram;
    }
    function d3_geom_voronoiVertexOrder(a, b) {
        return b.y - a.y || b.x - a.x;
    }
    d3.geom.voronoi = function (points) {
        var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
        if (points)
            return voronoi(points);
        function voronoi(data) {
            var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
            d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function (cell, i) {
                var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function (e) {
                        var s = e.start();
                        return [
                            s.x,
                            s.y
                        ];
                    }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [
                        [
                            x0,
                            y1
                        ],
                        [
                            x1,
                            y1
                        ],
                        [
                            x1,
                            y0
                        ],
                        [
                            x0,
                            y0
                        ]
                    ] : [];
                polygon.point = data[i];
            });
            return polygons;
        }
        function sites(data) {
            return data.map(function (d, i) {
                return {
                    x: Math.round(fx(d, i) / ε) * ε,
                    y: Math.round(fy(d, i) / ε) * ε,
                    i: i
                };
            });
        }
        voronoi.links = function (data) {
            return d3_geom_voronoi(sites(data)).edges.filter(function (edge) {
                return edge.l && edge.r;
            }).map(function (edge) {
                return {
                    source: data[edge.l.i],
                    target: data[edge.r.i]
                };
            });
        };
        voronoi.triangles = function (data) {
            var triangles = [];
            d3_geom_voronoi(sites(data)).cells.forEach(function (cell, i) {
                var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
                while (++j < m) {
                    e0 = e1;
                    s0 = s1;
                    e1 = edges[j].edge;
                    s1 = e1.l === site ? e1.r : e1.l;
                    if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
                        triangles.push([
                            data[i],
                            data[s0.i],
                            data[s1.i]
                        ]);
                    }
                }
            });
            return triangles;
        };
        voronoi.x = function (_) {
            return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
        };
        voronoi.y = function (_) {
            return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
        };
        voronoi.clipExtent = function (_) {
            if (!arguments.length)
                return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
            clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
            return voronoi;
        };
        voronoi.size = function (_) {
            if (!arguments.length)
                return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
            return voronoi.clipExtent(_ && [
                [
                    0,
                    0
                ],
                _
            ]);
        };
        return voronoi;
    };
    var d3_geom_voronoiClipExtent = [
        [
            -1000000,
            -1000000
        ],
        [
            1000000,
            1000000
        ]
    ];
    function d3_geom_voronoiTriangleArea(a, b, c) {
        return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
    }
    d3.geom.delaunay = function (vertices) {
        return d3.geom.voronoi().triangles(vertices);
    };
    d3.geom.quadtree = function (points, x1, y1, x2, y2) {
        var x = d3_geom_pointX, y = d3_geom_pointY, compat;
        if (compat = arguments.length) {
            x = d3_geom_quadtreeCompatX;
            y = d3_geom_quadtreeCompatY;
            if (compat === 3) {
                y2 = y1;
                x2 = x1;
                y1 = x1 = 0;
            }
            return quadtree(points);
        }
        function quadtree(data) {
            var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
            if (x1 != null) {
                x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
            } else {
                x2_ = y2_ = -(x1_ = y1_ = Infinity);
                xs = [], ys = [];
                n = data.length;
                if (compat)
                    for (i = 0; i < n; ++i) {
                        d = data[i];
                        if (d.x < x1_)
                            x1_ = d.x;
                        if (d.y < y1_)
                            y1_ = d.y;
                        if (d.x > x2_)
                            x2_ = d.x;
                        if (d.y > y2_)
                            y2_ = d.y;
                        xs.push(d.x);
                        ys.push(d.y);
                    }
                else
                    for (i = 0; i < n; ++i) {
                        var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
                        if (x_ < x1_)
                            x1_ = x_;
                        if (y_ < y1_)
                            y1_ = y_;
                        if (x_ > x2_)
                            x2_ = x_;
                        if (y_ > y2_)
                            y2_ = y_;
                        xs.push(x_);
                        ys.push(y_);
                    }
            }
            var dx = x2_ - x1_, dy = y2_ - y1_;
            if (dx > dy)
                y2_ = y1_ + dx;
            else
                x2_ = x1_ + dy;
            function insert(n, d, x, y, x1, y1, x2, y2) {
                if (isNaN(x) || isNaN(y))
                    return;
                if (n.leaf) {
                    var nx = n.x, ny = n.y;
                    if (nx != null) {
                        if (abs(nx - x) + abs(ny - y) < 0.01) {
                            insertChild(n, d, x, y, x1, y1, x2, y2);
                        } else {
                            var nPoint = n.point;
                            n.x = n.y = n.point = null;
                            insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
                            insertChild(n, d, x, y, x1, y1, x2, y2);
                        }
                    } else {
                        n.x = x, n.y = y, n.point = d;
                    }
                } else {
                    insertChild(n, d, x, y, x1, y1, x2, y2);
                }
            }
            function insertChild(n, d, x, y, x1, y1, x2, y2) {
                var xm = (x1 + x2) * 0.5, ym = (y1 + y2) * 0.5, right = x >= xm, below = y >= ym, i = below << 1 | right;
                n.leaf = false;
                n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
                if (right)
                    x1 = xm;
                else
                    x2 = xm;
                if (below)
                    y1 = ym;
                else
                    y2 = ym;
                insert(n, d, x, y, x1, y1, x2, y2);
            }
            var root = d3_geom_quadtreeNode();
            root.add = function (d) {
                insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
            };
            root.visit = function (f) {
                d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
            };
            root.find = function (point) {
                return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
            };
            i = -1;
            if (x1 == null) {
                while (++i < n) {
                    insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
                }
                --i;
            } else
                data.forEach(root.add);
            xs = ys = data = d = null;
            return root;
        }
        quadtree.x = function (_) {
            return arguments.length ? (x = _, quadtree) : x;
        };
        quadtree.y = function (_) {
            return arguments.length ? (y = _, quadtree) : y;
        };
        quadtree.extent = function (_) {
            if (!arguments.length)
                return x1 == null ? null : [
                    [
                        x1,
                        y1
                    ],
                    [
                        x2,
                        y2
                    ]
                ];
            if (_ == null)
                x1 = y1 = x2 = y2 = null;
            else
                x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], y2 = +_[1][1];
            return quadtree;
        };
        quadtree.size = function (_) {
            if (!arguments.length)
                return x1 == null ? null : [
                    x2 - x1,
                    y2 - y1
                ];
            if (_ == null)
                x1 = y1 = x2 = y2 = null;
            else
                x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
            return quadtree;
        };
        return quadtree;
    };
    function d3_geom_quadtreeCompatX(d) {
        return d.x;
    }
    function d3_geom_quadtreeCompatY(d) {
        return d.y;
    }
    function d3_geom_quadtreeNode() {
        return {
            leaf: true,
            nodes: [],
            point: null,
            x: null,
            y: null
        };
    }
    function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
        if (!f(node, x1, y1, x2, y2)) {
            var sx = (x1 + x2) * 0.5, sy = (y1 + y2) * 0.5, children = node.nodes;
            if (children[0])
                d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
            if (children[1])
                d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
            if (children[2])
                d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
            if (children[3])
                d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
        }
    }
    function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
        var minDistance2 = Infinity, closestPoint;
        (function find(node, x1, y1, x2, y2) {
            if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0)
                return;
            if (point = node.point) {
                var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
                if (distance2 < minDistance2) {
                    var distance = Math.sqrt(minDistance2 = distance2);
                    x0 = x - distance, y0 = y - distance;
                    x3 = x + distance, y3 = y + distance;
                    closestPoint = point;
                }
            }
            var children = node.nodes, xm = (x1 + x2) * 0.5, ym = (y1 + y2) * 0.5, right = x >= xm, below = y >= ym;
            for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
                if (node = children[i & 3])
                    switch (i & 3) {
                    case 0:
                        find(node, x1, y1, xm, ym);
                        break;
                    case 1:
                        find(node, xm, y1, x2, ym);
                        break;
                    case 2:
                        find(node, x1, ym, xm, y2);
                        break;
                    case 3:
                        find(node, xm, ym, x2, y2);
                        break;
                    }
            }
        }(root, x0, y0, x3, y3));
        return closestPoint;
    }
    d3.interpolateRgb = d3_interpolateRgb;
    function d3_interpolateRgb(a, b) {
        a = d3.rgb(a);
        b = d3.rgb(b);
        var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
        return function (t) {
            return '#' + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
        };
    }
    d3.interpolateObject = d3_interpolateObject;
    function d3_interpolateObject(a, b) {
        var i = {}, c = {}, k;
        for (k in a) {
            if (k in b) {
                i[k] = d3_interpolate(a[k], b[k]);
            } else {
                c[k] = a[k];
            }
        }
        for (k in b) {
            if (!(k in a)) {
                c[k] = b[k];
            }
        }
        return function (t) {
            for (k in i)
                c[k] = i[k](t);
            return c;
        };
    }
    d3.interpolateNumber = d3_interpolateNumber;
    function d3_interpolateNumber(a, b) {
        a = +a, b = +b;
        return function (t) {
            return a * (1 - t) + b * t;
        };
    }
    d3.interpolateString = d3_interpolateString;
    function d3_interpolateString(a, b) {
        var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
        a = a + '', b = b + '';
        while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
            if ((bs = bm.index) > bi) {
                bs = b.slice(bi, bs);
                if (s[i])
                    s[i] += bs;
                else
                    s[++i] = bs;
            }
            if ((am = am[0]) === (bm = bm[0])) {
                if (s[i])
                    s[i] += bm;
                else
                    s[++i] = bm;
            } else {
                s[++i] = null;
                q.push({
                    i: i,
                    x: d3_interpolateNumber(am, bm)
                });
            }
            bi = d3_interpolate_numberB.lastIndex;
        }
        if (bi < b.length) {
            bs = b.slice(bi);
            if (s[i])
                s[i] += bs;
            else
                s[++i] = bs;
        }
        return s.length < 2 ? q[0] ? (b = q[0].x, function (t) {
            return b(t) + '';
        }) : function () {
            return b;
        } : (b = q.length, function (t) {
            for (var i = 0, o; i < b; ++i)
                s[(o = q[i]).i] = o.x(t);
            return s.join('');
        });
    }
    var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, 'g');
    d3.interpolate = d3_interpolate;
    function d3_interpolate(a, b) {
        var i = d3.interpolators.length, f;
        while (--i >= 0 && !(f = d3.interpolators[i](a, b)));
        return f;
    }
    d3.interpolators = [function (a, b) {
            var t = typeof b;
            return (t === 'string' ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === 'object' && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
        }];
    d3.interpolateArray = d3_interpolateArray;
    function d3_interpolateArray(a, b) {
        var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
        for (i = 0; i < n0; ++i)
            x.push(d3_interpolate(a[i], b[i]));
        for (; i < na; ++i)
            c[i] = a[i];
        for (; i < nb; ++i)
            c[i] = b[i];
        return function (t) {
            for (i = 0; i < n0; ++i)
                c[i] = x[i](t);
            return c;
        };
    }
    var d3_ease_default = function () {
        return d3_identity;
    };
    var d3_ease = d3.map({
        linear: d3_ease_default,
        poly: d3_ease_poly,
        quad: function () {
            return d3_ease_quad;
        },
        cubic: function () {
            return d3_ease_cubic;
        },
        sin: function () {
            return d3_ease_sin;
        },
        exp: function () {
            return d3_ease_exp;
        },
        circle: function () {
            return d3_ease_circle;
        },
        elastic: d3_ease_elastic,
        back: d3_ease_back,
        bounce: function () {
            return d3_ease_bounce;
        }
    });
    var d3_ease_mode = d3.map({
        'in': d3_identity,
        out: d3_ease_reverse,
        'in-out': d3_ease_reflect,
        'out-in': function (f) {
            return d3_ease_reflect(d3_ease_reverse(f));
        }
    });
    d3.ease = function (name) {
        var i = name.indexOf('-'), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : 'in';
        t = d3_ease.get(t) || d3_ease_default;
        m = d3_ease_mode.get(m) || d3_identity;
        return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
    };
    function d3_ease_clamp(f) {
        return function (t) {
            return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
        };
    }
    function d3_ease_reverse(f) {
        return function (t) {
            return 1 - f(1 - t);
        };
    }
    function d3_ease_reflect(f) {
        return function (t) {
            return 0.5 * (t < 0.5 ? f(2 * t) : 2 - f(2 - 2 * t));
        };
    }
    function d3_ease_quad(t) {
        return t * t;
    }
    function d3_ease_cubic(t) {
        return t * t * t;
    }
    function d3_ease_cubicInOut(t) {
        if (t <= 0)
            return 0;
        if (t >= 1)
            return 1;
        var t2 = t * t, t3 = t2 * t;
        return 4 * (t < 0.5 ? t3 : 3 * (t - t2) + t3 - 0.75);
    }
    function d3_ease_poly(e) {
        return function (t) {
            return Math.pow(t, e);
        };
    }
    function d3_ease_sin(t) {
        return 1 - Math.cos(t * halfπ);
    }
    function d3_ease_exp(t) {
        return Math.pow(2, 10 * (t - 1));
    }
    function d3_ease_circle(t) {
        return 1 - Math.sqrt(1 - t * t);
    }
    function d3_ease_elastic(a, p) {
        var s;
        if (arguments.length < 2)
            p = 0.45;
        if (arguments.length)
            s = p / τ * Math.asin(1 / a);
        else
            a = 1, s = p / 4;
        return function (t) {
            return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
        };
    }
    function d3_ease_back(s) {
        if (!s)
            s = 1.70158;
        return function (t) {
            return t * t * ((s + 1) * t - s);
        };
    }
    function d3_ease_bounce(t) {
        return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375 : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
    }
    d3.interpolateHcl = d3_interpolateHcl;
    function d3_interpolateHcl(a, b) {
        a = d3.hcl(a);
        b = d3.hcl(b);
        var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
        if (isNaN(bc))
            bc = 0, ac = isNaN(ac) ? b.c : ac;
        if (isNaN(bh))
            bh = 0, ah = isNaN(ah) ? b.h : ah;
        else if (bh > 180)
            bh -= 360;
        else if (bh < -180)
            bh += 360;
        return function (t) {
            return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + '';
        };
    }
    d3.interpolateHsl = d3_interpolateHsl;
    function d3_interpolateHsl(a, b) {
        a = d3.hsl(a);
        b = d3.hsl(b);
        var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
        if (isNaN(bs))
            bs = 0, as = isNaN(as) ? b.s : as;
        if (isNaN(bh))
            bh = 0, ah = isNaN(ah) ? b.h : ah;
        else if (bh > 180)
            bh -= 360;
        else if (bh < -180)
            bh += 360;
        return function (t) {
            return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + '';
        };
    }
    d3.interpolateLab = d3_interpolateLab;
    function d3_interpolateLab(a, b) {
        a = d3.lab(a);
        b = d3.lab(b);
        var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
        return function (t) {
            return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + '';
        };
    }
    d3.interpolateRound = d3_interpolateRound;
    function d3_interpolateRound(a, b) {
        b -= a;
        return function (t) {
            return Math.round(a + b * t);
        };
    }
    d3.transform = function (string) {
        var g = d3_document.createElementNS(d3.ns.prefix.svg, 'g');
        return (d3.transform = function (string) {
            if (string != null) {
                g.setAttribute('transform', string);
                var t = g.transform.baseVal.consolidate();
            }
            return new d3_transform(t ? t.matrix : d3_transformIdentity);
        })(string);
    };
    function d3_transform(m) {
        var r0 = [
                m.a,
                m.b
            ], r1 = [
                m.c,
                m.d
            ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
        if (r0[0] * r1[1] < r1[0] * r0[1]) {
            r0[0] *= -1;
            r0[1] *= -1;
            kx *= -1;
            kz *= -1;
        }
        this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
        this.translate = [
            m.e,
            m.f
        ];
        this.scale = [
            kx,
            ky
        ];
        this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
    }
    d3_transform.prototype.toString = function () {
        return 'translate(' + this.translate + ')rotate(' + this.rotate + ')skewX(' + this.skew + ')scale(' + this.scale + ')';
    };
    function d3_transformDot(a, b) {
        return a[0] * b[0] + a[1] * b[1];
    }
    function d3_transformNormalize(a) {
        var k = Math.sqrt(d3_transformDot(a, a));
        if (k) {
            a[0] /= k;
            a[1] /= k;
        }
        return k;
    }
    function d3_transformCombine(a, b, k) {
        a[0] += k * b[0];
        a[1] += k * b[1];
        return a;
    }
    var d3_transformIdentity = {
        a: 1,
        b: 0,
        c: 0,
        d: 1,
        e: 0,
        f: 0
    };
    d3.interpolateTransform = d3_interpolateTransform;
    function d3_interpolateTransformPop(s) {
        return s.length ? s.pop() + ',' : '';
    }
    function d3_interpolateTranslate(ta, tb, s, q) {
        if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
            var i = s.push('translate(', null, ',', null, ')');
            q.push({
                i: i - 4,
                x: d3_interpolateNumber(ta[0], tb[0])
            }, {
                i: i - 2,
                x: d3_interpolateNumber(ta[1], tb[1])
            });
        } else if (tb[0] || tb[1]) {
            s.push('translate(' + tb + ')');
        }
    }
    function d3_interpolateRotate(ra, rb, s, q) {
        if (ra !== rb) {
            if (ra - rb > 180)
                rb += 360;
            else if (rb - ra > 180)
                ra += 360;
            q.push({
                i: s.push(d3_interpolateTransformPop(s) + 'rotate(', null, ')') - 2,
                x: d3_interpolateNumber(ra, rb)
            });
        } else if (rb) {
            s.push(d3_interpolateTransformPop(s) + 'rotate(' + rb + ')');
        }
    }
    function d3_interpolateSkew(wa, wb, s, q) {
        if (wa !== wb) {
            q.push({
                i: s.push(d3_interpolateTransformPop(s) + 'skewX(', null, ')') - 2,
                x: d3_interpolateNumber(wa, wb)
            });
        } else if (wb) {
            s.push(d3_interpolateTransformPop(s) + 'skewX(' + wb + ')');
        }
    }
    function d3_interpolateScale(ka, kb, s, q) {
        if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
            var i = s.push(d3_interpolateTransformPop(s) + 'scale(', null, ',', null, ')');
            q.push({
                i: i - 4,
                x: d3_interpolateNumber(ka[0], kb[0])
            }, {
                i: i - 2,
                x: d3_interpolateNumber(ka[1], kb[1])
            });
        } else if (kb[0] !== 1 || kb[1] !== 1) {
            s.push(d3_interpolateTransformPop(s) + 'scale(' + kb + ')');
        }
    }
    function d3_interpolateTransform(a, b) {
        var s = [], q = [];
        a = d3.transform(a), b = d3.transform(b);
        d3_interpolateTranslate(a.translate, b.translate, s, q);
        d3_interpolateRotate(a.rotate, b.rotate, s, q);
        d3_interpolateSkew(a.skew, b.skew, s, q);
        d3_interpolateScale(a.scale, b.scale, s, q);
        a = b = null;
        return function (t) {
            var i = -1, n = q.length, o;
            while (++i < n)
                s[(o = q[i]).i] = o.x(t);
            return s.join('');
        };
    }
    function d3_uninterpolateNumber(a, b) {
        b = (b -= a = +a) || 1 / b;
        return function (x) {
            return (x - a) / b;
        };
    }
    function d3_uninterpolateClamp(a, b) {
        b = (b -= a = +a) || 1 / b;
        return function (x) {
            return Math.max(0, Math.min(1, (x - a) / b));
        };
    }
    d3.layout = {};
    d3.layout.bundle = function () {
        return function (links) {
            var paths = [], i = -1, n = links.length;
            while (++i < n)
                paths.push(d3_layout_bundlePath(links[i]));
            return paths;
        };
    };
    function d3_layout_bundlePath(link) {
        var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [start];
        while (start !== lca) {
            start = start.parent;
            points.push(start);
        }
        var k = points.length;
        while (end !== lca) {
            points.splice(k, 0, end);
            end = end.parent;
        }
        return points;
    }
    function d3_layout_bundleAncestors(node) {
        var ancestors = [], parent = node.parent;
        while (parent != null) {
            ancestors.push(node);
            node = parent;
            parent = parent.parent;
        }
        ancestors.push(node);
        return ancestors;
    }
    function d3_layout_bundleLeastCommonAncestor(a, b) {
        if (a === b)
            return a;
        var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
        while (aNode === bNode) {
            sharedNode = aNode;
            aNode = aNodes.pop();
            bNode = bNodes.pop();
        }
        return sharedNode;
    }
    d3.layout.chord = function () {
        var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
        function relayout() {
            var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
            chords = [];
            groups = [];
            k = 0, i = -1;
            while (++i < n) {
                x = 0, j = -1;
                while (++j < n) {
                    x += matrix[i][j];
                }
                groupSums.push(x);
                subgroupIndex.push(d3.range(n));
                k += x;
            }
            if (sortGroups) {
                groupIndex.sort(function (a, b) {
                    return sortGroups(groupSums[a], groupSums[b]);
                });
            }
            if (sortSubgroups) {
                subgroupIndex.forEach(function (d, i) {
                    d.sort(function (a, b) {
                        return sortSubgroups(matrix[i][a], matrix[i][b]);
                    });
                });
            }
            k = (τ - padding * n) / k;
            x = 0, i = -1;
            while (++i < n) {
                x0 = x, j = -1;
                while (++j < n) {
                    var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
                    subgroups[di + '-' + dj] = {
                        index: di,
                        subindex: dj,
                        startAngle: a0,
                        endAngle: a1,
                        value: v
                    };
                }
                groups[di] = {
                    index: di,
                    startAngle: x0,
                    endAngle: x,
                    value: groupSums[di]
                };
                x += padding;
            }
            i = -1;
            while (++i < n) {
                j = i - 1;
                while (++j < n) {
                    var source = subgroups[i + '-' + j], target = subgroups[j + '-' + i];
                    if (source.value || target.value) {
                        chords.push(source.value < target.value ? {
                            source: target,
                            target: source
                        } : {
                            source: source,
                            target: target
                        });
                    }
                }
            }
            if (sortChords)
                resort();
        }
        function resort() {
            chords.sort(function (a, b) {
                return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
            });
        }
        chord.matrix = function (x) {
            if (!arguments.length)
                return matrix;
            n = (matrix = x) && matrix.length;
            chords = groups = null;
            return chord;
        };
        chord.padding = function (x) {
            if (!arguments.length)
                return padding;
            padding = x;
            chords = groups = null;
            return chord;
        };
        chord.sortGroups = function (x) {
            if (!arguments.length)
                return sortGroups;
            sortGroups = x;
            chords = groups = null;
            return chord;
        };
        chord.sortSubgroups = function (x) {
            if (!arguments.length)
                return sortSubgroups;
            sortSubgroups = x;
            chords = null;
            return chord;
        };
        chord.sortChords = function (x) {
            if (!arguments.length)
                return sortChords;
            sortChords = x;
            if (chords)
                resort();
            return chord;
        };
        chord.chords = function () {
            if (!chords)
                relayout();
            return chords;
        };
        chord.groups = function () {
            if (!groups)
                relayout();
            return groups;
        };
        return chord;
    };
    d3.layout.force = function () {
        var force = {}, event = d3.dispatch('start', 'tick', 'end'), timer, size = [
                1,
                1
            ], drag, alpha, friction = 0.9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = 0.1, theta2 = 0.64, nodes = [], links = [], distances, strengths, charges;
        function repulse(node) {
            return function (quad, x1, _, x2) {
                if (quad.point !== node) {
                    var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
                    if (dw * dw / theta2 < dn) {
                        if (dn < chargeDistance2) {
                            var k = quad.charge / dn;
                            node.px -= dx * k;
                            node.py -= dy * k;
                        }
                        return true;
                    }
                    if (quad.point && dn && dn < chargeDistance2) {
                        var k = quad.pointCharge / dn;
                        node.px -= dx * k;
                        node.py -= dy * k;
                    }
                }
                return !quad.charge;
            };
        }
        force.tick = function () {
            if ((alpha *= 0.99) < 0.005) {
                timer = null;
                event.end({
                    type: 'end',
                    alpha: alpha = 0
                });
                return true;
            }
            var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
            for (i = 0; i < m; ++i) {
                o = links[i];
                s = o.source;
                t = o.target;
                x = t.x - s.x;
                y = t.y - s.y;
                if (l = x * x + y * y) {
                    l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
                    x *= l;
                    y *= l;
                    t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : 0.5);
                    t.y -= y * k;
                    s.x += x * (k = 1 - k);
                    s.y += y * k;
                }
            }
            if (k = alpha * gravity) {
                x = size[0] / 2;
                y = size[1] / 2;
                i = -1;
                if (k)
                    while (++i < n) {
                        o = nodes[i];
                        o.x += (x - o.x) * k;
                        o.y += (y - o.y) * k;
                    }
            }
            if (charge) {
                d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
                i = -1;
                while (++i < n) {
                    if (!(o = nodes[i]).fixed) {
                        q.visit(repulse(o));
                    }
                }
            }
            i = -1;
            while (++i < n) {
                o = nodes[i];
                if (o.fixed) {
                    o.x = o.px;
                    o.y = o.py;
                } else {
                    o.x -= (o.px - (o.px = o.x)) * friction;
                    o.y -= (o.py - (o.py = o.y)) * friction;
                }
            }
            event.tick({
                type: 'tick',
                alpha: alpha
            });
        };
        force.nodes = function (x) {
            if (!arguments.length)
                return nodes;
            nodes = x;
            return force;
        };
        force.links = function (x) {
            if (!arguments.length)
                return links;
            links = x;
            return force;
        };
        force.size = function (x) {
            if (!arguments.length)
                return size;
            size = x;
            return force;
        };
        force.linkDistance = function (x) {
            if (!arguments.length)
                return linkDistance;
            linkDistance = typeof x === 'function' ? x : +x;
            return force;
        };
        force.distance = force.linkDistance;
        force.linkStrength = function (x) {
            if (!arguments.length)
                return linkStrength;
            linkStrength = typeof x === 'function' ? x : +x;
            return force;
        };
        force.friction = function (x) {
            if (!arguments.length)
                return friction;
            friction = +x;
            return force;
        };
        force.charge = function (x) {
            if (!arguments.length)
                return charge;
            charge = typeof x === 'function' ? x : +x;
            return force;
        };
        force.chargeDistance = function (x) {
            if (!arguments.length)
                return Math.sqrt(chargeDistance2);
            chargeDistance2 = x * x;
            return force;
        };
        force.gravity = function (x) {
            if (!arguments.length)
                return gravity;
            gravity = +x;
            return force;
        };
        force.theta = function (x) {
            if (!arguments.length)
                return Math.sqrt(theta2);
            theta2 = x * x;
            return force;
        };
        force.alpha = function (x) {
            if (!arguments.length)
                return alpha;
            x = +x;
            if (alpha) {
                if (x > 0) {
                    alpha = x;
                } else {
                    timer.c = null, timer.t = NaN, timer = null;
                    event.end({
                        type: 'end',
                        alpha: alpha = 0
                    });
                }
            } else if (x > 0) {
                event.start({
                    type: 'start',
                    alpha: alpha = x
                });
                timer = d3_timer(force.tick);
            }
            return force;
        };
        force.start = function () {
            var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
            for (i = 0; i < n; ++i) {
                (o = nodes[i]).index = i;
                o.weight = 0;
            }
            for (i = 0; i < m; ++i) {
                o = links[i];
                if (typeof o.source == 'number')
                    o.source = nodes[o.source];
                if (typeof o.target == 'number')
                    o.target = nodes[o.target];
                ++o.source.weight;
                ++o.target.weight;
            }
            for (i = 0; i < n; ++i) {
                o = nodes[i];
                if (isNaN(o.x))
                    o.x = position('x', w);
                if (isNaN(o.y))
                    o.y = position('y', h);
                if (isNaN(o.px))
                    o.px = o.x;
                if (isNaN(o.py))
                    o.py = o.y;
            }
            distances = [];
            if (typeof linkDistance === 'function')
                for (i = 0; i < m; ++i)
                    distances[i] = +linkDistance.call(this, links[i], i);
            else
                for (i = 0; i < m; ++i)
                    distances[i] = linkDistance;
            strengths = [];
            if (typeof linkStrength === 'function')
                for (i = 0; i < m; ++i)
                    strengths[i] = +linkStrength.call(this, links[i], i);
            else
                for (i = 0; i < m; ++i)
                    strengths[i] = linkStrength;
            charges = [];
            if (typeof charge === 'function')
                for (i = 0; i < n; ++i)
                    charges[i] = +charge.call(this, nodes[i], i);
            else
                for (i = 0; i < n; ++i)
                    charges[i] = charge;
            function position(dimension, size) {
                if (!neighbors) {
                    neighbors = new Array(n);
                    for (j = 0; j < n; ++j) {
                        neighbors[j] = [];
                    }
                    for (j = 0; j < m; ++j) {
                        var o = links[j];
                        neighbors[o.source.index].push(o.target);
                        neighbors[o.target.index].push(o.source);
                    }
                }
                var candidates = neighbors[i], j = -1, l = candidates.length, x;
                while (++j < l)
                    if (!isNaN(x = candidates[j][dimension]))
                        return x;
                return Math.random() * size;
            }
            return force.resume();
        };
        force.resume = function () {
            return force.alpha(0.1);
        };
        force.stop = function () {
            return force.alpha(0);
        };
        force.drag = function () {
            if (!drag)
                drag = d3.behavior.drag().origin(d3_identity).on('dragstart.force', d3_layout_forceDragstart).on('drag.force', dragmove).on('dragend.force', d3_layout_forceDragend);
            if (!arguments.length)
                return drag;
            this.on('mouseover.force', d3_layout_forceMouseover).on('mouseout.force', d3_layout_forceMouseout).call(drag);
        };
        function dragmove(d) {
            d.px = d3.event.x, d.py = d3.event.y;
            force.resume();
        }
        return d3.rebind(force, event, 'on');
    };
    function d3_layout_forceDragstart(d) {
        d.fixed |= 2;
    }
    function d3_layout_forceDragend(d) {
        d.fixed &= ~6;
    }
    function d3_layout_forceMouseover(d) {
        d.fixed |= 4;
        d.px = d.x, d.py = d.y;
    }
    function d3_layout_forceMouseout(d) {
        d.fixed &= ~4;
    }
    function d3_layout_forceAccumulate(quad, alpha, charges) {
        var cx = 0, cy = 0;
        quad.charge = 0;
        if (!quad.leaf) {
            var nodes = quad.nodes, n = nodes.length, i = -1, c;
            while (++i < n) {
                c = nodes[i];
                if (c == null)
                    continue;
                d3_layout_forceAccumulate(c, alpha, charges);
                quad.charge += c.charge;
                cx += c.charge * c.cx;
                cy += c.charge * c.cy;
            }
        }
        if (quad.point) {
            if (!quad.leaf) {
                quad.point.x += Math.random() - 0.5;
                quad.point.y += Math.random() - 0.5;
            }
            var k = alpha * charges[quad.point.index];
            quad.charge += quad.pointCharge = k;
            cx += k * quad.point.x;
            cy += k * quad.point.y;
        }
        quad.cx = cx / quad.charge;
        quad.cy = cy / quad.charge;
    }
    var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
    d3.layout.hierarchy = function () {
        var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
        function hierarchy(root) {
            var stack = [root], nodes = [], node;
            root.depth = 0;
            while ((node = stack.pop()) != null) {
                nodes.push(node);
                if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
                    var n, childs, child;
                    while (--n >= 0) {
                        stack.push(child = childs[n]);
                        child.parent = node;
                        child.depth = node.depth + 1;
                    }
                    if (value)
                        node.value = 0;
                    node.children = childs;
                } else {
                    if (value)
                        node.value = +value.call(hierarchy, node, node.depth) || 0;
                    delete node.children;
                }
            }
            d3_layout_hierarchyVisitAfter(root, function (node) {
                var childs, parent;
                if (sort && (childs = node.children))
                    childs.sort(sort);
                if (value && (parent = node.parent))
                    parent.value += node.value;
            });
            return nodes;
        }
        hierarchy.sort = function (x) {
            if (!arguments.length)
                return sort;
            sort = x;
            return hierarchy;
        };
        hierarchy.children = function (x) {
            if (!arguments.length)
                return children;
            children = x;
            return hierarchy;
        };
        hierarchy.value = function (x) {
            if (!arguments.length)
                return value;
            value = x;
            return hierarchy;
        };
        hierarchy.revalue = function (root) {
            if (value) {
                d3_layout_hierarchyVisitBefore(root, function (node) {
                    if (node.children)
                        node.value = 0;
                });
                d3_layout_hierarchyVisitAfter(root, function (node) {
                    var parent;
                    if (!node.children)
                        node.value = +value.call(hierarchy, node, node.depth) || 0;
                    if (parent = node.parent)
                        parent.value += node.value;
                });
            }
            return root;
        };
        return hierarchy;
    };
    function d3_layout_hierarchyRebind(object, hierarchy) {
        d3.rebind(object, hierarchy, 'sort', 'children', 'value');
        object.nodes = object;
        object.links = d3_layout_hierarchyLinks;
        return object;
    }
    function d3_layout_hierarchyVisitBefore(node, callback) {
        var nodes = [node];
        while ((node = nodes.pop()) != null) {
            callback(node);
            if ((children = node.children) && (n = children.length)) {
                var n, children;
                while (--n >= 0)
                    nodes.push(children[n]);
            }
        }
    }
    function d3_layout_hierarchyVisitAfter(node, callback) {
        var nodes = [node], nodes2 = [];
        while ((node = nodes.pop()) != null) {
            nodes2.push(node);
            if ((children = node.children) && (n = children.length)) {
                var i = -1, n, children;
                while (++i < n)
                    nodes.push(children[i]);
            }
        }
        while ((node = nodes2.pop()) != null) {
            callback(node);
        }
    }
    function d3_layout_hierarchyChildren(d) {
        return d.children;
    }
    function d3_layout_hierarchyValue(d) {
        return d.value;
    }
    function d3_layout_hierarchySort(a, b) {
        return b.value - a.value;
    }
    function d3_layout_hierarchyLinks(nodes) {
        return d3.merge(nodes.map(function (parent) {
            return (parent.children || []).map(function (child) {
                return {
                    source: parent,
                    target: child
                };
            });
        }));
    }
    d3.layout.partition = function () {
        var hierarchy = d3.layout.hierarchy(), size = [
                1,
                1
            ];
        function position(node, x, dx, dy) {
            var children = node.children;
            node.x = x;
            node.y = node.depth * dy;
            node.dx = dx;
            node.dy = dy;
            if (children && (n = children.length)) {
                var i = -1, n, c, d;
                dx = node.value ? dx / node.value : 0;
                while (++i < n) {
                    position(c = children[i], x, d = c.value * dx, dy);
                    x += d;
                }
            }
        }
        function depth(node) {
            var children = node.children, d = 0;
            if (children && (n = children.length)) {
                var i = -1, n;
                while (++i < n)
                    d = Math.max(d, depth(children[i]));
            }
            return 1 + d;
        }
        function partition(d, i) {
            var nodes = hierarchy.call(this, d, i);
            position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
            return nodes;
        }
        partition.size = function (x) {
            if (!arguments.length)
                return size;
            size = x;
            return partition;
        };
        return d3_layout_hierarchyRebind(partition, hierarchy);
    };
    d3.layout.pie = function () {
        var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
        function pie(data) {
            var n = data.length, values = data.map(function (d, i) {
                    return +value.call(pie, d, i);
                }), a = +(typeof startAngle === 'function' ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === 'function' ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === 'function' ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
            if (sort != null)
                index.sort(sort === d3_layout_pieSortByValue ? function (i, j) {
                    return values[j] - values[i];
                } : function (i, j) {
                    return sort(data[i], data[j]);
                });
            index.forEach(function (i) {
                arcs[i] = {
                    data: data[i],
                    value: v = values[i],
                    startAngle: a,
                    endAngle: a += v * k + pa,
                    padAngle: p
                };
            });
            return arcs;
        }
        pie.value = function (_) {
            if (!arguments.length)
                return value;
            value = _;
            return pie;
        };
        pie.sort = function (_) {
            if (!arguments.length)
                return sort;
            sort = _;
            return pie;
        };
        pie.startAngle = function (_) {
            if (!arguments.length)
                return startAngle;
            startAngle = _;
            return pie;
        };
        pie.endAngle = function (_) {
            if (!arguments.length)
                return endAngle;
            endAngle = _;
            return pie;
        };
        pie.padAngle = function (_) {
            if (!arguments.length)
                return padAngle;
            padAngle = _;
            return pie;
        };
        return pie;
    };
    var d3_layout_pieSortByValue = {};
    d3.layout.stack = function () {
        var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
        function stack(data, index) {
            if (!(n = data.length))
                return data;
            var series = data.map(function (d, i) {
                return values.call(stack, d, i);
            });
            var points = series.map(function (d) {
                return d.map(function (v, i) {
                    return [
                        x.call(stack, v, i),
                        y.call(stack, v, i)
                    ];
                });
            });
            var orders = order.call(stack, points, index);
            series = d3.permute(series, orders);
            points = d3.permute(points, orders);
            var offsets = offset.call(stack, points, index);
            var m = series[0].length, n, i, j, o;
            for (j = 0; j < m; ++j) {
                out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
                for (i = 1; i < n; ++i) {
                    out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
                }
            }
            return data;
        }
        stack.values = function (x) {
            if (!arguments.length)
                return values;
            values = x;
            return stack;
        };
        stack.order = function (x) {
            if (!arguments.length)
                return order;
            order = typeof x === 'function' ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
            return stack;
        };
        stack.offset = function (x) {
            if (!arguments.length)
                return offset;
            offset = typeof x === 'function' ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
            return stack;
        };
        stack.x = function (z) {
            if (!arguments.length)
                return x;
            x = z;
            return stack;
        };
        stack.y = function (z) {
            if (!arguments.length)
                return y;
            y = z;
            return stack;
        };
        stack.out = function (z) {
            if (!arguments.length)
                return out;
            out = z;
            return stack;
        };
        return stack;
    };
    function d3_layout_stackX(d) {
        return d.x;
    }
    function d3_layout_stackY(d) {
        return d.y;
    }
    function d3_layout_stackOut(d, y0, y) {
        d.y0 = y0;
        d.y = y;
    }
    var d3_layout_stackOrders = d3.map({
        'inside-out': function (data) {
            var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function (a, b) {
                    return max[a] - max[b];
                }), top = 0, bottom = 0, tops = [], bottoms = [];
            for (i = 0; i < n; ++i) {
                j = index[i];
                if (top < bottom) {
                    top += sums[j];
                    tops.push(j);
                } else {
                    bottom += sums[j];
                    bottoms.push(j);
                }
            }
            return bottoms.reverse().concat(tops);
        },
        reverse: function (data) {
            return d3.range(data.length).reverse();
        },
        'default': d3_layout_stackOrderDefault
    });
    var d3_layout_stackOffsets = d3.map({
        silhouette: function (data) {
            var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
            for (j = 0; j < m; ++j) {
                for (i = 0, o = 0; i < n; i++)
                    o += data[i][j][1];
                if (o > max)
                    max = o;
                sums.push(o);
            }
            for (j = 0; j < m; ++j) {
                y0[j] = (max - sums[j]) / 2;
            }
            return y0;
        },
        wiggle: function (data) {
            var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
            y0[0] = o = o0 = 0;
            for (j = 1; j < m; ++j) {
                for (i = 0, s1 = 0; i < n; ++i)
                    s1 += data[i][j][1];
                for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
                    for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
                        s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
                    }
                    s2 += s3 * data[i][j][1];
                }
                y0[j] = o -= s1 ? s2 / s1 * dx : 0;
                if (o < o0)
                    o0 = o;
            }
            for (j = 0; j < m; ++j)
                y0[j] -= o0;
            return y0;
        },
        expand: function (data) {
            var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
            for (j = 0; j < m; ++j) {
                for (i = 0, o = 0; i < n; i++)
                    o += data[i][j][1];
                if (o)
                    for (i = 0; i < n; i++)
                        data[i][j][1] /= o;
                else
                    for (i = 0; i < n; i++)
                        data[i][j][1] = k;
            }
            for (j = 0; j < m; ++j)
                y0[j] = 0;
            return y0;
        },
        zero: d3_layout_stackOffsetZero
    });
    function d3_layout_stackOrderDefault(data) {
        return d3.range(data.length);
    }
    function d3_layout_stackOffsetZero(data) {
        var j = -1, m = data[0].length, y0 = [];
        while (++j < m)
            y0[j] = 0;
        return y0;
    }
    function d3_layout_stackMaxIndex(array) {
        var i = 1, j = 0, v = array[0][1], k, n = array.length;
        for (; i < n; ++i) {
            if ((k = array[i][1]) > v) {
                j = i;
                v = k;
            }
        }
        return j;
    }
    function d3_layout_stackReduceSum(d) {
        return d.reduce(d3_layout_stackSum, 0);
    }
    function d3_layout_stackSum(p, d) {
        return p + d[1];
    }
    d3.layout.histogram = function () {
        var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
        function histogram(data, i) {
            var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
            while (++i < m) {
                bin = bins[i] = [];
                bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
                bin.y = 0;
            }
            if (m > 0) {
                i = -1;
                while (++i < n) {
                    x = values[i];
                    if (x >= range[0] && x <= range[1]) {
                        bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
                        bin.y += k;
                        bin.push(data[i]);
                    }
                }
            }
            return bins;
        }
        histogram.value = function (x) {
            if (!arguments.length)
                return valuer;
            valuer = x;
            return histogram;
        };
        histogram.range = function (x) {
            if (!arguments.length)
                return ranger;
            ranger = d3_functor(x);
            return histogram;
        };
        histogram.bins = function (x) {
            if (!arguments.length)
                return binner;
            binner = typeof x === 'number' ? function (range) {
                return d3_layout_histogramBinFixed(range, x);
            } : d3_functor(x);
            return histogram;
        };
        histogram.frequency = function (x) {
            if (!arguments.length)
                return frequency;
            frequency = !!x;
            return histogram;
        };
        return histogram;
    };
    function d3_layout_histogramBinSturges(range, values) {
        return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
    }
    function d3_layout_histogramBinFixed(range, n) {
        var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
        while (++x <= n)
            f[x] = m * x + b;
        return f;
    }
    function d3_layout_histogramRange(values) {
        return [
            d3.min(values),
            d3.max(values)
        ];
    }
    d3.layout.pack = function () {
        var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [
                1,
                1
            ], radius;
        function pack(d, i) {
            var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === 'function' ? radius : function () {
                    return radius;
                };
            root.x = root.y = 0;
            d3_layout_hierarchyVisitAfter(root, function (d) {
                d.r = +r(d.value);
            });
            d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
            if (padding) {
                var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
                d3_layout_hierarchyVisitAfter(root, function (d) {
                    d.r += dr;
                });
                d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
                d3_layout_hierarchyVisitAfter(root, function (d) {
                    d.r -= dr;
                });
            }
            d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
            return nodes;
        }
        pack.size = function (_) {
            if (!arguments.length)
                return size;
            size = _;
            return pack;
        };
        pack.radius = function (_) {
            if (!arguments.length)
                return radius;
            radius = _ == null || typeof _ === 'function' ? _ : +_;
            return pack;
        };
        pack.padding = function (_) {
            if (!arguments.length)
                return padding;
            padding = +_;
            return pack;
        };
        return d3_layout_hierarchyRebind(pack, hierarchy);
    };
    function d3_layout_packSort(a, b) {
        return a.value - b.value;
    }
    function d3_layout_packInsert(a, b) {
        var c = a._pack_next;
        a._pack_next = b;
        b._pack_prev = a;
        b._pack_next = c;
        c._pack_prev = b;
    }
    function d3_layout_packSplice(a, b) {
        a._pack_next = b;
        b._pack_prev = a;
    }
    function d3_layout_packIntersects(a, b) {
        var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
        return 0.999 * dr * dr > dx * dx + dy * dy;
    }
    function d3_layout_packSiblings(node) {
        if (!(nodes = node.children) || !(n = nodes.length))
            return;
        var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
        function bound(node) {
            xMin = Math.min(node.x - node.r, xMin);
            xMax = Math.max(node.x + node.r, xMax);
            yMin = Math.min(node.y - node.r, yMin);
            yMax = Math.max(node.y + node.r, yMax);
        }
        nodes.forEach(d3_layout_packLink);
        a = nodes[0];
        a.x = -a.r;
        a.y = 0;
        bound(a);
        if (n > 1) {
            b = nodes[1];
            b.x = b.r;
            b.y = 0;
            bound(b);
            if (n > 2) {
                c = nodes[2];
                d3_layout_packPlace(a, b, c);
                bound(c);
                d3_layout_packInsert(a, c);
                a._pack_prev = c;
                d3_layout_packInsert(c, b);
                b = a._pack_next;
                for (i = 3; i < n; i++) {
                    d3_layout_packPlace(a, b, c = nodes[i]);
                    var isect = 0, s1 = 1, s2 = 1;
                    for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
                        if (d3_layout_packIntersects(j, c)) {
                            isect = 1;
                            break;
                        }
                    }
                    if (isect == 1) {
                        for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
                            if (d3_layout_packIntersects(k, c)) {
                                break;
                            }
                        }
                    }
                    if (isect) {
                        if (s1 < s2 || s1 == s2 && b.r < a.r)
                            d3_layout_packSplice(a, b = j);
                        else
                            d3_layout_packSplice(a = k, b);
                        i--;
                    } else {
                        d3_layout_packInsert(a, c);
                        b = c;
                        bound(c);
                    }
                }
            }
        }
        var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
        for (i = 0; i < n; i++) {
            c = nodes[i];
            c.x -= cx;
            c.y -= cy;
            cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
        }
        node.r = cr;
        nodes.forEach(d3_layout_packUnlink);
    }
    function d3_layout_packLink(node) {
        node._pack_next = node._pack_prev = node;
    }
    function d3_layout_packUnlink(node) {
        delete node._pack_next;
        delete node._pack_prev;
    }
    function d3_layout_packTransform(node, x, y, k) {
        var children = node.children;
        node.x = x += k * node.x;
        node.y = y += k * node.y;
        node.r *= k;
        if (children) {
            var i = -1, n = children.length;
            while (++i < n)
                d3_layout_packTransform(children[i], x, y, k);
        }
    }
    function d3_layout_packPlace(a, b, c) {
        var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
        if (db && (dx || dy)) {
            var da = b.r + c.r, dc = dx * dx + dy * dy;
            da *= da;
            db *= db;
            var x = 0.5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
            c.x = a.x + x * dx + y * dy;
            c.y = a.y + x * dy - y * dx;
        } else {
            c.x = a.x + db;
            c.y = a.y;
        }
    }
    d3.layout.tree = function () {
        var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [
                1,
                1
            ], nodeSize = null;
        function tree(d, i) {
            var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
            d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
            d3_layout_hierarchyVisitBefore(root1, secondWalk);
            if (nodeSize)
                d3_layout_hierarchyVisitBefore(root0, sizeNode);
            else {
                var left = root0, right = root0, bottom = root0;
                d3_layout_hierarchyVisitBefore(root0, function (node) {
                    if (node.x < left.x)
                        left = node;
                    if (node.x > right.x)
                        right = node;
                    if (node.depth > bottom.depth)
                        bottom = node;
                });
                var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
                d3_layout_hierarchyVisitBefore(root0, function (node) {
                    node.x = (node.x + tx) * kx;
                    node.y = node.depth * ky;
                });
            }
            return nodes;
        }
        function wrapTree(root0) {
            var root1 = {
                    A: null,
                    children: [root0]
                }, queue = [root1], node1;
            while ((node1 = queue.pop()) != null) {
                for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
                    queue.push((children[i] = child = {
                        _: children[i],
                        parent: node1,
                        children: (child = children[i].children) && child.slice() || [],
                        A: null,
                        a: null,
                        z: 0,
                        m: 0,
                        c: 0,
                        s: 0,
                        t: null,
                        i: i
                    }).a = child);
                }
            }
            return root1.children[0];
        }
        function firstWalk(v) {
            var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
            if (children.length) {
                d3_layout_treeShift(v);
                var midpoint = (children[0].z + children[children.length - 1].z) / 2;
                if (w) {
                    v.z = w.z + separation(v._, w._);
                    v.m = v.z - midpoint;
                } else {
                    v.z = midpoint;
                }
            } else if (w) {
                v.z = w.z + separation(v._, w._);
            }
            v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
        }
        function secondWalk(v) {
            v._.x = v.z + v.parent.m;
            v.m += v.parent.m;
        }
        function apportion(v, w, ancestor) {
            if (w) {
                var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
                while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
                    vom = d3_layout_treeLeft(vom);
                    vop = d3_layout_treeRight(vop);
                    vop.a = v;
                    shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
                    if (shift > 0) {
                        d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
                        sip += shift;
                        sop += shift;
                    }
                    sim += vim.m;
                    sip += vip.m;
                    som += vom.m;
                    sop += vop.m;
                }
                if (vim && !d3_layout_treeRight(vop)) {
                    vop.t = vim;
                    vop.m += sim - sop;
                }
                if (vip && !d3_layout_treeLeft(vom)) {
                    vom.t = vip;
                    vom.m += sip - som;
                    ancestor = v;
                }
            }
            return ancestor;
        }
        function sizeNode(node) {
            node.x *= size[0];
            node.y = node.depth * size[1];
        }
        tree.separation = function (x) {
            if (!arguments.length)
                return separation;
            separation = x;
            return tree;
        };
        tree.size = function (x) {
            if (!arguments.length)
                return nodeSize ? null : size;
            nodeSize = (size = x) == null ? sizeNode : null;
            return tree;
        };
        tree.nodeSize = function (x) {
            if (!arguments.length)
                return nodeSize ? size : null;
            nodeSize = (size = x) == null ? null : sizeNode;
            return tree;
        };
        return d3_layout_hierarchyRebind(tree, hierarchy);
    };
    function d3_layout_treeSeparation(a, b) {
        return a.parent == b.parent ? 1 : 2;
    }
    function d3_layout_treeLeft(v) {
        var children = v.children;
        return children.length ? children[0] : v.t;
    }
    function d3_layout_treeRight(v) {
        var children = v.children, n;
        return (n = children.length) ? children[n - 1] : v.t;
    }
    function d3_layout_treeMove(wm, wp, shift) {
        var change = shift / (wp.i - wm.i);
        wp.c -= change;
        wp.s += shift;
        wm.c += change;
        wp.z += shift;
        wp.m += shift;
    }
    function d3_layout_treeShift(v) {
        var shift = 0, change = 0, children = v.children, i = children.length, w;
        while (--i >= 0) {
            w = children[i];
            w.z += shift;
            w.m += shift;
            shift += w.s + (change += w.c);
        }
    }
    function d3_layout_treeAncestor(vim, v, ancestor) {
        return vim.a.parent === v.parent ? vim.a : ancestor;
    }
    d3.layout.cluster = function () {
        var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [
                1,
                1
            ], nodeSize = false;
        function cluster(d, i) {
            var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
            d3_layout_hierarchyVisitAfter(root, function (node) {
                var children = node.children;
                if (children && children.length) {
                    node.x = d3_layout_clusterX(children);
                    node.y = d3_layout_clusterY(children);
                } else {
                    node.x = previousNode ? x += separation(node, previousNode) : 0;
                    node.y = 0;
                    previousNode = node;
                }
            });
            var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
            d3_layout_hierarchyVisitAfter(root, nodeSize ? function (node) {
                node.x = (node.x - root.x) * size[0];
                node.y = (root.y - node.y) * size[1];
            } : function (node) {
                node.x = (node.x - x0) / (x1 - x0) * size[0];
                node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
            });
            return nodes;
        }
        cluster.separation = function (x) {
            if (!arguments.length)
                return separation;
            separation = x;
            return cluster;
        };
        cluster.size = function (x) {
            if (!arguments.length)
                return nodeSize ? null : size;
            nodeSize = (size = x) == null;
            return cluster;
        };
        cluster.nodeSize = function (x) {
            if (!arguments.length)
                return nodeSize ? size : null;
            nodeSize = (size = x) != null;
            return cluster;
        };
        return d3_layout_hierarchyRebind(cluster, hierarchy);
    };
    function d3_layout_clusterY(children) {
        return 1 + d3.max(children, function (child) {
            return child.y;
        });
    }
    function d3_layout_clusterX(children) {
        return children.reduce(function (x, child) {
            return x + child.x;
        }, 0) / children.length;
    }
    function d3_layout_clusterLeft(node) {
        var children = node.children;
        return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
    }
    function d3_layout_clusterRight(node) {
        var children = node.children, n;
        return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
    }
    d3.layout.treemap = function () {
        var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [
                1,
                1
            ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = 'squarify', ratio = 0.5 * (1 + Math.sqrt(5));
        function scale(children, k) {
            var i = -1, n = children.length, child, area;
            while (++i < n) {
                area = (child = children[i]).value * (k < 0 ? 0 : k);
                child.area = isNaN(area) || area <= 0 ? 0 : area;
            }
        }
        function squarify(node) {
            var children = node.children;
            if (children && children.length) {
                var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === 'slice' ? rect.dx : mode === 'dice' ? rect.dy : mode === 'slice-dice' ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
                scale(remaining, rect.dx * rect.dy / node.value);
                row.area = 0;
                while ((n = remaining.length) > 0) {
                    row.push(child = remaining[n - 1]);
                    row.area += child.area;
                    if (mode !== 'squarify' || (score = worst(row, u)) <= best) {
                        remaining.pop();
                        best = score;
                    } else {
                        row.area -= row.pop().area;
                        position(row, u, rect, false);
                        u = Math.min(rect.dx, rect.dy);
                        row.length = row.area = 0;
                        best = Infinity;
                    }
                }
                if (row.length) {
                    position(row, u, rect, true);
                    row.length = row.area = 0;
                }
                children.forEach(squarify);
            }
        }
        function stickify(node) {
            var children = node.children;
            if (children && children.length) {
                var rect = pad(node), remaining = children.slice(), child, row = [];
                scale(remaining, rect.dx * rect.dy / node.value);
                row.area = 0;
                while (child = remaining.pop()) {
                    row.push(child);
                    row.area += child.area;
                    if (child.z != null) {
                        position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
                        row.length = row.area = 0;
                    }
                }
                children.forEach(stickify);
            }
        }
        function worst(row, u) {
            var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
            while (++i < n) {
                if (!(r = row[i].area))
                    continue;
                if (r < rmin)
                    rmin = r;
                if (r > rmax)
                    rmax = r;
            }
            s *= s;
            u *= u;
            return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
        }
        function position(row, u, rect, flush) {
            var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
            if (u == rect.dx) {
                if (flush || v > rect.dy)
                    v = rect.dy;
                while (++i < n) {
                    o = row[i];
                    o.x = x;
                    o.y = y;
                    o.dy = v;
                    x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
                }
                o.z = true;
                o.dx += rect.x + rect.dx - x;
                rect.y += v;
                rect.dy -= v;
            } else {
                if (flush || v > rect.dx)
                    v = rect.dx;
                while (++i < n) {
                    o = row[i];
                    o.x = x;
                    o.y = y;
                    o.dx = v;
                    y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
                }
                o.z = false;
                o.dy += rect.y + rect.dy - y;
                rect.x += v;
                rect.dx -= v;
            }
        }
        function treemap(d) {
            var nodes = stickies || hierarchy(d), root = nodes[0];
            root.x = root.y = 0;
            if (root.value)
                root.dx = size[0], root.dy = size[1];
            else
                root.dx = root.dy = 0;
            if (stickies)
                hierarchy.revalue(root);
            scale([root], root.dx * root.dy / root.value);
            (stickies ? stickify : squarify)(root);
            if (sticky)
                stickies = nodes;
            return nodes;
        }
        treemap.size = function (x) {
            if (!arguments.length)
                return size;
            size = x;
            return treemap;
        };
        treemap.padding = function (x) {
            if (!arguments.length)
                return padding;
            function padFunction(node) {
                var p = x.call(treemap, node, node.depth);
                return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === 'number' ? [
                    p,
                    p,
                    p,
                    p
                ] : p);
            }
            function padConstant(node) {
                return d3_layout_treemapPad(node, x);
            }
            var type;
            pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === 'function' ? padFunction : type === 'number' ? (x = [
                x,
                x,
                x,
                x
            ], padConstant) : padConstant;
            return treemap;
        };
        treemap.round = function (x) {
            if (!arguments.length)
                return round != Number;
            round = x ? Math.round : Number;
            return treemap;
        };
        treemap.sticky = function (x) {
            if (!arguments.length)
                return sticky;
            sticky = x;
            stickies = null;
            return treemap;
        };
        treemap.ratio = function (x) {
            if (!arguments.length)
                return ratio;
            ratio = x;
            return treemap;
        };
        treemap.mode = function (x) {
            if (!arguments.length)
                return mode;
            mode = x + '';
            return treemap;
        };
        return d3_layout_hierarchyRebind(treemap, hierarchy);
    };
    function d3_layout_treemapPadNull(node) {
        return {
            x: node.x,
            y: node.y,
            dx: node.dx,
            dy: node.dy
        };
    }
    function d3_layout_treemapPad(node, padding) {
        var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
        if (dx < 0) {
            x += dx / 2;
            dx = 0;
        }
        if (dy < 0) {
            y += dy / 2;
            dy = 0;
        }
        return {
            x: x,
            y: y,
            dx: dx,
            dy: dy
        };
    }
    d3.random = {
        normal: function (µ, σ) {
            var n = arguments.length;
            if (n < 2)
                σ = 1;
            if (n < 1)
                µ = 0;
            return function () {
                var x, y, r;
                do {
                    x = Math.random() * 2 - 1;
                    y = Math.random() * 2 - 1;
                    r = x * x + y * y;
                } while (!r || r > 1);
                return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
            };
        },
        logNormal: function () {
            var random = d3.random.normal.apply(d3, arguments);
            return function () {
                return Math.exp(random());
            };
        },
        bates: function (m) {
            var random = d3.random.irwinHall(m);
            return function () {
                return random() / m;
            };
        },
        irwinHall: function (m) {
            return function () {
                for (var s = 0, j = 0; j < m; j++)
                    s += Math.random();
                return s;
            };
        }
    };
    d3.scale = {};
    function d3_scaleExtent(domain) {
        var start = domain[0], stop = domain[domain.length - 1];
        return start < stop ? [
            start,
            stop
        ] : [
            stop,
            start
        ];
    }
    function d3_scaleRange(scale) {
        return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
    }
    function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
        var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
        return function (x) {
            return i(u(x));
        };
    }
    function d3_scale_nice(domain, nice) {
        var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
        if (x1 < x0) {
            dx = i0, i0 = i1, i1 = dx;
            dx = x0, x0 = x1, x1 = dx;
        }
        domain[i0] = nice.floor(x0);
        domain[i1] = nice.ceil(x1);
        return domain;
    }
    function d3_scale_niceStep(step) {
        return step ? {
            floor: function (x) {
                return Math.floor(x / step) * step;
            },
            ceil: function (x) {
                return Math.ceil(x / step) * step;
            }
        } : d3_scale_niceIdentity;
    }
    var d3_scale_niceIdentity = {
        floor: d3_identity,
        ceil: d3_identity
    };
    function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
        var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
        if (domain[k] < domain[0]) {
            domain = domain.slice().reverse();
            range = range.slice().reverse();
        }
        while (++j <= k) {
            u.push(uninterpolate(domain[j - 1], domain[j]));
            i.push(interpolate(range[j - 1], range[j]));
        }
        return function (x) {
            var j = d3.bisect(domain, x, 1, k) - 1;
            return i[j](u[j](x));
        };
    }
    d3.scale.linear = function () {
        return d3_scale_linear([
            0,
            1
        ], [
            0,
            1
        ], d3_interpolate, false);
    };
    function d3_scale_linear(domain, range, interpolate, clamp) {
        var output, input;
        function rescale() {
            var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
            output = linear(domain, range, uninterpolate, interpolate);
            input = linear(range, domain, uninterpolate, d3_interpolate);
            return scale;
        }
        function scale(x) {
            return output(x);
        }
        scale.invert = function (y) {
            return input(y);
        };
        scale.domain = function (x) {
            if (!arguments.length)
                return domain;
            domain = x.map(Number);
            return rescale();
        };
        scale.range = function (x) {
            if (!arguments.length)
                return range;
            range = x;
            return rescale();
        };
        scale.rangeRound = function (x) {
            return scale.range(x).interpolate(d3_interpolateRound);
        };
        scale.clamp = function (x) {
            if (!arguments.length)
                return clamp;
            clamp = x;
            return rescale();
        };
        scale.interpolate = function (x) {
            if (!arguments.length)
                return interpolate;
            interpolate = x;
            return rescale();
        };
        scale.ticks = function (m) {
            return d3_scale_linearTicks(domain, m);
        };
        scale.tickFormat = function (m, format) {
            return d3_scale_linearTickFormat(domain, m, format);
        };
        scale.nice = function (m) {
            d3_scale_linearNice(domain, m);
            return rescale();
        };
        scale.copy = function () {
            return d3_scale_linear(domain, range, interpolate, clamp);
        };
        return rescale();
    }
    function d3_scale_linearRebind(scale, linear) {
        return d3.rebind(scale, linear, 'range', 'rangeRound', 'interpolate', 'clamp');
    }
    function d3_scale_linearNice(domain, m) {
        d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
        d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
        return domain;
    }
    function d3_scale_linearTickRange(domain, m) {
        if (m == null)
            m = 10;
        var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
        if (err <= 0.15)
            step *= 10;
        else if (err <= 0.35)
            step *= 5;
        else if (err <= 0.75)
            step *= 2;
        extent[0] = Math.ceil(extent[0] / step) * step;
        extent[1] = Math.floor(extent[1] / step) * step + step * 0.5;
        extent[2] = step;
        return extent;
    }
    function d3_scale_linearTicks(domain, m) {
        return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
    }
    function d3_scale_linearTickFormat(domain, m, format) {
        var range = d3_scale_linearTickRange(domain, m);
        if (format) {
            var match = d3_format_re.exec(format);
            match.shift();
            if (match[8] === 's') {
                var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
                if (!match[7])
                    match[7] = '.' + d3_scale_linearPrecision(prefix.scale(range[2]));
                match[8] = 'f';
                format = d3.format(match.join(''));
                return function (d) {
                    return format(prefix.scale(d)) + prefix.symbol;
                };
            }
            if (!match[7])
                match[7] = '.' + d3_scale_linearFormatPrecision(match[8], range);
            format = match.join('');
        } else {
            format = ',.' + d3_scale_linearPrecision(range[2]) + 'f';
        }
        return d3.format(format);
    }
    var d3_scale_linearFormatSignificant = {
        s: 1,
        g: 1,
        p: 1,
        r: 1,
        e: 1
    };
    function d3_scale_linearPrecision(value) {
        return -Math.floor(Math.log(value) / Math.LN10 + 0.01);
    }
    function d3_scale_linearFormatPrecision(type, range) {
        var p = d3_scale_linearPrecision(range[2]);
        return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== 'e') : p - (type === '%') * 2;
    }
    d3.scale.log = function () {
        return d3_scale_log(d3.scale.linear().domain([
            0,
            1
        ]), 10, true, [
            1,
            10
        ]);
    };
    function d3_scale_log(linear, base, positive, domain) {
        function log(x) {
            return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
        }
        function pow(x) {
            return positive ? Math.pow(base, x) : -Math.pow(base, -x);
        }
        function scale(x) {
            return linear(log(x));
        }
        scale.invert = function (x) {
            return pow(linear.invert(x));
        };
        scale.domain = function (x) {
            if (!arguments.length)
                return domain;
            positive = x[0] >= 0;
            linear.domain((domain = x.map(Number)).map(log));
            return scale;
        };
        scale.base = function (_) {
            if (!arguments.length)
                return base;
            base = +_;
            linear.domain(domain.map(log));
            return scale;
        };
        scale.nice = function () {
            var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
            linear.domain(niced);
            domain = niced.map(pow);
            return scale;
        };
        scale.ticks = function () {
            var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
            if (isFinite(j - i)) {
                if (positive) {
                    for (; i < j; i++)
                        for (var k = 1; k < n; k++)
                            ticks.push(pow(i) * k);
                    ticks.push(pow(i));
                } else {
                    ticks.push(pow(i));
                    for (; i++ < j;)
                        for (var k = n - 1; k > 0; k--)
                            ticks.push(pow(i) * k);
                }
                for (i = 0; ticks[i] < u; i++) {
                }
                for (j = ticks.length; ticks[j - 1] > v; j--) {
                }
                ticks = ticks.slice(i, j);
            }
            return ticks;
        };
        scale.tickFormat = function (n, format) {
            if (!arguments.length)
                return d3_scale_logFormat;
            if (arguments.length < 2)
                format = d3_scale_logFormat;
            else if (typeof format !== 'function')
                format = d3.format(format);
            var k = Math.max(1, base * n / scale.ticks().length);
            return function (d) {
                var i = d / pow(Math.round(log(d)));
                if (i * base < base - 0.5)
                    i *= base;
                return i <= k ? format(d) : '';
            };
        };
        scale.copy = function () {
            return d3_scale_log(linear.copy(), base, positive, domain);
        };
        return d3_scale_linearRebind(scale, linear);
    }
    var d3_scale_logFormat = d3.format('.0e'), d3_scale_logNiceNegative = {
            floor: function (x) {
                return -Math.ceil(-x);
            },
            ceil: function (x) {
                return -Math.floor(-x);
            }
        };
    d3.scale.pow = function () {
        return d3_scale_pow(d3.scale.linear(), 1, [
            0,
            1
        ]);
    };
    function d3_scale_pow(linear, exponent, domain) {
        var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
        function scale(x) {
            return linear(powp(x));
        }
        scale.invert = function (x) {
            return powb(linear.invert(x));
        };
        scale.domain = function (x) {
            if (!arguments.length)
                return domain;
            linear.domain((domain = x.map(Number)).map(powp));
            return scale;
        };
        scale.ticks = function (m) {
            return d3_scale_linearTicks(domain, m);
        };
        scale.tickFormat = function (m, format) {
            return d3_scale_linearTickFormat(domain, m, format);
        };
        scale.nice = function (m) {
            return scale.domain(d3_scale_linearNice(domain, m));
        };
        scale.exponent = function (x) {
            if (!arguments.length)
                return exponent;
            powp = d3_scale_powPow(exponent = x);
            powb = d3_scale_powPow(1 / exponent);
            linear.domain(domain.map(powp));
            return scale;
        };
        scale.copy = function () {
            return d3_scale_pow(linear.copy(), exponent, domain);
        };
        return d3_scale_linearRebind(scale, linear);
    }
    function d3_scale_powPow(e) {
        return function (x) {
            return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
        };
    }
    d3.scale.sqrt = function () {
        return d3.scale.pow().exponent(0.5);
    };
    d3.scale.ordinal = function () {
        return d3_scale_ordinal([], {
            t: 'range',
            a: [[]]
        });
    };
    function d3_scale_ordinal(domain, ranger) {
        var index, range, rangeBand;
        function scale(x) {
            return range[((index.get(x) || (ranger.t === 'range' ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
        }
        function steps(start, step) {
            return d3.range(domain.length).map(function (i) {
                return start + step * i;
            });
        }
        scale.domain = function (x) {
            if (!arguments.length)
                return domain;
            domain = [];
            index = new d3_Map();
            var i = -1, n = x.length, xi;
            while (++i < n)
                if (!index.has(xi = x[i]))
                    index.set(xi, domain.push(xi));
            return scale[ranger.t].apply(scale, ranger.a);
        };
        scale.range = function (x) {
            if (!arguments.length)
                return range;
            range = x;
            rangeBand = 0;
            ranger = {
                t: 'range',
                a: arguments
            };
            return scale;
        };
        scale.rangePoints = function (x, padding) {
            if (arguments.length < 2)
                padding = 0;
            var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 0) : (stop - start) / (domain.length - 1 + padding);
            range = steps(start + step * padding / 2, step);
            rangeBand = 0;
            ranger = {
                t: 'rangePoints',
                a: arguments
            };
            return scale;
        };
        scale.rangeRoundPoints = function (x, padding) {
            if (arguments.length < 2)
                padding = 0;
            var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 0) : (stop - start) / (domain.length - 1 + padding) | 0;
            range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
            rangeBand = 0;
            ranger = {
                t: 'rangeRoundPoints',
                a: arguments
            };
            return scale;
        };
        scale.rangeBands = function (x, padding, outerPadding) {
            if (arguments.length < 2)
                padding = 0;
            if (arguments.length < 3)
                outerPadding = padding;
            var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
            range = steps(start + step * outerPadding, step);
            if (reverse)
                range.reverse();
            rangeBand = step * (1 - padding);
            ranger = {
                t: 'rangeBands',
                a: arguments
            };
            return scale;
        };
        scale.rangeRoundBands = function (x, padding, outerPadding) {
            if (arguments.length < 2)
                padding = 0;
            if (arguments.length < 3)
                outerPadding = padding;
            var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
            range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
            if (reverse)
                range.reverse();
            rangeBand = Math.round(step * (1 - padding));
            ranger = {
                t: 'rangeRoundBands',
                a: arguments
            };
            return scale;
        };
        scale.rangeBand = function () {
            return rangeBand;
        };
        scale.rangeExtent = function () {
            return d3_scaleExtent(ranger.a[0]);
        };
        scale.copy = function () {
            return d3_scale_ordinal(domain, ranger);
        };
        return scale.domain(domain);
    }
    d3.scale.category10 = function () {
        return d3.scale.ordinal().range(d3_category10);
    };
    d3.scale.category20 = function () {
        return d3.scale.ordinal().range(d3_category20);
    };
    d3.scale.category20b = function () {
        return d3.scale.ordinal().range(d3_category20b);
    };
    d3.scale.category20c = function () {
        return d3.scale.ordinal().range(d3_category20c);
    };
    var d3_category10 = [
        2062260,
        16744206,
        2924588,
        14034728,
        9725885,
        9197131,
        14907330,
        8355711,
        12369186,
        1556175
    ].map(d3_rgbString);
    var d3_category20 = [
        2062260,
        11454440,
        16744206,
        16759672,
        2924588,
        10018698,
        14034728,
        16750742,
        9725885,
        12955861,
        9197131,
        12885140,
        14907330,
        16234194,
        8355711,
        13092807,
        12369186,
        14408589,
        1556175,
        10410725
    ].map(d3_rgbString);
    var d3_category20b = [
        3750777,
        5395619,
        7040719,
        10264286,
        6519097,
        9216594,
        11915115,
        13556636,
        9202993,
        12426809,
        15186514,
        15190932,
        8666169,
        11356490,
        14049643,
        15177372,
        8077683,
        10834324,
        13528509,
        14589654
    ].map(d3_rgbString);
    var d3_category20c = [
        3244733,
        7057110,
        10406625,
        13032431,
        15095053,
        16616764,
        16625259,
        16634018,
        3253076,
        7652470,
        10607003,
        13101504,
        7695281,
        10394312,
        12369372,
        14342891,
        6513507,
        9868950,
        12434877,
        14277081
    ].map(d3_rgbString);
    d3.scale.quantile = function () {
        return d3_scale_quantile([], []);
    };
    function d3_scale_quantile(domain, range) {
        var thresholds;
        function rescale() {
            var k = 0, q = range.length;
            thresholds = [];
            while (++k < q)
                thresholds[k - 1] = d3.quantile(domain, k / q);
            return scale;
        }
        function scale(x) {
            if (!isNaN(x = +x))
                return range[d3.bisect(thresholds, x)];
        }
        scale.domain = function (x) {
            if (!arguments.length)
                return domain;
            domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
            return rescale();
        };
        scale.range = function (x) {
            if (!arguments.length)
                return range;
            range = x;
            return rescale();
        };
        scale.quantiles = function () {
            return thresholds;
        };
        scale.invertExtent = function (y) {
            y = range.indexOf(y);
            return y < 0 ? [
                NaN,
                NaN
            ] : [
                y > 0 ? thresholds[y - 1] : domain[0],
                y < thresholds.length ? thresholds[y] : domain[domain.length - 1]
            ];
        };
        scale.copy = function () {
            return d3_scale_quantile(domain, range);
        };
        return rescale();
    }
    d3.scale.quantize = function () {
        return d3_scale_quantize(0, 1, [
            0,
            1
        ]);
    };
    function d3_scale_quantize(x0, x1, range) {
        var kx, i;
        function scale(x) {
            return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
        }
        function rescale() {
            kx = range.length / (x1 - x0);
            i = range.length - 1;
            return scale;
        }
        scale.domain = function (x) {
            if (!arguments.length)
                return [
                    x0,
                    x1
                ];
            x0 = +x[0];
            x1 = +x[x.length - 1];
            return rescale();
        };
        scale.range = function (x) {
            if (!arguments.length)
                return range;
            range = x;
            return rescale();
        };
        scale.invertExtent = function (y) {
            y = range.indexOf(y);
            y = y < 0 ? NaN : y / kx + x0;
            return [
                y,
                y + 1 / kx
            ];
        };
        scale.copy = function () {
            return d3_scale_quantize(x0, x1, range);
        };
        return rescale();
    }
    d3.scale.threshold = function () {
        return d3_scale_threshold([0.5], [
            0,
            1
        ]);
    };
    function d3_scale_threshold(domain, range) {
        function scale(x) {
            if (x <= x)
                return range[d3.bisect(domain, x)];
        }
        scale.domain = function (_) {
            if (!arguments.length)
                return domain;
            domain = _;
            return scale;
        };
        scale.range = function (_) {
            if (!arguments.length)
                return range;
            range = _;
            return scale;
        };
        scale.invertExtent = function (y) {
            y = range.indexOf(y);
            return [
                domain[y - 1],
                domain[y]
            ];
        };
        scale.copy = function () {
            return d3_scale_threshold(domain, range);
        };
        return scale;
    }
    d3.scale.identity = function () {
        return d3_scale_identity([
            0,
            1
        ]);
    };
    function d3_scale_identity(domain) {
        function identity(x) {
            return +x;
        }
        identity.invert = identity;
        identity.domain = identity.range = function (x) {
            if (!arguments.length)
                return domain;
            domain = x.map(identity);
            return identity;
        };
        identity.ticks = function (m) {
            return d3_scale_linearTicks(domain, m);
        };
        identity.tickFormat = function (m, format) {
            return d3_scale_linearTickFormat(domain, m, format);
        };
        identity.copy = function () {
            return d3_scale_identity(domain);
        };
        return identity;
    }
    d3.svg = {};
    function d3_zero() {
        return 0;
    }
    d3.svg.arc = function () {
        var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
        function arc() {
            var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
            if (r1 < r0)
                rc = r1, r1 = r0, r0 = rc;
            if (da >= τε)
                return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : '') + 'Z';
            var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
            if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
                rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
                if (!cw)
                    p1 *= -1;
                if (r1)
                    p1 = d3_asin(rp / r1 * Math.sin(ap));
                if (r0)
                    p0 = d3_asin(rp / r0 * Math.sin(ap));
            }
            if (r1) {
                x0 = r1 * Math.cos(a0 + p1);
                y0 = r1 * Math.sin(a0 + p1);
                x1 = r1 * Math.cos(a1 - p1);
                y1 = r1 * Math.sin(a1 - p1);
                var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
                if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
                    var h1 = (a0 + a1) / 2;
                    x0 = r1 * Math.cos(h1);
                    y0 = r1 * Math.sin(h1);
                    x1 = y1 = null;
                }
            } else {
                x0 = y0 = 0;
            }
            if (r0) {
                x2 = r0 * Math.cos(a1 - p0);
                y2 = r0 * Math.sin(a1 - p0);
                x3 = r0 * Math.cos(a0 + p0);
                y3 = r0 * Math.sin(a0 + p0);
                var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
                if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
                    var h0 = (a0 + a1) / 2;
                    x2 = r0 * Math.cos(h0);
                    y2 = r0 * Math.sin(h0);
                    x3 = y3 = null;
                }
            } else {
                x2 = y2 = 0;
            }
            if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > 0.001) {
                cr = r0 < r1 ^ cw ? 0 : 1;
                var rc1 = rc, rc0 = rc;
                if (da < π) {
                    var oc = x3 == null ? [
                            x2,
                            y2
                        ] : x1 == null ? [
                            x0,
                            y0
                        ] : d3_geom_polygonIntersect([
                            x0,
                            y0
                        ], [
                            x3,
                            y3
                        ], [
                            x1,
                            y1
                        ], [
                            x2,
                            y2
                        ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
                    rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
                    rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
                }
                if (x1 != null) {
                    var t30 = d3_svg_arcCornerTangents(x3 == null ? [
                            x2,
                            y2
                        ] : [
                            x3,
                            y3
                        ], [
                            x0,
                            y0
                        ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([
                            x1,
                            y1
                        ], [
                            x2,
                            y2
                        ], r1, rc1, cw);
                    if (rc === rc1) {
                        path.push('M', t30[0], 'A', rc1, ',', rc1, ' 0 0,', cr, ' ', t30[1], 'A', r1, ',', r1, ' 0 ', 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ',', cw, ' ', t12[1], 'A', rc1, ',', rc1, ' 0 0,', cr, ' ', t12[0]);
                    } else {
                        path.push('M', t30[0], 'A', rc1, ',', rc1, ' 0 1,', cr, ' ', t12[0]);
                    }
                } else {
                    path.push('M', x0, ',', y0);
                }
                if (x3 != null) {
                    var t03 = d3_svg_arcCornerTangents([
                            x0,
                            y0
                        ], [
                            x3,
                            y3
                        ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([
                            x2,
                            y2
                        ], x1 == null ? [
                            x0,
                            y0
                        ] : [
                            x1,
                            y1
                        ], r0, -rc0, cw);
                    if (rc === rc0) {
                        path.push('L', t21[0], 'A', rc0, ',', rc0, ' 0 0,', cr, ' ', t21[1], 'A', r0, ',', r0, ' 0 ', cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ',', 1 - cw, ' ', t03[1], 'A', rc0, ',', rc0, ' 0 0,', cr, ' ', t03[0]);
                    } else {
                        path.push('L', t21[0], 'A', rc0, ',', rc0, ' 0 0,', cr, ' ', t03[0]);
                    }
                } else {
                    path.push('L', x2, ',', y2);
                }
            } else {
                path.push('M', x0, ',', y0);
                if (x1 != null)
                    path.push('A', r1, ',', r1, ' 0 ', l1, ',', cw, ' ', x1, ',', y1);
                path.push('L', x2, ',', y2);
                if (x3 != null)
                    path.push('A', r0, ',', r0, ' 0 ', l0, ',', 1 - cw, ' ', x3, ',', y3);
            }
            path.push('Z');
            return path.join('');
        }
        function circleSegment(r1, cw) {
            return 'M0,' + r1 + 'A' + r1 + ',' + r1 + ' 0 1,' + cw + ' 0,' + -r1 + 'A' + r1 + ',' + r1 + ' 0 1,' + cw + ' 0,' + r1;
        }
        arc.innerRadius = function (v) {
            if (!arguments.length)
                return innerRadius;
            innerRadius = d3_functor(v);
            return arc;
        };
        arc.outerRadius = function (v) {
            if (!arguments.length)
                return outerRadius;
            outerRadius = d3_functor(v);
            return arc;
        };
        arc.cornerRadius = function (v) {
            if (!arguments.length)
                return cornerRadius;
            cornerRadius = d3_functor(v);
            return arc;
        };
        arc.padRadius = function (v) {
            if (!arguments.length)
                return padRadius;
            padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
            return arc;
        };
        arc.startAngle = function (v) {
            if (!arguments.length)
                return startAngle;
            startAngle = d3_functor(v);
            return arc;
        };
        arc.endAngle = function (v) {
            if (!arguments.length)
                return endAngle;
            endAngle = d3_functor(v);
            return arc;
        };
        arc.padAngle = function (v) {
            if (!arguments.length)
                return padAngle;
            padAngle = d3_functor(v);
            return arc;
        };
        arc.centroid = function () {
            var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
            return [
                Math.cos(a) * r,
                Math.sin(a) * r
            ];
        };
        return arc;
    };
    var d3_svg_arcAuto = 'auto';
    function d3_svg_arcInnerRadius(d) {
        return d.innerRadius;
    }
    function d3_svg_arcOuterRadius(d) {
        return d.outerRadius;
    }
    function d3_svg_arcStartAngle(d) {
        return d.startAngle;
    }
    function d3_svg_arcEndAngle(d) {
        return d.endAngle;
    }
    function d3_svg_arcPadAngle(d) {
        return d && d.padAngle;
    }
    function d3_svg_arcSweep(x0, y0, x1, y1) {
        return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
    }
    function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
        var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
        if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
            cx0 = cx1, cy0 = cy1;
        return [
            [
                cx0 - ox,
                cy0 - oy
            ],
            [
                cx0 * r1 / r,
                cy0 * r1 / r
            ]
        ];
    }
    function d3_svg_line(projection) {
        var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = 0.7;
        function line(data) {
            var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
            function segment() {
                segments.push('M', interpolate(projection(points), tension));
            }
            while (++i < n) {
                if (defined.call(this, d = data[i], i)) {
                    points.push([
                        +fx.call(this, d, i),
                        +fy.call(this, d, i)
                    ]);
                } else if (points.length) {
                    segment();
                    points = [];
                }
            }
            if (points.length)
                segment();
            return segments.length ? segments.join('') : null;
        }
        line.x = function (_) {
            if (!arguments.length)
                return x;
            x = _;
            return line;
        };
        line.y = function (_) {
            if (!arguments.length)
                return y;
            y = _;
            return line;
        };
        line.defined = function (_) {
            if (!arguments.length)
                return defined;
            defined = _;
            return line;
        };
        line.interpolate = function (_) {
            if (!arguments.length)
                return interpolateKey;
            if (typeof _ === 'function')
                interpolateKey = interpolate = _;
            else
                interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
            return line;
        };
        line.tension = function (_) {
            if (!arguments.length)
                return tension;
            tension = _;
            return line;
        };
        return line;
    }
    d3.svg.line = function () {
        return d3_svg_line(d3_identity);
    };
    var d3_svg_lineInterpolators = d3.map({
        linear: d3_svg_lineLinear,
        'linear-closed': d3_svg_lineLinearClosed,
        step: d3_svg_lineStep,
        'step-before': d3_svg_lineStepBefore,
        'step-after': d3_svg_lineStepAfter,
        basis: d3_svg_lineBasis,
        'basis-open': d3_svg_lineBasisOpen,
        'basis-closed': d3_svg_lineBasisClosed,
        bundle: d3_svg_lineBundle,
        cardinal: d3_svg_lineCardinal,
        'cardinal-open': d3_svg_lineCardinalOpen,
        'cardinal-closed': d3_svg_lineCardinalClosed,
        monotone: d3_svg_lineMonotone
    });
    d3_svg_lineInterpolators.forEach(function (key, value) {
        value.key = key;
        value.closed = /-closed$/.test(key);
    });
    function d3_svg_lineLinear(points) {
        return points.length > 1 ? points.join('L') : points + 'Z';
    }
    function d3_svg_lineLinearClosed(points) {
        return points.join('L') + 'Z';
    }
    function d3_svg_lineStep(points) {
        var i = 0, n = points.length, p = points[0], path = [
                p[0],
                ',',
                p[1]
            ];
        while (++i < n)
            path.push('H', (p[0] + (p = points[i])[0]) / 2, 'V', p[1]);
        if (n > 1)
            path.push('H', p[0]);
        return path.join('');
    }
    function d3_svg_lineStepBefore(points) {
        var i = 0, n = points.length, p = points[0], path = [
                p[0],
                ',',
                p[1]
            ];
        while (++i < n)
            path.push('V', (p = points[i])[1], 'H', p[0]);
        return path.join('');
    }
    function d3_svg_lineStepAfter(points) {
        var i = 0, n = points.length, p = points[0], path = [
                p[0],
                ',',
                p[1]
            ];
        while (++i < n)
            path.push('H', (p = points[i])[0], 'V', p[1]);
        return path.join('');
    }
    function d3_svg_lineCardinalOpen(points, tension) {
        return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
    }
    function d3_svg_lineCardinalClosed(points, tension) {
        return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), points), d3_svg_lineCardinalTangents([points[points.length - 2]].concat(points, [points[1]]), tension));
    }
    function d3_svg_lineCardinal(points, tension) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
    }
    function d3_svg_lineHermite(points, tangents) {
        if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
            return d3_svg_lineLinear(points);
        }
        var quad = points.length != tangents.length, path = '', p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
        if (quad) {
            path += 'Q' + (p[0] - t0[0] * 2 / 3) + ',' + (p[1] - t0[1] * 2 / 3) + ',' + p[0] + ',' + p[1];
            p0 = points[1];
            pi = 2;
        }
        if (tangents.length > 1) {
            t = tangents[1];
            p = points[pi];
            pi++;
            path += 'C' + (p0[0] + t0[0]) + ',' + (p0[1] + t0[1]) + ',' + (p[0] - t[0]) + ',' + (p[1] - t[1]) + ',' + p[0] + ',' + p[1];
            for (var i = 2; i < tangents.length; i++, pi++) {
                p = points[pi];
                t = tangents[i];
                path += 'S' + (p[0] - t[0]) + ',' + (p[1] - t[1]) + ',' + p[0] + ',' + p[1];
            }
        }
        if (quad) {
            var lp = points[pi];
            path += 'Q' + (p[0] + t[0] * 2 / 3) + ',' + (p[1] + t[1] * 2 / 3) + ',' + lp[0] + ',' + lp[1];
        }
        return path;
    }
    function d3_svg_lineCardinalTangents(points, tension) {
        var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
        while (++i < n) {
            p0 = p1;
            p1 = p2;
            p2 = points[i];
            tangents.push([
                a * (p2[0] - p0[0]),
                a * (p2[1] - p0[1])
            ]);
        }
        return tangents;
    }
    function d3_svg_lineBasis(points) {
        if (points.length < 3)
            return d3_svg_lineLinear(points);
        var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [
                x0,
                x0,
                x0,
                (pi = points[1])[0]
            ], py = [
                y0,
                y0,
                y0,
                pi[1]
            ], path = [
                x0,
                ',',
                y0,
                'L',
                d3_svg_lineDot4(d3_svg_lineBasisBezier3, px),
                ',',
                d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)
            ];
        points.push(points[n - 1]);
        while (++i <= n) {
            pi = points[i];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py);
        }
        points.pop();
        path.push('L', pi);
        return path.join('');
    }
    function d3_svg_lineBasisOpen(points) {
        if (points.length < 4)
            return d3_svg_lineLinear(points);
        var path = [], i = -1, n = points.length, pi, px = [0], py = [0];
        while (++i < 3) {
            pi = points[i];
            px.push(pi[0]);
            py.push(pi[1]);
        }
        path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + ',' + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
        --i;
        while (++i < n) {
            pi = points[i];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py);
        }
        return path.join('');
    }
    function d3_svg_lineBasisClosed(points) {
        var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
        while (++i < 4) {
            pi = points[i % n];
            px.push(pi[0]);
            py.push(pi[1]);
        }
        path = [
            d3_svg_lineDot4(d3_svg_lineBasisBezier3, px),
            ',',
            d3_svg_lineDot4(d3_svg_lineBasisBezier3, py)
        ];
        --i;
        while (++i < m) {
            pi = points[i % n];
            px.shift();
            px.push(pi[0]);
            py.shift();
            py.push(pi[1]);
            d3_svg_lineBasisBezier(path, px, py);
        }
        return path.join('');
    }
    function d3_svg_lineBundle(points, tension) {
        var n = points.length - 1;
        if (n) {
            var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
            while (++i <= n) {
                p = points[i];
                t = i / n;
                p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
                p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
            }
        }
        return d3_svg_lineBasis(points);
    }
    function d3_svg_lineDot4(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
    }
    var d3_svg_lineBasisBezier1 = [
            0,
            2 / 3,
            1 / 3,
            0
        ], d3_svg_lineBasisBezier2 = [
            0,
            1 / 3,
            2 / 3,
            0
        ], d3_svg_lineBasisBezier3 = [
            0,
            1 / 6,
            2 / 3,
            1 / 6
        ];
    function d3_svg_lineBasisBezier(path, x, y) {
        path.push('C', d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ',', d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
    }
    function d3_svg_lineSlope(p0, p1) {
        return (p1[1] - p0[1]) / (p1[0] - p0[0]);
    }
    function d3_svg_lineFiniteDifferences(points) {
        var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
        while (++i < j) {
            m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
        }
        m[i] = d;
        return m;
    }
    function d3_svg_lineMonotoneTangents(points) {
        var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
        while (++i < j) {
            d = d3_svg_lineSlope(points[i], points[i + 1]);
            if (abs(d) < ε) {
                m[i] = m[i + 1] = 0;
            } else {
                a = m[i] / d;
                b = m[i + 1] / d;
                s = a * a + b * b;
                if (s > 9) {
                    s = d * 3 / Math.sqrt(s);
                    m[i] = s * a;
                    m[i + 1] = s * b;
                }
            }
        }
        i = -1;
        while (++i <= j) {
            s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
            tangents.push([
                s || 0,
                m[i] * s || 0
            ]);
        }
        return tangents;
    }
    function d3_svg_lineMonotone(points) {
        return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
    }
    d3.svg.line.radial = function () {
        var line = d3_svg_line(d3_svg_lineRadial);
        line.radius = line.x, delete line.x;
        line.angle = line.y, delete line.y;
        return line;
    };
    function d3_svg_lineRadial(points) {
        var point, i = -1, n = points.length, r, a;
        while (++i < n) {
            point = points[i];
            r = point[0];
            a = point[1] - halfπ;
            point[0] = r * Math.cos(a);
            point[1] = r * Math.sin(a);
        }
        return points;
    }
    function d3_svg_area(projection) {
        var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = 'L', tension = 0.7;
        function area(data) {
            var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function () {
                    return x;
                } : d3_functor(x1), fy1 = y0 === y1 ? function () {
                    return y;
                } : d3_functor(y1), x, y;
            function segment() {
                segments.push('M', interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), 'Z');
            }
            while (++i < n) {
                if (defined.call(this, d = data[i], i)) {
                    points0.push([
                        x = +fx0.call(this, d, i),
                        y = +fy0.call(this, d, i)
                    ]);
                    points1.push([
                        +fx1.call(this, d, i),
                        +fy1.call(this, d, i)
                    ]);
                } else if (points0.length) {
                    segment();
                    points0 = [];
                    points1 = [];
                }
            }
            if (points0.length)
                segment();
            return segments.length ? segments.join('') : null;
        }
        area.x = function (_) {
            if (!arguments.length)
                return x1;
            x0 = x1 = _;
            return area;
        };
        area.x0 = function (_) {
            if (!arguments.length)
                return x0;
            x0 = _;
            return area;
        };
        area.x1 = function (_) {
            if (!arguments.length)
                return x1;
            x1 = _;
            return area;
        };
        area.y = function (_) {
            if (!arguments.length)
                return y1;
            y0 = y1 = _;
            return area;
        };
        area.y0 = function (_) {
            if (!arguments.length)
                return y0;
            y0 = _;
            return area;
        };
        area.y1 = function (_) {
            if (!arguments.length)
                return y1;
            y1 = _;
            return area;
        };
        area.defined = function (_) {
            if (!arguments.length)
                return defined;
            defined = _;
            return area;
        };
        area.interpolate = function (_) {
            if (!arguments.length)
                return interpolateKey;
            if (typeof _ === 'function')
                interpolateKey = interpolate = _;
            else
                interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
            interpolateReverse = interpolate.reverse || interpolate;
            L = interpolate.closed ? 'M' : 'L';
            return area;
        };
        area.tension = function (_) {
            if (!arguments.length)
                return tension;
            tension = _;
            return area;
        };
        return area;
    }
    d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
    d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
    d3.svg.area = function () {
        return d3_svg_area(d3_identity);
    };
    d3.svg.area.radial = function () {
        var area = d3_svg_area(d3_svg_lineRadial);
        area.radius = area.x, delete area.x;
        area.innerRadius = area.x0, delete area.x0;
        area.outerRadius = area.x1, delete area.x1;
        area.angle = area.y, delete area.y;
        area.startAngle = area.y0, delete area.y0;
        area.endAngle = area.y1, delete area.y1;
        return area;
    };
    d3.svg.chord = function () {
        var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
        function chord(d, i) {
            var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
            return 'M' + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + 'Z';
        }
        function subgroup(self, f, d, i) {
            var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
            return {
                r: r,
                a0: a0,
                a1: a1,
                p0: [
                    r * Math.cos(a0),
                    r * Math.sin(a0)
                ],
                p1: [
                    r * Math.cos(a1),
                    r * Math.sin(a1)
                ]
            };
        }
        function equals(a, b) {
            return a.a0 == b.a0 && a.a1 == b.a1;
        }
        function arc(r, p, a) {
            return 'A' + r + ',' + r + ' 0 ' + +(a > π) + ',1 ' + p;
        }
        function curve(r0, p0, r1, p1) {
            return 'Q 0,0 ' + p1;
        }
        chord.radius = function (v) {
            if (!arguments.length)
                return radius;
            radius = d3_functor(v);
            return chord;
        };
        chord.source = function (v) {
            if (!arguments.length)
                return source;
            source = d3_functor(v);
            return chord;
        };
        chord.target = function (v) {
            if (!arguments.length)
                return target;
            target = d3_functor(v);
            return chord;
        };
        chord.startAngle = function (v) {
            if (!arguments.length)
                return startAngle;
            startAngle = d3_functor(v);
            return chord;
        };
        chord.endAngle = function (v) {
            if (!arguments.length)
                return endAngle;
            endAngle = d3_functor(v);
            return chord;
        };
        return chord;
    };
    function d3_svg_chordRadius(d) {
        return d.radius;
    }
    d3.svg.diagonal = function () {
        var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
        function diagonal(d, i) {
            var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [
                    p0,
                    {
                        x: p0.x,
                        y: m
                    },
                    {
                        x: p3.x,
                        y: m
                    },
                    p3
                ];
            p = p.map(projection);
            return 'M' + p[0] + 'C' + p[1] + ' ' + p[2] + ' ' + p[3];
        }
        diagonal.source = function (x) {
            if (!arguments.length)
                return source;
            source = d3_functor(x);
            return diagonal;
        };
        diagonal.target = function (x) {
            if (!arguments.length)
                return target;
            target = d3_functor(x);
            return diagonal;
        };
        diagonal.projection = function (x) {
            if (!arguments.length)
                return projection;
            projection = x;
            return diagonal;
        };
        return diagonal;
    };
    function d3_svg_diagonalProjection(d) {
        return [
            d.x,
            d.y
        ];
    }
    d3.svg.diagonal.radial = function () {
        var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
        diagonal.projection = function (x) {
            return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
        };
        return diagonal;
    };
    function d3_svg_diagonalRadialProjection(projection) {
        return function () {
            var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
            return [
                r * Math.cos(a),
                r * Math.sin(a)
            ];
        };
    }
    d3.svg.symbol = function () {
        var type = d3_svg_symbolType, size = d3_svg_symbolSize;
        function symbol(d, i) {
            return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
        }
        symbol.type = function (x) {
            if (!arguments.length)
                return type;
            type = d3_functor(x);
            return symbol;
        };
        symbol.size = function (x) {
            if (!arguments.length)
                return size;
            size = d3_functor(x);
            return symbol;
        };
        return symbol;
    };
    function d3_svg_symbolSize() {
        return 64;
    }
    function d3_svg_symbolType() {
        return 'circle';
    }
    function d3_svg_symbolCircle(size) {
        var r = Math.sqrt(size / π);
        return 'M0,' + r + 'A' + r + ',' + r + ' 0 1,1 0,' + -r + 'A' + r + ',' + r + ' 0 1,1 0,' + r + 'Z';
    }
    var d3_svg_symbols = d3.map({
        circle: d3_svg_symbolCircle,
        cross: function (size) {
            var r = Math.sqrt(size / 5) / 2;
            return 'M' + -3 * r + ',' + -r + 'H' + -r + 'V' + -3 * r + 'H' + r + 'V' + -r + 'H' + 3 * r + 'V' + r + 'H' + r + 'V' + 3 * r + 'H' + -r + 'V' + r + 'H' + -3 * r + 'Z';
        },
        diamond: function (size) {
            var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
            return 'M0,' + -ry + 'L' + rx + ',0' + ' 0,' + ry + ' ' + -rx + ',0' + 'Z';
        },
        square: function (size) {
            var r = Math.sqrt(size) / 2;
            return 'M' + -r + ',' + -r + 'L' + r + ',' + -r + ' ' + r + ',' + r + ' ' + -r + ',' + r + 'Z';
        },
        'triangle-down': function (size) {
            var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
            return 'M0,' + ry + 'L' + rx + ',' + -ry + ' ' + -rx + ',' + -ry + 'Z';
        },
        'triangle-up': function (size) {
            var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
            return 'M0,' + -ry + 'L' + rx + ',' + ry + ' ' + -rx + ',' + ry + 'Z';
        }
    });
    d3.svg.symbolTypes = d3_svg_symbols.keys();
    var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
    d3_selectionPrototype.transition = function (name) {
        var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
                time: Date.now(),
                ease: d3_ease_cubicInOut,
                delay: 0,
                duration: 250
            };
        for (var j = -1, m = this.length; ++j < m;) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = -1, n = group.length; ++i < n;) {
                if (node = group[i])
                    d3_transitionNode(node, i, ns, id, transition);
                subgroup.push(node);
            }
        }
        return d3_transition(subgroups, ns, id);
    };
    d3_selectionPrototype.interrupt = function (name) {
        return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
    };
    var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
    function d3_selection_interruptNS(ns) {
        return function () {
            var lock, activeId, active;
            if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
                active.timer.c = null;
                active.timer.t = NaN;
                if (--lock.count)
                    delete lock[activeId];
                else
                    delete this[ns];
                lock.active += 0.5;
                active.event && active.event.interrupt.call(this, this.__data__, active.index);
            }
        };
    }
    function d3_transition(groups, ns, id) {
        d3_subclass(groups, d3_transitionPrototype);
        groups.namespace = ns;
        groups.id = id;
        return groups;
    }
    var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
    d3_transitionPrototype.call = d3_selectionPrototype.call;
    d3_transitionPrototype.empty = d3_selectionPrototype.empty;
    d3_transitionPrototype.node = d3_selectionPrototype.node;
    d3_transitionPrototype.size = d3_selectionPrototype.size;
    d3.transition = function (selection, name) {
        return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
    };
    d3.transition.prototype = d3_transitionPrototype;
    d3_transitionPrototype.select = function (selector) {
        var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
        selector = d3_selection_selector(selector);
        for (var j = -1, m = this.length; ++j < m;) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = -1, n = group.length; ++i < n;) {
                if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
                    if ('__data__' in node)
                        subnode.__data__ = node.__data__;
                    d3_transitionNode(subnode, i, ns, id, node[ns][id]);
                    subgroup.push(subnode);
                } else {
                    subgroup.push(null);
                }
            }
        }
        return d3_transition(subgroups, ns, id);
    };
    d3_transitionPrototype.selectAll = function (selector) {
        var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
        selector = d3_selection_selectorAll(selector);
        for (var j = -1, m = this.length; ++j < m;) {
            for (var group = this[j], i = -1, n = group.length; ++i < n;) {
                if (node = group[i]) {
                    transition = node[ns][id];
                    subnodes = selector.call(node, node.__data__, i, j);
                    subgroups.push(subgroup = []);
                    for (var k = -1, o = subnodes.length; ++k < o;) {
                        if (subnode = subnodes[k])
                            d3_transitionNode(subnode, k, ns, id, transition);
                        subgroup.push(subnode);
                    }
                }
            }
        }
        return d3_transition(subgroups, ns, id);
    };
    d3_transitionPrototype.filter = function (filter) {
        var subgroups = [], subgroup, group, node;
        if (typeof filter !== 'function')
            filter = d3_selection_filter(filter);
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
                    subgroup.push(node);
                }
            }
        }
        return d3_transition(subgroups, this.namespace, this.id);
    };
    d3_transitionPrototype.tween = function (name, tween) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 2)
            return this.node()[ns][id].tween.get(name);
        return d3_selection_each(this, tween == null ? function (node) {
            node[ns][id].tween.remove(name);
        } : function (node) {
            node[ns][id].tween.set(name, tween);
        });
    };
    function d3_transition_tween(groups, name, value, tween) {
        var id = groups.id, ns = groups.namespace;
        return d3_selection_each(groups, typeof value === 'function' ? function (node, i, j) {
            node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
        } : (value = tween(value), function (node) {
            node[ns][id].tween.set(name, value);
        }));
    }
    d3_transitionPrototype.attr = function (nameNS, value) {
        if (arguments.length < 2) {
            for (value in nameNS)
                this.attr(value, nameNS[value]);
            return this;
        }
        var interpolate = nameNS == 'transform' ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
        function attrNull() {
            this.removeAttribute(name);
        }
        function attrNullNS() {
            this.removeAttributeNS(name.space, name.local);
        }
        function attrTween(b) {
            return b == null ? attrNull : (b += '', function () {
                var a = this.getAttribute(name), i;
                return a !== b && (i = interpolate(a, b), function (t) {
                    this.setAttribute(name, i(t));
                });
            });
        }
        function attrTweenNS(b) {
            return b == null ? attrNullNS : (b += '', function () {
                var a = this.getAttributeNS(name.space, name.local), i;
                return a !== b && (i = interpolate(a, b), function (t) {
                    this.setAttributeNS(name.space, name.local, i(t));
                });
            });
        }
        return d3_transition_tween(this, 'attr.' + nameNS, value, name.local ? attrTweenNS : attrTween);
    };
    d3_transitionPrototype.attrTween = function (nameNS, tween) {
        var name = d3.ns.qualify(nameNS);
        function attrTween(d, i) {
            var f = tween.call(this, d, i, this.getAttribute(name));
            return f && function (t) {
                this.setAttribute(name, f(t));
            };
        }
        function attrTweenNS(d, i) {
            var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
            return f && function (t) {
                this.setAttributeNS(name.space, name.local, f(t));
            };
        }
        return this.tween('attr.' + nameNS, name.local ? attrTweenNS : attrTween);
    };
    d3_transitionPrototype.style = function (name, value, priority) {
        var n = arguments.length;
        if (n < 3) {
            if (typeof name !== 'string') {
                if (n < 2)
                    value = '';
                for (priority in name)
                    this.style(priority, name[priority], value);
                return this;
            }
            priority = '';
        }
        function styleNull() {
            this.style.removeProperty(name);
        }
        function styleString(b) {
            return b == null ? styleNull : (b += '', function () {
                var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
                return a !== b && (i = d3_interpolate(a, b), function (t) {
                    this.style.setProperty(name, i(t), priority);
                });
            });
        }
        return d3_transition_tween(this, 'style.' + name, value, styleString);
    };
    d3_transitionPrototype.styleTween = function (name, tween, priority) {
        if (arguments.length < 3)
            priority = '';
        function styleTween(d, i) {
            var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
            return f && function (t) {
                this.style.setProperty(name, f(t), priority);
            };
        }
        return this.tween('style.' + name, styleTween);
    };
    d3_transitionPrototype.text = function (value) {
        return d3_transition_tween(this, 'text', value, d3_transition_text);
    };
    function d3_transition_text(b) {
        if (b == null)
            b = '';
        return function () {
            this.textContent = b;
        };
    }
    d3_transitionPrototype.remove = function () {
        var ns = this.namespace;
        return this.each('end.transition', function () {
            var p;
            if (this[ns].count < 2 && (p = this.parentNode))
                p.removeChild(this);
        });
    };
    d3_transitionPrototype.ease = function (value) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 1)
            return this.node()[ns][id].ease;
        if (typeof value !== 'function')
            value = d3.ease.apply(d3, arguments);
        return d3_selection_each(this, function (node) {
            node[ns][id].ease = value;
        });
    };
    d3_transitionPrototype.delay = function (value) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 1)
            return this.node()[ns][id].delay;
        return d3_selection_each(this, typeof value === 'function' ? function (node, i, j) {
            node[ns][id].delay = +value.call(node, node.__data__, i, j);
        } : (value = +value, function (node) {
            node[ns][id].delay = value;
        }));
    };
    d3_transitionPrototype.duration = function (value) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 1)
            return this.node()[ns][id].duration;
        return d3_selection_each(this, typeof value === 'function' ? function (node, i, j) {
            node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
        } : (value = Math.max(1, value), function (node) {
            node[ns][id].duration = value;
        }));
    };
    d3_transitionPrototype.each = function (type, listener) {
        var id = this.id, ns = this.namespace;
        if (arguments.length < 2) {
            var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
            try {
                d3_transitionInheritId = id;
                d3_selection_each(this, function (node, i, j) {
                    d3_transitionInherit = node[ns][id];
                    type.call(node, node.__data__, i, j);
                });
            } finally {
                d3_transitionInherit = inherit;
                d3_transitionInheritId = inheritId;
            }
        } else {
            d3_selection_each(this, function (node) {
                var transition = node[ns][id];
                (transition.event || (transition.event = d3.dispatch('start', 'end', 'interrupt'))).on(type, listener);
            });
        }
        return this;
    };
    d3_transitionPrototype.transition = function () {
        var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
        for (var j = 0, m = this.length; j < m; j++) {
            subgroups.push(subgroup = []);
            for (var group = this[j], i = 0, n = group.length; i < n; i++) {
                if (node = group[i]) {
                    transition = node[ns][id0];
                    d3_transitionNode(node, i, ns, id1, {
                        time: transition.time,
                        ease: transition.ease,
                        delay: transition.delay + transition.duration,
                        duration: transition.duration
                    });
                }
                subgroup.push(node);
            }
        }
        return d3_transition(subgroups, ns, id1);
    };
    function d3_transitionNamespace(name) {
        return name == null ? '__transition__' : '__transition_' + name + '__';
    }
    function d3_transitionNode(node, i, ns, id, inherit) {
        var lock = node[ns] || (node[ns] = {
                active: 0,
                count: 0
            }), transition = lock[id], time, timer, duration, ease, tweens;
        function schedule(elapsed) {
            var delay = transition.delay;
            timer.t = delay + time;
            if (delay <= elapsed)
                return start(elapsed - delay);
            timer.c = start;
        }
        function start(elapsed) {
            var activeId = lock.active, active = lock[activeId];
            if (active) {
                active.timer.c = null;
                active.timer.t = NaN;
                --lock.count;
                delete lock[activeId];
                active.event && active.event.interrupt.call(node, node.__data__, active.index);
            }
            for (var cancelId in lock) {
                if (+cancelId < id) {
                    var cancel = lock[cancelId];
                    cancel.timer.c = null;
                    cancel.timer.t = NaN;
                    --lock.count;
                    delete lock[cancelId];
                }
            }
            timer.c = tick;
            d3_timer(function () {
                if (timer.c && tick(elapsed || 1)) {
                    timer.c = null;
                    timer.t = NaN;
                }
                return 1;
            }, 0, time);
            lock.active = id;
            transition.event && transition.event.start.call(node, node.__data__, i);
            tweens = [];
            transition.tween.forEach(function (key, value) {
                if (value = value.call(node, node.__data__, i)) {
                    tweens.push(value);
                }
            });
            ease = transition.ease;
            duration = transition.duration;
        }
        function tick(elapsed) {
            var t = elapsed / duration, e = ease(t), n = tweens.length;
            while (n > 0) {
                tweens[--n].call(node, e);
            }
            if (t >= 1) {
                transition.event && transition.event.end.call(node, node.__data__, i);
                if (--lock.count)
                    delete lock[id];
                else
                    delete node[ns];
                return 1;
            }
        }
        if (!transition) {
            time = inherit.time;
            timer = d3_timer(schedule, 0, time);
            transition = lock[id] = {
                tween: new d3_Map(),
                time: time,
                timer: timer,
                delay: inherit.delay,
                duration: inherit.duration,
                ease: inherit.ease,
                index: i
            };
            inherit = null;
            ++lock.count;
        }
    }
    d3.svg.axis = function () {
        var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [10], tickValues = null, tickFormat_;
        function axis(g) {
            g.each(function () {
                var g = d3.select(this);
                var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
                var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll('.tick').data(ticks, scale1), tickEnter = tick.enter().insert('g', '.domain').attr('class', 'tick').style('opacity', ε), tickExit = d3.transition(tick.exit()).style('opacity', ε).remove(), tickUpdate = d3.transition(tick.order()).style('opacity', 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
                var range = d3_scaleRange(scale1), path = g.selectAll('.domain').data([0]), pathUpdate = (path.enter().append('path').attr('class', 'domain'), d3.transition(path));
                tickEnter.append('line');
                tickEnter.append('text');
                var lineEnter = tickEnter.select('line'), lineUpdate = tickUpdate.select('line'), text = tick.select('text').text(tickFormat), textEnter = tickEnter.select('text'), textUpdate = tickUpdate.select('text'), sign = orient === 'top' || orient === 'left' ? -1 : 1, x1, x2, y1, y2;
                if (orient === 'bottom' || orient === 'top') {
                    tickTransform = d3_svg_axisX, x1 = 'x', y1 = 'y', x2 = 'x2', y2 = 'y2';
                    text.attr('dy', sign < 0 ? '0em' : '.71em').style('text-anchor', 'middle');
                    pathUpdate.attr('d', 'M' + range[0] + ',' + sign * outerTickSize + 'V0H' + range[1] + 'V' + sign * outerTickSize);
                } else {
                    tickTransform = d3_svg_axisY, x1 = 'y', y1 = 'x', x2 = 'y2', y2 = 'x2';
                    text.attr('dy', '.32em').style('text-anchor', sign < 0 ? 'end' : 'start');
                    pathUpdate.attr('d', 'M' + sign * outerTickSize + ',' + range[0] + 'H0V' + range[1] + 'H' + sign * outerTickSize);
                }
                lineEnter.attr(y2, sign * innerTickSize);
                textEnter.attr(y1, sign * tickSpacing);
                lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
                textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
                if (scale1.rangeBand) {
                    var x = scale1, dx = x.rangeBand() / 2;
                    scale0 = scale1 = function (d) {
                        return x(d) + dx;
                    };
                } else if (scale0.rangeBand) {
                    scale0 = scale1;
                } else {
                    tickExit.call(tickTransform, scale1, scale0);
                }
                tickEnter.call(tickTransform, scale0, scale1);
                tickUpdate.call(tickTransform, scale1, scale1);
            });
        }
        axis.scale = function (x) {
            if (!arguments.length)
                return scale;
            scale = x;
            return axis;
        };
        axis.orient = function (x) {
            if (!arguments.length)
                return orient;
            orient = x in d3_svg_axisOrients ? x + '' : d3_svg_axisDefaultOrient;
            return axis;
        };
        axis.ticks = function () {
            if (!arguments.length)
                return tickArguments_;
            tickArguments_ = d3_array(arguments);
            return axis;
        };
        axis.tickValues = function (x) {
            if (!arguments.length)
                return tickValues;
            tickValues = x;
            return axis;
        };
        axis.tickFormat = function (x) {
            if (!arguments.length)
                return tickFormat_;
            tickFormat_ = x;
            return axis;
        };
        axis.tickSize = function (x) {
            var n = arguments.length;
            if (!n)
                return innerTickSize;
            innerTickSize = +x;
            outerTickSize = +arguments[n - 1];
            return axis;
        };
        axis.innerTickSize = function (x) {
            if (!arguments.length)
                return innerTickSize;
            innerTickSize = +x;
            return axis;
        };
        axis.outerTickSize = function (x) {
            if (!arguments.length)
                return outerTickSize;
            outerTickSize = +x;
            return axis;
        };
        axis.tickPadding = function (x) {
            if (!arguments.length)
                return tickPadding;
            tickPadding = +x;
            return axis;
        };
        axis.tickSubdivide = function () {
            return arguments.length && axis;
        };
        return axis;
    };
    var d3_svg_axisDefaultOrient = 'bottom', d3_svg_axisOrients = {
            top: 1,
            right: 1,
            bottom: 1,
            left: 1
        };
    function d3_svg_axisX(selection, x0, x1) {
        selection.attr('transform', function (d) {
            var v0 = x0(d);
            return 'translate(' + (isFinite(v0) ? v0 : x1(d)) + ',0)';
        });
    }
    function d3_svg_axisY(selection, y0, y1) {
        selection.attr('transform', function (d) {
            var v0 = y0(d);
            return 'translate(0,' + (isFinite(v0) ? v0 : y1(d)) + ')';
        });
    }
    d3.svg.brush = function () {
        var event = d3_eventDispatch(brush, 'brushstart', 'brush', 'brushend'), x = null, y = null, xExtent = [
                0,
                0
            ], yExtent = [
                0,
                0
            ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
        function brush(g) {
            g.each(function () {
                var g = d3.select(this).style('pointer-events', 'all').style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)').on('mousedown.brush', brushstart).on('touchstart.brush', brushstart);
                var background = g.selectAll('.background').data([0]);
                background.enter().append('rect').attr('class', 'background').style('visibility', 'hidden').style('cursor', 'crosshair');
                g.selectAll('.extent').data([0]).enter().append('rect').attr('class', 'extent').style('cursor', 'move');
                var resize = g.selectAll('.resize').data(resizes, d3_identity);
                resize.exit().remove();
                resize.enter().append('g').attr('class', function (d) {
                    return 'resize ' + d;
                }).style('cursor', function (d) {
                    return d3_svg_brushCursor[d];
                }).append('rect').attr('x', function (d) {
                    return /[ew]$/.test(d) ? -3 : null;
                }).attr('y', function (d) {
                    return /^[ns]/.test(d) ? -3 : null;
                }).attr('width', 6).attr('height', 6).style('visibility', 'hidden');
                resize.style('display', brush.empty() ? 'none' : null);
                var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
                if (x) {
                    range = d3_scaleRange(x);
                    backgroundUpdate.attr('x', range[0]).attr('width', range[1] - range[0]);
                    redrawX(gUpdate);
                }
                if (y) {
                    range = d3_scaleRange(y);
                    backgroundUpdate.attr('y', range[0]).attr('height', range[1] - range[0]);
                    redrawY(gUpdate);
                }
                redraw(gUpdate);
            });
        }
        brush.event = function (g) {
            g.each(function () {
                var event_ = event.of(this, arguments), extent1 = {
                        x: xExtent,
                        y: yExtent,
                        i: xExtentDomain,
                        j: yExtentDomain
                    }, extent0 = this.__chart__ || extent1;
                this.__chart__ = extent1;
                if (d3_transitionInheritId) {
                    d3.select(this).transition().each('start.brush', function () {
                        xExtentDomain = extent0.i;
                        yExtentDomain = extent0.j;
                        xExtent = extent0.x;
                        yExtent = extent0.y;
                        event_({ type: 'brushstart' });
                    }).tween('brush:brush', function () {
                        var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
                        xExtentDomain = yExtentDomain = null;
                        return function (t) {
                            xExtent = extent1.x = xi(t);
                            yExtent = extent1.y = yi(t);
                            event_({
                                type: 'brush',
                                mode: 'resize'
                            });
                        };
                    }).each('end.brush', function () {
                        xExtentDomain = extent1.i;
                        yExtentDomain = extent1.j;
                        event_({
                            type: 'brush',
                            mode: 'resize'
                        });
                        event_({ type: 'brushend' });
                    });
                } else {
                    event_({ type: 'brushstart' });
                    event_({
                        type: 'brush',
                        mode: 'resize'
                    });
                    event_({ type: 'brushend' });
                }
            });
        };
        function redraw(g) {
            g.selectAll('.resize').attr('transform', function (d) {
                return 'translate(' + xExtent[+/e$/.test(d)] + ',' + yExtent[+/^s/.test(d)] + ')';
            });
        }
        function redrawX(g) {
            g.select('.extent').attr('x', xExtent[0]);
            g.selectAll('.extent,.n>rect,.s>rect').attr('width', xExtent[1] - xExtent[0]);
        }
        function redrawY(g) {
            g.select('.extent').attr('y', yExtent[0]);
            g.selectAll('.extent,.e>rect,.w>rect').attr('height', yExtent[1] - yExtent[0]);
        }
        function brushstart() {
            var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed('extent'), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
            var w = d3.select(d3_window(target)).on('keydown.brush', keydown).on('keyup.brush', keyup);
            if (d3.event.changedTouches) {
                w.on('touchmove.brush', brushmove).on('touchend.brush', brushend);
            } else {
                w.on('mousemove.brush', brushmove).on('mouseup.brush', brushend);
            }
            g.interrupt().selectAll('*').interrupt();
            if (dragging) {
                origin[0] = xExtent[0] - origin[0];
                origin[1] = yExtent[0] - origin[1];
            } else if (resizing) {
                var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
                offset = [
                    xExtent[1 - ex] - origin[0],
                    yExtent[1 - ey] - origin[1]
                ];
                origin[0] = xExtent[ex];
                origin[1] = yExtent[ey];
            } else if (d3.event.altKey)
                center = origin.slice();
            g.style('pointer-events', 'none').selectAll('.resize').style('display', null);
            d3.select('body').style('cursor', eventTarget.style('cursor'));
            event_({ type: 'brushstart' });
            brushmove();
            function keydown() {
                if (d3.event.keyCode == 32) {
                    if (!dragging) {
                        center = null;
                        origin[0] -= xExtent[1];
                        origin[1] -= yExtent[1];
                        dragging = 2;
                    }
                    d3_eventPreventDefault();
                }
            }
            function keyup() {
                if (d3.event.keyCode == 32 && dragging == 2) {
                    origin[0] += xExtent[1];
                    origin[1] += yExtent[1];
                    dragging = 0;
                    d3_eventPreventDefault();
                }
            }
            function brushmove() {
                var point = d3.mouse(target), moved = false;
                if (offset) {
                    point[0] += offset[0];
                    point[1] += offset[1];
                }
                if (!dragging) {
                    if (d3.event.altKey) {
                        if (!center)
                            center = [
                                (xExtent[0] + xExtent[1]) / 2,
                                (yExtent[0] + yExtent[1]) / 2
                            ];
                        origin[0] = xExtent[+(point[0] < center[0])];
                        origin[1] = yExtent[+(point[1] < center[1])];
                    } else
                        center = null;
                }
                if (resizingX && move1(point, x, 0)) {
                    redrawX(g);
                    moved = true;
                }
                if (resizingY && move1(point, y, 1)) {
                    redrawY(g);
                    moved = true;
                }
                if (moved) {
                    redraw(g);
                    event_({
                        type: 'brush',
                        mode: dragging ? 'move' : 'resize'
                    });
                }
            }
            function move1(point, scale, i) {
                var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
                if (dragging) {
                    r0 -= position;
                    r1 -= size + position;
                }
                min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
                if (dragging) {
                    max = (min += position) + size;
                } else {
                    if (center)
                        position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
                    if (position < min) {
                        max = min;
                        min = position;
                    } else {
                        max = position;
                    }
                }
                if (extent[0] != min || extent[1] != max) {
                    if (i)
                        yExtentDomain = null;
                    else
                        xExtentDomain = null;
                    extent[0] = min;
                    extent[1] = max;
                    return true;
                }
            }
            function brushend() {
                brushmove();
                g.style('pointer-events', 'all').selectAll('.resize').style('display', brush.empty() ? 'none' : null);
                d3.select('body').style('cursor', null);
                w.on('mousemove.brush', null).on('mouseup.brush', null).on('touchmove.brush', null).on('touchend.brush', null).on('keydown.brush', null).on('keyup.brush', null);
                dragRestore();
                event_({ type: 'brushend' });
            }
        }
        brush.x = function (z) {
            if (!arguments.length)
                return x;
            x = z;
            resizes = d3_svg_brushResizes[!x << 1 | !y];
            return brush;
        };
        brush.y = function (z) {
            if (!arguments.length)
                return y;
            y = z;
            resizes = d3_svg_brushResizes[!x << 1 | !y];
            return brush;
        };
        brush.clamp = function (z) {
            if (!arguments.length)
                return x && y ? [
                    xClamp,
                    yClamp
                ] : x ? xClamp : y ? yClamp : null;
            if (x && y)
                xClamp = !!z[0], yClamp = !!z[1];
            else if (x)
                xClamp = !!z;
            else if (y)
                yClamp = !!z;
            return brush;
        };
        brush.extent = function (z) {
            var x0, x1, y0, y1, t;
            if (!arguments.length) {
                if (x) {
                    if (xExtentDomain) {
                        x0 = xExtentDomain[0], x1 = xExtentDomain[1];
                    } else {
                        x0 = xExtent[0], x1 = xExtent[1];
                        if (x.invert)
                            x0 = x.invert(x0), x1 = x.invert(x1);
                        if (x1 < x0)
                            t = x0, x0 = x1, x1 = t;
                    }
                }
                if (y) {
                    if (yExtentDomain) {
                        y0 = yExtentDomain[0], y1 = yExtentDomain[1];
                    } else {
                        y0 = yExtent[0], y1 = yExtent[1];
                        if (y.invert)
                            y0 = y.invert(y0), y1 = y.invert(y1);
                        if (y1 < y0)
                            t = y0, y0 = y1, y1 = t;
                    }
                }
                return x && y ? [
                    [
                        x0,
                        y0
                    ],
                    [
                        x1,
                        y1
                    ]
                ] : x ? [
                    x0,
                    x1
                ] : y && [
                    y0,
                    y1
                ];
            }
            if (x) {
                x0 = z[0], x1 = z[1];
                if (y)
                    x0 = x0[0], x1 = x1[0];
                xExtentDomain = [
                    x0,
                    x1
                ];
                if (x.invert)
                    x0 = x(x0), x1 = x(x1);
                if (x1 < x0)
                    t = x0, x0 = x1, x1 = t;
                if (x0 != xExtent[0] || x1 != xExtent[1])
                    xExtent = [
                        x0,
                        x1
                    ];
            }
            if (y) {
                y0 = z[0], y1 = z[1];
                if (x)
                    y0 = y0[1], y1 = y1[1];
                yExtentDomain = [
                    y0,
                    y1
                ];
                if (y.invert)
                    y0 = y(y0), y1 = y(y1);
                if (y1 < y0)
                    t = y0, y0 = y1, y1 = t;
                if (y0 != yExtent[0] || y1 != yExtent[1])
                    yExtent = [
                        y0,
                        y1
                    ];
            }
            return brush;
        };
        brush.clear = function () {
            if (!brush.empty()) {
                xExtent = [
                    0,
                    0
                ], yExtent = [
                    0,
                    0
                ];
                xExtentDomain = yExtentDomain = null;
            }
            return brush;
        };
        brush.empty = function () {
            return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
        };
        return d3.rebind(brush, event, 'on');
    };
    var d3_svg_brushCursor = {
        n: 'ns-resize',
        e: 'ew-resize',
        s: 'ns-resize',
        w: 'ew-resize',
        nw: 'nwse-resize',
        ne: 'nesw-resize',
        se: 'nwse-resize',
        sw: 'nesw-resize'
    };
    var d3_svg_brushResizes = [
        [
            'n',
            'e',
            's',
            'w',
            'nw',
            'ne',
            'se',
            'sw'
        ],
        [
            'e',
            'w'
        ],
        [
            'n',
            's'
        ],
        []
    ];
    var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
    var d3_time_formatUtc = d3_time_format.utc;
    var d3_time_formatIso = d3_time_formatUtc('%Y-%m-%dT%H:%M:%S.%LZ');
    d3_time_format.iso = Date.prototype.toISOString && +new Date('2000-01-01T00:00:00.000Z') ? d3_time_formatIsoNative : d3_time_formatIso;
    function d3_time_formatIsoNative(date) {
        return date.toISOString();
    }
    d3_time_formatIsoNative.parse = function (string) {
        var date = new Date(string);
        return isNaN(date) ? null : date;
    };
    d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
    d3_time.second = d3_time_interval(function (date) {
        return new d3_date(Math.floor(date / 1000) * 1000);
    }, function (date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 1000);
    }, function (date) {
        return date.getSeconds();
    });
    d3_time.seconds = d3_time.second.range;
    d3_time.seconds.utc = d3_time.second.utc.range;
    d3_time.minute = d3_time_interval(function (date) {
        return new d3_date(Math.floor(date / 60000) * 60000);
    }, function (date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 60000);
    }, function (date) {
        return date.getMinutes();
    });
    d3_time.minutes = d3_time.minute.range;
    d3_time.minutes.utc = d3_time.minute.utc.range;
    d3_time.hour = d3_time_interval(function (date) {
        var timezone = date.getTimezoneOffset() / 60;
        return new d3_date((Math.floor(date / 3600000 - timezone) + timezone) * 3600000);
    }, function (date, offset) {
        date.setTime(date.getTime() + Math.floor(offset) * 3600000);
    }, function (date) {
        return date.getHours();
    });
    d3_time.hours = d3_time.hour.range;
    d3_time.hours.utc = d3_time.hour.utc.range;
    d3_time.month = d3_time_interval(function (date) {
        date = d3_time.day(date);
        date.setDate(1);
        return date;
    }, function (date, offset) {
        date.setMonth(date.getMonth() + offset);
    }, function (date) {
        return date.getMonth();
    });
    d3_time.months = d3_time.month.range;
    d3_time.months.utc = d3_time.month.utc.range;
    function d3_time_scale(linear, methods, format) {
        function scale(x) {
            return linear(x);
        }
        scale.invert = function (x) {
            return d3_time_scaleDate(linear.invert(x));
        };
        scale.domain = function (x) {
            if (!arguments.length)
                return linear.domain().map(d3_time_scaleDate);
            linear.domain(x);
            return scale;
        };
        function tickMethod(extent, count) {
            var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
            return i == d3_time_scaleSteps.length ? [
                methods.year,
                d3_scale_linearTickRange(extent.map(function (d) {
                    return d / 31536000000;
                }), count)[2]
            ] : !i ? [
                d3_time_scaleMilliseconds,
                d3_scale_linearTickRange(extent, count)[2]
            ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
        }
        scale.nice = function (interval, skip) {
            var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === 'number' && tickMethod(extent, interval);
            if (method)
                interval = method[0], skip = method[1];
            function skipped(date) {
                return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
            }
            return scale.domain(d3_scale_nice(domain, skip > 1 ? {
                floor: function (date) {
                    while (skipped(date = interval.floor(date)))
                        date = d3_time_scaleDate(date - 1);
                    return date;
                },
                ceil: function (date) {
                    while (skipped(date = interval.ceil(date)))
                        date = d3_time_scaleDate(+date + 1);
                    return date;
                }
            } : interval));
        };
        scale.ticks = function (interval, skip) {
            var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === 'number' ? tickMethod(extent, interval) : !interval.range && [
                    { range: interval },
                    skip
                ];
            if (method)
                interval = method[0], skip = method[1];
            return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
        };
        scale.tickFormat = function () {
            return format;
        };
        scale.copy = function () {
            return d3_time_scale(linear.copy(), methods, format);
        };
        return d3_scale_linearRebind(scale, linear);
    }
    function d3_time_scaleDate(t) {
        return new Date(t);
    }
    var d3_time_scaleSteps = [
        1000,
        5000,
        15000,
        30000,
        60000,
        300000,
        900000,
        1800000,
        3600000,
        10800000,
        21600000,
        43200000,
        86400000,
        172800000,
        604800000,
        2592000000,
        7776000000,
        31536000000
    ];
    var d3_time_scaleLocalMethods = [
        [
            d3_time.second,
            1
        ],
        [
            d3_time.second,
            5
        ],
        [
            d3_time.second,
            15
        ],
        [
            d3_time.second,
            30
        ],
        [
            d3_time.minute,
            1
        ],
        [
            d3_time.minute,
            5
        ],
        [
            d3_time.minute,
            15
        ],
        [
            d3_time.minute,
            30
        ],
        [
            d3_time.hour,
            1
        ],
        [
            d3_time.hour,
            3
        ],
        [
            d3_time.hour,
            6
        ],
        [
            d3_time.hour,
            12
        ],
        [
            d3_time.day,
            1
        ],
        [
            d3_time.day,
            2
        ],
        [
            d3_time.week,
            1
        ],
        [
            d3_time.month,
            1
        ],
        [
            d3_time.month,
            3
        ],
        [
            d3_time.year,
            1
        ]
    ];
    var d3_time_scaleLocalFormat = d3_time_format.multi([
        [
            '.%L',
            function (d) {
                return d.getMilliseconds();
            }
        ],
        [
            ':%S',
            function (d) {
                return d.getSeconds();
            }
        ],
        [
            '%I:%M',
            function (d) {
                return d.getMinutes();
            }
        ],
        [
            '%I %p',
            function (d) {
                return d.getHours();
            }
        ],
        [
            '%a %d',
            function (d) {
                return d.getDay() && d.getDate() != 1;
            }
        ],
        [
            '%b %d',
            function (d) {
                return d.getDate() != 1;
            }
        ],
        [
            '%B',
            function (d) {
                return d.getMonth();
            }
        ],
        [
            '%Y',
            d3_true
        ]
    ]);
    var d3_time_scaleMilliseconds = {
        range: function (start, stop, step) {
            return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
        },
        floor: d3_identity,
        ceil: d3_identity
    };
    d3_time_scaleLocalMethods.year = d3_time.year;
    d3_time.scale = function () {
        return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
    };
    var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function (m) {
        return [
            m[0].utc,
            m[1]
        ];
    });
    var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([
        [
            '.%L',
            function (d) {
                return d.getUTCMilliseconds();
            }
        ],
        [
            ':%S',
            function (d) {
                return d.getUTCSeconds();
            }
        ],
        [
            '%I:%M',
            function (d) {
                return d.getUTCMinutes();
            }
        ],
        [
            '%I %p',
            function (d) {
                return d.getUTCHours();
            }
        ],
        [
            '%a %d',
            function (d) {
                return d.getUTCDay() && d.getUTCDate() != 1;
            }
        ],
        [
            '%b %d',
            function (d) {
                return d.getUTCDate() != 1;
            }
        ],
        [
            '%B',
            function (d) {
                return d.getUTCMonth();
            }
        ],
        [
            '%Y',
            d3_true
        ]
    ]);
    d3_time_scaleUtcMethods.year = d3_time.year.utc;
    d3_time.scale.utc = function () {
        return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
    };
    d3.text = d3_xhrType(function (request) {
        return request.responseText;
    });
    d3.json = function (url, callback) {
        return d3_xhr(url, 'application/json', d3_json, callback);
    };
    function d3_json(request) {
        return JSON.parse(request.responseText);
    }
    d3.html = function (url, callback) {
        return d3_xhr(url, 'text/html', d3_html, callback);
    };
    function d3_html(request) {
        var range = d3_document.createRange();
        range.selectNode(d3_document.body);
        return range.createContextualFragment(request.responseText);
    }
    d3.xml = d3_xhrType(function (request) {
        return request.responseXML;
    });
    if (typeof define === 'function' && define.amd)
        this.d3 = d3, define('d3@3.5.17#d3', d3);
    else if (typeof module === 'object' && module.exports)
        module.exports = d3;
    else
        this.d3 = d3;
}();
/*nvd3@1.8.2-dev#build/nv.d3*/
define('nvd3@1.8.2-dev#build/nv.d3', function (require, exports, module) {
    (function (global) {
        (function () {
            var nv = {};
            nv.dev = false;
            nv.tooltip = nv.tooltip || {};
            nv.utils = nv.utils || {};
            nv.models = nv.models || {};
            nv.charts = {};
            nv.logs = {};
            nv.dom = {};
            if (typeof module !== 'undefined' && typeof exports !== 'undefined' && typeof d3 == 'undefined') {
                d3 = require('d3');
            }
            nv.dispatch = d3.dispatch('render_start', 'render_end');
            if (!Function.prototype.bind) {
                Function.prototype.bind = function (oThis) {
                    if (typeof this !== 'function') {
                        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
                    }
                    var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, fNOP = function () {
                        }, fBound = function () {
                            return fToBind.apply(this instanceof fNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
                        };
                    fNOP.prototype = this.prototype;
                    fBound.prototype = new fNOP();
                    return fBound;
                };
            }
            if (nv.dev) {
                nv.dispatch.on('render_start', function (e) {
                    nv.logs.startTime = +new Date();
                });
                nv.dispatch.on('render_end', function (e) {
                    nv.logs.endTime = +new Date();
                    nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;
                    nv.log('total', nv.logs.totalTime);
                });
            }
            nv.log = function () {
                if (nv.dev && window.console && console.log && console.log.apply)
                    console.log.apply(console, arguments);
                else if (nv.dev && window.console && typeof console.log == 'function' && Function.prototype.bind) {
                    var log = Function.prototype.bind.call(console.log, console);
                    log.apply(console, arguments);
                }
                return arguments[arguments.length - 1];
            };
            nv.deprecated = function (name, info) {
                if (console && console.warn) {
                    console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');
                }
            };
            nv.render = function render(step) {
                step = step || 1;
                nv.render.active = true;
                nv.dispatch.render_start();
                var renderLoop = function () {
                    var chart, graph;
                    for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {
                        chart = graph.generate();
                        if (typeof graph.callback == typeof Function)
                            graph.callback(chart);
                    }
                    nv.render.queue.splice(0, i);
                    if (nv.render.queue.length) {
                        setTimeout(renderLoop);
                    } else {
                        nv.dispatch.render_end();
                        nv.render.active = false;
                    }
                };
                setTimeout(renderLoop);
            };
            nv.render.active = false;
            nv.render.queue = [];
            nv.addGraph = function (obj) {
                if (typeof arguments[0] === typeof Function) {
                    obj = {
                        generate: arguments[0],
                        callback: arguments[1]
                    };
                }
                nv.render.queue.push(obj);
                if (!nv.render.active) {
                    nv.render();
                }
            };
            if (typeof module !== 'undefined' && typeof exports !== 'undefined') {
                module.exports = nv;
            }
            if (typeof window !== 'undefined') {
                window.nv = nv;
            }
            nv.dom.write = function (callback) {
                if (window.fastdom !== undefined) {
                    return fastdom.mutate(callback);
                }
                return callback();
            };
            nv.dom.read = function (callback) {
                if (window.fastdom !== undefined) {
                    return fastdom.measure(callback);
                }
                return callback();
            };
            nv.interactiveGuideline = function () {
                'use strict';
                var margin = {
                        left: 0,
                        top: 0
                    }, width = null, height = null, xScale = d3.scale.linear(), dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp'), showGuideLine = true, svgContainer = null, tooltip = nv.models.tooltip(), isMSIE = 'ActiveXObject' in window;
                tooltip.duration(0).hideDelay(0).hidden(false);
                function layer(selection) {
                    selection.each(function (data) {
                        var container = d3.select(this);
                        var availableWidth = width || 960, availableHeight = height || 400;
                        var wrap = container.selectAll('g.nv-wrap.nv-interactiveLineLayer').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', ' nv-wrap nv-interactiveLineLayer');
                        wrapEnter.append('g').attr('class', 'nv-interactiveGuideLine');
                        if (!svgContainer) {
                            return;
                        }
                        function mouseHandler() {
                            var d3mouse = d3.mouse(this);
                            var mouseX = d3mouse[0];
                            var mouseY = d3mouse[1];
                            var subtractMargin = true;
                            var mouseOutAnyReason = false;
                            if (isMSIE) {
                                mouseX = d3.event.offsetX;
                                mouseY = d3.event.offsetY;
                                if (d3.event.target.tagName !== 'svg') {
                                    subtractMargin = false;
                                }
                                if (d3.event.target.className.baseVal.match('nv-legend')) {
                                    mouseOutAnyReason = true;
                                }
                            }
                            if (subtractMargin) {
                                mouseX -= margin.left;
                                mouseY -= margin.top;
                            }
                            if (d3.event.type === 'mouseout' || mouseX < 0 || mouseY < 0 || mouseX > availableWidth || mouseY > availableHeight || d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined || mouseOutAnyReason) {
                                if (isMSIE) {
                                    if (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined && (d3.event.relatedTarget.className === undefined || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {
                                        return;
                                    }
                                }
                                dispatch.elementMouseout({
                                    mouseX: mouseX,
                                    mouseY: mouseY
                                });
                                layer.renderGuideLine(null);
                                tooltip.hidden(true);
                                return;
                            } else {
                                tooltip.hidden(false);
                            }
                            var scaleIsOrdinal = typeof xScale.rangeBands === 'function';
                            var pointXValue = undefined;
                            if (scaleIsOrdinal) {
                                var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;
                                if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {
                                    pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];
                                } else {
                                    dispatch.elementMouseout({
                                        mouseX: mouseX,
                                        mouseY: mouseY
                                    });
                                    layer.renderGuideLine(null);
                                    tooltip.hidden(true);
                                    return;
                                }
                            } else {
                                pointXValue = xScale.invert(mouseX);
                            }
                            dispatch.elementMousemove({
                                mouseX: mouseX,
                                mouseY: mouseY,
                                pointXValue: pointXValue
                            });
                            if (d3.event.type === 'dblclick') {
                                dispatch.elementDblclick({
                                    mouseX: mouseX,
                                    mouseY: mouseY,
                                    pointXValue: pointXValue
                                });
                            }
                            if (d3.event.type === 'click') {
                                dispatch.elementClick({
                                    mouseX: mouseX,
                                    mouseY: mouseY,
                                    pointXValue: pointXValue
                                });
                            }
                            if (d3.event.type === 'mousedown') {
                                dispatch.elementMouseDown({
                                    mouseX: mouseX,
                                    mouseY: mouseY,
                                    pointXValue: pointXValue
                                });
                            }
                            if (d3.event.type === 'mouseup') {
                                dispatch.elementMouseUp({
                                    mouseX: mouseX,
                                    mouseY: mouseY,
                                    pointXValue: pointXValue
                                });
                            }
                        }
                        svgContainer.on('touchmove', mouseHandler).on('mousemove', mouseHandler, true).on('mouseout', mouseHandler, true).on('mousedown', mouseHandler, true).on('mouseup', mouseHandler, true).on('dblclick', mouseHandler).on('click', mouseHandler);
                        layer.guideLine = null;
                        layer.renderGuideLine = function (x) {
                            if (!showGuideLine)
                                return;
                            if (layer.guideLine && layer.guideLine.attr('x1') === x)
                                return;
                            nv.dom.write(function () {
                                var line = wrap.select('.nv-interactiveGuideLine').selectAll('line').data(x != null ? [nv.utils.NaNtoZero(x)] : [], String);
                                line.enter().append('line').attr('class', 'nv-guideline').attr('x1', function (d) {
                                    return d;
                                }).attr('x2', function (d) {
                                    return d;
                                }).attr('y1', availableHeight).attr('y2', 0);
                                line.exit().remove();
                            });
                        };
                    });
                }
                layer.dispatch = dispatch;
                layer.tooltip = tooltip;
                layer.margin = function (_) {
                    if (!arguments.length)
                        return margin;
                    margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
                    margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
                    return layer;
                };
                layer.width = function (_) {
                    if (!arguments.length)
                        return width;
                    width = _;
                    return layer;
                };
                layer.height = function (_) {
                    if (!arguments.length)
                        return height;
                    height = _;
                    return layer;
                };
                layer.xScale = function (_) {
                    if (!arguments.length)
                        return xScale;
                    xScale = _;
                    return layer;
                };
                layer.showGuideLine = function (_) {
                    if (!arguments.length)
                        return showGuideLine;
                    showGuideLine = _;
                    return layer;
                };
                layer.svgContainer = function (_) {
                    if (!arguments.length)
                        return svgContainer;
                    svgContainer = _;
                    return layer;
                };
                return layer;
            };
            nv.interactiveBisect = function (values, searchVal, xAccessor) {
                'use strict';
                if (!(values instanceof Array)) {
                    return null;
                }
                var _xAccessor;
                if (typeof xAccessor !== 'function') {
                    _xAccessor = function (d) {
                        return d.x;
                    };
                } else {
                    _xAccessor = xAccessor;
                }
                var _cmp = function (d, v) {
                    return _xAccessor(d) - v;
                };
                var bisect = d3.bisector(_cmp).left;
                var index = d3.max([
                    0,
                    bisect(values, searchVal) - 1
                ]);
                var currentValue = _xAccessor(values[index]);
                if (typeof currentValue === 'undefined') {
                    currentValue = index;
                }
                if (currentValue === searchVal) {
                    return index;
                }
                var nextIndex = d3.min([
                    index + 1,
                    values.length - 1
                ]);
                var nextValue = _xAccessor(values[nextIndex]);
                if (typeof nextValue === 'undefined') {
                    nextValue = nextIndex;
                }
                if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {
                    return index;
                } else {
                    return nextIndex;
                }
            };
            nv.nearestValueIndex = function (values, searchVal, threshold) {
                'use strict';
                var yDistMax = Infinity, indexToHighlight = null;
                values.forEach(function (d, i) {
                    var delta = Math.abs(searchVal - d);
                    if (d != null && delta <= yDistMax && delta < threshold) {
                        yDistMax = delta;
                        indexToHighlight = i;
                    }
                });
                return indexToHighlight;
            };
            nv.models.tooltip = function () {
                'use strict';
                var id = 'nvtooltip-' + Math.floor(Math.random() * 100000), data = null, gravity = 'w', distance = 25, snapDistance = 0, classes = null, chartContainer = null, hidden = true, hideDelay = 200, tooltip = null, lastPosition = {
                        left: null,
                        top: null
                    }, enabled = true, duration = 100, headerEnabled = true, nvPointerEventsClass = 'nv-pointer-events-none';
                var position = function () {
                    return {
                        left: d3.event !== null ? d3.event.clientX : 0,
                        top: d3.event !== null ? d3.event.clientY : 0
                    };
                };
                var valueFormatter = function (d, i) {
                    return d;
                };
                var headerFormatter = function (d) {
                    return d;
                };
                var keyFormatter = function (d, i) {
                    return d;
                };
                var contentGenerator = function (d) {
                    if (d === null) {
                        return '';
                    }
                    var table = d3.select(document.createElement('table'));
                    if (headerEnabled) {
                        var theadEnter = table.selectAll('thead').data([d]).enter().append('thead');
                        theadEnter.append('tr').append('td').attr('colspan', 3).append('strong').classed('x-value', true).html(headerFormatter(d.value));
                    }
                    var tbodyEnter = table.selectAll('tbody').data([d]).enter().append('tbody');
                    var trowEnter = tbodyEnter.selectAll('tr').data(function (p) {
                        return p.series;
                    }).enter().append('tr').classed('highlight', function (p) {
                        return p.highlight;
                    });
                    trowEnter.append('td').classed('legend-color-guide', true).append('div').style('background-color', function (p) {
                        return p.color;
                    });
                    trowEnter.append('td').classed('key', true).classed('total', function (p) {
                        return !!p.total;
                    }).html(function (p, i) {
                        return keyFormatter(p.key, i);
                    });
                    trowEnter.append('td').classed('value', true).html(function (p, i) {
                        return valueFormatter(p.value, i);
                    });
                    trowEnter.selectAll('td').each(function (p) {
                        if (p.highlight) {
                            var opacityScale = d3.scale.linear().domain([
                                0,
                                1
                            ]).range([
                                '#fff',
                                p.color
                            ]);
                            var opacity = 0.6;
                            d3.select(this).style('border-bottom-color', opacityScale(opacity)).style('border-top-color', opacityScale(opacity));
                        }
                    });
                    var html = table.node().outerHTML;
                    if (d.footer !== undefined)
                        html += '<div class=\'footer\'>' + d.footer + '</div>';
                    return html;
                };
                var dataSeriesExists = function (d) {
                    if (d && d.series) {
                        if (nv.utils.isArray(d.series)) {
                            return true;
                        }
                        if (nv.utils.isObject(d.series)) {
                            d.series = [d.series];
                            return true;
                        }
                    }
                    return false;
                };
                var calcGravityOffset = function (pos) {
                    var height = tooltip.node().offsetHeight, width = tooltip.node().offsetWidth, clientWidth = document.documentElement.clientWidth, clientHeight = document.documentElement.clientHeight, left, top, tmp;
                    switch (gravity) {
                    case 'e':
                        left = -width - distance;
                        top = -(height / 2);
                        if (pos.left + left < 0)
                            left = distance;
                        if ((tmp = pos.top + top) < 0)
                            top -= tmp;
                        if ((tmp = pos.top + top + height) > clientHeight)
                            top -= tmp - clientHeight;
                        break;
                    case 'w':
                        left = distance;
                        top = -(height / 2);
                        if (pos.left + left + width > clientWidth)
                            left = -width - distance;
                        if ((tmp = pos.top + top) < 0)
                            top -= tmp;
                        if ((tmp = pos.top + top + height) > clientHeight)
                            top -= tmp - clientHeight;
                        break;
                    case 'n':
                        left = -(width / 2) - 5;
                        top = distance;
                        if (pos.top + top + height > clientHeight)
                            top = -height - distance;
                        if ((tmp = pos.left + left) < 0)
                            left -= tmp;
                        if ((tmp = pos.left + left + width) > clientWidth)
                            left -= tmp - clientWidth;
                        break;
                    case 's':
                        left = -(width / 2);
                        top = -height - distance;
                        if (pos.top + top < 0)
                            top = distance;
                        if ((tmp = pos.left + left) < 0)
                            left -= tmp;
                        if ((tmp = pos.left + left + width) > clientWidth)
                            left -= tmp - clientWidth;
                        break;
                    case 'center':
                        left = -(width / 2);
                        top = -(height / 2);
                        break;
                    default:
                        left = 0;
                        top = 0;
                        break;
                    }
                    return {
                        'left': left,
                        'top': top
                    };
                };
                var positionTooltip = function () {
                    nv.dom.read(function () {
                        var pos = position(), gravityOffset = calcGravityOffset(pos), left = pos.left + gravityOffset.left, top = pos.top + gravityOffset.top;
                        if (hidden) {
                            tooltip.interrupt().transition().delay(hideDelay).duration(0).style('opacity', 0);
                        } else {
                            var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';
                            var new_translate = 'translate(' + left + 'px, ' + top + 'px)';
                            var translateInterpolator = d3.interpolateString(old_translate, new_translate);
                            var is_hidden = tooltip.style('opacity') < 0.1;
                            tooltip.interrupt().transition().duration(is_hidden ? 0 : duration).styleTween('transform', function (d) {
                                return translateInterpolator;
                            }, 'important').styleTween('-webkit-transform', function (d) {
                                return translateInterpolator;
                            }).style('-ms-transform', new_translate).style('opacity', 1);
                        }
                        lastPosition.left = left;
                        lastPosition.top = top;
                    });
                };
                function initTooltip() {
                    if (!tooltip || !tooltip.node()) {
                        var container = chartContainer ? chartContainer : document.body;
                        var data = [1];
                        tooltip = d3.select(container).selectAll('.nvtooltip').data(data);
                        tooltip.enter().append('div').attr('class', 'nvtooltip ' + (classes ? classes : 'xy-tooltip')).attr('id', id).style('top', 0).style('left', 0).style('opacity', 0).style('position', 'fixed').selectAll('div, table, td, tr').classed(nvPointerEventsClass, true).classed(nvPointerEventsClass, true);
                        tooltip.exit().remove();
                    }
                }
                function nvtooltip() {
                    if (!enabled)
                        return;
                    if (!dataSeriesExists(data))
                        return;
                    nv.dom.write(function () {
                        initTooltip();
                        var newContent = contentGenerator(data);
                        if (newContent) {
                            tooltip.node().innerHTML = newContent;
                        }
                        positionTooltip();
                    });
                    return nvtooltip;
                }
                nvtooltip.nvPointerEventsClass = nvPointerEventsClass;
                nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);
                nvtooltip._options = Object.create({}, {
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                        }
                    },
                    gravity: {
                        get: function () {
                            return gravity;
                        },
                        set: function (_) {
                            gravity = _;
                        }
                    },
                    distance: {
                        get: function () {
                            return distance;
                        },
                        set: function (_) {
                            distance = _;
                        }
                    },
                    snapDistance: {
                        get: function () {
                            return snapDistance;
                        },
                        set: function (_) {
                            snapDistance = _;
                        }
                    },
                    classes: {
                        get: function () {
                            return classes;
                        },
                        set: function (_) {
                            classes = _;
                        }
                    },
                    chartContainer: {
                        get: function () {
                            return chartContainer;
                        },
                        set: function (_) {
                            chartContainer = _;
                        }
                    },
                    enabled: {
                        get: function () {
                            return enabled;
                        },
                        set: function (_) {
                            enabled = _;
                        }
                    },
                    hideDelay: {
                        get: function () {
                            return hideDelay;
                        },
                        set: function (_) {
                            hideDelay = _;
                        }
                    },
                    contentGenerator: {
                        get: function () {
                            return contentGenerator;
                        },
                        set: function (_) {
                            contentGenerator = _;
                        }
                    },
                    valueFormatter: {
                        get: function () {
                            return valueFormatter;
                        },
                        set: function (_) {
                            valueFormatter = _;
                        }
                    },
                    headerFormatter: {
                        get: function () {
                            return headerFormatter;
                        },
                        set: function (_) {
                            headerFormatter = _;
                        }
                    },
                    keyFormatter: {
                        get: function () {
                            return keyFormatter;
                        },
                        set: function (_) {
                            keyFormatter = _;
                        }
                    },
                    headerEnabled: {
                        get: function () {
                            return headerEnabled;
                        },
                        set: function (_) {
                            headerEnabled = _;
                        }
                    },
                    position: {
                        get: function () {
                            return position;
                        },
                        set: function (_) {
                            position = _;
                        }
                    },
                    fixedTop: {
                        get: function () {
                            return null;
                        },
                        set: function (_) {
                            nv.deprecated('fixedTop', 'feature removed after 1.8.1');
                        }
                    },
                    offset: {
                        get: function () {
                            return {
                                left: 0,
                                top: 0
                            };
                        },
                        set: function (_) {
                            nv.deprecated('offset', 'use chart.tooltip.distance() instead');
                        }
                    },
                    hidden: {
                        get: function () {
                            return hidden;
                        },
                        set: function (_) {
                            if (hidden != _) {
                                hidden = !!_;
                                nvtooltip();
                            }
                        }
                    },
                    data: {
                        get: function () {
                            return data;
                        },
                        set: function (_) {
                            if (_.point) {
                                _.value = _.point.x;
                                _.series = _.series || {};
                                _.series.value = _.point.y;
                                _.series.color = _.point.color || _.series.color;
                            }
                            data = _;
                        }
                    },
                    node: {
                        get: function () {
                            return tooltip.node();
                        },
                        set: function (_) {
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                        }
                    }
                });
                nv.utils.initOptions(nvtooltip);
                return nvtooltip;
            };
            nv.utils.windowSize = function () {
                var size = {
                    width: 640,
                    height: 480
                };
                if (window.innerWidth && window.innerHeight) {
                    size.width = window.innerWidth;
                    size.height = window.innerHeight;
                    return size;
                }
                if (document.compatMode == 'CSS1Compat' && document.documentElement && document.documentElement.offsetWidth) {
                    size.width = document.documentElement.offsetWidth;
                    size.height = document.documentElement.offsetHeight;
                    return size;
                }
                if (document.body && document.body.offsetWidth) {
                    size.width = document.body.offsetWidth;
                    size.height = document.body.offsetHeight;
                    return size;
                }
                return size;
            };
            nv.utils.isArray = Array.isArray;
            nv.utils.isObject = function (a) {
                return a !== null && typeof a === 'object';
            };
            nv.utils.isFunction = function (a) {
                return typeof a === 'function';
            };
            nv.utils.isDate = function (a) {
                return toString.call(a) === '[object Date]';
            };
            nv.utils.isNumber = function (a) {
                return !isNaN(a) && typeof a === 'number';
            };
            nv.utils.windowResize = function (handler) {
                if (window.addEventListener) {
                    window.addEventListener('resize', handler);
                } else {
                    nv.log('ERROR: Failed to bind to window.resize with: ', handler);
                }
                return {
                    callback: handler,
                    clear: function () {
                        window.removeEventListener('resize', handler);
                    }
                };
            };
            nv.utils.getColor = function (color) {
                if (color === undefined) {
                    return nv.utils.defaultColor();
                } else if (nv.utils.isArray(color)) {
                    var color_scale = d3.scale.ordinal().range(color);
                    return function (d, i) {
                        var key = i === undefined ? d : i;
                        return d.color || color_scale(key);
                    };
                } else {
                    return color;
                }
            };
            nv.utils.defaultColor = function () {
                return nv.utils.getColor(d3.scale.category20().range());
            };
            nv.utils.customTheme = function (dictionary, getKey, defaultColors) {
                getKey = getKey || function (series) {
                    return series.key;
                };
                defaultColors = defaultColors || d3.scale.category20().range();
                var defIndex = defaultColors.length;
                return function (series, index) {
                    var key = getKey(series);
                    if (nv.utils.isFunction(dictionary[key])) {
                        return dictionary[key]();
                    } else if (dictionary[key] !== undefined) {
                        return dictionary[key];
                    } else {
                        if (!defIndex) {
                            defIndex = defaultColors.length;
                        }
                        defIndex = defIndex - 1;
                        return defaultColors[defIndex];
                    }
                };
            };
            nv.utils.pjax = function (links, content) {
                var load = function (href) {
                    d3.html(href, function (fragment) {
                        var target = d3.select(content).node();
                        target.parentNode.replaceChild(d3.select(fragment).select(content).node(), target);
                        nv.utils.pjax(links, content);
                    });
                };
                d3.selectAll(links).on('click', function () {
                    history.pushState(this.href, this.textContent, this.href);
                    load(this.href);
                    d3.event.preventDefault();
                });
                d3.select(window).on('popstate', function () {
                    if (d3.event.state) {
                        load(d3.event.state);
                    }
                });
            };
            nv.utils.calcApproxTextWidth = function (svgTextElem) {
                if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {
                    var fontSize = parseInt(svgTextElem.style('font-size').replace('px', ''), 10);
                    var textLength = svgTextElem.text().length;
                    return nv.utils.NaNtoZero(textLength * fontSize * 0.5);
                }
                return 0;
            };
            nv.utils.NaNtoZero = function (n) {
                if (!nv.utils.isNumber(n) || isNaN(n) || n === null || n === Infinity || n === -Infinity) {
                    return 0;
                }
                return n;
            };
            d3.selection.prototype.watchTransition = function (renderWatch) {
                var args = [this].concat([].slice.call(arguments, 1));
                return renderWatch.transition.apply(renderWatch, args);
            };
            nv.utils.renderWatch = function (dispatch, duration) {
                if (!(this instanceof nv.utils.renderWatch)) {
                    return new nv.utils.renderWatch(dispatch, duration);
                }
                var _duration = duration !== undefined ? duration : 250;
                var renderStack = [];
                var self = this;
                this.models = function (models) {
                    models = [].slice.call(arguments, 0);
                    models.forEach(function (model) {
                        model.__rendered = false;
                        (function (m) {
                            m.dispatch.on('renderEnd', function (arg) {
                                m.__rendered = true;
                                self.renderEnd('model');
                            });
                        }(model));
                        if (renderStack.indexOf(model) < 0) {
                            renderStack.push(model);
                        }
                    });
                    return this;
                };
                this.reset = function (duration) {
                    if (duration !== undefined) {
                        _duration = duration;
                    }
                    renderStack = [];
                };
                this.transition = function (selection, args, duration) {
                    args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
                    if (args.length > 1) {
                        duration = args.pop();
                    } else {
                        duration = _duration !== undefined ? _duration : 250;
                    }
                    selection.__rendered = false;
                    if (renderStack.indexOf(selection) < 0) {
                        renderStack.push(selection);
                    }
                    if (duration === 0) {
                        selection.__rendered = true;
                        selection.delay = function () {
                            return this;
                        };
                        selection.duration = function () {
                            return this;
                        };
                        return selection;
                    } else {
                        if (selection.length === 0) {
                            selection.__rendered = true;
                        } else if (selection.every(function (d) {
                                return !d.length;
                            })) {
                            selection.__rendered = true;
                        } else {
                            selection.__rendered = false;
                        }
                        var n = 0;
                        return selection.transition().duration(duration).each(function () {
                            ++n;
                        }).each('end', function (d, i) {
                            if (--n === 0) {
                                selection.__rendered = true;
                                self.renderEnd.apply(this, args);
                            }
                        });
                    }
                };
                this.renderEnd = function () {
                    if (renderStack.every(function (d) {
                            return d.__rendered;
                        })) {
                        renderStack.forEach(function (d) {
                            d.__rendered = false;
                        });
                        dispatch.renderEnd.apply(this, arguments);
                    }
                };
            };
            nv.utils.deepExtend = function (dst) {
                var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
                sources.forEach(function (source) {
                    for (var key in source) {
                        var isArray = nv.utils.isArray(dst[key]);
                        var isObject = nv.utils.isObject(dst[key]);
                        var srcObj = nv.utils.isObject(source[key]);
                        if (isObject && !isArray && srcObj) {
                            nv.utils.deepExtend(dst[key], source[key]);
                        } else {
                            dst[key] = source[key];
                        }
                    }
                });
            };
            nv.utils.state = function () {
                if (!(this instanceof nv.utils.state)) {
                    return new nv.utils.state();
                }
                var state = {};
                var _self = this;
                var _setState = function () {
                };
                var _getState = function () {
                    return {};
                };
                var init = null;
                var changed = null;
                this.dispatch = d3.dispatch('change', 'set');
                this.dispatch.on('set', function (state) {
                    _setState(state, true);
                });
                this.getter = function (fn) {
                    _getState = fn;
                    return this;
                };
                this.setter = function (fn, callback) {
                    if (!callback) {
                        callback = function () {
                        };
                    }
                    _setState = function (state, update) {
                        fn(state);
                        if (update) {
                            callback();
                        }
                    };
                    return this;
                };
                this.init = function (state) {
                    init = init || {};
                    nv.utils.deepExtend(init, state);
                };
                var _set = function () {
                    var settings = _getState();
                    if (JSON.stringify(settings) === JSON.stringify(state)) {
                        return false;
                    }
                    for (var key in settings) {
                        if (state[key] === undefined) {
                            state[key] = {};
                        }
                        state[key] = settings[key];
                        changed = true;
                    }
                    return true;
                };
                this.update = function () {
                    if (init) {
                        _setState(init, false);
                        init = null;
                    }
                    if (_set.call(this)) {
                        this.dispatch.change(state);
                    }
                };
            };
            nv.utils.optionsFunc = function (args) {
                if (args) {
                    d3.map(args).forEach(function (key, value) {
                        if (nv.utils.isFunction(this[key])) {
                            this[key](value);
                        }
                    }.bind(this));
                }
                return this;
            };
            nv.utils.calcTicksX = function (numTicks, data) {
                var numValues = 1;
                var i = 0;
                for (i; i < data.length; i += 1) {
                    var stream_len = data[i] && data[i].values ? data[i].values.length : 0;
                    numValues = stream_len > numValues ? stream_len : numValues;
                }
                nv.log('Requested number of ticks: ', numTicks);
                nv.log('Calculated max values to be: ', numValues);
                numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;
                numTicks = numTicks < 1 ? 1 : numTicks;
                numTicks = Math.floor(numTicks);
                nv.log('Calculating tick count as: ', numTicks);
                return numTicks;
            };
            nv.utils.calcTicksY = function (numTicks, data) {
                return nv.utils.calcTicksX(numTicks, data);
            };
            nv.utils.initOption = function (chart, name) {
                if (chart._calls && chart._calls[name]) {
                    chart[name] = chart._calls[name];
                } else {
                    chart[name] = function (_) {
                        if (!arguments.length)
                            return chart._options[name];
                        chart._overrides[name] = true;
                        chart._options[name] = _;
                        return chart;
                    };
                    chart['_' + name] = function (_) {
                        if (!arguments.length)
                            return chart._options[name];
                        if (!chart._overrides[name]) {
                            chart._options[name] = _;
                        }
                        return chart;
                    };
                }
            };
            nv.utils.initOptions = function (chart) {
                chart._overrides = chart._overrides || {};
                var ops = Object.getOwnPropertyNames(chart._options || {});
                var calls = Object.getOwnPropertyNames(chart._calls || {});
                ops = ops.concat(calls);
                for (var i in ops) {
                    nv.utils.initOption(chart, ops[i]);
                }
            };
            nv.utils.inheritOptionsD3 = function (target, d3_source, oplist) {
                target._d3options = oplist.concat(target._d3options || []);
                oplist.unshift(d3_source);
                oplist.unshift(target);
                d3.rebind.apply(this, oplist);
            };
            nv.utils.arrayUnique = function (a) {
                return a.sort().filter(function (item, pos) {
                    return !pos || item != a[pos - 1];
                });
            };
            nv.utils.symbolMap = d3.map();
            nv.utils.symbol = function () {
                var type, size = 64;
                function symbol(d, i) {
                    var t = type.call(this, d, i);
                    var s = size.call(this, d, i);
                    if (d3.svg.symbolTypes.indexOf(t) !== -1) {
                        return d3.svg.symbol().type(t).size(s)();
                    } else {
                        return nv.utils.symbolMap.get(t)(s);
                    }
                }
                symbol.type = function (_) {
                    if (!arguments.length)
                        return type;
                    type = d3.functor(_);
                    return symbol;
                };
                symbol.size = function (_) {
                    if (!arguments.length)
                        return size;
                    size = d3.functor(_);
                    return symbol;
                };
                return symbol;
            };
            nv.utils.inheritOptions = function (target, source) {
                var ops = Object.getOwnPropertyNames(source._options || {});
                var calls = Object.getOwnPropertyNames(source._calls || {});
                var inherited = source._inherited || [];
                var d3ops = source._d3options || [];
                var args = ops.concat(calls).concat(inherited).concat(d3ops);
                args.unshift(source);
                args.unshift(target);
                d3.rebind.apply(this, args);
                target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));
                target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));
            };
            nv.utils.initSVG = function (svg) {
                svg.classed({ 'nvd3-svg': true });
            };
            nv.utils.sanitizeHeight = function (height, container) {
                return height || parseInt(container.style('height'), 10) || 400;
            };
            nv.utils.sanitizeWidth = function (width, container) {
                return width || parseInt(container.style('width'), 10) || 960;
            };
            nv.utils.availableHeight = function (height, container, margin) {
                return Math.max(0, nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);
            };
            nv.utils.availableWidth = function (width, container, margin) {
                return Math.max(0, nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);
            };
            nv.utils.noData = function (chart, container) {
                var opt = chart.options(), margin = opt.margin(), noData = opt.noData(), data = noData == null ? ['No Data Available.'] : [noData], height = nv.utils.availableHeight(null, container, margin), width = nv.utils.availableWidth(null, container, margin), x = margin.left + width / 2, y = margin.top + height / 2;
                container.selectAll('g').remove();
                var noDataText = container.selectAll('.nv-noData').data(data);
                noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
                noDataText.attr('x', x).attr('y', y).text(function (t) {
                    return t;
                });
            };
            nv.utils.wrapTicks = function (text, width) {
                text.each(function () {
                    var text = d3.select(this), words = text.text().split(/\s+/).reverse(), word, line = [], lineNumber = 0, lineHeight = 1.1, y = text.attr('y'), dy = parseFloat(text.attr('dy')), tspan = text.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em');
                    while (word = words.pop()) {
                        line.push(word);
                        tspan.text(line.join(' '));
                        if (tspan.node().getComputedTextLength() > width) {
                            line.pop();
                            tspan.text(line.join(' '));
                            line = [word];
                            tspan = text.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
                        }
                    }
                });
            };
            nv.utils.arrayEquals = function (array1, array2) {
                if (array1 === array2)
                    return true;
                if (!array1 || !array2)
                    return false;
                if (array1.length != array2.length)
                    return false;
                for (var i = 0, l = array1.length; i < l; i++) {
                    if (array1[i] instanceof Array && array2[i] instanceof Array) {
                        if (!nv.arrayEquals(array1[i], array2[i]))
                            return false;
                    } else if (array1[i] != array2[i]) {
                        return false;
                    }
                }
                return true;
            };
            nv.models.axis = function () {
                'use strict';
                var axis = d3.svg.axis();
                var scale = d3.scale.linear();
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 75, height = 60, axisLabelText = null, showMaxMin = true, rotateLabels = 0, rotateYLabel = true, staggerLabels = false, isOrdinal = false, ticks = null, axisLabelDistance = 0, fontSize = undefined, duration = 250, dispatch = d3.dispatch('renderEnd');
                axis.scale(scale).orient('bottom').tickFormat(function (d) {
                    return d;
                });
                var scale0;
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var container = d3.select(this);
                        nv.utils.initSVG(container);
                        var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        if (ticks !== null)
                            axis.ticks(ticks);
                        else if (axis.orient() == 'top' || axis.orient() == 'bottom')
                            axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);
                        g.watchTransition(renderWatch, 'axis').call(axis);
                        scale0 = scale0 || axis.scale();
                        var fmt = axis.tickFormat();
                        if (fmt == null) {
                            fmt = scale0.tickFormat();
                        }
                        var axisLabel = g.selectAll('text.nv-axislabel').data([axisLabelText || null]);
                        axisLabel.exit().remove();
                        if (fontSize !== undefined) {
                            g.selectAll('g').select('text').style('font-size', fontSize);
                        }
                        var xLabelMargin;
                        var axisMaxMin;
                        var w;
                        switch (axis.orient()) {
                        case 'top':
                            axisLabel.enter().append('text').attr('class', 'nv-axislabel');
                            w = 0;
                            if (scale.range().length === 1) {
                                w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;
                            } else if (scale.range().length === 2) {
                                w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];
                            } else if (scale.range().length > 2) {
                                w = scale.range()[scale.range().length - 1] + (scale.range()[1] - scale.range()[0]);
                            }
                            ;
                            axisLabel.attr('text-anchor', 'middle').attr('y', 0).attr('x', w / 2);
                            if (showMaxMin) {
                                axisMaxMin = wrap.selectAll('g.nv-axisMaxMin').data(scale.domain());
                                axisMaxMin.enter().append('g').attr('class', function (d, i) {
                                    return [
                                        'nv-axisMaxMin',
                                        'nv-axisMaxMin-x',
                                        i == 0 ? 'nv-axisMin-x' : 'nv-axisMax-x'
                                    ].join(' ');
                                }).append('text');
                                axisMaxMin.exit().remove();
                                axisMaxMin.attr('transform', function (d, i) {
                                    return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)';
                                }).select('text').attr('dy', '-0.5em').attr('y', -axis.tickPadding()).attr('text-anchor', 'middle').text(function (d, i) {
                                    var v = fmt(d);
                                    return ('' + v).match('NaN') ? '' : v;
                                });
                                axisMaxMin.watchTransition(renderWatch, 'min-max top').attr('transform', function (d, i) {
                                    return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)';
                                });
                            }
                            break;
                        case 'bottom':
                            xLabelMargin = axisLabelDistance + 36;
                            var maxTextWidth = 30;
                            var textHeight = 0;
                            var xTicks = g.selectAll('g').select('text');
                            var rotateLabelsRule = '';
                            if (rotateLabels % 360) {
                                xTicks.attr('transform', '');
                                xTicks.each(function (d, i) {
                                    var box = this.getBoundingClientRect();
                                    var width = box.width;
                                    textHeight = box.height;
                                    if (width > maxTextWidth)
                                        maxTextWidth = width;
                                });
                                rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight / 2 + axis.tickPadding()) + ')';
                                var sin = Math.abs(Math.sin(rotateLabels * Math.PI / 180));
                                xLabelMargin = (sin ? sin * maxTextWidth : maxTextWidth) + 30;
                                xTicks.attr('transform', rotateLabelsRule).style('text-anchor', rotateLabels % 360 > 0 ? 'start' : 'end');
                            } else {
                                if (staggerLabels) {
                                    xTicks.attr('transform', function (d, i) {
                                        return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')';
                                    });
                                } else {
                                    xTicks.attr('transform', 'translate(0,0)');
                                }
                            }
                            axisLabel.enter().append('text').attr('class', 'nv-axislabel');
                            w = 0;
                            if (scale.range().length === 1) {
                                w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;
                            } else if (scale.range().length === 2) {
                                w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];
                            } else if (scale.range().length > 2) {
                                w = scale.range()[scale.range().length - 1] + (scale.range()[1] - scale.range()[0]);
                            }
                            ;
                            axisLabel.attr('text-anchor', 'middle').attr('y', xLabelMargin).attr('x', w / 2);
                            if (showMaxMin) {
                                axisMaxMin = wrap.selectAll('g.nv-axisMaxMin').data([
                                    scale.domain()[0],
                                    scale.domain()[scale.domain().length - 1]
                                ]);
                                axisMaxMin.enter().append('g').attr('class', function (d, i) {
                                    return [
                                        'nv-axisMaxMin',
                                        'nv-axisMaxMin-x',
                                        i == 0 ? 'nv-axisMin-x' : 'nv-axisMax-x'
                                    ].join(' ');
                                }).append('text');
                                axisMaxMin.exit().remove();
                                axisMaxMin.attr('transform', function (d, i) {
                                    return 'translate(' + nv.utils.NaNtoZero(scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)';
                                }).select('text').attr('dy', '.71em').attr('y', axis.tickPadding()).attr('transform', rotateLabelsRule).style('text-anchor', rotateLabels ? rotateLabels % 360 > 0 ? 'start' : 'end' : 'middle').text(function (d, i) {
                                    var v = fmt(d);
                                    return ('' + v).match('NaN') ? '' : v;
                                });
                                axisMaxMin.watchTransition(renderWatch, 'min-max bottom').attr('transform', function (d, i) {
                                    return 'translate(' + nv.utils.NaNtoZero(scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0)) + ',0)';
                                });
                            }
                            break;
                        case 'right':
                            axisLabel.enter().append('text').attr('class', 'nv-axislabel');
                            axisLabel.style('text-anchor', rotateYLabel ? 'middle' : 'begin').attr('transform', rotateYLabel ? 'rotate(90)' : '').attr('y', rotateYLabel ? -Math.max(margin.right, width) + 12 : -10).attr('x', rotateYLabel ? d3.max(scale.range()) / 2 : axis.tickPadding());
                            if (showMaxMin) {
                                axisMaxMin = wrap.selectAll('g.nv-axisMaxMin').data(scale.domain());
                                axisMaxMin.enter().append('g').attr('class', function (d, i) {
                                    return [
                                        'nv-axisMaxMin',
                                        'nv-axisMaxMin-y',
                                        i == 0 ? 'nv-axisMin-y' : 'nv-axisMax-y'
                                    ].join(' ');
                                }).append('text').style('opacity', 0);
                                axisMaxMin.exit().remove();
                                axisMaxMin.attr('transform', function (d, i) {
                                    return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')';
                                }).select('text').attr('dy', '.32em').attr('y', 0).attr('x', axis.tickPadding()).style('text-anchor', 'start').text(function (d, i) {
                                    var v = fmt(d);
                                    return ('' + v).match('NaN') ? '' : v;
                                });
                                axisMaxMin.watchTransition(renderWatch, 'min-max right').attr('transform', function (d, i) {
                                    return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')';
                                }).select('text').style('opacity', 1);
                            }
                            break;
                        case 'left':
                            axisLabel.enter().append('text').attr('class', 'nv-axislabel');
                            axisLabel.style('text-anchor', rotateYLabel ? 'middle' : 'end').attr('transform', rotateYLabel ? 'rotate(-90)' : '').attr('y', rotateYLabel ? -Math.max(margin.left, width) + 25 - (axisLabelDistance || 0) : -10).attr('x', rotateYLabel ? -d3.max(scale.range()) / 2 : -axis.tickPadding());
                            if (showMaxMin) {
                                axisMaxMin = wrap.selectAll('g.nv-axisMaxMin').data(scale.domain());
                                axisMaxMin.enter().append('g').attr('class', function (d, i) {
                                    return [
                                        'nv-axisMaxMin',
                                        'nv-axisMaxMin-y',
                                        i == 0 ? 'nv-axisMin-y' : 'nv-axisMax-y'
                                    ].join(' ');
                                }).append('text').style('opacity', 0);
                                axisMaxMin.exit().remove();
                                axisMaxMin.attr('transform', function (d, i) {
                                    return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')';
                                }).select('text').attr('dy', '.32em').attr('y', 0).attr('x', -axis.tickPadding()).attr('text-anchor', 'end').text(function (d, i) {
                                    var v = fmt(d);
                                    return ('' + v).match('NaN') ? '' : v;
                                });
                                axisMaxMin.watchTransition(renderWatch, 'min-max right').attr('transform', function (d, i) {
                                    return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')';
                                }).select('text').style('opacity', 1);
                            }
                            break;
                        }
                        axisLabel.text(function (d) {
                            return d;
                        });
                        if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {
                            g.selectAll('g').each(function (d, i) {
                                d3.select(this).select('text').attr('opacity', 1);
                                if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) {
                                    if (d > 1e-10 || d < -1e-10)
                                        d3.select(this).attr('opacity', 0);
                                    d3.select(this).select('text').attr('opacity', 0);
                                }
                            });
                            if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {
                                wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {
                                    return !i ? 1 : 0;
                                });
                            }
                        }
                        if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {
                            var maxMinRange = [];
                            wrap.selectAll('g.nv-axisMaxMin').each(function (d, i) {
                                try {
                                    if (i)
                                        maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);
                                    else
                                        maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4);
                                } catch (err) {
                                    if (i)
                                        maxMinRange.push(scale(d) - 4);
                                    else
                                        maxMinRange.push(scale(d) + 4);
                                }
                            });
                            g.selectAll('g').each(function (d, i) {
                                if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {
                                    if (d > 1e-10 || d < -1e-10)
                                        d3.select(this).remove();
                                    else
                                        d3.select(this).select('text').remove();
                                }
                            });
                        }
                        g.selectAll('.tick').filter(function (d) {
                            return !parseFloat(Math.round(d * 100000) / 1000000) && d !== undefined;
                        }).classed('zero', true);
                        scale0 = scale.copy();
                    });
                    renderWatch.renderEnd('axis immediate');
                    return chart;
                }
                chart.axis = axis;
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    axisLabelDistance: {
                        get: function () {
                            return axisLabelDistance;
                        },
                        set: function (_) {
                            axisLabelDistance = _;
                        }
                    },
                    staggerLabels: {
                        get: function () {
                            return staggerLabels;
                        },
                        set: function (_) {
                            staggerLabels = _;
                        }
                    },
                    rotateLabels: {
                        get: function () {
                            return rotateLabels;
                        },
                        set: function (_) {
                            rotateLabels = _;
                        }
                    },
                    rotateYLabel: {
                        get: function () {
                            return rotateYLabel;
                        },
                        set: function (_) {
                            rotateYLabel = _;
                        }
                    },
                    showMaxMin: {
                        get: function () {
                            return showMaxMin;
                        },
                        set: function (_) {
                            showMaxMin = _;
                        }
                    },
                    axisLabel: {
                        get: function () {
                            return axisLabelText;
                        },
                        set: function (_) {
                            axisLabelText = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    ticks: {
                        get: function () {
                            return ticks;
                        },
                        set: function (_) {
                            ticks = _;
                        }
                    },
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    fontSize: {
                        get: function () {
                            return fontSize;
                        },
                        set: function (_) {
                            fontSize = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                        }
                    },
                    scale: {
                        get: function () {
                            return scale;
                        },
                        set: function (_) {
                            scale = _;
                            axis.scale(scale);
                            isOrdinal = typeof scale.rangeBands === 'function';
                            nv.utils.inheritOptionsD3(chart, scale, [
                                'domain',
                                'range',
                                'rangeBand',
                                'rangeBands'
                            ]);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                nv.utils.inheritOptionsD3(chart, axis, [
                    'orient',
                    'tickValues',
                    'tickSubdivide',
                    'tickSize',
                    'tickPadding',
                    'tickFormat'
                ]);
                nv.utils.inheritOptionsD3(chart, scale, [
                    'domain',
                    'range',
                    'rangeBand',
                    'rangeBands'
                ]);
                return chart;
            };
            nv.models.boxPlot = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 960, height = 500, id = Math.floor(Math.random() * 10000), xScale = d3.scale.ordinal(), yScale = d3.scale.linear(), getX = function (d) {
                        return d.label;
                    }, getQ1 = function (d) {
                        return d.values.Q1;
                    }, getQ2 = function (d) {
                        return d.values.Q2;
                    }, getQ3 = function (d) {
                        return d.values.Q3;
                    }, getWl = function (d) {
                        return d.values.whisker_low;
                    }, getWh = function (d) {
                        return d.values.whisker_high;
                    }, getColor = function (d) {
                        return d.color;
                    }, getOlItems = function (d) {
                        return d.values.outliers;
                    }, getOlValue = function (d, i, j) {
                        return d;
                    }, getOlLabel = function (d, i, j) {
                        return d;
                    }, getOlColor = function (d, i, j) {
                        return undefined;
                    }, color = nv.utils.defaultColor(), container = null, xDomain, xRange, yDomain, yRange, dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'), duration = 250, maxBoxWidth = null;
                var xScale0, yScale0;
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        xScale.domain(xDomain || data.map(function (d, i) {
                            return getX(d, i);
                        })).rangeBands(xRange || [
                            0,
                            availableWidth
                        ], 0.1);
                        var yData = [];
                        if (!yDomain) {
                            var values = [], yMin, yMax;
                            data.forEach(function (d, i) {
                                var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);
                                var olItems = getOlItems(d);
                                if (olItems) {
                                    olItems.forEach(function (e, i) {
                                        values.push(getOlValue(e, i, undefined));
                                    });
                                }
                                if (wl) {
                                    values.push(wl);
                                }
                                if (q1) {
                                    values.push(q1);
                                }
                                if (q3) {
                                    values.push(q3);
                                }
                                if (wh) {
                                    values.push(wh);
                                }
                            });
                            yMin = d3.min(values);
                            yMax = d3.max(values);
                            yData = [
                                yMin,
                                yMax
                            ];
                        }
                        yScale.domain(yDomain || yData);
                        yScale.range(yRange || [
                            availableHeight,
                            0
                        ]);
                        xScale0 = xScale0 || xScale;
                        yScale0 = yScale0 || yScale.copy().range([
                            yScale(0),
                            yScale(0)
                        ]);
                        var wrap = container.selectAll('g.nv-wrap').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var boxplots = wrap.selectAll('.nv-boxplot').data(function (d) {
                            return d;
                        });
                        var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
                        boxplots.attr('class', 'nv-boxplot').attr('transform', function (d, i, j) {
                            return 'translate(' + (xScale(getX(d, i)) + xScale.rangeBand() * 0.05) + ', 0)';
                        }).classed('hover', function (d) {
                            return d.hover;
                        });
                        boxplots.watchTransition(renderWatch, 'nv-boxplot: boxplots').style('stroke-opacity', 1).style('fill-opacity', 0.75).delay(function (d, i) {
                            return i * duration / data.length;
                        }).attr('transform', function (d, i) {
                            return 'translate(' + (xScale(getX(d, i)) + xScale.rangeBand() * 0.05) + ', 0)';
                        });
                        boxplots.exit().remove();
                        boxEnter.each(function (d, i) {
                            var box = d3.select(this);
                            [
                                getWl,
                                getWh
                            ].forEach(function (f) {
                                if (f(d)) {
                                    var key = f === getWl ? 'low' : 'high';
                                    box.append('line').style('stroke', getColor(d) || color(d, i)).attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);
                                    box.append('line').style('stroke', getColor(d) || color(d, i)).attr('class', 'nv-boxplot-tick nv-boxplot-' + key);
                                }
                            });
                        });
                        var box_width = function () {
                            return maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9);
                        };
                        var box_left = function () {
                            return xScale.rangeBand() * 0.45 - box_width() / 2;
                        };
                        var box_right = function () {
                            return xScale.rangeBand() * 0.45 + box_width() / 2;
                        };
                        [
                            getWl,
                            getWh
                        ].forEach(function (f) {
                            var key = f === getWl ? 'low' : 'high';
                            var endpoint = f === getWl ? getQ1 : getQ3;
                            boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key).watchTransition(renderWatch, 'nv-boxplot: boxplots').attr('x1', xScale.rangeBand() * 0.45).attr('y1', function (d, i) {
                                return yScale(f(d));
                            }).attr('x2', xScale.rangeBand() * 0.45).attr('y2', function (d, i) {
                                return yScale(endpoint(d));
                            });
                            boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key).watchTransition(renderWatch, 'nv-boxplot: boxplots').attr('x1', box_left).attr('y1', function (d, i) {
                                return yScale(f(d));
                            }).attr('x2', box_right).attr('y2', function (d, i) {
                                return yScale(f(d));
                            });
                        });
                        [
                            getWl,
                            getWh
                        ].forEach(function (f) {
                            var key = f === getWl ? 'low' : 'high';
                            boxEnter.selectAll('.nv-boxplot-' + key).on('mouseover', function (d, i, j) {
                                d3.select(this).classed('hover', true);
                                dispatch.elementMouseover({
                                    series: {
                                        key: f(d),
                                        color: getColor(d) || color(d, j)
                                    },
                                    e: d3.event
                                });
                            }).on('mouseout', function (d, i, j) {
                                d3.select(this).classed('hover', false);
                                dispatch.elementMouseout({
                                    series: {
                                        key: f(d),
                                        color: getColor(d) || color(d, j)
                                    },
                                    e: d3.event
                                });
                            }).on('mousemove', function (d, i) {
                                dispatch.elementMousemove({ e: d3.event });
                            });
                        });
                        boxEnter.append('rect').attr('class', 'nv-boxplot-box').on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true);
                            dispatch.elementMouseover({
                                key: getX(d),
                                value: getX(d),
                                series: [
                                    {
                                        key: 'Q3',
                                        value: getQ3(d),
                                        color: getColor(d) || color(d, i)
                                    },
                                    {
                                        key: 'Q2',
                                        value: getQ2(d),
                                        color: getColor(d) || color(d, i)
                                    },
                                    {
                                        key: 'Q1',
                                        value: getQ1(d),
                                        color: getColor(d) || color(d, i)
                                    }
                                ],
                                data: d,
                                index: i,
                                e: d3.event
                            });
                        }).on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false);
                            dispatch.elementMouseout({
                                key: getX(d),
                                value: getX(d),
                                series: [
                                    {
                                        key: 'Q3',
                                        value: getQ3(d),
                                        color: getColor(d) || color(d, i)
                                    },
                                    {
                                        key: 'Q2',
                                        value: getQ2(d),
                                        color: getColor(d) || color(d, i)
                                    },
                                    {
                                        key: 'Q1',
                                        value: getQ1(d),
                                        color: getColor(d) || color(d, i)
                                    }
                                ],
                                data: d,
                                index: i,
                                e: d3.event
                            });
                        }).on('mousemove', function (d, i) {
                            dispatch.elementMousemove({ e: d3.event });
                        });
                        boxplots.select('rect.nv-boxplot-box').watchTransition(renderWatch, 'nv-boxplot: boxes').attr('y', function (d, i) {
                            return yScale(getQ3(d));
                        }).attr('width', box_width).attr('x', box_left).attr('height', function (d, i) {
                            return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1;
                        }).style('fill', function (d, i) {
                            return getColor(d) || color(d, i);
                        }).style('stroke', function (d, i) {
                            return getColor(d) || color(d, i);
                        });
                        boxEnter.append('line').attr('class', 'nv-boxplot-median');
                        boxplots.select('line.nv-boxplot-median').watchTransition(renderWatch, 'nv-boxplot: boxplots line').attr('x1', box_left).attr('y1', function (d, i) {
                            return yScale(getQ2(d));
                        }).attr('x2', box_right).attr('y2', function (d, i) {
                            return yScale(getQ2(d));
                        });
                        var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function (d) {
                            return getOlItems(d) || [];
                        });
                        outliers.enter().append('circle').style('fill', function (d, i, j) {
                            return getOlColor(d, i, j) || color(d, j);
                        }).style('stroke', function (d, i, j) {
                            return getOlColor(d, i, j) || color(d, j);
                        }).style('z-index', 9000).on('mouseover', function (d, i, j) {
                            d3.select(this).classed('hover', true);
                            dispatch.elementMouseover({
                                series: {
                                    key: getOlLabel(d, i, j),
                                    color: getOlColor(d, i, j) || color(d, j)
                                },
                                e: d3.event
                            });
                        }).on('mouseout', function (d, i, j) {
                            d3.select(this).classed('hover', false);
                            dispatch.elementMouseout({
                                series: {
                                    key: getOlLabel(d, i, j),
                                    color: getOlColor(d, i, j) || color(d, j)
                                },
                                e: d3.event
                            });
                        }).on('mousemove', function (d, i) {
                            dispatch.elementMousemove({ e: d3.event });
                        });
                        outliers.attr('class', 'nv-boxplot-outlier');
                        outliers.watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier').attr('cx', xScale.rangeBand() * 0.45).attr('cy', function (d, i, j) {
                            return yScale(getOlValue(d, i, j));
                        }).attr('r', '3');
                        outliers.exit().remove();
                        xScale0 = xScale.copy();
                        yScale0 = yScale.copy();
                    });
                    renderWatch.renderEnd('nv-boxplot immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    maxBoxWidth: {
                        get: function () {
                            return maxBoxWidth;
                        },
                        set: function (_) {
                            maxBoxWidth = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    q1: {
                        get: function () {
                            return getQ1;
                        },
                        set: function (_) {
                            getQ1 = _;
                        }
                    },
                    q2: {
                        get: function () {
                            return getQ2;
                        },
                        set: function (_) {
                            getQ2 = _;
                        }
                    },
                    q3: {
                        get: function () {
                            return getQ3;
                        },
                        set: function (_) {
                            getQ3 = _;
                        }
                    },
                    wl: {
                        get: function () {
                            return getWl;
                        },
                        set: function (_) {
                            getWl = _;
                        }
                    },
                    wh: {
                        get: function () {
                            return getWh;
                        },
                        set: function (_) {
                            getWh = _;
                        }
                    },
                    itemColor: {
                        get: function () {
                            return getColor;
                        },
                        set: function (_) {
                            getColor = _;
                        }
                    },
                    outliers: {
                        get: function () {
                            return getOlItems;
                        },
                        set: function (_) {
                            getOlItems = _;
                        }
                    },
                    outlierValue: {
                        get: function () {
                            return getOlValue;
                        },
                        set: function (_) {
                            getOlValue = _;
                        }
                    },
                    outlierLabel: {
                        get: function () {
                            return getOlLabel;
                        },
                        set: function (_) {
                            getOlLabel = _;
                        }
                    },
                    outlierColor: {
                        get: function () {
                            return getOlColor;
                        },
                        set: function (_) {
                            getOlColor = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return xScale;
                        },
                        set: function (_) {
                            xScale = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return yScale;
                        },
                        set: function (_) {
                            yScale = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    y: {
                        get: function () {
                            console.warn('BoxPlot \'y\' chart option is deprecated. Please use model overrides instead.');
                            return {};
                        },
                        set: function (_) {
                            console.warn('BoxPlot \'y\' chart option is deprecated. Please use model overrides instead.');
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.boxPlotChart = function () {
                'use strict';
                var boxplot = nv.models.boxPlot(), xAxis = nv.models.axis(), yAxis = nv.models.axis();
                var margin = {
                        top: 15,
                        right: 10,
                        bottom: 50,
                        left: 60
                    }, width = null, height = null, color = nv.utils.getColor(), showXAxis = true, showYAxis = true, rightAlignYAxis = false, staggerLabels = false, tooltip = nv.models.tooltip(), x, y, noData = 'No Data Available.', dispatch = d3.dispatch('beforeUpdate', 'renderEnd'), duration = 250;
                xAxis.orient('bottom').showMaxMin(false).tickFormat(function (d) {
                    return d;
                });
                yAxis.orient(rightAlignYAxis ? 'right' : 'left').tickFormat(d3.format(',.1f'));
                tooltip.duration(0);
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(boxplot);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    selection.each(function (data) {
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        var availableWidth = (width || parseInt(container.style('width')) || 960) - margin.left - margin.right;
                        var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
                        chart.update = function () {
                            dispatch.beforeUpdate();
                            container.transition().duration(duration).call(chart);
                        };
                        chart.container = this;
                        if (!data || !data.length) {
                            var noDataText = container.selectAll('.nv-noData').data([noData]);
                            noDataText.enter().append('text').attr('class', 'nvd3 nv-noData').attr('dy', '-.7em').style('text-anchor', 'middle');
                            noDataText.attr('x', margin.left + availableWidth / 2).attr('y', margin.top + availableHeight / 2).text(function (d) {
                                return d;
                            });
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = boxplot.xScale();
                        y = boxplot.yScale().clamp(true);
                        var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');
                        var defsEnter = gEnter.append('defs');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y nv-axis').append('g').attr('class', 'nv-zeroLine').append('line');
                        gEnter.append('g').attr('class', 'nv-barsWrap');
                        g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        if (rightAlignYAxis) {
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
                        }
                        boxplot.width(availableWidth).height(availableHeight);
                        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
                            return !d.disabled;
                        }));
                        barsWrap.transition().call(boxplot);
                        defsEnter.append('clipPath').attr('id', 'nv-x-label-clip-' + boxplot.id()).append('rect');
                        g.select('#nv-x-label-clip-' + boxplot.id() + ' rect').attr('width', x.rangeBand() * (staggerLabels ? 2 : 1)).attr('height', 16).attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2));
                        if (showXAxis) {
                            xAxis.scale(x).ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
                            g.select('.nv-x.nv-axis').call(xAxis);
                            var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
                            if (staggerLabels) {
                                xTicks.selectAll('text').attr('transform', function (d, i, j) {
                                    return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')';
                                });
                            }
                        }
                        if (showYAxis) {
                            yAxis.scale(y).ticks(Math.floor(availableHeight / 36)).tickSize(-availableWidth, 0);
                            g.select('.nv-y.nv-axis').call(yAxis);
                        }
                        g.select('.nv-zeroLine line').attr('x1', 0).attr('x2', availableWidth).attr('y1', y(0)).attr('y2', y(0));
                    });
                    renderWatch.renderEnd('nv-boxplot chart immediate');
                    return chart;
                }
                boxplot.dispatch.on('elementMouseover.tooltip', function (evt) {
                    tooltip.data(evt).hidden(false);
                });
                boxplot.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.data(evt).hidden(true);
                });
                boxplot.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.dispatch = dispatch;
                chart.boxplot = boxplot;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    staggerLabels: {
                        get: function () {
                            return staggerLabels;
                        },
                        set: function (_) {
                            staggerLabels = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    tooltipContent: {
                        get: function () {
                            return tooltip;
                        },
                        set: function (_) {
                            tooltip = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            boxplot.duration(duration);
                            xAxis.duration(duration);
                            yAxis.duration(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            boxplot.color(color);
                        }
                    },
                    rightAlignYAxis: {
                        get: function () {
                            return rightAlignYAxis;
                        },
                        set: function (_) {
                            rightAlignYAxis = _;
                            yAxis.orient(_ ? 'right' : 'left');
                        }
                    }
                });
                nv.utils.inheritOptions(chart, boxplot);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.bullet = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, orient = 'left', reverse = false, ranges = function (d) {
                        return d.ranges;
                    }, markers = function (d) {
                        return d.markers ? d.markers : [];
                    }, measures = function (d) {
                        return d.measures;
                    }, rangeLabels = function (d) {
                        return d.rangeLabels ? d.rangeLabels : [];
                    }, markerLabels = function (d) {
                        return d.markerLabels ? d.markerLabels : [];
                    }, measureLabels = function (d) {
                        return d.measureLabels ? d.measureLabels : [];
                    }, forceX = [0], width = 380, height = 30, container = null, tickFormat = null, color = nv.utils.getColor(['#1f77b4']), dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove'), defaultRangeLabels = [
                        'Maximum',
                        'Mean',
                        'Minimum'
                    ], legacyRangeClassNames = [
                        'Max',
                        'Avg',
                        'Min'
                    ];
                function sortLabels(labels, values) {
                    var lz = labels.slice();
                    labels.sort(function (a, b) {
                        var iA = lz.indexOf(a);
                        var iB = lz.indexOf(b);
                        return d3.descending(values[iA], values[iB]);
                    });
                }
                ;
                function chart(selection) {
                    selection.each(function (d, i) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        var rangez = ranges.call(this, d, i).slice(), markerz = markers.call(this, d, i).slice(), measurez = measures.call(this, d, i).slice(), rangeLabelz = rangeLabels.call(this, d, i).slice(), markerLabelz = markerLabels.call(this, d, i).slice(), measureLabelz = measureLabels.call(this, d, i).slice();
                        sortLabels(rangeLabelz, rangez);
                        sortLabels(markerLabelz, markerz);
                        sortLabels(measureLabelz, measurez);
                        rangez.sort(d3.descending);
                        markerz.sort(d3.descending);
                        measurez.sort(d3.descending);
                        var x1 = d3.scale.linear().domain(d3.extent(d3.merge([
                            forceX,
                            rangez
                        ]))).range(reverse ? [
                            availableWidth,
                            0
                        ] : [
                            0,
                            availableWidth
                        ]);
                        var x0 = this.__chart__ || d3.scale.linear().domain([
                            0,
                            Infinity
                        ]).range(x1.range());
                        this.__chart__ = x1;
                        var rangeMin = d3.min(rangez), rangeMax = d3.max(rangez), rangeAvg = rangez[1];
                        var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        for (var i = 0, il = rangez.length; i < il; i++) {
                            var rangeClassNames = 'nv-range nv-range' + i;
                            if (i <= 2) {
                                rangeClassNames = rangeClassNames + ' nv-range' + legacyRangeClassNames[i];
                            }
                            gEnter.append('rect').attr('class', rangeClassNames);
                        }
                        gEnter.append('rect').attr('class', 'nv-measure');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var w0 = function (d) {
                                return Math.abs(x0(d) - x0(0));
                            }, w1 = function (d) {
                                return Math.abs(x1(d) - x1(0));
                            };
                        var xp0 = function (d) {
                                return d < 0 ? x0(d) : x0(0);
                            }, xp1 = function (d) {
                                return d < 0 ? x1(d) : x1(0);
                            };
                        for (var i = 0, il = rangez.length; i < il; i++) {
                            var range = rangez[i];
                            g.select('rect.nv-range' + i).attr('height', availableHeight).attr('width', w1(range)).attr('x', xp1(range)).datum(range);
                        }
                        g.select('rect.nv-measure').style('fill', color).attr('height', availableHeight / 3).attr('y', availableHeight / 3).attr('width', measurez < 0 ? x1(0) - x1(measurez[0]) : x1(measurez[0]) - x1(0)).attr('x', xp1(measurez)).on('mouseover', function () {
                            dispatch.elementMouseover({
                                value: measurez[0],
                                label: measureLabelz[0] || 'Current',
                                color: d3.select(this).style('fill')
                            });
                        }).on('mousemove', function () {
                            dispatch.elementMousemove({
                                value: measurez[0],
                                label: measureLabelz[0] || 'Current',
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function () {
                            dispatch.elementMouseout({
                                value: measurez[0],
                                label: measureLabelz[0] || 'Current',
                                color: d3.select(this).style('fill')
                            });
                        });
                        var h3 = availableHeight / 6;
                        var markerData = markerz.map(function (marker, index) {
                            return {
                                value: marker,
                                label: markerLabelz[index]
                            };
                        });
                        gEnter.selectAll('path.nv-markerTriangle').data(markerData).enter().append('path').attr('class', 'nv-markerTriangle').attr('d', 'M0,' + h3 + 'L' + h3 + ',' + -h3 + ' ' + -h3 + ',' + -h3 + 'Z').on('mouseover', function (d) {
                            dispatch.elementMouseover({
                                value: d.value,
                                label: d.label || 'Previous',
                                color: d3.select(this).style('fill'),
                                pos: [
                                    x1(d.value),
                                    availableHeight / 2
                                ]
                            });
                        }).on('mousemove', function (d) {
                            dispatch.elementMousemove({
                                value: d.value,
                                label: d.label || 'Previous',
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            dispatch.elementMouseout({
                                value: d.value,
                                label: d.label || 'Previous',
                                color: d3.select(this).style('fill')
                            });
                        });
                        g.selectAll('path.nv-markerTriangle').data(markerData).attr('transform', function (d) {
                            return 'translate(' + x1(d.value) + ',' + availableHeight / 2 + ')';
                        });
                        wrap.selectAll('.nv-range').on('mouseover', function (d, i) {
                            var label = rangeLabelz[i] || defaultRangeLabels[i];
                            dispatch.elementMouseover({
                                value: d,
                                label: label,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mousemove', function () {
                            dispatch.elementMousemove({
                                value: measurez[0],
                                label: measureLabelz[0] || 'Previous',
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            var label = rangeLabelz[i] || defaultRangeLabels[i];
                            dispatch.elementMouseout({
                                value: d,
                                label: label,
                                color: d3.select(this).style('fill')
                            });
                        });
                    });
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    ranges: {
                        get: function () {
                            return ranges;
                        },
                        set: function (_) {
                            ranges = _;
                        }
                    },
                    markers: {
                        get: function () {
                            return markers;
                        },
                        set: function (_) {
                            markers = _;
                        }
                    },
                    measures: {
                        get: function () {
                            return measures;
                        },
                        set: function (_) {
                            measures = _;
                        }
                    },
                    forceX: {
                        get: function () {
                            return forceX;
                        },
                        set: function (_) {
                            forceX = _;
                        }
                    },
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    tickFormat: {
                        get: function () {
                            return tickFormat;
                        },
                        set: function (_) {
                            tickFormat = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    orient: {
                        get: function () {
                            return orient;
                        },
                        set: function (_) {
                            orient = _;
                            reverse = orient == 'right' || orient == 'bottom';
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.bulletChart = function () {
                'use strict';
                var bullet = nv.models.bullet();
                var tooltip = nv.models.tooltip();
                var orient = 'left', reverse = false, margin = {
                        top: 5,
                        right: 40,
                        bottom: 20,
                        left: 120
                    }, ranges = function (d) {
                        return d.ranges;
                    }, markers = function (d) {
                        return d.markers ? d.markers : [];
                    }, measures = function (d) {
                        return d.measures;
                    }, width = null, height = 55, tickFormat = null, ticks = null, noData = null, dispatch = d3.dispatch();
                tooltip.duration(0).headerEnabled(false);
                function chart(selection) {
                    selection.each(function (d, i) {
                        var container = d3.select(this);
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = height - margin.top - margin.bottom, that = this;
                        chart.update = function () {
                            chart(selection);
                        };
                        chart.container = this;
                        if (!d || !ranges.call(this, d, i)) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        var rangez = ranges.call(this, d, i).slice().sort(d3.descending), markerz = markers.call(this, d, i).slice().sort(d3.descending), measurez = measures.call(this, d, i).slice().sort(d3.descending);
                        var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-bulletWrap');
                        gEnter.append('g').attr('class', 'nv-titles');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var x1 = d3.scale.linear().domain([
                            0,
                            Math.max(rangez[0], markerz[0] || 0, measurez[0])
                        ]).range(reverse ? [
                            availableWidth,
                            0
                        ] : [
                            0,
                            availableWidth
                        ]);
                        var x0 = this.__chart__ || d3.scale.linear().domain([
                            0,
                            Infinity
                        ]).range(x1.range());
                        this.__chart__ = x1;
                        var w0 = function (d) {
                                return Math.abs(x0(d) - x0(0));
                            }, w1 = function (d) {
                                return Math.abs(x1(d) - x1(0));
                            };
                        var title = gEnter.select('.nv-titles').append('g').attr('text-anchor', 'end').attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');
                        title.append('text').attr('class', 'nv-title').text(function (d) {
                            return d.title;
                        });
                        title.append('text').attr('class', 'nv-subtitle').attr('dy', '1em').text(function (d) {
                            return d.subtitle;
                        });
                        bullet.width(availableWidth).height(availableHeight);
                        var bulletWrap = g.select('.nv-bulletWrap');
                        d3.transition(bulletWrap).call(bullet);
                        var format = tickFormat || x1.tickFormat(availableWidth / 100);
                        var tick = g.selectAll('g.nv-tick').data(x1.ticks(ticks ? ticks : availableWidth / 50), function (d) {
                            return this.textContent || format(d);
                        });
                        var tickEnter = tick.enter().append('g').attr('class', 'nv-tick').attr('transform', function (d) {
                            return 'translate(' + x0(d) + ',0)';
                        }).style('opacity', 0.000001);
                        tickEnter.append('line').attr('y1', availableHeight).attr('y2', availableHeight * 7 / 6);
                        tickEnter.append('text').attr('text-anchor', 'middle').attr('dy', '1em').attr('y', availableHeight * 7 / 6).text(format);
                        var tickUpdate = d3.transition(tick).attr('transform', function (d) {
                            return 'translate(' + x1(d) + ',0)';
                        }).style('opacity', 1);
                        tickUpdate.select('line').attr('y1', availableHeight).attr('y2', availableHeight * 7 / 6);
                        tickUpdate.select('text').attr('y', availableHeight * 7 / 6);
                        d3.transition(tick.exit()).attr('transform', function (d) {
                            return 'translate(' + x1(d) + ',0)';
                        }).style('opacity', 0.000001).remove();
                    });
                    d3.timer.flush();
                    return chart;
                }
                bullet.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt['series'] = {
                        key: evt.label,
                        value: evt.value,
                        color: evt.color
                    };
                    tooltip.data(evt).hidden(false);
                });
                bullet.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                bullet.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.bullet = bullet;
                chart.dispatch = dispatch;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    ranges: {
                        get: function () {
                            return ranges;
                        },
                        set: function (_) {
                            ranges = _;
                        }
                    },
                    markers: {
                        get: function () {
                            return markers;
                        },
                        set: function (_) {
                            markers = _;
                        }
                    },
                    measures: {
                        get: function () {
                            return measures;
                        },
                        set: function (_) {
                            measures = _;
                        }
                    },
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    tickFormat: {
                        get: function () {
                            return tickFormat;
                        },
                        set: function (_) {
                            tickFormat = _;
                        }
                    },
                    ticks: {
                        get: function () {
                            return ticks;
                        },
                        set: function (_) {
                            ticks = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    orient: {
                        get: function () {
                            return orient;
                        },
                        set: function (_) {
                            orient = _;
                            reverse = orient == 'right' || orient == 'bottom';
                        }
                    }
                });
                nv.utils.inheritOptions(chart, bullet);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.candlestickBar = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = null, height = null, id = Math.floor(Math.random() * 10000), container, x = d3.scale.linear(), y = d3.scale.linear(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, getOpen = function (d) {
                        return d.open;
                    }, getClose = function (d) {
                        return d.close;
                    }, getHigh = function (d) {
                        return d.high;
                    }, getLow = function (d) {
                        return d.low;
                    }, forceX = [], forceY = [], padData = false, clipEdge = true, color = nv.utils.defaultColor(), interactive = false, xDomain, yDomain, xRange, yRange, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove');
                function chart(selection) {
                    selection.each(function (data) {
                        container = d3.select(this);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        nv.utils.initSVG(container);
                        var barWidth = availableWidth / data[0].values.length * 0.45;
                        x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX)));
                        if (padData)
                            x.range(xRange || [
                                availableWidth * 0.5 / data[0].values.length,
                                availableWidth * (data[0].values.length - 0.5) / data[0].values.length
                            ]);
                        else
                            x.range(xRange || [
                                5 + barWidth / 2,
                                availableWidth - barWidth / 2 - 5
                            ]);
                        y.domain(yDomain || [
                            d3.min(data[0].values.map(getLow).concat(forceY)),
                            d3.max(data[0].values.map(getHigh).concat(forceY))
                        ]).range(yRange || [
                            availableHeight,
                            0
                        ]);
                        if (x.domain()[0] === x.domain()[1])
                            x.domain()[0] ? x.domain([
                                x.domain()[0] - x.domain()[0] * 0.01,
                                x.domain()[1] + x.domain()[1] * 0.01
                            ]) : x.domain([
                                -1,
                                1
                            ]);
                        if (y.domain()[0] === y.domain()[1])
                            y.domain()[0] ? y.domain([
                                y.domain()[0] + y.domain()[0] * 0.01,
                                y.domain()[1] - y.domain()[1] * 0.01
                            ]) : y.domain([
                                -1,
                                1
                            ]);
                        var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-ticks');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        container.on('click', function (d, i) {
                            dispatch.chartClick({
                                data: d,
                                index: i,
                                pos: d3.event,
                                id: id
                            });
                        });
                        defsEnter.append('clipPath').attr('id', 'nv-chart-clip-path-' + id).append('rect');
                        wrap.select('#nv-chart-clip-path-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
                        g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
                        var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick').data(function (d) {
                            return d;
                        });
                        ticks.exit().remove();
                        var tickGroups = ticks.enter().append('g');
                        ticks.attr('class', function (d, i, j) {
                            return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;
                        });
                        var lines = tickGroups.append('line').attr('class', 'nv-candlestick-lines').attr('transform', function (d, i) {
                            return 'translate(' + x(getX(d, i)) + ',0)';
                        }).attr('x1', 0).attr('y1', function (d, i) {
                            return y(getHigh(d, i));
                        }).attr('x2', 0).attr('y2', function (d, i) {
                            return y(getLow(d, i));
                        });
                        var rects = tickGroups.append('rect').attr('class', 'nv-candlestick-rects nv-bars').attr('transform', function (d, i) {
                            return 'translate(' + (x(getX(d, i)) - barWidth / 2) + ',' + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? y(getClose(d, i)) - y(getOpen(d, i)) : 0)) + ')';
                        }).attr('x', 0).attr('y', 0).attr('width', barWidth).attr('height', function (d, i) {
                            var open = getOpen(d, i);
                            var close = getClose(d, i);
                            return open > close ? y(close) - y(open) : y(open) - y(close);
                        });
                        ticks.select('.nv-candlestick-lines').transition().attr('transform', function (d, i) {
                            return 'translate(' + x(getX(d, i)) + ',0)';
                        }).attr('x1', 0).attr('y1', function (d, i) {
                            return y(getHigh(d, i));
                        }).attr('x2', 0).attr('y2', function (d, i) {
                            return y(getLow(d, i));
                        });
                        ticks.select('.nv-candlestick-rects').transition().attr('transform', function (d, i) {
                            return 'translate(' + (x(getX(d, i)) - barWidth / 2) + ',' + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? y(getClose(d, i)) - y(getOpen(d, i)) : 0)) + ')';
                        }).attr('x', 0).attr('y', 0).attr('width', barWidth).attr('height', function (d, i) {
                            var open = getOpen(d, i);
                            var close = getClose(d, i);
                            return open > close ? y(close) - y(open) : y(open) - y(close);
                        });
                    });
                    return chart;
                }
                chart.highlightPoint = function (pointIndex, isHoverOver) {
                    chart.clearHighlights();
                    container.select('.nv-candlestickBar .nv-tick-0-' + pointIndex).classed('hover', isHoverOver);
                };
                chart.clearHighlights = function () {
                    container.select('.nv-candlestickBar .nv-tick.hover').classed('hover', false);
                };
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    forceX: {
                        get: function () {
                            return forceX;
                        },
                        set: function (_) {
                            forceX = _;
                        }
                    },
                    forceY: {
                        get: function () {
                            return forceY;
                        },
                        set: function (_) {
                            forceY = _;
                        }
                    },
                    padData: {
                        get: function () {
                            return padData;
                        },
                        set: function (_) {
                            padData = _;
                        }
                    },
                    clipEdge: {
                        get: function () {
                            return clipEdge;
                        },
                        set: function (_) {
                            clipEdge = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    interactive: {
                        get: function () {
                            return interactive;
                        },
                        set: function (_) {
                            interactive = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                        }
                    },
                    open: {
                        get: function () {
                            return getOpen();
                        },
                        set: function (_) {
                            getOpen = _;
                        }
                    },
                    close: {
                        get: function () {
                            return getClose();
                        },
                        set: function (_) {
                            getClose = _;
                        }
                    },
                    high: {
                        get: function () {
                            return getHigh;
                        },
                        set: function (_) {
                            getHigh = _;
                        }
                    },
                    low: {
                        get: function () {
                            return getLow;
                        },
                        set: function (_) {
                            getLow = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top != undefined ? _.top : margin.top;
                            margin.right = _.right != undefined ? _.right : margin.right;
                            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
                            margin.left = _.left != undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.cumulativeLineChart = function () {
                'use strict';
                var lines = nv.models.line(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), controls = nv.models.legend(), interactiveLayer = nv.interactiveGuideline(), tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 30,
                        bottom: 50,
                        left: 60
                    }, color = nv.utils.defaultColor(), width = null, height = null, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, showControls = true, useInteractiveGuideline = false, rescaleY = true, x, y, id = lines.id(), state = nv.utils.state(), defaultState = null, noData = null, average = function (d) {
                        return d.average;
                    }, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd'), transitionDuration = 250, duration = 250, noErrorCheck = false;
                state.index = 0;
                state.rescaleY = rescaleY;
                xAxis.orient('bottom').tickPadding(7);
                yAxis.orient(rightAlignYAxis ? 'right' : 'left');
                tooltip.valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                }).headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                controls.updateState(false);
                var dx = d3.scale.linear(), index = {
                        i: 0,
                        x: 0
                    }, renderWatch = nv.utils.renderWatch(dispatch, duration);
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            }),
                            index: index.i,
                            rescaleY: rescaleY
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.index !== undefined)
                            index.i = state.index;
                        if (state.rescaleY !== undefined)
                            rescaleY = state.rescaleY;
                        if (state.active !== undefined)
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                    };
                };
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(lines);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    selection.each(function (data) {
                        var container = d3.select(this);
                        nv.utils.initSVG(container);
                        container.classed('nv-chart-' + id, true);
                        var that = this;
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            if (duration === 0)
                                container.call(chart);
                            else
                                container.transition().duration(duration).call(chart);
                        };
                        chart.container = this;
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        var indexDrag = d3.behavior.drag().on('dragstart', dragStart).on('drag', dragMove).on('dragend', dragEnd);
                        function dragStart(d, i) {
                            d3.select(chart.container).style('cursor', 'ew-resize');
                        }
                        function dragMove(d, i) {
                            index.x = d3.event.x;
                            index.i = Math.round(dx.invert(index.x));
                            updateZero();
                        }
                        function dragEnd(d, i) {
                            d3.select(chart.container).style('cursor', 'auto');
                            state.index = index.i;
                            dispatch.stateChange(state);
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = lines.xScale();
                        y = lines.yScale();
                        if (!rescaleY) {
                            var seriesDomains = data.filter(function (series) {
                                return !series.disabled;
                            }).map(function (series, i) {
                                var initialDomain = d3.extent(series.values, lines.y());
                                if (initialDomain[0] < -0.95)
                                    initialDomain[0] = -0.95;
                                return [
                                    (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),
                                    (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])
                                ];
                            });
                            var completeDomain = [
                                d3.min(seriesDomains, function (d) {
                                    return d[0];
                                }),
                                d3.max(seriesDomains, function (d) {
                                    return d[1];
                                })
                            ];
                            lines.yDomain(completeDomain);
                        } else {
                            lines.yDomain(null);
                        }
                        dx.domain([
                            0,
                            data[0].values.length - 1
                        ]).range([
                            0,
                            availableWidth
                        ]).clamp(true);
                        var data = indexify(index.i, data);
                        var interactivePointerEvents = useInteractiveGuideline ? 'none' : 'all';
                        var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-interactive');
                        gEnter.append('g').attr('class', 'nv-x nv-axis').style('pointer-events', 'none');
                        gEnter.append('g').attr('class', 'nv-y nv-axis');
                        gEnter.append('g').attr('class', 'nv-background');
                        gEnter.append('g').attr('class', 'nv-linesWrap').style('pointer-events', interactivePointerEvents);
                        gEnter.append('g').attr('class', 'nv-avgLinesWrap').style('pointer-events', 'none');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        gEnter.append('g').attr('class', 'nv-controlsWrap');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            legend.width(availableWidth);
                            g.select('.nv-legendWrap').datum(data).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            g.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
                        }
                        if (!showControls) {
                            g.select('.nv-controlsWrap').selectAll('*').remove();
                        } else {
                            var controlsData = [{
                                    key: 'Re-scale y-axis',
                                    disabled: !rescaleY
                                }];
                            controls.width(140).color([
                                '#444',
                                '#444',
                                '#444'
                            ]).rightAlign(false).margin({
                                top: 5,
                                right: 0,
                                bottom: 5,
                                left: 20
                            });
                            g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        if (rightAlignYAxis) {
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
                        }
                        var tempDisabled = data.filter(function (d) {
                            return d.tempDisabled;
                        });
                        wrap.select('.tempDisabled').remove();
                        if (tempDisabled.length) {
                            wrap.append('text').attr('class', 'tempDisabled').attr('x', availableWidth / 2).attr('y', '-.71em').style('text-anchor', 'end').text(tempDisabled.map(function (d) {
                                return d.key;
                            }).join(', ') + ' values cannot be calculated for this time period.');
                        }
                        if (useInteractiveGuideline) {
                            interactiveLayer.width(availableWidth).height(availableHeight).margin({
                                left: margin.left,
                                top: margin.top
                            }).svgContainer(container).xScale(x);
                            wrap.select('.nv-interactive').call(interactiveLayer);
                        }
                        gEnter.select('.nv-background').append('rect');
                        g.select('.nv-background rect').attr('width', availableWidth).attr('height', availableHeight);
                        lines.y(function (d) {
                            return d.display.y;
                        }).width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
                            return d.color || color(d, i);
                        }).filter(function (d, i) {
                            return !data[i].disabled && !data[i].tempDisabled;
                        }));
                        var linesWrap = g.select('.nv-linesWrap').datum(data.filter(function (d) {
                            return !d.disabled && !d.tempDisabled;
                        }));
                        linesWrap.call(lines);
                        data.forEach(function (d, i) {
                            d.seriesIndex = i;
                        });
                        var avgLineData = data.filter(function (d) {
                            return !d.disabled && !!average(d);
                        });
                        var avgLines = g.select('.nv-avgLinesWrap').selectAll('line').data(avgLineData, function (d) {
                            return d.key;
                        });
                        var getAvgLineY = function (d) {
                            var yVal = y(average(d));
                            if (yVal < 0)
                                return 0;
                            if (yVal > availableHeight)
                                return availableHeight;
                            return yVal;
                        };
                        avgLines.enter().append('line').style('stroke-width', 2).style('stroke-dasharray', '10,10').style('stroke', function (d, i) {
                            return lines.color()(d, d.seriesIndex);
                        }).attr('x1', 0).attr('x2', availableWidth).attr('y1', getAvgLineY).attr('y2', getAvgLineY);
                        avgLines.style('stroke-opacity', function (d) {
                            var yVal = y(average(d));
                            if (yVal < 0 || yVal > availableHeight)
                                return 0;
                            return 1;
                        }).attr('x1', 0).attr('x2', availableWidth).attr('y1', getAvgLineY).attr('y2', getAvgLineY);
                        avgLines.exit().remove();
                        var indexLine = linesWrap.selectAll('.nv-indexLine').data([index]);
                        indexLine.enter().append('rect').attr('class', 'nv-indexLine').attr('width', 3).attr('x', -2).attr('fill', 'red').attr('fill-opacity', 0.5).style('pointer-events', 'all').call(indexDrag);
                        indexLine.attr('transform', function (d) {
                            return 'translate(' + dx(d.i) + ',0)';
                        }).attr('height', availableHeight);
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksX(availableWidth / 70, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
                            g.select('.nv-x.nv-axis').call(xAxis);
                        }
                        if (showYAxis) {
                            yAxis.scale(y)._ticks(nv.utils.calcTicksY(availableHeight / 36, data)).tickSize(-availableWidth, 0);
                            g.select('.nv-y.nv-axis').call(yAxis);
                        }
                        function updateZero() {
                            indexLine.data([index]);
                            var oldDuration = chart.duration();
                            chart.duration(0);
                            chart.update();
                            chart.duration(oldDuration);
                        }
                        g.select('.nv-background rect').on('click', function () {
                            index.x = d3.mouse(this)[0];
                            index.i = Math.round(dx.invert(index.x));
                            state.index = index.i;
                            dispatch.stateChange(state);
                            updateZero();
                        });
                        lines.dispatch.on('elementClick', function (e) {
                            index.i = e.pointIndex;
                            index.x = dx(index.i);
                            state.index = index.i;
                            dispatch.stateChange(state);
                            updateZero();
                        });
                        controls.dispatch.on('legendClick', function (d, i) {
                            d.disabled = !d.disabled;
                            rescaleY = !d.disabled;
                            state.rescaleY = rescaleY;
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState)
                                state[key] = newState[key];
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        interactiveLayer.dispatch.on('elementMousemove', function (e) {
                            lines.clearHighlights();
                            var singlePoint, pointIndex, pointXLocation, allData = [];
                            data.filter(function (series, i) {
                                series.seriesIndex = i;
                                return !series.disabled;
                            }).forEach(function (series, i) {
                                pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
                                lines.highlightPoint(i, pointIndex, true);
                                var point = series.values[pointIndex];
                                if (typeof point === 'undefined')
                                    return;
                                if (typeof singlePoint === 'undefined')
                                    singlePoint = point;
                                if (typeof pointXLocation === 'undefined')
                                    pointXLocation = chart.xScale()(chart.x()(point, pointIndex));
                                allData.push({
                                    key: series.key,
                                    value: chart.y()(point, pointIndex),
                                    color: color(series, series.seriesIndex)
                                });
                            });
                            if (allData.length > 2) {
                                var yValue = chart.yScale().invert(e.mouseY);
                                var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);
                                var threshold = 0.03 * domainExtent;
                                var indexToHighlight = nv.nearestValueIndex(allData.map(function (d) {
                                    return d.value;
                                }), yValue, threshold);
                                if (indexToHighlight !== null)
                                    allData[indexToHighlight].highlight = true;
                            }
                            var xValue = xAxis.tickFormat()(chart.x()(singlePoint, pointIndex), pointIndex);
                            interactiveLayer.tooltip.chartContainer(that.parentNode).valueFormatter(function (d, i) {
                                return yAxis.tickFormat()(d);
                            }).data({
                                value: xValue,
                                series: allData
                            })();
                            interactiveLayer.renderGuideLine(pointXLocation);
                        });
                        interactiveLayer.dispatch.on('elementMouseout', function (e) {
                            lines.clearHighlights();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            if (typeof e.index !== 'undefined') {
                                index.i = e.index;
                                index.x = dx(index.i);
                                state.index = e.index;
                                indexLine.data([index]);
                            }
                            if (typeof e.rescaleY !== 'undefined') {
                                rescaleY = e.rescaleY;
                            }
                            chart.update();
                        });
                    });
                    renderWatch.renderEnd('cumulativeLineChart immediate');
                    return chart;
                }
                lines.dispatch.on('elementMouseover.tooltip', function (evt) {
                    var point = {
                        x: chart.x()(evt.point),
                        y: chart.y()(evt.point),
                        color: evt.point.color
                    };
                    evt.point = point;
                    tooltip.data(evt).hidden(false);
                });
                lines.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                var indexifyYGetter = null;
                function indexify(idx, data) {
                    if (!indexifyYGetter)
                        indexifyYGetter = lines.y();
                    return data.map(function (line, i) {
                        if (!line.values) {
                            return line;
                        }
                        var indexValue = line.values[idx];
                        if (indexValue == null) {
                            return line;
                        }
                        var v = indexifyYGetter(indexValue, idx);
                        if (v < -0.95 && !noErrorCheck) {
                            line.tempDisabled = true;
                            return line;
                        }
                        line.tempDisabled = false;
                        line.values = line.values.map(function (point, pointIndex) {
                            point.display = { 'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };
                            return point;
                        });
                        return line;
                    });
                }
                chart.dispatch = dispatch;
                chart.lines = lines;
                chart.legend = legend;
                chart.controls = controls;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.interactiveLayer = interactiveLayer;
                chart.state = state;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    rescaleY: {
                        get: function () {
                            return rescaleY;
                        },
                        set: function (_) {
                            rescaleY = _;
                        }
                    },
                    showControls: {
                        get: function () {
                            return showControls;
                        },
                        set: function (_) {
                            showControls = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    average: {
                        get: function () {
                            return average;
                        },
                        set: function (_) {
                            average = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    noErrorCheck: {
                        get: function () {
                            return noErrorCheck;
                        },
                        set: function (_) {
                            noErrorCheck = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                        }
                    },
                    useInteractiveGuideline: {
                        get: function () {
                            return useInteractiveGuideline;
                        },
                        set: function (_) {
                            useInteractiveGuideline = _;
                            if (_ === true) {
                                chart.interactive(false);
                                chart.useVoronoi(false);
                            }
                        }
                    },
                    rightAlignYAxis: {
                        get: function () {
                            return rightAlignYAxis;
                        },
                        set: function (_) {
                            rightAlignYAxis = _;
                            yAxis.orient(_ ? 'right' : 'left');
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            lines.duration(duration);
                            xAxis.duration(duration);
                            yAxis.duration(duration);
                            renderWatch.reset(duration);
                        }
                    }
                });
                nv.utils.inheritOptions(chart, lines);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.discreteBar = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 960, height = 500, id = Math.floor(Math.random() * 10000), container, x = d3.scale.ordinal(), y = d3.scale.linear(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, forceY = [0], color = nv.utils.defaultColor(), showValues = false, valueFormat = d3.format(',.2f'), xDomain, yDomain, xRange, yRange, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'), rectClass = 'discreteBar', duration = 250;
                var x0, y0;
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        data.forEach(function (series, i) {
                            series.values.forEach(function (point) {
                                point.series = i;
                            });
                        });
                        var seriesData = xDomain && yDomain ? [] : data.map(function (d) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d, i),
                                    y: getY(d, i),
                                    y0: d.y0
                                };
                            });
                        });
                        x.domain(xDomain || d3.merge(seriesData).map(function (d) {
                            return d.x;
                        })).rangeBands(xRange || [
                            0,
                            availableWidth
                        ], 0.1);
                        y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function (d) {
                            return d.y;
                        }).concat(forceY)));
                        if (showValues)
                            y.range(yRange || [
                                availableHeight - (y.domain()[0] < 0 ? 12 : 0),
                                y.domain()[1] > 0 ? 12 : 0
                            ]);
                        else
                            y.range(yRange || [
                                availableHeight,
                                0
                            ]);
                        x0 = x0 || x;
                        y0 = y0 || y.copy().range([
                            y(0),
                            y(0)
                        ]);
                        var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-groups');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
                            return d;
                        }, function (d) {
                            return d.key;
                        });
                        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
                        groups.exit().watchTransition(renderWatch, 'discreteBar: exit groups').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001).remove();
                        groups.attr('class', function (d, i) {
                            return 'nv-group nv-series-' + i;
                        }).classed('hover', function (d) {
                            return d.hover;
                        });
                        groups.watchTransition(renderWatch, 'discreteBar: groups').style('stroke-opacity', 1).style('fill-opacity', 0.75);
                        var bars = groups.selectAll('g.nv-bar').data(function (d) {
                            return d.values;
                        });
                        bars.exit().remove();
                        var barsEnter = bars.enter().append('g').attr('transform', function (d, i, j) {
                            return 'translate(' + (x(getX(d, i)) + x.rangeBand() * 0.05) + ', ' + y(0) + ')';
                        }).on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true);
                            dispatch.elementMouseover({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false);
                            dispatch.elementMouseout({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mousemove', function (d, i) {
                            dispatch.elementMousemove({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('click', function (d, i) {
                            var element = this;
                            dispatch.elementClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill'),
                                event: d3.event,
                                element: element
                            });
                            d3.event.stopPropagation();
                        }).on('dblclick', function (d, i) {
                            dispatch.elementDblClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                            d3.event.stopPropagation();
                        });
                        barsEnter.append('rect').attr('height', 0).attr('width', x.rangeBand() * 0.9 / data.length);
                        if (showValues) {
                            barsEnter.append('text').attr('text-anchor', 'middle');
                            bars.select('text').text(function (d, i) {
                                return valueFormat(getY(d, i));
                            }).watchTransition(renderWatch, 'discreteBar: bars text').attr('x', x.rangeBand() * 0.9 / 2).attr('y', function (d, i) {
                                return getY(d, i) < 0 ? y(getY(d, i)) - y(0) + 12 : -4;
                            });
                        } else {
                            bars.selectAll('text').remove();
                        }
                        bars.attr('class', function (d, i) {
                            return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
                        }).style('fill', function (d, i) {
                            return d.color || color(d, i);
                        }).style('stroke', function (d, i) {
                            return d.color || color(d, i);
                        }).select('rect').attr('class', rectClass).watchTransition(renderWatch, 'discreteBar: bars rect').attr('width', x.rangeBand() * 0.9 / data.length);
                        bars.watchTransition(renderWatch, 'discreteBar: bars').attr('transform', function (d, i) {
                            var left = x(getX(d, i)) + x.rangeBand() * 0.05, top = getY(d, i) < 0 ? y(0) : y(0) - y(getY(d, i)) < 1 ? y(0) - 1 : y(getY(d, i));
                            return 'translate(' + left + ', ' + top + ')';
                        }).select('rect').attr('height', function (d, i) {
                            return Math.max(Math.abs(y(getY(d, i)) - y(0)), 1);
                        });
                        x0 = x.copy();
                        y0 = y.copy();
                    });
                    renderWatch.renderEnd('discreteBar immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    forceY: {
                        get: function () {
                            return forceY;
                        },
                        set: function (_) {
                            forceY = _;
                        }
                    },
                    showValues: {
                        get: function () {
                            return showValues;
                        },
                        set: function (_) {
                            showValues = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    valueFormat: {
                        get: function () {
                            return valueFormat;
                        },
                        set: function (_) {
                            valueFormat = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    rectClass: {
                        get: function () {
                            return rectClass;
                        },
                        set: function (_) {
                            rectClass = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.discreteBarChart = function () {
                'use strict';
                var discretebar = nv.models.discreteBar(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), tooltip = nv.models.tooltip();
                var margin = {
                        top: 15,
                        right: 10,
                        bottom: 50,
                        left: 60
                    }, width = null, height = null, color = nv.utils.getColor(), showLegend = false, showXAxis = true, showYAxis = true, rightAlignYAxis = false, staggerLabels = false, wrapLabels = false, rotateLabels = 0, x, y, noData = null, dispatch = d3.dispatch('beforeUpdate', 'renderEnd'), duration = 250;
                xAxis.orient('bottom').showMaxMin(false).tickFormat(function (d) {
                    return d;
                });
                yAxis.orient(rightAlignYAxis ? 'right' : 'left').tickFormat(d3.format(',.1f'));
                tooltip.duration(0).headerEnabled(false).valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                }).keyFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(discretebar);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    selection.each(function (data) {
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            dispatch.beforeUpdate();
                            container.transition().duration(duration).call(chart);
                        };
                        chart.container = this;
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = discretebar.xScale();
                        y = discretebar.yScale().clamp(true);
                        var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');
                        var defsEnter = gEnter.append('defs');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y nv-axis').append('g').attr('class', 'nv-zeroLine').append('line');
                        gEnter.append('g').attr('class', 'nv-barsWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            legend.width(availableWidth);
                            g.select('.nv-legendWrap').datum(data).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            wrap.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
                        }
                        if (rightAlignYAxis) {
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
                        }
                        discretebar.width(availableWidth).height(availableHeight);
                        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
                            return !d.disabled;
                        }));
                        barsWrap.transition().call(discretebar);
                        defsEnter.append('clipPath').attr('id', 'nv-x-label-clip-' + discretebar.id()).append('rect');
                        g.select('#nv-x-label-clip-' + discretebar.id() + ' rect').attr('width', x.rangeBand() * (staggerLabels ? 2 : 1)).attr('height', 16).attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2));
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + (y.range()[0] + (discretebar.showValues() && y.domain()[0] < 0 ? 16 : 0)) + ')');
                            g.select('.nv-x.nv-axis').call(xAxis);
                            var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
                            if (staggerLabels) {
                                xTicks.selectAll('text').attr('transform', function (d, i, j) {
                                    return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')';
                                });
                            }
                            if (rotateLabels) {
                                xTicks.selectAll('.tick text').attr('transform', 'rotate(' + rotateLabels + ' 0,0)').style('text-anchor', rotateLabels > 0 ? 'start' : 'end');
                            }
                            if (wrapLabels) {
                                g.selectAll('.tick text').call(nv.utils.wrapTicks, chart.xAxis.rangeBand());
                            }
                        }
                        if (showYAxis) {
                            yAxis.scale(y)._ticks(nv.utils.calcTicksY(availableHeight / 36, data)).tickSize(-availableWidth, 0);
                            g.select('.nv-y.nv-axis').call(yAxis);
                        }
                        g.select('.nv-zeroLine line').attr('x1', 0).attr('x2', rightAlignYAxis ? -availableWidth : availableWidth).attr('y1', y(0)).attr('y2', y(0));
                    });
                    renderWatch.renderEnd('discreteBar chart immediate');
                    return chart;
                }
                discretebar.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt['series'] = {
                        key: chart.x()(evt.data),
                        value: chart.y()(evt.data),
                        color: evt.color
                    };
                    tooltip.data(evt).hidden(false);
                });
                discretebar.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                discretebar.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.dispatch = dispatch;
                chart.discretebar = discretebar;
                chart.legend = legend;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    staggerLabels: {
                        get: function () {
                            return staggerLabels;
                        },
                        set: function (_) {
                            staggerLabels = _;
                        }
                    },
                    rotateLabels: {
                        get: function () {
                            return rotateLabels;
                        },
                        set: function (_) {
                            rotateLabels = _;
                        }
                    },
                    wrapLabels: {
                        get: function () {
                            return wrapLabels;
                        },
                        set: function (_) {
                            wrapLabels = !!_;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            discretebar.duration(duration);
                            xAxis.duration(duration);
                            yAxis.duration(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            discretebar.color(color);
                            legend.color(color);
                        }
                    },
                    rightAlignYAxis: {
                        get: function () {
                            return rightAlignYAxis;
                        },
                        set: function (_) {
                            rightAlignYAxis = _;
                            yAxis.orient(_ ? 'right' : 'left');
                        }
                    }
                });
                nv.utils.inheritOptions(chart, discretebar);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.distribution = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 400, size = 8, axis = 'x', getData = function (d) {
                        return d[axis];
                    }, color = nv.utils.defaultColor(), scale = d3.scale.linear(), domain, duration = 250, dispatch = d3.dispatch('renderEnd');
                var scale0;
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom), naxis = axis == 'x' ? 'y' : 'x', container = d3.select(this);
                        nv.utils.initSVG(container);
                        scale0 = scale0 || scale;
                        var wrap = container.selectAll('g.nv-distribution').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var distWrap = g.selectAll('g.nv-dist').data(function (d) {
                            return d;
                        }, function (d) {
                            return d.key;
                        });
                        distWrap.enter().append('g');
                        distWrap.attr('class', function (d, i) {
                            return 'nv-dist nv-series-' + i;
                        }).style('stroke', function (d, i) {
                            return color(d, i);
                        });
                        var dist = distWrap.selectAll('line.nv-dist' + axis).data(function (d) {
                            return d.values;
                        });
                        dist.enter().append('line').attr(axis + '1', function (d, i) {
                            return scale0(getData(d, i));
                        }).attr(axis + '2', function (d, i) {
                            return scale0(getData(d, i));
                        });
                        renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit').attr(axis + '1', function (d, i) {
                            return scale(getData(d, i));
                        }).attr(axis + '2', function (d, i) {
                            return scale(getData(d, i));
                        }).style('stroke-opacity', 0).remove();
                        dist.attr('class', function (d, i) {
                            return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i;
                        }).attr(naxis + '1', 0).attr(naxis + '2', size);
                        renderWatch.transition(dist, 'dist').attr(axis + '1', function (d, i) {
                            return scale(getData(d, i));
                        }).attr(axis + '2', function (d, i) {
                            return scale(getData(d, i));
                        });
                        scale0 = scale.copy();
                    });
                    renderWatch.renderEnd('distribution immediate');
                    return chart;
                }
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart.dispatch = dispatch;
                chart.margin = function (_) {
                    if (!arguments.length)
                        return margin;
                    margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
                    margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
                    margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
                    margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
                    return chart;
                };
                chart.width = function (_) {
                    if (!arguments.length)
                        return width;
                    width = _;
                    return chart;
                };
                chart.axis = function (_) {
                    if (!arguments.length)
                        return axis;
                    axis = _;
                    return chart;
                };
                chart.size = function (_) {
                    if (!arguments.length)
                        return size;
                    size = _;
                    return chart;
                };
                chart.getData = function (_) {
                    if (!arguments.length)
                        return getData;
                    getData = d3.functor(_);
                    return chart;
                };
                chart.scale = function (_) {
                    if (!arguments.length)
                        return scale;
                    scale = _;
                    return chart;
                };
                chart.color = function (_) {
                    if (!arguments.length)
                        return color;
                    color = nv.utils.getColor(_);
                    return chart;
                };
                chart.duration = function (_) {
                    if (!arguments.length)
                        return duration;
                    duration = _;
                    renderWatch.reset(duration);
                    return chart;
                };
                return chart;
            };
            nv.models.dotPlot = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 960, height = 500, id = Math.floor(Math.random() * 10000), container = null, x = d3.scale.ordinal(), y = d3.scale.linear(), z = d3.scale.linear(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, getZ = function (d) {
                        return d.z;
                    }, getYerr = function (d) {
                        return d.yErr;
                    }, forceY = [0], color = nv.utils.defaultColor(), barColor = null, disabled, stacked = false, showValues = false, showBarLabels = false, valuePadding = 60, groupSpacing = 0, valueFormat = d3.format(',.2f'), delay = 1200, xDomain, yDomain, zDomain, xRange, yRange, zRange, duration = 250, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd');
                var x0, y0, z0;
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        if (stacked)
                            data = d3.layout.stack().offset('zero').values(function (d) {
                                return d.values;
                            }).y(getY)(data);
                        data.forEach(function (series, i) {
                            series.values.forEach(function (point) {
                                point.series = i;
                                point.key = series.key;
                            });
                        });
                        if (stacked)
                            data[0].values.map(function (d, i) {
                                var posBase = 0, negBase = 0;
                                data.map(function (d) {
                                    var f = d.values[i];
                                    f.size = Math.abs(f.y);
                                    if (f.y < 0) {
                                        f.y1 = negBase - f.size;
                                        negBase = negBase - f.size;
                                    } else {
                                        f.y1 = posBase;
                                        posBase = posBase + f.size;
                                    }
                                });
                            });
                        var seriesData = xDomain && yDomain && zDomain ? [] : data.map(function (d) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d, i),
                                    y: getY(d, i),
                                    z: getZ(d, i),
                                    y0: d.y0,
                                    y1: d.y1
                                };
                            });
                        });
                        x.domain(xDomain || d3.merge(seriesData).map(function (d) {
                            return d.x;
                        })).rangeBands(xRange || [
                            0,
                            availableHeight
                        ], groupSpacing);
                        y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function (d) {
                            return stacked ? d.y > 0 ? d.y1 + d.y : d.y1 : d.y;
                        }).concat(forceY)));
                        z.domain(zDomain || [
                            0,
                            d3.max(d3.merge(seriesData).map(function (d) {
                                return d.z;
                            }))
                        ]).range([
                            0,
                            Math.sqrt(availableWidth * availableHeight / 64) / 2
                        ]);
                        if (showValues && !stacked)
                            y.range(yRange || [
                                y.domain()[0] < 0 ? valuePadding : 0,
                                availableWidth - (y.domain()[1] > 0 ? valuePadding : 0)
                            ]);
                        else
                            y.range(yRange || [
                                0,
                                availableWidth
                            ]);
                        x0 = x0 || x;
                        y0 = y0 || d3.scale.linear().domain(y.domain()).range([
                            y(0),
                            y(0)
                        ]);
                        var wrap = d3.select(this).selectAll('g.nv-wrap.nv-dotPlot').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-dotPlot');
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-groups');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
                            return d;
                        }, function (d, i) {
                            return i;
                        });
                        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
                        groups.exit().watchTransition(renderWatch, 'dotPlot: exit groups').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001).remove();
                        groups.attr('class', function (d, i) {
                            return 'nv-group nv-series-' + i;
                        }).classed('hover', function (d) {
                            return d.hover;
                        }).style('fill', function (d, i) {
                            return color(d, i);
                        }).style('stroke', function (d, i) {
                            return color(d, i);
                        });
                        groups.watchTransition(renderWatch, 'dotPlot: groups').style('stroke-opacity', 1).style('fill-opacity', 0.75);
                        var bars = groups.selectAll('g.nv-bar').data(function (d) {
                            return d.values;
                        });
                        bars.exit().remove();
                        var barsEnter = bars.enter().append('g').attr('transform', function (d, i, j) {
                            return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : j * x.rangeBand() / data.length + x(getX(d, i))) + ')';
                        });
                        barsEnter.append('circle').attr('cx', 0).attr('cy', x.rangeBand() / (data.length * 2)).attr('r', 10);
                        bars.on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true);
                            dispatch.elementMouseover({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false);
                            dispatch.elementMouseout({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            dispatch.elementMouseout({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mousemove', function (d, i) {
                            dispatch.elementMousemove({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('click', function (d, i) {
                            var element = this;
                            dispatch.elementClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill'),
                                event: d3.event,
                                element: element
                            });
                            d3.event.stopPropagation();
                        }).on('dblclick', function (d, i) {
                            dispatch.elementDblClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                            d3.event.stopPropagation();
                        });
                        if (getYerr(data[0], 0)) {
                            barsEnter.append('polyline');
                            bars.select('polyline').attr('fill', 'none').attr('points', function (d, i) {
                                var xerr = getYerr(d, i), mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);
                                xerr = xerr.length ? xerr : [
                                    -Math.abs(xerr),
                                    Math.abs(xerr)
                                ];
                                xerr = xerr.map(function (e) {
                                    return y(e) - y(0);
                                });
                                var a = [
                                    [
                                        xerr[0],
                                        -mid
                                    ],
                                    [
                                        xerr[0],
                                        mid
                                    ],
                                    [
                                        xerr[0],
                                        0
                                    ],
                                    [
                                        xerr[1],
                                        0
                                    ],
                                    [
                                        xerr[1],
                                        -mid
                                    ],
                                    [
                                        xerr[1],
                                        mid
                                    ]
                                ];
                                return a.map(function (path) {
                                    return path.join(',');
                                }).join(' ');
                            }).attr('transform', function (d, i) {
                                var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);
                                return 'translate(' + (getY(d, i) < 0 ? 0 : y(getY(d, i)) - y(0)) + ', ' + mid + ')';
                            });
                        }
                        barsEnter.append('text');
                        if (showValues && !stacked) {
                            bars.select('text').attr('text-anchor', function (d, i) {
                                return getY(d, i) < 0 ? 'end' : 'start';
                            }).attr('y', x.rangeBand() / (data.length * 2)).attr('dy', '.32em').text(function (d, i) {
                                var t = valueFormat(getY(d, i)), yerr = getYerr(d, i);
                                if (yerr === undefined)
                                    return t;
                                if (!yerr.length)
                                    return t + '\xB1' + valueFormat(Math.abs(yerr));
                                return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));
                            });
                            bars.watchTransition(renderWatch, 'dotPlot: bars').select('text').attr('x', function (d, i) {
                                return getY(d, i) < 0 ? -4 : y(getY(d, i)) - y(0) + 4;
                            });
                        } else {
                            bars.selectAll('text').text('');
                        }
                        if (showBarLabels && !stacked) {
                            barsEnter.append('text').classed('nv-bar-label', true);
                            bars.select('text.nv-bar-label').attr('text-anchor', function (d, i) {
                                return getY(d, i) < 0 ? 'start' : 'end';
                            }).attr('y', x.rangeBand() / (data.length * 2)).attr('dy', '.32em').text(function (d, i) {
                                return getX(d, i);
                            });
                            bars.watchTransition(renderWatch, 'dotPlot: bars').select('text.nv-bar-label').attr('x', function (d, i) {
                                return getY(d, i) < 0 ? y(0) - y(getY(d, i)) + 4 : -4;
                            });
                        } else {
                            bars.selectAll('text.nv-bar-label').text('');
                        }
                        bars.attr('class', function (d, i) {
                            return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
                        });
                        if (barColor) {
                            if (!disabled)
                                disabled = data.map(function () {
                                    return true;
                                });
                            bars.style('fill', function (d, i, j) {
                                return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
                                    return i;
                                }).filter(function (d, i) {
                                    return !disabled[i];
                                })[j]).toString();
                            }).style('stroke', function (d, i, j) {
                                return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
                                    return i;
                                }).filter(function (d, i) {
                                    return !disabled[i];
                                })[j]).toString();
                            });
                        }
                        if (stacked)
                            bars.watchTransition(renderWatch, 'dotPlot: bars').attr('transform', function (d, i) {
                                return 'translate(' + y(d.y1) + ',' + x(getX(d, i)) + ')';
                            }).select('circle').attr('cx', function (d, i) {
                                return Math.abs(y(getY(d, i) + d.y0) - y(d.y0)) || 0;
                            });
                        else
                            bars.watchTransition(renderWatch, 'dotPlot: bars').attr('transform', function (d, i) {
                                return 'translate(' + (getY(d, i) < 0 ? y(getY(d, i)) : y(0)) + ',' + (d.series * x.rangeBand() / data.length + x(getX(d, i))) + ')';
                            }).select('circle').attr('cx', function (d, i) {
                                return y(getY(d, i)) || 0;
                            }).attr('r', function (d, i) {
                                return z(getZ(d, i));
                            });
                        x0 = x.copy();
                        y0 = y.copy();
                        z0 = z.copy();
                    });
                    renderWatch.renderEnd('dotPlot immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                        }
                    },
                    z: {
                        get: function () {
                            return getZ;
                        },
                        set: function (_) {
                            getZ = _;
                        }
                    },
                    yErr: {
                        get: function () {
                            return getYerr;
                        },
                        set: function (_) {
                            getYerr = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    zDomain: {
                        get: function () {
                            return zDomain;
                        },
                        set: function (_) {
                            zDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    forceY: {
                        get: function () {
                            return forceY;
                        },
                        set: function (_) {
                            forceY = _;
                        }
                    },
                    stacked: {
                        get: function () {
                            return stacked;
                        },
                        set: function (_) {
                            stacked = _;
                        }
                    },
                    showValues: {
                        get: function () {
                            return showValues;
                        },
                        set: function (_) {
                            showValues = _;
                        }
                    },
                    disabled: {
                        get: function () {
                            return disabled;
                        },
                        set: function (_) {
                            disabled = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    valueFormat: {
                        get: function () {
                            return valueFormat;
                        },
                        set: function (_) {
                            valueFormat = _;
                        }
                    },
                    valuePadding: {
                        get: function () {
                            return valuePadding;
                        },
                        set: function (_) {
                            valuePadding = _;
                        }
                    },
                    groupSpacing: {
                        get: function () {
                            return groupSpacing;
                        },
                        set: function (_) {
                            groupSpacing = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    barColor: {
                        get: function () {
                            return barColor;
                        },
                        set: function (_) {
                            barColor = _ ? nv.utils.getColor(_) : null;
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.dotPlotChart = function () {
                'use strict';
                var multibar = nv.models.dotPlot(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend().height(30), controls = nv.models.legend().height(30), tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 20,
                        bottom: 50,
                        left: 60
                    }, width = null, height = null, color = nv.utils.defaultColor(), showControls = true, controlLabels = {}, showLegend = true, showXAxis = true, showYAxis = true, stacked = false, x, y, state = nv.utils.state(), defaultState = null, noData = null, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd'), controlWidth = function () {
                        return showControls ? 180 : 0;
                    }, duration = 250;
                state.stacked = false;
                multibar.stacked(stacked);
                xAxis.orient('left').tickPadding(5).showMaxMin(false).tickFormat(function (d) {
                    return d;
                });
                yAxis.orient('bottom').tickFormat(d3.format(',.1f'));
                tooltip.duration(0).valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                }).headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                controls.updateState(false);
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            }),
                            stacked: stacked
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.stacked !== undefined)
                            stacked = state.stacked;
                        if (state.active !== undefined)
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                    };
                };
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(multibar);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    selection.each(function (data) {
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            container.transition().duration(duration).call(chart);
                        };
                        chart.container = this;
                        stacked = multibar.stacked();
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = multibar.xScale();
                        y = multibar.yScale().clamp(true);
                        var wrap = container.selectAll('g.nv-wrap.nv-dotPlotChart').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-dotPlotChart').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y nv-axis').append('g').attr('class', 'nv-zeroLine').append('line');
                        gEnter.append('g').attr('class', 'nv-barsWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        gEnter.append('g').attr('class', 'nv-controlsWrap');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            legend.width(availableWidth - controlWidth());
                            g.select('.nv-legendWrap').datum(data).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            g.select('.nv-legendWrap').attr('transform', 'translate(' + controlWidth() + ',' + -margin.top + ')');
                        }
                        if (!showControls) {
                            g.select('.nv-controlsWrap').selectAll('*').remove();
                        } else {
                            var controlsData = [
                                {
                                    key: controlLabels.grouped || 'Grouped',
                                    disabled: multibar.stacked()
                                },
                                {
                                    key: controlLabels.stacked || 'Stacked',
                                    disabled: !multibar.stacked()
                                }
                            ];
                            controls.width(controlWidth()).color([
                                '#444',
                                '#444',
                                '#444'
                            ]);
                            g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        multibar.disabled(data.map(function (series) {
                            return series.disabled;
                        })).width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
                            return d.color || color(d, i);
                        }).filter(function (d, i) {
                            return !data[i].disabled;
                        }));
                        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
                            return !d.disabled;
                        }));
                        barsWrap.transition().call(multibar);
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksY(availableHeight / 24, data)).tickSize(-availableWidth, 0);
                            g.select('.nv-x.nv-axis').call(xAxis);
                            var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
                            xTicks.selectAll('line, text');
                        }
                        if (showYAxis) {
                            yAxis.scale(y)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(0,' + availableHeight + ')');
                            g.select('.nv-y.nv-axis').call(yAxis);
                        }
                        g.select('.nv-zeroLine line').attr('x1', y(0)).attr('x2', y(0)).attr('y1', 0).attr('y2', -availableHeight);
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState)
                                state[key] = newState[key];
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        controls.dispatch.on('legendClick', function (d, i) {
                            if (!d.disabled)
                                return;
                            controlsData = controlsData.map(function (s) {
                                s.disabled = true;
                                return s;
                            });
                            d.disabled = false;
                            switch (d.key) {
                            case 'Grouped':
                            case controlLabels.grouped:
                                multibar.stacked(false);
                                break;
                            case 'Stacked':
                            case controlLabels.stacked:
                                multibar.stacked(true);
                                break;
                            }
                            state.stacked = multibar.stacked();
                            dispatch.stateChange(state);
                            stacked = multibar.stacked();
                            chart.update();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            if (typeof e.stacked !== 'undefined') {
                                multibar.stacked(e.stacked);
                                state.stacked = e.stacked;
                                stacked = e.stacked;
                            }
                            chart.update();
                        });
                    });
                    renderWatch.renderEnd('multibar horizontal chart immediate');
                    return chart;
                }
                multibar.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt.value = chart.x()(evt.data);
                    evt['series'] = {
                        key: evt.data.key,
                        value: chart.y()(evt.data),
                        color: evt.color
                    };
                    tooltip.data(evt).hidden(false);
                });
                multibar.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                multibar.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.dispatch = dispatch;
                chart.multibar = multibar;
                chart.legend = legend;
                chart.controls = controls;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.state = state;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    showControls: {
                        get: function () {
                            return showControls;
                        },
                        set: function (_) {
                            showControls = _;
                        }
                    },
                    controlLabels: {
                        get: function () {
                            return controlLabels;
                        },
                        set: function (_) {
                            controlLabels = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            multibar.duration(duration);
                            xAxis.duration(duration);
                            yAxis.duration(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                        }
                    },
                    barColor: {
                        get: function () {
                            return multibar.barColor;
                        },
                        set: function (_) {
                            multibar.barColor(_);
                            legend.color(function (d, i) {
                                return d3.rgb('#ccc').darker(i * 1.5).toString();
                            });
                        }
                    }
                });
                nv.utils.inheritOptions(chart, multibar);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.forceDirectedGraph = function () {
                'use strict';
                var margin = {
                        top: 2,
                        right: 0,
                        bottom: 2,
                        left: 0
                    }, width = 400, height = 32, container = null, dispatch = d3.dispatch('renderEnd'), color = nv.utils.getColor(['#000']), tooltip = nv.models.tooltip(), noData = null, linkStrength = 0.1, friction = 0.9, linkDist = 30, charge = -120, gravity = 0.1, theta = 0.8, alpha = 0.1, radius = 5, nodeExtras = function (nodes) {
                    }, linkExtras = function (links) {
                    };
                var renderWatch = nv.utils.renderWatch(dispatch);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        container.attr('width', availableWidth).attr('height', availableHeight);
                        if (!data || !data.links || !data.nodes) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        container.selectAll('*').remove();
                        var nodeFieldSet = new Set();
                        data.nodes.forEach(function (node) {
                            var keys = Object.keys(node);
                            keys.forEach(function (key) {
                                nodeFieldSet.add(key);
                            });
                        });
                        var force = d3.layout.force().nodes(data.nodes).links(data.links).size([
                            availableWidth,
                            availableHeight
                        ]).linkStrength(linkStrength).friction(friction).linkDistance(linkDist).charge(charge).gravity(gravity).theta(theta).alpha(alpha).start();
                        var link = container.selectAll('.link').data(data.links).enter().append('line').attr('class', 'nv-force-link').style('stroke-width', function (d) {
                            return Math.sqrt(d.value);
                        });
                        var node = container.selectAll('.node').data(data.nodes).enter().append('g').attr('class', 'nv-force-node').call(force.drag);
                        node.append('circle').attr('r', radius).style('fill', function (d) {
                            return color(d);
                        }).on('mouseover', function (evt) {
                            container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex).attr('y1', evt.py);
                            container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex).attr('x2', evt.px);
                            var nodeColor = color(evt);
                            evt.series = [];
                            nodeFieldSet.forEach(function (field) {
                                evt.series.push({
                                    color: nodeColor,
                                    key: field,
                                    value: evt[field]
                                });
                            });
                            tooltip.data(evt).hidden(false);
                        }).on('mouseout', function (d) {
                            tooltip.hidden(true);
                        });
                        tooltip.headerFormatter(function (d) {
                            return 'Node';
                        });
                        linkExtras(link);
                        nodeExtras(node);
                        force.on('tick', function () {
                            link.attr('x1', function (d) {
                                return d.source.x;
                            }).attr('y1', function (d) {
                                return d.source.y;
                            }).attr('x2', function (d) {
                                return d.target.x;
                            }).attr('y2', function (d) {
                                return d.target.y;
                            });
                            node.attr('transform', function (d) {
                                return 'translate(' + d.x + ', ' + d.y + ')';
                            });
                        });
                    });
                    return chart;
                }
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    linkStrength: {
                        get: function () {
                            return linkStrength;
                        },
                        set: function (_) {
                            linkStrength = _;
                        }
                    },
                    friction: {
                        get: function () {
                            return friction;
                        },
                        set: function (_) {
                            friction = _;
                        }
                    },
                    linkDist: {
                        get: function () {
                            return linkDist;
                        },
                        set: function (_) {
                            linkDist = _;
                        }
                    },
                    charge: {
                        get: function () {
                            return charge;
                        },
                        set: function (_) {
                            charge = _;
                        }
                    },
                    gravity: {
                        get: function () {
                            return gravity;
                        },
                        set: function (_) {
                            gravity = _;
                        }
                    },
                    theta: {
                        get: function () {
                            return theta;
                        },
                        set: function (_) {
                            theta = _;
                        }
                    },
                    alpha: {
                        get: function () {
                            return alpha;
                        },
                        set: function (_) {
                            alpha = _;
                        }
                    },
                    radius: {
                        get: function () {
                            return radius;
                        },
                        set: function (_) {
                            radius = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = d3.functor(_);
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = d3.functor(_);
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    nodeExtras: {
                        get: function () {
                            return nodeExtras;
                        },
                        set: function (_) {
                            nodeExtras = _;
                        }
                    },
                    linkExtras: {
                        get: function () {
                            return linkExtras;
                        },
                        set: function (_) {
                            linkExtras = _;
                        }
                    }
                });
                chart.dispatch = dispatch;
                chart.tooltip = tooltip;
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.furiousLegend = function () {
                'use strict';
                var margin = {
                        top: 5,
                        right: 0,
                        bottom: 5,
                        left: 0
                    }, width = 400, height = 20, getKey = function (d) {
                        return d.key;
                    }, color = nv.utils.getColor(), maxKeyLength = 20, align = true, padding = 28, rightAlign = true, updateState = true, radioButtonMode = false, expanded = false, dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange'), vers = 'classic';
                function chart(selection) {
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, container = d3.select(this);
                        nv.utils.initSVG(container);
                        var wrap = container.selectAll('g.nv-legend').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');
                        var g = wrap.select('g');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var series = g.selectAll('.nv-series').data(function (d) {
                            if (vers != 'furious')
                                return d;
                            return d.filter(function (n) {
                                return expanded ? true : !n.disengaged;
                            });
                        });
                        var seriesEnter = series.enter().append('g').attr('class', 'nv-series');
                        var seriesShape;
                        if (vers == 'classic') {
                            seriesEnter.append('circle').style('stroke-width', 2).attr('class', 'nv-legend-symbol').attr('r', 5);
                            seriesShape = series.select('circle');
                        } else if (vers == 'furious') {
                            seriesEnter.append('rect').style('stroke-width', 2).attr('class', 'nv-legend-symbol').attr('rx', 3).attr('ry', 3);
                            seriesShape = series.select('rect');
                            seriesEnter.append('g').attr('class', 'nv-check-box').property('innerHTML', '<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>').attr('transform', 'translate(-10,-8)scale(0.5)');
                            var seriesCheckbox = series.select('.nv-check-box');
                            seriesCheckbox.each(function (d, i) {
                                d3.select(this).selectAll('path').attr('stroke', setTextColor(d, i));
                            });
                        }
                        seriesEnter.append('text').attr('text-anchor', 'start').attr('class', 'nv-legend-text').attr('dy', '.32em').attr('dx', '8');
                        var seriesText = series.select('text.nv-legend-text');
                        series.on('mouseover', function (d, i) {
                            dispatch.legendMouseover(d, i);
                        }).on('mouseout', function (d, i) {
                            dispatch.legendMouseout(d, i);
                        }).on('click', function (d, i) {
                            dispatch.legendClick(d, i);
                            var data = series.data();
                            if (updateState) {
                                if (vers == 'classic') {
                                    if (radioButtonMode) {
                                        data.forEach(function (series) {
                                            series.disabled = true;
                                        });
                                        d.disabled = false;
                                    } else {
                                        d.disabled = !d.disabled;
                                        if (data.every(function (series) {
                                                return series.disabled;
                                            })) {
                                            data.forEach(function (series) {
                                                series.disabled = false;
                                            });
                                        }
                                    }
                                } else if (vers == 'furious') {
                                    if (expanded) {
                                        d.disengaged = !d.disengaged;
                                        d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;
                                        d.disabled = d.disengaged || d.userDisabled;
                                    } else if (!expanded) {
                                        d.disabled = !d.disabled;
                                        d.userDisabled = d.disabled;
                                        var engaged = data.filter(function (d) {
                                            return !d.disengaged;
                                        });
                                        if (engaged.every(function (series) {
                                                return series.userDisabled;
                                            })) {
                                            data.forEach(function (series) {
                                                series.disabled = series.userDisabled = false;
                                            });
                                        }
                                    }
                                }
                                dispatch.stateChange({
                                    disabled: data.map(function (d) {
                                        return !!d.disabled;
                                    }),
                                    disengaged: data.map(function (d) {
                                        return !!d.disengaged;
                                    })
                                });
                            }
                        }).on('dblclick', function (d, i) {
                            if (vers == 'furious' && expanded)
                                return;
                            dispatch.legendDblclick(d, i);
                            if (updateState) {
                                var data = series.data();
                                data.forEach(function (series) {
                                    series.disabled = true;
                                    if (vers == 'furious')
                                        series.userDisabled = series.disabled;
                                });
                                d.disabled = false;
                                if (vers == 'furious')
                                    d.userDisabled = d.disabled;
                                dispatch.stateChange({
                                    disabled: data.map(function (d) {
                                        return !!d.disabled;
                                    })
                                });
                            }
                        });
                        series.classed('nv-disabled', function (d) {
                            return d.userDisabled;
                        });
                        series.exit().remove();
                        seriesText.attr('fill', setTextColor).text(getKey);
                        var versPadding;
                        switch (vers) {
                        case 'furious':
                            versPadding = 23;
                            break;
                        case 'classic':
                            versPadding = 20;
                        }
                        if (align) {
                            var seriesWidths = [];
                            series.each(function (d, i) {
                                var legendText;
                                if (getKey(d) && getKey(d).length > maxKeyLength) {
                                    var trimmedKey = getKey(d).substring(0, maxKeyLength);
                                    legendText = d3.select(this).select('text').text(trimmedKey + '...');
                                    d3.select(this).append('svg:title').text(getKey(d));
                                } else {
                                    legendText = d3.select(this).select('text');
                                }
                                var nodeTextLength;
                                try {
                                    nodeTextLength = legendText.node().getComputedTextLength();
                                    if (nodeTextLength <= 0)
                                        throw Error();
                                } catch (e) {
                                    nodeTextLength = nv.utils.calcApproxTextWidth(legendText);
                                }
                                seriesWidths.push(nodeTextLength + padding);
                            });
                            var seriesPerRow = 0;
                            var legendWidth = 0;
                            var columnWidths = [];
                            while (legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {
                                columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];
                                legendWidth += seriesWidths[seriesPerRow++];
                            }
                            if (seriesPerRow === 0)
                                seriesPerRow = 1;
                            while (legendWidth > availableWidth && seriesPerRow > 1) {
                                columnWidths = [];
                                seriesPerRow--;
                                for (var k = 0; k < seriesWidths.length; k++) {
                                    if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0))
                                        columnWidths[k % seriesPerRow] = seriesWidths[k];
                                }
                                legendWidth = columnWidths.reduce(function (prev, cur, index, array) {
                                    return prev + cur;
                                });
                            }
                            var xPositions = [];
                            for (var i = 0, curX = 0; i < seriesPerRow; i++) {
                                xPositions[i] = curX;
                                curX += columnWidths[i];
                            }
                            series.attr('transform', function (d, i) {
                                return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';
                            });
                            if (rightAlign) {
                                g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');
                            } else {
                                g.attr('transform', 'translate(0' + ',' + margin.top + ')');
                            }
                            height = margin.top + margin.bottom + Math.ceil(seriesWidths.length / seriesPerRow) * versPadding;
                        } else {
                            var ypos = 5, newxpos = 5, maxwidth = 0, xpos;
                            series.attr('transform', function (d, i) {
                                var length = d3.select(this).select('text').node().getComputedTextLength() + padding;
                                xpos = newxpos;
                                if (width < margin.left + margin.right + xpos + length) {
                                    newxpos = xpos = 5;
                                    ypos += versPadding;
                                }
                                newxpos += length;
                                if (newxpos > maxwidth)
                                    maxwidth = newxpos;
                                return 'translate(' + xpos + ',' + ypos + ')';
                            });
                            g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');
                            height = margin.top + margin.bottom + ypos + 15;
                        }
                        if (vers == 'furious') {
                            seriesShape.attr('width', function (d, i) {
                                return seriesText[0][i].getComputedTextLength() + 27;
                            }).attr('height', 18).attr('y', -9).attr('x', -15);
                        }
                        seriesShape.style('fill', setBGColor).style('stroke', function (d, i) {
                            return d.color || color(d, i);
                        });
                    });
                    function setTextColor(d, i) {
                        if (vers != 'furious')
                            return '#000';
                        if (expanded) {
                            return d.disengaged ? color(d, i) : '#fff';
                        } else if (!expanded) {
                            return !!d.disabled ? color(d, i) : '#fff';
                        }
                    }
                    function setBGColor(d, i) {
                        if (expanded && vers == 'furious') {
                            return d.disengaged ? '#fff' : color(d, i);
                        } else {
                            return !!d.disabled ? '#fff' : color(d, i);
                        }
                    }
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    key: {
                        get: function () {
                            return getKey;
                        },
                        set: function (_) {
                            getKey = _;
                        }
                    },
                    align: {
                        get: function () {
                            return align;
                        },
                        set: function (_) {
                            align = _;
                        }
                    },
                    rightAlign: {
                        get: function () {
                            return rightAlign;
                        },
                        set: function (_) {
                            rightAlign = _;
                        }
                    },
                    maxKeyLength: {
                        get: function () {
                            return maxKeyLength;
                        },
                        set: function (_) {
                            maxKeyLength = _;
                        }
                    },
                    padding: {
                        get: function () {
                            return padding;
                        },
                        set: function (_) {
                            padding = _;
                        }
                    },
                    updateState: {
                        get: function () {
                            return updateState;
                        },
                        set: function (_) {
                            updateState = _;
                        }
                    },
                    radioButtonMode: {
                        get: function () {
                            return radioButtonMode;
                        },
                        set: function (_) {
                            radioButtonMode = _;
                        }
                    },
                    expanded: {
                        get: function () {
                            return expanded;
                        },
                        set: function (_) {
                            expanded = _;
                        }
                    },
                    vers: {
                        get: function () {
                            return vers;
                        },
                        set: function (_) {
                            vers = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.historicalBar = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = null, height = null, id = Math.floor(Math.random() * 10000), container = null, x = d3.scale.linear(), y = d3.scale.linear(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, forceX = [], forceY = [0], padData = false, clipEdge = true, color = nv.utils.defaultColor(), xDomain, yDomain, xRange, yRange, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'), interactive = true;
                var renderWatch = nv.utils.renderWatch(dispatch, 0);
                function chart(selection) {
                    selection.each(function (data) {
                        renderWatch.reset();
                        container = d3.select(this);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        nv.utils.initSVG(container);
                        x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX)));
                        if (padData)
                            x.range(xRange || [
                                availableWidth * 0.5 / data[0].values.length,
                                availableWidth * (data[0].values.length - 0.5) / data[0].values.length
                            ]);
                        else
                            x.range(xRange || [
                                0,
                                availableWidth
                            ]);
                        y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY))).range(yRange || [
                            availableHeight,
                            0
                        ]);
                        if (x.domain()[0] === x.domain()[1])
                            x.domain()[0] ? x.domain([
                                x.domain()[0] - x.domain()[0] * 0.01,
                                x.domain()[1] + x.domain()[1] * 0.01
                            ]) : x.domain([
                                -1,
                                1
                            ]);
                        if (y.domain()[0] === y.domain()[1])
                            y.domain()[0] ? y.domain([
                                y.domain()[0] + y.domain()[0] * 0.01,
                                y.domain()[1] - y.domain()[1] * 0.01
                            ]) : y.domain([
                                -1,
                                1
                            ]);
                        var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-bars');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        container.on('click', function (d, i) {
                            dispatch.chartClick({
                                data: d,
                                index: i,
                                pos: d3.event,
                                id: id
                            });
                        });
                        defsEnter.append('clipPath').attr('id', 'nv-chart-clip-path-' + id).append('rect');
                        wrap.select('#nv-chart-clip-path-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
                        g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
                        var bars = wrap.select('.nv-bars').selectAll('.nv-bar').data(function (d) {
                            return d;
                        }, function (d, i) {
                            return getX(d, i);
                        });
                        bars.exit().remove();
                        bars.enter().append('rect').attr('x', 0).attr('y', function (d, i) {
                            return nv.utils.NaNtoZero(y(Math.max(0, getY(d, i))));
                        }).attr('height', function (d, i) {
                            return nv.utils.NaNtoZero(Math.abs(y(getY(d, i)) - y(0)));
                        }).attr('transform', function (d, i) {
                            return 'translate(' + (x(getX(d, i)) - availableWidth / data[0].values.length * 0.45) + ',0)';
                        }).on('mouseover', function (d, i) {
                            if (!interactive)
                                return;
                            d3.select(this).classed('hover', true);
                            dispatch.elementMouseover({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            if (!interactive)
                                return;
                            d3.select(this).classed('hover', false);
                            dispatch.elementMouseout({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mousemove', function (d, i) {
                            if (!interactive)
                                return;
                            dispatch.elementMousemove({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('click', function (d, i) {
                            if (!interactive)
                                return;
                            dispatch.elementClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                            d3.event.stopPropagation();
                        }).on('dblclick', function (d, i) {
                            if (!interactive)
                                return;
                            dispatch.elementDblClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                            d3.event.stopPropagation();
                        });
                        bars.attr('fill', function (d, i) {
                            return color(d, i);
                        }).attr('class', function (d, i, j) {
                            return (getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i;
                        }).watchTransition(renderWatch, 'bars').attr('transform', function (d, i) {
                            return 'translate(' + (x(getX(d, i)) - availableWidth / data[0].values.length * 0.45) + ',0)';
                        }).attr('width', availableWidth / data[0].values.length * 0.9);
                        bars.watchTransition(renderWatch, 'bars').attr('y', function (d, i) {
                            var rval = getY(d, i) < 0 ? y(0) : y(0) - y(getY(d, i)) < 1 ? y(0) - 1 : y(getY(d, i));
                            return nv.utils.NaNtoZero(rval);
                        }).attr('height', function (d, i) {
                            return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d, i)) - y(0)), 1));
                        });
                    });
                    renderWatch.renderEnd('historicalBar immediate');
                    return chart;
                }
                chart.highlightPoint = function (pointIndex, isHoverOver) {
                    container.select('.nv-bars .nv-bar-0-' + pointIndex).classed('hover', isHoverOver);
                };
                chart.clearHighlights = function () {
                    container.select('.nv-bars .nv-bar.hover').classed('hover', false);
                };
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    forceX: {
                        get: function () {
                            return forceX;
                        },
                        set: function (_) {
                            forceX = _;
                        }
                    },
                    forceY: {
                        get: function () {
                            return forceY;
                        },
                        set: function (_) {
                            forceY = _;
                        }
                    },
                    padData: {
                        get: function () {
                            return padData;
                        },
                        set: function (_) {
                            padData = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    clipEdge: {
                        get: function () {
                            return clipEdge;
                        },
                        set: function (_) {
                            clipEdge = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    interactive: {
                        get: function () {
                            return interactive;
                        },
                        set: function (_) {
                            interactive = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.historicalBarChart = function (bar_model) {
                'use strict';
                var bars = bar_model || nv.models.historicalBar(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), interactiveLayer = nv.interactiveGuideline(), tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 90,
                        bottom: 50,
                        left: 90
                    }, color = nv.utils.defaultColor(), width = null, height = null, showLegend = false, showXAxis = true, showYAxis = true, rightAlignYAxis = false, useInteractiveGuideline = false, x, y, state = {}, defaultState = null, noData = null, dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd'), transitionDuration = 250;
                xAxis.orient('bottom').tickPadding(7);
                yAxis.orient(rightAlignYAxis ? 'right' : 'left');
                tooltip.duration(0).headerEnabled(false).valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                }).headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                var renderWatch = nv.utils.renderWatch(dispatch, 0);
                function chart(selection) {
                    selection.each(function (data) {
                        renderWatch.reset();
                        renderWatch.models(bars);
                        if (showXAxis)
                            renderWatch.models(xAxis);
                        if (showYAxis)
                            renderWatch.models(yAxis);
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            container.transition().duration(transitionDuration).call(chart);
                        };
                        chart.container = this;
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = bars.xScale();
                        y = bars.yScale();
                        var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y nv-axis');
                        gEnter.append('g').attr('class', 'nv-barsWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        gEnter.append('g').attr('class', 'nv-interactive');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            legend.width(availableWidth);
                            g.select('.nv-legendWrap').datum(data).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            wrap.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        if (rightAlignYAxis) {
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
                        }
                        if (useInteractiveGuideline) {
                            interactiveLayer.width(availableWidth).height(availableHeight).margin({
                                left: margin.left,
                                top: margin.top
                            }).svgContainer(container).xScale(x);
                            wrap.select('.nv-interactive').call(interactiveLayer);
                        }
                        bars.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
                            return d.color || color(d, i);
                        }).filter(function (d, i) {
                            return !data[i].disabled;
                        }));
                        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
                            return !d.disabled;
                        }));
                        barsWrap.transition().call(bars);
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
                            g.select('.nv-x.nv-axis').transition().call(xAxis);
                        }
                        if (showYAxis) {
                            yAxis.scale(y)._ticks(nv.utils.calcTicksY(availableHeight / 36, data)).tickSize(-availableWidth, 0);
                            g.select('.nv-y.nv-axis').transition().call(yAxis);
                        }
                        interactiveLayer.dispatch.on('elementMousemove', function (e) {
                            bars.clearHighlights();
                            var singlePoint, pointIndex, pointXLocation, allData = [];
                            data.filter(function (series, i) {
                                series.seriesIndex = i;
                                return !series.disabled;
                            }).forEach(function (series, i) {
                                pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
                                bars.highlightPoint(pointIndex, true);
                                var point = series.values[pointIndex];
                                if (point === undefined)
                                    return;
                                if (singlePoint === undefined)
                                    singlePoint = point;
                                if (pointXLocation === undefined)
                                    pointXLocation = chart.xScale()(chart.x()(point, pointIndex));
                                allData.push({
                                    key: series.key,
                                    value: chart.y()(point, pointIndex),
                                    color: color(series, series.seriesIndex),
                                    data: series.values[pointIndex]
                                });
                            });
                            var xValue = xAxis.tickFormat()(chart.x()(singlePoint, pointIndex));
                            interactiveLayer.tooltip.chartContainer(that.parentNode).valueFormatter(function (d, i) {
                                return yAxis.tickFormat()(d);
                            }).data({
                                value: xValue,
                                index: pointIndex,
                                series: allData
                            })();
                            interactiveLayer.renderGuideLine(pointXLocation);
                        });
                        interactiveLayer.dispatch.on('elementMouseout', function (e) {
                            dispatch.tooltipHide();
                            bars.clearHighlights();
                        });
                        legend.dispatch.on('legendClick', function (d, i) {
                            d.disabled = !d.disabled;
                            if (!data.filter(function (d) {
                                    return !d.disabled;
                                }).length) {
                                data.map(function (d) {
                                    d.disabled = false;
                                    wrap.selectAll('.nv-series').classed('disabled', false);
                                    return d;
                                });
                            }
                            state.disabled = data.map(function (d) {
                                return !!d.disabled;
                            });
                            dispatch.stateChange(state);
                            selection.transition().call(chart);
                        });
                        legend.dispatch.on('legendDblclick', function (d) {
                            data.forEach(function (d) {
                                d.disabled = true;
                            });
                            d.disabled = false;
                            state.disabled = data.map(function (d) {
                                return !!d.disabled;
                            });
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            chart.update();
                        });
                    });
                    renderWatch.renderEnd('historicalBarChart immediate');
                    return chart;
                }
                bars.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt['series'] = {
                        key: chart.x()(evt.data),
                        value: chart.y()(evt.data),
                        color: evt.color
                    };
                    tooltip.data(evt).hidden(false);
                });
                bars.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                bars.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.dispatch = dispatch;
                chart.bars = bars;
                chart.legend = legend;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.interactiveLayer = interactiveLayer;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                            bars.color(color);
                        }
                    },
                    duration: {
                        get: function () {
                            return transitionDuration;
                        },
                        set: function (_) {
                            transitionDuration = _;
                            renderWatch.reset(transitionDuration);
                            yAxis.duration(transitionDuration);
                            xAxis.duration(transitionDuration);
                        }
                    },
                    rightAlignYAxis: {
                        get: function () {
                            return rightAlignYAxis;
                        },
                        set: function (_) {
                            rightAlignYAxis = _;
                            yAxis.orient(_ ? 'right' : 'left');
                        }
                    },
                    useInteractiveGuideline: {
                        get: function () {
                            return useInteractiveGuideline;
                        },
                        set: function (_) {
                            useInteractiveGuideline = _;
                            if (_ === true) {
                                chart.interactive(false);
                            }
                        }
                    }
                });
                nv.utils.inheritOptions(chart, bars);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.ohlcBarChart = function () {
                var chart = nv.models.historicalBarChart(nv.models.ohlcBar());
                chart.useInteractiveGuideline(true);
                chart.interactiveLayer.tooltip.contentGenerator(function (data) {
                    var d = data.series[0].data;
                    var color = d.open < d.close ? '2ca02c' : 'd62728';
                    return '' + '<h3 style="color: #' + color + '">' + data.value + '</h3>' + '<table>' + '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' + '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' + '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' + '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' + '</table>';
                });
                return chart;
            };
            nv.models.candlestickBarChart = function () {
                var chart = nv.models.historicalBarChart(nv.models.candlestickBar());
                chart.useInteractiveGuideline(true);
                chart.interactiveLayer.tooltip.contentGenerator(function (data) {
                    var d = data.series[0].data;
                    var color = d.open < d.close ? '2ca02c' : 'd62728';
                    return '' + '<h3 style="color: #' + color + '">' + data.value + '</h3>' + '<table>' + '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' + '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' + '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' + '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' + '</table>';
                });
                return chart;
            };
            nv.models.legend = function () {
                'use strict';
                var margin = {
                        top: 5,
                        right: 0,
                        bottom: 5,
                        left: 0
                    }, width = 400, height = 20, getKey = function (d) {
                        return d.key;
                    }, color = nv.utils.getColor(), maxKeyLength = 20, align = true, padding = 32, rightAlign = true, updateState = true, radioButtonMode = false, expanded = false, dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange'), vers = 'classic';
                function chart(selection) {
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, container = d3.select(this);
                        nv.utils.initSVG(container);
                        var wrap = container.selectAll('g.nv-legend').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');
                        var g = wrap.select('g');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var series = g.selectAll('.nv-series').data(function (d) {
                            if (vers != 'furious')
                                return d;
                            return d.filter(function (n) {
                                return expanded ? true : !n.disengaged;
                            });
                        });
                        var seriesEnter = series.enter().append('g').attr('class', 'nv-series');
                        var seriesShape;
                        var versPadding;
                        switch (vers) {
                        case 'furious':
                            versPadding = 23;
                            break;
                        case 'classic':
                            versPadding = 20;
                        }
                        if (vers == 'classic') {
                            seriesEnter.append('circle').style('stroke-width', 2).attr('class', 'nv-legend-symbol').attr('r', 5);
                            seriesShape = series.select('.nv-legend-symbol');
                        } else if (vers == 'furious') {
                            seriesEnter.append('rect').style('stroke-width', 2).attr('class', 'nv-legend-symbol').attr('rx', 3).attr('ry', 3);
                            seriesShape = series.select('.nv-legend-symbol');
                            seriesEnter.append('g').attr('class', 'nv-check-box').property('innerHTML', '<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>').attr('transform', 'translate(-10,-8)scale(0.5)');
                            var seriesCheckbox = series.select('.nv-check-box');
                            seriesCheckbox.each(function (d, i) {
                                d3.select(this).selectAll('path').attr('stroke', setTextColor(d, i));
                            });
                        }
                        seriesEnter.append('text').attr('text-anchor', 'start').attr('class', 'nv-legend-text').attr('dy', '.32em').attr('dx', '8');
                        var seriesText = series.select('text.nv-legend-text');
                        series.on('mouseover', function (d, i) {
                            dispatch.legendMouseover(d, i);
                        }).on('mouseout', function (d, i) {
                            dispatch.legendMouseout(d, i);
                        }).on('click', function (d, i) {
                            dispatch.legendClick(d, i);
                            var data = series.data();
                            if (updateState) {
                                if (vers == 'classic') {
                                    if (radioButtonMode) {
                                        data.forEach(function (series) {
                                            series.disabled = true;
                                        });
                                        d.disabled = false;
                                    } else {
                                        d.disabled = !d.disabled;
                                        if (data.every(function (series) {
                                                return series.disabled;
                                            })) {
                                            data.forEach(function (series) {
                                                series.disabled = false;
                                            });
                                        }
                                    }
                                } else if (vers == 'furious') {
                                    if (expanded) {
                                        d.disengaged = !d.disengaged;
                                        d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;
                                        d.disabled = d.disengaged || d.userDisabled;
                                    } else if (!expanded) {
                                        d.disabled = !d.disabled;
                                        d.userDisabled = d.disabled;
                                        var engaged = data.filter(function (d) {
                                            return !d.disengaged;
                                        });
                                        if (engaged.every(function (series) {
                                                return series.userDisabled;
                                            })) {
                                            data.forEach(function (series) {
                                                series.disabled = series.userDisabled = false;
                                            });
                                        }
                                    }
                                }
                                dispatch.stateChange({
                                    disabled: data.map(function (d) {
                                        return !!d.disabled;
                                    }),
                                    disengaged: data.map(function (d) {
                                        return !!d.disengaged;
                                    })
                                });
                            }
                        }).on('dblclick', function (d, i) {
                            if (vers == 'furious' && expanded)
                                return;
                            dispatch.legendDblclick(d, i);
                            if (updateState) {
                                var data = series.data();
                                data.forEach(function (series) {
                                    series.disabled = true;
                                    if (vers == 'furious')
                                        series.userDisabled = series.disabled;
                                });
                                d.disabled = false;
                                if (vers == 'furious')
                                    d.userDisabled = d.disabled;
                                dispatch.stateChange({
                                    disabled: data.map(function (d) {
                                        return !!d.disabled;
                                    })
                                });
                            }
                        });
                        series.classed('nv-disabled', function (d) {
                            return d.userDisabled;
                        });
                        series.exit().remove();
                        seriesText.attr('fill', setTextColor).text(getKey);
                        var legendWidth = 0;
                        if (align) {
                            var seriesWidths = [];
                            series.each(function (d, i) {
                                var legendText;
                                if (getKey(d) && getKey(d).length > maxKeyLength) {
                                    var trimmedKey = getKey(d).substring(0, maxKeyLength);
                                    legendText = d3.select(this).select('text').text(trimmedKey + '...');
                                    d3.select(this).append('svg:title').text(getKey(d));
                                } else {
                                    legendText = d3.select(this).select('text');
                                }
                                var nodeTextLength;
                                try {
                                    nodeTextLength = legendText.node().getComputedTextLength();
                                    if (nodeTextLength <= 0)
                                        throw Error();
                                } catch (e) {
                                    nodeTextLength = nv.utils.calcApproxTextWidth(legendText);
                                }
                                seriesWidths.push(nodeTextLength + padding);
                            });
                            var seriesPerRow = 0;
                            var columnWidths = [];
                            legendWidth = 0;
                            while (legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {
                                columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];
                                legendWidth += seriesWidths[seriesPerRow++];
                            }
                            if (seriesPerRow === 0)
                                seriesPerRow = 1;
                            while (legendWidth > availableWidth && seriesPerRow > 1) {
                                columnWidths = [];
                                seriesPerRow--;
                                for (var k = 0; k < seriesWidths.length; k++) {
                                    if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0))
                                        columnWidths[k % seriesPerRow] = seriesWidths[k];
                                }
                                legendWidth = columnWidths.reduce(function (prev, cur, index, array) {
                                    return prev + cur;
                                });
                            }
                            var xPositions = [];
                            for (var i = 0, curX = 0; i < seriesPerRow; i++) {
                                xPositions[i] = curX;
                                curX += columnWidths[i];
                            }
                            series.attr('transform', function (d, i) {
                                return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';
                            });
                            if (rightAlign) {
                                g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');
                            } else {
                                g.attr('transform', 'translate(0' + ',' + margin.top + ')');
                            }
                            height = margin.top + margin.bottom + Math.ceil(seriesWidths.length / seriesPerRow) * versPadding;
                        } else {
                            var ypos = 5, newxpos = 5, maxwidth = 0, xpos;
                            series.attr('transform', function (d, i) {
                                var length = d3.select(this).select('text').node().getComputedTextLength() + padding;
                                xpos = newxpos;
                                if (width < margin.left + margin.right + xpos + length) {
                                    newxpos = xpos = 5;
                                    ypos += versPadding;
                                }
                                newxpos += length;
                                if (newxpos > maxwidth)
                                    maxwidth = newxpos;
                                if (legendWidth < xpos + maxwidth) {
                                    legendWidth = xpos + maxwidth;
                                }
                                return 'translate(' + xpos + ',' + ypos + ')';
                            });
                            g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');
                            height = margin.top + margin.bottom + ypos + 15;
                        }
                        if (vers == 'furious') {
                            seriesShape.attr('width', function (d, i) {
                                return seriesText[0][i].getComputedTextLength() + 27;
                            }).attr('height', 18).attr('y', -9).attr('x', -15);
                            gEnter.insert('rect', ':first-child').attr('class', 'nv-legend-bg').attr('fill', '#eee').attr('opacity', 0);
                            var seriesBG = g.select('.nv-legend-bg');
                            seriesBG.transition().duration(300).attr('x', -versPadding).attr('width', legendWidth + versPadding - 12).attr('height', height + 10).attr('y', -margin.top - 10).attr('opacity', expanded ? 1 : 0);
                        }
                        seriesShape.style('fill', setBGColor).style('fill-opacity', setBGOpacity).style('stroke', setBGColor);
                    });
                    function setTextColor(d, i) {
                        if (vers != 'furious')
                            return '#000';
                        if (expanded) {
                            return d.disengaged ? '#000' : '#fff';
                        } else if (!expanded) {
                            if (!d.color)
                                d.color = color(d, i);
                            return !!d.disabled ? d.color : '#fff';
                        }
                    }
                    function setBGColor(d, i) {
                        if (expanded && vers == 'furious') {
                            return d.disengaged ? '#eee' : d.color || color(d, i);
                        } else {
                            return d.color || color(d, i);
                        }
                    }
                    function setBGOpacity(d, i) {
                        if (expanded && vers == 'furious') {
                            return 1;
                        } else {
                            return !!d.disabled ? 0 : 1;
                        }
                    }
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    key: {
                        get: function () {
                            return getKey;
                        },
                        set: function (_) {
                            getKey = _;
                        }
                    },
                    align: {
                        get: function () {
                            return align;
                        },
                        set: function (_) {
                            align = _;
                        }
                    },
                    maxKeyLength: {
                        get: function () {
                            return maxKeyLength;
                        },
                        set: function (_) {
                            maxKeyLength = _;
                        }
                    },
                    rightAlign: {
                        get: function () {
                            return rightAlign;
                        },
                        set: function (_) {
                            rightAlign = _;
                        }
                    },
                    padding: {
                        get: function () {
                            return padding;
                        },
                        set: function (_) {
                            padding = _;
                        }
                    },
                    updateState: {
                        get: function () {
                            return updateState;
                        },
                        set: function (_) {
                            updateState = _;
                        }
                    },
                    radioButtonMode: {
                        get: function () {
                            return radioButtonMode;
                        },
                        set: function (_) {
                            radioButtonMode = _;
                        }
                    },
                    expanded: {
                        get: function () {
                            return expanded;
                        },
                        set: function (_) {
                            expanded = _;
                        }
                    },
                    vers: {
                        get: function () {
                            return vers;
                        },
                        set: function (_) {
                            vers = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.line = function () {
                'use strict';
                var scatter = nv.models.scatter();
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 960, height = 500, container = null, strokeWidth = 1.5, color = nv.utils.defaultColor(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, defined = function (d, i) {
                        return !isNaN(getY(d, i)) && getY(d, i) !== null;
                    }, isArea = function (d) {
                        return d.area;
                    }, clipEdge = false, x, y, interpolate = 'linear', duration = 250, dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd');
                scatter.pointSize(16).pointDomain([
                    16,
                    256
                ]);
                var x0, y0, renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(scatter);
                    selection.each(function (data) {
                        container = d3.select(this);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        nv.utils.initSVG(container);
                        x = scatter.xScale();
                        y = scatter.yScale();
                        x0 = x0 || x;
                        y0 = y0 || y;
                        var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-groups');
                        gEnter.append('g').attr('class', 'nv-scatterWrap');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        scatter.width(availableWidth).height(availableHeight);
                        var scatterWrap = wrap.select('.nv-scatterWrap');
                        scatterWrap.call(scatter);
                        defsEnter.append('clipPath').attr('id', 'nv-edge-clip-' + scatter.id()).append('rect');
                        wrap.select('#nv-edge-clip-' + scatter.id() + ' rect').attr('width', availableWidth).attr('height', availableHeight > 0 ? availableHeight : 0);
                        g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');
                        scatterWrap.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');
                        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
                            return d;
                        }, function (d) {
                            return d.key;
                        });
                        groups.enter().append('g').style('stroke-opacity', 0.000001).style('stroke-width', function (d) {
                            return d.strokeWidth || strokeWidth;
                        }).style('fill-opacity', 0.000001);
                        groups.exit().remove();
                        groups.attr('class', function (d, i) {
                            return (d.classed || '') + ' nv-group nv-series-' + i;
                        }).classed('hover', function (d) {
                            return d.hover;
                        }).style('fill', function (d, i) {
                            return color(d, i);
                        }).style('stroke', function (d, i) {
                            return color(d, i);
                        });
                        groups.watchTransition(renderWatch, 'line: groups').style('stroke-opacity', 1).style('fill-opacity', function (d) {
                            return d.fillOpacity || 0.5;
                        });
                        var areaPaths = groups.selectAll('path.nv-area').data(function (d) {
                            return isArea(d) ? [d] : [];
                        });
                        areaPaths.enter().append('path').attr('class', 'nv-area').attr('d', function (d) {
                            return d3.svg.area().interpolate(interpolate).defined(defined).x(function (d, i) {
                                return nv.utils.NaNtoZero(x0(getX(d, i)));
                            }).y0(function (d, i) {
                                return nv.utils.NaNtoZero(y0(getY(d, i)));
                            }).y1(function (d, i) {
                                return y0(y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0]);
                            }).apply(this, [d.values]);
                        });
                        groups.exit().selectAll('path.nv-area').remove();
                        areaPaths.watchTransition(renderWatch, 'line: areaPaths').attr('d', function (d) {
                            return d3.svg.area().interpolate(interpolate).defined(defined).x(function (d, i) {
                                return nv.utils.NaNtoZero(x(getX(d, i)));
                            }).y0(function (d, i) {
                                return nv.utils.NaNtoZero(y(getY(d, i)));
                            }).y1(function (d, i) {
                                return y(y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0]);
                            }).apply(this, [d.values]);
                        });
                        var linePaths = groups.selectAll('path.nv-line').data(function (d) {
                            return [d.values];
                        });
                        linePaths.enter().append('path').attr('class', 'nv-line').attr('d', d3.svg.line().interpolate(interpolate).defined(defined).x(function (d, i) {
                            return nv.utils.NaNtoZero(x0(getX(d, i)));
                        }).y(function (d, i) {
                            return nv.utils.NaNtoZero(y0(getY(d, i)));
                        }));
                        linePaths.watchTransition(renderWatch, 'line: linePaths').attr('d', d3.svg.line().interpolate(interpolate).defined(defined).x(function (d, i) {
                            return nv.utils.NaNtoZero(x(getX(d, i)));
                        }).y(function (d, i) {
                            return nv.utils.NaNtoZero(y(getY(d, i)));
                        }));
                        x0 = x.copy();
                        y0 = y.copy();
                    });
                    renderWatch.renderEnd('line immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.scatter = scatter;
                scatter.dispatch.on('elementClick', function () {
                    dispatch.elementClick.apply(this, arguments);
                });
                scatter.dispatch.on('elementMouseover', function () {
                    dispatch.elementMouseover.apply(this, arguments);
                });
                scatter.dispatch.on('elementMouseout', function () {
                    dispatch.elementMouseout.apply(this, arguments);
                });
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    defined: {
                        get: function () {
                            return defined;
                        },
                        set: function (_) {
                            defined = _;
                        }
                    },
                    interpolate: {
                        get: function () {
                            return interpolate;
                        },
                        set: function (_) {
                            interpolate = _;
                        }
                    },
                    clipEdge: {
                        get: function () {
                            return clipEdge;
                        },
                        set: function (_) {
                            clipEdge = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            scatter.duration(duration);
                        }
                    },
                    isArea: {
                        get: function () {
                            return isArea;
                        },
                        set: function (_) {
                            isArea = d3.functor(_);
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                            scatter.x(_);
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                            scatter.y(_);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            scatter.color(color);
                        }
                    }
                });
                nv.utils.inheritOptions(chart, scatter);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.lineChart = function () {
                'use strict';
                var lines = nv.models.line(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), interactiveLayer = nv.interactiveGuideline(), tooltip = nv.models.tooltip(), lines2 = nv.models.line(), x2Axis = nv.models.axis(), y2Axis = nv.models.axis(), brush = d3.svg.brush();
                var margin = {
                        top: 30,
                        right: 20,
                        bottom: 50,
                        left: 60
                    }, margin2 = {
                        top: 0,
                        right: 20,
                        bottom: 20,
                        left: 60
                    }, color = nv.utils.defaultColor(), width = null, height = null, showLegend = true, legendPosition = 'top', showXAxis = true, showYAxis = true, rightAlignYAxis = false, useInteractiveGuideline = false, x, y, x2, y2, focusEnable = false, focusShowAxisY = false, focusShowAxisX = true, focusHeight = 50, brushExtent = null, state = nv.utils.state(), defaultState = null, noData = null, dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'brush', 'stateChange', 'changeState', 'renderEnd'), duration = 250;
                xAxis.orient('bottom').tickPadding(7);
                yAxis.orient(rightAlignYAxis ? 'right' : 'left');
                lines.clipEdge(true).duration(0);
                lines2.interactive(false);
                lines2.pointActive(function (d) {
                    return false;
                });
                x2Axis.orient('bottom').tickPadding(5);
                y2Axis.orient(rightAlignYAxis ? 'right' : 'left');
                tooltip.valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                }).headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                interactiveLayer.tooltip.valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                }).headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            })
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.active !== undefined)
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                    };
                };
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(lines);
                    renderWatch.models(lines2);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    if (focusShowAxisX)
                        renderWatch.models(x2Axis);
                    if (focusShowAxisY)
                        renderWatch.models(y2Axis);
                    selection.each(function (data) {
                        var container = d3.select(this);
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight1 = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focusHeight : 0), availableHeight2 = focusHeight - margin2.top - margin2.bottom;
                        chart.update = function () {
                            if (duration === 0) {
                                container.call(chart);
                            } else {
                                container.transition().duration(duration).call(chart);
                            }
                        };
                        chart.container = this;
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = lines.xScale();
                        y = lines.yScale();
                        x2 = lines2.xScale();
                        y2 = lines2.yScale();
                        var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
                        focusEnter.append('g').attr('class', 'nv-background').append('rect');
                        focusEnter.append('g').attr('class', 'nv-x nv-axis');
                        focusEnter.append('g').attr('class', 'nv-y nv-axis');
                        focusEnter.append('g').attr('class', 'nv-linesWrap');
                        focusEnter.append('g').attr('class', 'nv-interactive');
                        var contextEnter = gEnter.append('g').attr('class', 'nv-context');
                        contextEnter.append('g').attr('class', 'nv-background').append('rect');
                        contextEnter.append('g').attr('class', 'nv-x nv-axis');
                        contextEnter.append('g').attr('class', 'nv-y nv-axis');
                        contextEnter.append('g').attr('class', 'nv-linesWrap');
                        contextEnter.append('g').attr('class', 'nv-brushBackground');
                        contextEnter.append('g').attr('class', 'nv-x nv-brush');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            legend.width(availableWidth);
                            g.select('.nv-legendWrap').datum(data).call(legend);
                            if (legendPosition === 'bottom') {
                                wrap.select('.nv-legendWrap').attr('transform', 'translate(0,' + availableHeight1 + ')');
                            } else if (legendPosition === 'top') {
                                if (margin.top != legend.height()) {
                                    margin.top = legend.height();
                                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focusHeight : 0);
                                }
                                wrap.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
                            }
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        if (rightAlignYAxis) {
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
                        }
                        if (useInteractiveGuideline) {
                            interactiveLayer.width(availableWidth).height(availableHeight1).margin({
                                left: margin.left,
                                top: margin.top
                            }).svgContainer(container).xScale(x);
                            wrap.select('.nv-interactive').call(interactiveLayer);
                        }
                        g.select('.nv-focus .nv-background rect').attr('width', availableWidth).attr('height', availableHeight1);
                        lines.width(availableWidth).height(availableHeight1).color(data.map(function (d, i) {
                            return d.color || color(d, i);
                        }).filter(function (d, i) {
                            return !data[i].disabled;
                        }));
                        var linesWrap = g.select('.nv-linesWrap').datum(data.filter(function (d) {
                            return !d.disabled;
                        }));
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight1, 0);
                        }
                        if (showYAxis) {
                            yAxis.scale(y)._ticks(nv.utils.calcTicksY(availableHeight1 / 36, data)).tickSize(-availableWidth, 0);
                        }
                        function updateXAxis() {
                            if (showXAxis) {
                                g.select('.nv-focus .nv-x.nv-axis').transition().duration(duration).call(xAxis);
                            }
                        }
                        function updateYAxis() {
                            if (showYAxis) {
                                g.select('.nv-focus .nv-y.nv-axis').transition().duration(duration).call(yAxis);
                            }
                        }
                        g.select('.nv-focus .nv-x.nv-axis').attr('transform', 'translate(0,' + availableHeight1 + ')');
                        if (!focusEnable) {
                            linesWrap.call(lines);
                            updateXAxis();
                            updateYAxis();
                        } else {
                            lines2.defined(lines.defined()).width(availableWidth).height(availableHeight2).color(data.map(function (d, i) {
                                return d.color || color(d, i);
                            }).filter(function (d, i) {
                                return !data[i].disabled;
                            }));
                            g.select('.nv-context').attr('transform', 'translate(0,' + (availableHeight1 + margin.bottom + margin2.top) + ')').style('display', focusEnable ? 'initial' : 'none');
                            var contextLinesWrap = g.select('.nv-context .nv-linesWrap').datum(data.filter(function (d) {
                                return !d.disabled;
                            }));
                            d3.transition(contextLinesWrap).call(lines2);
                            brush.x(x2).on('brush', function () {
                                onBrush();
                            });
                            if (brushExtent)
                                brush.extent(brushExtent);
                            var brushBG = g.select('.nv-brushBackground').selectAll('g').data([brushExtent || brush.extent()]);
                            var brushBGenter = brushBG.enter().append('g');
                            brushBGenter.append('rect').attr('class', 'left').attr('x', 0).attr('y', 0).attr('height', availableHeight2);
                            brushBGenter.append('rect').attr('class', 'right').attr('x', 0).attr('y', 0).attr('height', availableHeight2);
                            var gBrush = g.select('.nv-x.nv-brush').call(brush);
                            gBrush.selectAll('rect').attr('height', availableHeight2);
                            gBrush.selectAll('.resize').append('path').attr('d', resizePath);
                            onBrush();
                            g.select('.nv-context .nv-background rect').attr('width', availableWidth).attr('height', availableHeight2);
                            if (focusShowAxisX) {
                                x2Axis.scale(x2)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight2, 0);
                                g.select('.nv-context .nv-x.nv-axis').attr('transform', 'translate(0,' + y2.range()[0] + ')');
                                d3.transition(g.select('.nv-context .nv-x.nv-axis')).call(x2Axis);
                            }
                            if (focusShowAxisY) {
                                y2Axis.scale(y2)._ticks(nv.utils.calcTicksY(availableHeight2 / 36, data)).tickSize(-availableWidth, 0);
                                d3.transition(g.select('.nv-context .nv-y.nv-axis')).call(y2Axis);
                            }
                            g.select('.nv-context .nv-x.nv-axis').attr('transform', 'translate(0,' + y2.range()[0] + ')');
                        }
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState)
                                state[key] = newState[key];
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        interactiveLayer.dispatch.on('elementMousemove', function (e) {
                            lines.clearHighlights();
                            var singlePoint, pointIndex, pointXLocation, allData = [];
                            data.filter(function (series, i) {
                                series.seriesIndex = i;
                                return !series.disabled && !series.disableTooltip;
                            }).forEach(function (series, i) {
                                var extent = focusEnable ? brush.empty() ? x2.domain() : brush.extent() : x.domain();
                                var currentValues = series.values.filter(function (d, i) {
                                    return lines.x()(d, i) >= extent[0] && lines.x()(d, i) <= extent[1];
                                });
                                pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());
                                var point = currentValues[pointIndex];
                                var pointYValue = chart.y()(point, pointIndex);
                                if (pointYValue !== null) {
                                    lines.highlightPoint(series.seriesIndex, pointIndex, true);
                                }
                                if (point === undefined)
                                    return;
                                if (singlePoint === undefined)
                                    singlePoint = point;
                                if (pointXLocation === undefined)
                                    pointXLocation = chart.xScale()(chart.x()(point, pointIndex));
                                allData.push({
                                    key: series.key,
                                    value: pointYValue,
                                    color: color(series, series.seriesIndex),
                                    data: point
                                });
                            });
                            if (allData.length > 2) {
                                var yValue = chart.yScale().invert(e.mouseY);
                                var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);
                                var threshold = 0.03 * domainExtent;
                                var indexToHighlight = nv.nearestValueIndex(allData.map(function (d) {
                                    return d.value;
                                }), yValue, threshold);
                                if (indexToHighlight !== null)
                                    allData[indexToHighlight].highlight = true;
                            }
                            var defaultValueFormatter = function (d, i) {
                                return d == null ? 'N/A' : yAxis.tickFormat()(d);
                            };
                            interactiveLayer.tooltip.chartContainer(chart.container.parentNode).valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter).data({
                                value: chart.x()(singlePoint, pointIndex),
                                index: pointIndex,
                                series: allData
                            })();
                            interactiveLayer.renderGuideLine(pointXLocation);
                        });
                        interactiveLayer.dispatch.on('elementClick', function (e) {
                            var pointXLocation, allData = [];
                            data.filter(function (series, i) {
                                series.seriesIndex = i;
                                return !series.disabled;
                            }).forEach(function (series) {
                                var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
                                var point = series.values[pointIndex];
                                if (typeof point === 'undefined')
                                    return;
                                if (typeof pointXLocation === 'undefined')
                                    pointXLocation = chart.xScale()(chart.x()(point, pointIndex));
                                var yPos = chart.yScale()(chart.y()(point, pointIndex));
                                allData.push({
                                    point: point,
                                    pointIndex: pointIndex,
                                    pos: [
                                        pointXLocation,
                                        yPos
                                    ],
                                    seriesIndex: series.seriesIndex,
                                    series: series
                                });
                            });
                            lines.dispatch.elementClick(allData);
                        });
                        interactiveLayer.dispatch.on('elementMouseout', function (e) {
                            lines.clearHighlights();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            chart.update();
                        });
                        function resizePath(d) {
                            var e = +(d == 'e'), x = e ? 1 : -1, y = availableHeight2 / 3;
                            return 'M' + 0.5 * x + ',' + y + 'A6,6 0 0 ' + e + ' ' + 6.5 * x + ',' + (y + 6) + 'V' + (2 * y - 6) + 'A6,6 0 0 ' + e + ' ' + 0.5 * x + ',' + 2 * y + 'Z' + 'M' + 2.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8) + 'M' + 4.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8);
                        }
                        function updateBrushBG() {
                            if (!brush.empty())
                                brush.extent(brushExtent);
                            brushBG.data([brush.empty() ? x2.domain() : brushExtent]).each(function (d, i) {
                                var leftWidth = x2(d[0]) - x.range()[0], rightWidth = availableWidth - x2(d[1]);
                                d3.select(this).select('.left').attr('width', leftWidth < 0 ? 0 : leftWidth);
                                d3.select(this).select('.right').attr('x', x2(d[1])).attr('width', rightWidth < 0 ? 0 : rightWidth);
                            });
                        }
                        function onBrush() {
                            brushExtent = brush.empty() ? null : brush.extent();
                            var extent = brush.empty() ? x2.domain() : brush.extent();
                            if (Math.abs(extent[0] - extent[1]) <= 1) {
                                return;
                            }
                            dispatch.brush({
                                extent: extent,
                                brush: brush
                            });
                            updateBrushBG();
                            var focusLinesWrap = g.select('.nv-focus .nv-linesWrap').datum(data.filter(function (d) {
                                return !d.disabled;
                            }).map(function (d, i) {
                                return {
                                    key: d.key,
                                    area: d.area,
                                    classed: d.classed,
                                    values: d.values.filter(function (d, i) {
                                        return lines.x()(d, i) >= extent[0] && lines.x()(d, i) <= extent[1];
                                    }),
                                    disableTooltip: d.disableTooltip
                                };
                            }));
                            focusLinesWrap.transition().duration(duration).call(lines);
                            updateXAxis();
                            updateYAxis();
                        }
                    });
                    renderWatch.renderEnd('lineChart immediate');
                    return chart;
                }
                lines.dispatch.on('elementMouseover.tooltip', function (evt) {
                    if (!evt.series.disableTooltip) {
                        tooltip.data(evt).hidden(false);
                    }
                });
                lines.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                chart.dispatch = dispatch;
                chart.lines = lines;
                chart.lines2 = lines2;
                chart.legend = legend;
                chart.xAxis = xAxis;
                chart.x2Axis = x2Axis;
                chart.yAxis = yAxis;
                chart.y2Axis = y2Axis;
                chart.interactiveLayer = interactiveLayer;
                chart.tooltip = tooltip;
                chart.state = state;
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    legendPosition: {
                        get: function () {
                            return legendPosition;
                        },
                        set: function (_) {
                            legendPosition = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    focusEnable: {
                        get: function () {
                            return focusEnable;
                        },
                        set: function (_) {
                            focusEnable = _;
                        }
                    },
                    focusHeight: {
                        get: function () {
                            return height2;
                        },
                        set: function (_) {
                            focusHeight = _;
                        }
                    },
                    focusShowAxisX: {
                        get: function () {
                            return focusShowAxisX;
                        },
                        set: function (_) {
                            focusShowAxisX = _;
                        }
                    },
                    focusShowAxisY: {
                        get: function () {
                            return focusShowAxisY;
                        },
                        set: function (_) {
                            focusShowAxisY = _;
                        }
                    },
                    brushExtent: {
                        get: function () {
                            return brushExtent;
                        },
                        set: function (_) {
                            brushExtent = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            lines.duration(duration);
                            xAxis.duration(duration);
                            x2Axis.duration(duration);
                            yAxis.duration(duration);
                            y2Axis.duration(duration);
                        }
                    },
                    focusMargin: {
                        get: function () {
                            return margin2;
                        },
                        set: function (_) {
                            margin2.top = _.top !== undefined ? _.top : margin2.top;
                            margin2.right = _.right !== undefined ? _.right : margin2.right;
                            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;
                            margin2.left = _.left !== undefined ? _.left : margin2.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                            lines.color(color);
                        }
                    },
                    interpolate: {
                        get: function () {
                            return lines.interpolate();
                        },
                        set: function (_) {
                            lines.interpolate(_);
                            lines2.interpolate(_);
                        }
                    },
                    xTickFormat: {
                        get: function () {
                            return xAxis.tickFormat();
                        },
                        set: function (_) {
                            xAxis.tickFormat(_);
                            x2Axis.tickFormat(_);
                        }
                    },
                    yTickFormat: {
                        get: function () {
                            return yAxis.tickFormat();
                        },
                        set: function (_) {
                            yAxis.tickFormat(_);
                            y2Axis.tickFormat(_);
                        }
                    },
                    x: {
                        get: function () {
                            return lines.x();
                        },
                        set: function (_) {
                            lines.x(_);
                            lines2.x(_);
                        }
                    },
                    y: {
                        get: function () {
                            return lines.y();
                        },
                        set: function (_) {
                            lines.y(_);
                            lines2.y(_);
                        }
                    },
                    rightAlignYAxis: {
                        get: function () {
                            return rightAlignYAxis;
                        },
                        set: function (_) {
                            rightAlignYAxis = _;
                            yAxis.orient(rightAlignYAxis ? 'right' : 'left');
                        }
                    },
                    useInteractiveGuideline: {
                        get: function () {
                            return useInteractiveGuideline;
                        },
                        set: function (_) {
                            useInteractiveGuideline = _;
                            if (useInteractiveGuideline) {
                                lines.interactive(false);
                                lines.useVoronoi(false);
                            }
                        }
                    }
                });
                nv.utils.inheritOptions(chart, lines);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.lineWithFocusChart = function () {
                return nv.models.lineChart().margin({ bottom: 30 }).focusEnable(true);
            };
            nv.models.linePlusBarChart = function () {
                'use strict';
                var lines = nv.models.line(), lines2 = nv.models.line(), bars = nv.models.historicalBar(), bars2 = nv.models.historicalBar(), xAxis = nv.models.axis(), x2Axis = nv.models.axis(), y1Axis = nv.models.axis(), y2Axis = nv.models.axis(), y3Axis = nv.models.axis(), y4Axis = nv.models.axis(), legend = nv.models.legend(), brush = d3.svg.brush(), tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 30,
                        bottom: 30,
                        left: 60
                    }, margin2 = {
                        top: 0,
                        right: 30,
                        bottom: 20,
                        left: 60
                    }, width = null, height = null, getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, color = nv.utils.defaultColor(), showLegend = true, focusEnable = true, focusShowAxisY = false, focusShowAxisX = true, focusHeight = 50, extent, brushExtent = null, x, x2, y1, y2, y3, y4, noData = null, dispatch = d3.dispatch('brush', 'stateChange', 'changeState'), transitionDuration = 0, state = nv.utils.state(), defaultState = null, legendLeftAxisHint = ' (left axis)', legendRightAxisHint = ' (right axis)', switchYAxisOrder = false;
                lines.clipEdge(true);
                lines2.interactive(false);
                lines2.pointActive(function (d) {
                    return false;
                });
                xAxis.orient('bottom').tickPadding(5);
                y1Axis.orient('left');
                y2Axis.orient('right');
                x2Axis.orient('bottom').tickPadding(5);
                y3Axis.orient('left');
                y4Axis.orient('right');
                tooltip.headerEnabled(true).headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                var getBarsAxis = function () {
                    return !switchYAxisOrder ? {
                        main: y2Axis,
                        focus: y4Axis
                    } : {
                        main: y1Axis,
                        focus: y3Axis
                    };
                };
                var getLinesAxis = function () {
                    return !switchYAxisOrder ? {
                        main: y1Axis,
                        focus: y3Axis
                    } : {
                        main: y2Axis,
                        focus: y4Axis
                    };
                };
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            })
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.active !== undefined)
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                    };
                };
                var allDisabled = function (data) {
                    return data.every(function (series) {
                        return series.disabled;
                    });
                };
                function chart(selection) {
                    selection.each(function (data) {
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight1 = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focusHeight : 0), availableHeight2 = focusHeight - margin2.top - margin2.bottom;
                        chart.update = function () {
                            container.transition().duration(transitionDuration).call(chart);
                        };
                        chart.container = this;
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        var dataBars = data.filter(function (d) {
                            return !d.disabled && d.bar;
                        });
                        var dataLines = data.filter(function (d) {
                            return !d.bar;
                        });
                        if (dataBars.length && !switchYAxisOrder) {
                            x = bars.xScale();
                        } else {
                            x = lines.xScale();
                        }
                        x2 = x2Axis.scale();
                        y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();
                        y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();
                        y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();
                        y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();
                        var series1 = data.filter(function (d) {
                            return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar);
                        }).map(function (d) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d, i),
                                    y: getY(d, i)
                                };
                            });
                        });
                        var series2 = data.filter(function (d) {
                            return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar);
                        }).map(function (d) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d, i),
                                    y: getY(d, i)
                                };
                            });
                        });
                        x.range([
                            0,
                            availableWidth
                        ]);
                        x2.domain(d3.extent(d3.merge(series1.concat(series2)), function (d) {
                            return d.x;
                        })).range([
                            0,
                            availableWidth
                        ]);
                        var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
                        focusEnter.append('g').attr('class', 'nv-x nv-axis');
                        focusEnter.append('g').attr('class', 'nv-y1 nv-axis');
                        focusEnter.append('g').attr('class', 'nv-y2 nv-axis');
                        focusEnter.append('g').attr('class', 'nv-barsWrap');
                        focusEnter.append('g').attr('class', 'nv-linesWrap');
                        var contextEnter = gEnter.append('g').attr('class', 'nv-context');
                        contextEnter.append('g').attr('class', 'nv-x nv-axis');
                        contextEnter.append('g').attr('class', 'nv-y1 nv-axis');
                        contextEnter.append('g').attr('class', 'nv-y2 nv-axis');
                        contextEnter.append('g').attr('class', 'nv-barsWrap');
                        contextEnter.append('g').attr('class', 'nv-linesWrap');
                        contextEnter.append('g').attr('class', 'nv-brushBackground');
                        contextEnter.append('g').attr('class', 'nv-x nv-brush');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;
                            var legendXPosition = legend.align() ? legendWidth : 0;
                            legend.width(legendWidth);
                            g.select('.nv-legendWrap').datum(data.map(function (series) {
                                series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
                                if (switchYAxisOrder) {
                                    series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);
                                } else {
                                    series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);
                                }
                                return series;
                            })).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;
                            }
                            g.select('.nv-legendWrap').attr('transform', 'translate(' + legendXPosition + ',' + -margin.top + ')');
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');
                        bars2.width(availableWidth).height(availableHeight2).color(data.map(function (d, i) {
                            return d.color || color(d, i);
                        }).filter(function (d, i) {
                            return !data[i].disabled && data[i].bar;
                        }));
                        lines2.width(availableWidth).height(availableHeight2).color(data.map(function (d, i) {
                            return d.color || color(d, i);
                        }).filter(function (d, i) {
                            return !data[i].disabled && !data[i].bar;
                        }));
                        var bars2Wrap = g.select('.nv-context .nv-barsWrap').datum(dataBars.length ? dataBars : [{ values: [] }]);
                        var lines2Wrap = g.select('.nv-context .nv-linesWrap').datum(allDisabled(dataLines) ? [{ values: [] }] : dataLines.filter(function (dataLine) {
                            return !dataLine.disabled;
                        }));
                        g.select('.nv-context').attr('transform', 'translate(0,' + (availableHeight1 + margin.bottom + margin2.top) + ')');
                        bars2Wrap.transition().call(bars2);
                        lines2Wrap.transition().call(lines2);
                        if (focusShowAxisX) {
                            x2Axis._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight2, 0);
                            g.select('.nv-context .nv-x.nv-axis').attr('transform', 'translate(0,' + y3.range()[0] + ')');
                            g.select('.nv-context .nv-x.nv-axis').transition().call(x2Axis);
                        }
                        if (focusShowAxisY) {
                            y3Axis.scale(y3)._ticks(availableHeight2 / 36).tickSize(-availableWidth, 0);
                            y4Axis.scale(y4)._ticks(availableHeight2 / 36).tickSize(dataBars.length ? 0 : -availableWidth, 0);
                            g.select('.nv-context .nv-y3.nv-axis').style('opacity', dataBars.length ? 1 : 0).attr('transform', 'translate(0,' + x2.range()[0] + ')');
                            g.select('.nv-context .nv-y2.nv-axis').style('opacity', dataLines.length ? 1 : 0).attr('transform', 'translate(' + x2.range()[1] + ',0)');
                            g.select('.nv-context .nv-y1.nv-axis').transition().call(y3Axis);
                            g.select('.nv-context .nv-y2.nv-axis').transition().call(y4Axis);
                        }
                        brush.x(x2).on('brush', onBrush);
                        if (brushExtent)
                            brush.extent(brushExtent);
                        var brushBG = g.select('.nv-brushBackground').selectAll('g').data([brushExtent || brush.extent()]);
                        var brushBGenter = brushBG.enter().append('g');
                        brushBGenter.append('rect').attr('class', 'left').attr('x', 0).attr('y', 0).attr('height', availableHeight2);
                        brushBGenter.append('rect').attr('class', 'right').attr('x', 0).attr('y', 0).attr('height', availableHeight2);
                        var gBrush = g.select('.nv-x.nv-brush').call(brush);
                        gBrush.selectAll('rect').attr('height', availableHeight2);
                        gBrush.selectAll('.resize').append('path').attr('d', resizePath);
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState)
                                state[key] = newState[key];
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            chart.update();
                        });
                        function resizePath(d) {
                            var e = +(d == 'e'), x = e ? 1 : -1, y = availableHeight2 / 3;
                            return 'M' + 0.5 * x + ',' + y + 'A6,6 0 0 ' + e + ' ' + 6.5 * x + ',' + (y + 6) + 'V' + (2 * y - 6) + 'A6,6 0 0 ' + e + ' ' + 0.5 * x + ',' + 2 * y + 'Z' + 'M' + 2.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8) + 'M' + 4.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8);
                        }
                        function updateBrushBG() {
                            if (!brush.empty())
                                brush.extent(brushExtent);
                            brushBG.data([brush.empty() ? x2.domain() : brushExtent]).each(function (d, i) {
                                var leftWidth = x2(d[0]) - x2.range()[0], rightWidth = x2.range()[1] - x2(d[1]);
                                d3.select(this).select('.left').attr('width', leftWidth < 0 ? 0 : leftWidth);
                                d3.select(this).select('.right').attr('x', x2(d[1])).attr('width', rightWidth < 0 ? 0 : rightWidth);
                            });
                        }
                        function onBrush() {
                            brushExtent = brush.empty() ? null : brush.extent();
                            extent = brush.empty() ? x2.domain() : brush.extent();
                            dispatch.brush({
                                extent: extent,
                                brush: brush
                            });
                            updateBrushBG();
                            bars.width(availableWidth).height(availableHeight1).color(data.map(function (d, i) {
                                return d.color || color(d, i);
                            }).filter(function (d, i) {
                                return !data[i].disabled && data[i].bar;
                            }));
                            lines.width(availableWidth).height(availableHeight1).color(data.map(function (d, i) {
                                return d.color || color(d, i);
                            }).filter(function (d, i) {
                                return !data[i].disabled && !data[i].bar;
                            }));
                            var focusBarsWrap = g.select('.nv-focus .nv-barsWrap').datum(!dataBars.length ? [{ values: [] }] : dataBars.map(function (d, i) {
                                return {
                                    key: d.key,
                                    values: d.values.filter(function (d, i) {
                                        return bars.x()(d, i) >= extent[0] && bars.x()(d, i) <= extent[1];
                                    })
                                };
                            }));
                            var focusLinesWrap = g.select('.nv-focus .nv-linesWrap').datum(allDisabled(dataLines) ? [{ values: [] }] : dataLines.filter(function (dataLine) {
                                return !dataLine.disabled;
                            }).map(function (d, i) {
                                return {
                                    area: d.area,
                                    fillOpacity: d.fillOpacity,
                                    key: d.key,
                                    values: d.values.filter(function (d, i) {
                                        return lines.x()(d, i) >= extent[0] && lines.x()(d, i) <= extent[1];
                                    })
                                };
                            }));
                            if (dataBars.length && !switchYAxisOrder) {
                                x = bars.xScale();
                            } else {
                                x = lines.xScale();
                            }
                            xAxis.scale(x)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight1, 0);
                            xAxis.domain([
                                Math.ceil(extent[0]),
                                Math.floor(extent[1])
                            ]);
                            g.select('.nv-x.nv-axis').transition().duration(transitionDuration).call(xAxis);
                            focusBarsWrap.transition().duration(transitionDuration).call(bars);
                            focusLinesWrap.transition().duration(transitionDuration).call(lines);
                            g.select('.nv-focus .nv-x.nv-axis').attr('transform', 'translate(0,' + y1.range()[0] + ')');
                            y1Axis.scale(y1)._ticks(nv.utils.calcTicksY(availableHeight1 / 36, data)).tickSize(-availableWidth, 0);
                            y2Axis.scale(y2)._ticks(nv.utils.calcTicksY(availableHeight1 / 36, data));
                            if (!switchYAxisOrder) {
                                y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);
                            } else {
                                y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);
                            }
                            var barsOpacity = dataBars.length ? 1 : 0;
                            var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;
                            var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;
                            var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;
                            g.select('.nv-focus .nv-y1.nv-axis').style('opacity', y1Opacity);
                            g.select('.nv-focus .nv-y2.nv-axis').style('opacity', y2Opacity).attr('transform', 'translate(' + x.range()[1] + ',0)');
                            g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration).call(y1Axis);
                            g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration).call(y2Axis);
                        }
                        onBrush();
                    });
                    return chart;
                }
                lines.dispatch.on('elementMouseover.tooltip', function (evt) {
                    tooltip.duration(100).valueFormatter(function (d, i) {
                        return getLinesAxis().main.tickFormat()(d, i);
                    }).data(evt).hidden(false);
                });
                lines.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                bars.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt.value = chart.x()(evt.data);
                    evt['series'] = {
                        value: chart.y()(evt.data),
                        color: evt.color
                    };
                    tooltip.duration(0).valueFormatter(function (d, i) {
                        return getBarsAxis().main.tickFormat()(d, i);
                    }).data(evt).hidden(false);
                });
                bars.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                bars.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.dispatch = dispatch;
                chart.legend = legend;
                chart.lines = lines;
                chart.lines2 = lines2;
                chart.bars = bars;
                chart.bars2 = bars2;
                chart.xAxis = xAxis;
                chart.x2Axis = x2Axis;
                chart.y1Axis = y1Axis;
                chart.y2Axis = y2Axis;
                chart.y3Axis = y3Axis;
                chart.y4Axis = y4Axis;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    brushExtent: {
                        get: function () {
                            return brushExtent;
                        },
                        set: function (_) {
                            brushExtent = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    focusEnable: {
                        get: function () {
                            return focusEnable;
                        },
                        set: function (_) {
                            focusEnable = _;
                        }
                    },
                    focusHeight: {
                        get: function () {
                            return focusHeight;
                        },
                        set: function (_) {
                            focusHeight = _;
                        }
                    },
                    focusShowAxisX: {
                        get: function () {
                            return focusShowAxisX;
                        },
                        set: function (_) {
                            focusShowAxisX = _;
                        }
                    },
                    focusShowAxisY: {
                        get: function () {
                            return focusShowAxisY;
                        },
                        set: function (_) {
                            focusShowAxisY = _;
                        }
                    },
                    legendLeftAxisHint: {
                        get: function () {
                            return legendLeftAxisHint;
                        },
                        set: function (_) {
                            legendLeftAxisHint = _;
                        }
                    },
                    legendRightAxisHint: {
                        get: function () {
                            return legendRightAxisHint;
                        },
                        set: function (_) {
                            legendRightAxisHint = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    focusMargin: {
                        get: function () {
                            return margin2;
                        },
                        set: function (_) {
                            margin2.top = _.top !== undefined ? _.top : margin2.top;
                            margin2.right = _.right !== undefined ? _.right : margin2.right;
                            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;
                            margin2.left = _.left !== undefined ? _.left : margin2.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return transitionDuration;
                        },
                        set: function (_) {
                            transitionDuration = _;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                            lines.x(_);
                            lines2.x(_);
                            bars.x(_);
                            bars2.x(_);
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                            lines.y(_);
                            lines2.y(_);
                            bars.y(_);
                            bars2.y(_);
                        }
                    },
                    switchYAxisOrder: {
                        get: function () {
                            return switchYAxisOrder;
                        },
                        set: function (_) {
                            if (switchYAxisOrder !== _) {
                                var y1 = y1Axis;
                                y1Axis = y2Axis;
                                y2Axis = y1;
                                var y3 = y3Axis;
                                y3Axis = y4Axis;
                                y4Axis = y3;
                            }
                            switchYAxisOrder = _;
                            y1Axis.orient('left');
                            y2Axis.orient('right');
                            y3Axis.orient('left');
                            y4Axis.orient('right');
                        }
                    }
                });
                nv.utils.inheritOptions(chart, lines);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.multiBar = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 960, height = 500, x = d3.scale.ordinal(), y = d3.scale.linear(), id = Math.floor(Math.random() * 10000), container = null, getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, forceY = [0], clipEdge = true, stacked = false, stackOffset = 'zero', color = nv.utils.defaultColor(), hideable = false, barColor = null, disabled, duration = 500, xDomain, yDomain, xRange, yRange, groupSpacing = 0.1, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd');
                var x0, y0, renderWatch = nv.utils.renderWatch(dispatch, duration);
                var last_datalength = 0;
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        var nonStackableCount = 0;
                        var endFn = function (d, i) {
                            if (d.series === data.length - 1 && i === data[0].values.length - 1)
                                return true;
                            return false;
                        };
                        if (hideable && data.length)
                            hideable = [{
                                    values: data[0].values.map(function (d) {
                                        return {
                                            x: d.x,
                                            y: 0,
                                            series: d.series,
                                            size: 0.01
                                        };
                                    })
                                }];
                        if (stacked) {
                            var parsed = d3.layout.stack().offset(stackOffset).values(function (d) {
                                return d.values;
                            }).y(getY)(!data.length && hideable ? hideable : data);
                            parsed.forEach(function (series, i) {
                                if (series.nonStackable) {
                                    data[i].nonStackableSeries = nonStackableCount++;
                                    parsed[i] = data[i];
                                } else {
                                    if (i > 0 && parsed[i - 1].nonStackable) {
                                        parsed[i].values.map(function (d, j) {
                                            d.y0 -= parsed[i - 1].values[j].y;
                                            d.y1 = d.y0 + d.y;
                                        });
                                    }
                                }
                            });
                            data = parsed;
                        }
                        data.forEach(function (series, i) {
                            series.values.forEach(function (point) {
                                point.series = i;
                                point.key = series.key;
                            });
                        });
                        if (stacked && data.length > 0) {
                            data[0].values.map(function (d, i) {
                                var posBase = 0, negBase = 0;
                                data.map(function (d, idx) {
                                    if (!data[idx].nonStackable) {
                                        var f = d.values[i];
                                        f.size = Math.abs(f.y);
                                        if (f.y < 0) {
                                            f.y1 = negBase;
                                            negBase = negBase - f.size;
                                        } else {
                                            f.y1 = f.size + posBase;
                                            posBase = posBase + f.size;
                                        }
                                    }
                                });
                            });
                        }
                        var seriesData = xDomain && yDomain ? [] : data.map(function (d, idx) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d, i),
                                    y: getY(d, i),
                                    y0: d.y0,
                                    y1: d.y1,
                                    idx: idx
                                };
                            });
                        });
                        x.domain(xDomain || d3.merge(seriesData).map(function (d) {
                            return d.x;
                        })).rangeBands(xRange || [
                            0,
                            availableWidth
                        ], groupSpacing);
                        y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function (d) {
                            var domain = d.y;
                            if (stacked && !data[d.idx].nonStackable) {
                                if (d.y > 0) {
                                    domain = d.y1;
                                } else {
                                    domain = d.y1 + d.y;
                                }
                            }
                            return domain;
                        }).concat(forceY))).range(yRange || [
                            availableHeight,
                            0
                        ]);
                        if (x.domain()[0] === x.domain()[1])
                            x.domain()[0] ? x.domain([
                                x.domain()[0] - x.domain()[0] * 0.01,
                                x.domain()[1] + x.domain()[1] * 0.01
                            ]) : x.domain([
                                -1,
                                1
                            ]);
                        if (y.domain()[0] === y.domain()[1])
                            y.domain()[0] ? y.domain([
                                y.domain()[0] + y.domain()[0] * 0.01,
                                y.domain()[1] - y.domain()[1] * 0.01
                            ]) : y.domain([
                                -1,
                                1
                            ]);
                        x0 = x0 || x;
                        y0 = y0 || y;
                        var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-groups');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        defsEnter.append('clipPath').attr('id', 'nv-edge-clip-' + id).append('rect');
                        wrap.select('#nv-edge-clip-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
                        g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
                        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
                            return d;
                        }, function (d, i) {
                            return i;
                        });
                        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
                        var exitTransition = renderWatch.transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration)).attr('y', function (d, i, j) {
                            var yVal = y0(0) || 0;
                            if (stacked) {
                                if (data[d.series] && !data[d.series].nonStackable) {
                                    yVal = y0(d.y0);
                                }
                            }
                            return yVal;
                        }).attr('height', 0).remove();
                        if (exitTransition.delay)
                            exitTransition.delay(function (d, i) {
                                var delay = i * (duration / (last_datalength + 1)) - i;
                                return delay;
                            });
                        groups.attr('class', function (d, i) {
                            return 'nv-group nv-series-' + i;
                        }).classed('hover', function (d) {
                            return d.hover;
                        }).style('fill', function (d, i) {
                            return color(d, i);
                        }).style('stroke', function (d, i) {
                            return color(d, i);
                        });
                        groups.style('stroke-opacity', 1).style('fill-opacity', 0.75);
                        var bars = groups.selectAll('rect.nv-bar').data(function (d) {
                            return hideable && !data.length ? hideable.values : d.values;
                        });
                        bars.exit().remove();
                        var barsEnter = bars.enter().append('rect').attr('class', function (d, i) {
                            return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
                        }).attr('x', function (d, i, j) {
                            return stacked && !data[j].nonStackable ? 0 : j * x.rangeBand() / data.length;
                        }).attr('y', function (d, i, j) {
                            return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0;
                        }).attr('height', 0).attr('width', function (d, i, j) {
                            return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length);
                        }).attr('transform', function (d, i) {
                            return 'translate(' + x(getX(d, i)) + ',0)';
                        });
                        bars.style('fill', function (d, i, j) {
                            return color(d, j, i);
                        }).style('stroke', function (d, i, j) {
                            return color(d, j, i);
                        }).on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true);
                            dispatch.elementMouseover({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false);
                            dispatch.elementMouseout({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mousemove', function (d, i) {
                            dispatch.elementMousemove({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('click', function (d, i) {
                            var element = this;
                            dispatch.elementClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill'),
                                event: d3.event,
                                element: element
                            });
                            d3.event.stopPropagation();
                        }).on('dblclick', function (d, i) {
                            dispatch.elementDblClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                            d3.event.stopPropagation();
                        });
                        bars.attr('class', function (d, i) {
                            return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
                        }).attr('transform', function (d, i) {
                            return 'translate(' + x(getX(d, i)) + ',0)';
                        });
                        if (barColor) {
                            if (!disabled)
                                disabled = data.map(function () {
                                    return true;
                                });
                            bars.style('fill', function (d, i, j) {
                                return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
                                    return i;
                                }).filter(function (d, i) {
                                    return !disabled[i];
                                })[j]).toString();
                            }).style('stroke', function (d, i, j) {
                                return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
                                    return i;
                                }).filter(function (d, i) {
                                    return !disabled[i];
                                })[j]).toString();
                            });
                        }
                        var barSelection = bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration)).delay(function (d, i) {
                            return i * duration / data[0].values.length;
                        });
                        if (stacked) {
                            barSelection.attr('y', function (d, i, j) {
                                var yVal = 0;
                                if (!data[j].nonStackable) {
                                    yVal = y(d.y1);
                                } else {
                                    if (getY(d, i) < 0) {
                                        yVal = y(0);
                                    } else {
                                        if (y(0) - y(getY(d, i)) < -1) {
                                            yVal = y(0) - 1;
                                        } else {
                                            yVal = y(getY(d, i)) || 0;
                                        }
                                    }
                                }
                                return yVal;
                            }).attr('height', function (d, i, j) {
                                if (!data[j].nonStackable) {
                                    return Math.max(Math.abs(y(d.y + d.y0) - y(d.y0)), 0);
                                } else {
                                    return Math.max(Math.abs(y(getY(d, i)) - y(0)), 0) || 0;
                                }
                            }).attr('x', function (d, i, j) {
                                var width = 0;
                                if (data[j].nonStackable) {
                                    width = d.series * x.rangeBand() / data.length;
                                    if (data.length !== nonStackableCount) {
                                        width = data[j].nonStackableSeries * x.rangeBand() / (nonStackableCount * 2);
                                    }
                                }
                                return width;
                            }).attr('width', function (d, i, j) {
                                if (!data[j].nonStackable) {
                                    return x.rangeBand();
                                } else {
                                    var width = x.rangeBand() / nonStackableCount;
                                    if (data.length !== nonStackableCount) {
                                        width = x.rangeBand() / (nonStackableCount * 2);
                                    }
                                    return width;
                                }
                            });
                        } else {
                            barSelection.attr('x', function (d, i) {
                                return d.series * x.rangeBand() / data.length;
                            }).attr('width', x.rangeBand() / data.length).attr('y', function (d, i) {
                                return getY(d, i) < 0 ? y(0) : y(0) - y(getY(d, i)) < 1 ? y(0) - 1 : y(getY(d, i)) || 0;
                            }).attr('height', function (d, i) {
                                return Math.max(Math.abs(y(getY(d, i)) - y(0)), 1) || 0;
                            });
                        }
                        x0 = x.copy();
                        y0 = y.copy();
                        if (data[0] && data[0].values) {
                            last_datalength = data[0].values.length;
                        }
                    });
                    renderWatch.renderEnd('multibar immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    forceY: {
                        get: function () {
                            return forceY;
                        },
                        set: function (_) {
                            forceY = _;
                        }
                    },
                    stacked: {
                        get: function () {
                            return stacked;
                        },
                        set: function (_) {
                            stacked = _;
                        }
                    },
                    stackOffset: {
                        get: function () {
                            return stackOffset;
                        },
                        set: function (_) {
                            stackOffset = _;
                        }
                    },
                    clipEdge: {
                        get: function () {
                            return clipEdge;
                        },
                        set: function (_) {
                            clipEdge = _;
                        }
                    },
                    disabled: {
                        get: function () {
                            return disabled;
                        },
                        set: function (_) {
                            disabled = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    hideable: {
                        get: function () {
                            return hideable;
                        },
                        set: function (_) {
                            hideable = _;
                        }
                    },
                    groupSpacing: {
                        get: function () {
                            return groupSpacing;
                        },
                        set: function (_) {
                            groupSpacing = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    barColor: {
                        get: function () {
                            return barColor;
                        },
                        set: function (_) {
                            barColor = _ ? nv.utils.getColor(_) : null;
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.multiBarChart = function () {
                'use strict';
                var multibar = nv.models.multiBar(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), interactiveLayer = nv.interactiveGuideline(), legend = nv.models.legend(), controls = nv.models.legend(), tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 20,
                        bottom: 50,
                        left: 60
                    }, width = null, height = null, color = nv.utils.defaultColor(), showControls = true, controlLabels = {}, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, reduceXTicks = true, staggerLabels = false, wrapLabels = false, rotateLabels = 0, x, y, state = nv.utils.state(), defaultState = null, noData = null, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd'), controlWidth = function () {
                        return showControls ? 180 : 0;
                    }, duration = 250, useInteractiveGuideline = false;
                state.stacked = false;
                multibar.stacked(false);
                xAxis.orient('bottom').tickPadding(7).showMaxMin(false).tickFormat(function (d) {
                    return d;
                });
                yAxis.orient(rightAlignYAxis ? 'right' : 'left').tickFormat(d3.format(',.1f'));
                tooltip.duration(0).valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                }).headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                controls.updateState(false);
                var renderWatch = nv.utils.renderWatch(dispatch);
                var stacked = false;
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            }),
                            stacked: stacked
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.stacked !== undefined)
                            stacked = state.stacked;
                        if (state.active !== undefined)
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                    };
                };
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(multibar);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    selection.each(function (data) {
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            if (duration === 0)
                                container.call(chart);
                            else
                                container.transition().duration(duration).call(chart);
                        };
                        chart.container = this;
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = multibar.xScale();
                        y = multibar.yScale();
                        var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y nv-axis');
                        gEnter.append('g').attr('class', 'nv-barsWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        gEnter.append('g').attr('class', 'nv-controlsWrap');
                        gEnter.append('g').attr('class', 'nv-interactive');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            legend.width(availableWidth - controlWidth());
                            g.select('.nv-legendWrap').datum(data).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            g.select('.nv-legendWrap').attr('transform', 'translate(' + controlWidth() + ',' + -margin.top + ')');
                        }
                        if (!showControls) {
                            g.select('.nv-controlsWrap').selectAll('*').remove();
                        } else {
                            var controlsData = [
                                {
                                    key: controlLabels.grouped || 'Grouped',
                                    disabled: multibar.stacked()
                                },
                                {
                                    key: controlLabels.stacked || 'Stacked',
                                    disabled: !multibar.stacked()
                                }
                            ];
                            controls.width(controlWidth()).color([
                                '#444',
                                '#444',
                                '#444'
                            ]);
                            g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        if (rightAlignYAxis) {
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
                        }
                        multibar.disabled(data.map(function (series) {
                            return series.disabled;
                        })).width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
                            return d.color || color(d, i);
                        }).filter(function (d, i) {
                            return !data[i].disabled;
                        }));
                        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
                            return !d.disabled;
                        }));
                        barsWrap.call(multibar);
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
                            g.select('.nv-x.nv-axis').call(xAxis);
                            var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');
                            xTicks.selectAll('line, text').style('opacity', 1);
                            if (staggerLabels) {
                                var getTranslate = function (x, y) {
                                    return 'translate(' + x + ',' + y + ')';
                                };
                                var staggerUp = 5, staggerDown = 17;
                                xTicks.selectAll('text').attr('transform', function (d, i, j) {
                                    return getTranslate(0, j % 2 == 0 ? staggerUp : staggerDown);
                                });
                                var totalInBetweenTicks = d3.selectAll('.nv-x.nv-axis .nv-wrap g g text')[0].length;
                                g.selectAll('.nv-x.nv-axis .nv-axisMaxMin text').attr('transform', function (d, i) {
                                    return getTranslate(0, i === 0 || totalInBetweenTicks % 2 !== 0 ? staggerDown : staggerUp);
                                });
                            }
                            if (wrapLabels) {
                                g.selectAll('.tick text').call(nv.utils.wrapTicks, chart.xAxis.rangeBand());
                            }
                            if (reduceXTicks)
                                xTicks.filter(function (d, i) {
                                    return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;
                                }).selectAll('text, line').style('opacity', 0);
                            if (rotateLabels)
                                xTicks.selectAll('.tick text').attr('transform', 'rotate(' + rotateLabels + ' 0,0)').style('text-anchor', rotateLabels > 0 ? 'start' : 'end');
                            g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text').style('opacity', 1);
                        }
                        if (showYAxis) {
                            yAxis.scale(y)._ticks(nv.utils.calcTicksY(availableHeight / 36, data)).tickSize(-availableWidth, 0);
                            g.select('.nv-y.nv-axis').call(yAxis);
                        }
                        if (useInteractiveGuideline) {
                            interactiveLayer.width(availableWidth).height(availableHeight).margin({
                                left: margin.left,
                                top: margin.top
                            }).svgContainer(container).xScale(x);
                            wrap.select('.nv-interactive').call(interactiveLayer);
                        }
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState)
                                state[key] = newState[key];
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        controls.dispatch.on('legendClick', function (d, i) {
                            if (!d.disabled)
                                return;
                            controlsData = controlsData.map(function (s) {
                                s.disabled = true;
                                return s;
                            });
                            d.disabled = false;
                            switch (d.key) {
                            case 'Grouped':
                            case controlLabels.grouped:
                                multibar.stacked(false);
                                break;
                            case 'Stacked':
                            case controlLabels.stacked:
                                multibar.stacked(true);
                                break;
                            }
                            state.stacked = multibar.stacked();
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            if (typeof e.stacked !== 'undefined') {
                                multibar.stacked(e.stacked);
                                state.stacked = e.stacked;
                                stacked = e.stacked;
                            }
                            chart.update();
                        });
                        if (useInteractiveGuideline) {
                            interactiveLayer.dispatch.on('elementMousemove', function (e) {
                                if (e.pointXValue == undefined)
                                    return;
                                var singlePoint, pointIndex, pointXLocation, xValue, allData = [];
                                data.filter(function (series, i) {
                                    series.seriesIndex = i;
                                    return !series.disabled;
                                }).forEach(function (series, i) {
                                    pointIndex = x.domain().indexOf(e.pointXValue);
                                    var point = series.values[pointIndex];
                                    if (point === undefined)
                                        return;
                                    xValue = point.x;
                                    if (singlePoint === undefined)
                                        singlePoint = point;
                                    if (pointXLocation === undefined)
                                        pointXLocation = e.mouseX;
                                    allData.push({
                                        key: series.key,
                                        value: chart.y()(point, pointIndex),
                                        color: color(series, series.seriesIndex),
                                        data: series.values[pointIndex]
                                    });
                                });
                                interactiveLayer.tooltip.chartContainer(that.parentNode).data({
                                    value: xValue,
                                    index: pointIndex,
                                    series: allData
                                })();
                                interactiveLayer.renderGuideLine(pointXLocation);
                            });
                            interactiveLayer.dispatch.on('elementMouseout', function (e) {
                                interactiveLayer.tooltip.hidden(true);
                            });
                        } else {
                            multibar.dispatch.on('elementMouseover.tooltip', function (evt) {
                                evt.value = chart.x()(evt.data);
                                evt['series'] = {
                                    key: evt.data.key,
                                    value: chart.y()(evt.data),
                                    color: evt.color
                                };
                                tooltip.data(evt).hidden(false);
                            });
                            multibar.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            multibar.dispatch.on('elementMousemove.tooltip', function (evt) {
                                tooltip();
                            });
                        }
                    });
                    renderWatch.renderEnd('multibarchart immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.multibar = multibar;
                chart.legend = legend;
                chart.controls = controls;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.state = state;
                chart.tooltip = tooltip;
                chart.interactiveLayer = interactiveLayer;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    showControls: {
                        get: function () {
                            return showControls;
                        },
                        set: function (_) {
                            showControls = _;
                        }
                    },
                    controlLabels: {
                        get: function () {
                            return controlLabels;
                        },
                        set: function (_) {
                            controlLabels = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    reduceXTicks: {
                        get: function () {
                            return reduceXTicks;
                        },
                        set: function (_) {
                            reduceXTicks = _;
                        }
                    },
                    rotateLabels: {
                        get: function () {
                            return rotateLabels;
                        },
                        set: function (_) {
                            rotateLabels = _;
                        }
                    },
                    staggerLabels: {
                        get: function () {
                            return staggerLabels;
                        },
                        set: function (_) {
                            staggerLabels = _;
                        }
                    },
                    wrapLabels: {
                        get: function () {
                            return wrapLabels;
                        },
                        set: function (_) {
                            wrapLabels = !!_;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            multibar.duration(duration);
                            xAxis.duration(duration);
                            yAxis.duration(duration);
                            renderWatch.reset(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                        }
                    },
                    rightAlignYAxis: {
                        get: function () {
                            return rightAlignYAxis;
                        },
                        set: function (_) {
                            rightAlignYAxis = _;
                            yAxis.orient(rightAlignYAxis ? 'right' : 'left');
                        }
                    },
                    useInteractiveGuideline: {
                        get: function () {
                            return useInteractiveGuideline;
                        },
                        set: function (_) {
                            useInteractiveGuideline = _;
                        }
                    },
                    barColor: {
                        get: function () {
                            return multibar.barColor;
                        },
                        set: function (_) {
                            multibar.barColor(_);
                            legend.color(function (d, i) {
                                return d3.rgb('#ccc').darker(i * 1.5).toString();
                            });
                        }
                    }
                });
                nv.utils.inheritOptions(chart, multibar);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.multiBarHorizontal = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 960, height = 500, id = Math.floor(Math.random() * 10000), container = null, x = d3.scale.ordinal(), y = d3.scale.linear(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, getYerr = function (d) {
                        return d.yErr;
                    }, forceY = [0], color = nv.utils.defaultColor(), barColor = null, disabled, stacked = false, showValues = false, showBarLabels = false, valuePadding = 60, groupSpacing = 0.1, valueFormat = d3.format(',.2f'), delay = 1200, xDomain, yDomain, xRange, yRange, duration = 250, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd');
                var x0, y0;
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        if (stacked)
                            data = d3.layout.stack().offset('zero').values(function (d) {
                                return d.values;
                            }).y(getY)(data);
                        data.forEach(function (series, i) {
                            series.values.forEach(function (point) {
                                point.series = i;
                                point.key = series.key;
                            });
                        });
                        if (stacked)
                            data[0].values.map(function (d, i) {
                                var posBase = 0, negBase = 0;
                                data.map(function (d) {
                                    var f = d.values[i];
                                    f.size = Math.abs(f.y);
                                    if (f.y < 0) {
                                        f.y1 = negBase - f.size;
                                        negBase = negBase - f.size;
                                    } else {
                                        f.y1 = posBase;
                                        posBase = posBase + f.size;
                                    }
                                });
                            });
                        var seriesData = xDomain && yDomain ? [] : data.map(function (d) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d, i),
                                    y: getY(d, i),
                                    y0: d.y0,
                                    y1: d.y1
                                };
                            });
                        });
                        x.domain(xDomain || d3.merge(seriesData).map(function (d) {
                            return d.x;
                        })).rangeBands(xRange || [
                            0,
                            availableHeight
                        ], groupSpacing);
                        y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function (d) {
                            return stacked ? d.y > 0 ? d.y1 + d.y : d.y1 : d.y;
                        }).concat(forceY)));
                        if (showValues && !stacked)
                            y.range(yRange || [
                                y.domain()[0] < 0 ? valuePadding : 0,
                                availableWidth - (y.domain()[1] > 0 ? valuePadding : 0)
                            ]);
                        else
                            y.range(yRange || [
                                0,
                                availableWidth
                            ]);
                        x0 = x0 || x;
                        y0 = y0 || d3.scale.linear().domain(y.domain()).range([
                            y(0),
                            y(0)
                        ]);
                        var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-groups');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
                            return d;
                        }, function (d, i) {
                            return i;
                        });
                        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
                        groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001).remove();
                        groups.attr('class', function (d, i) {
                            return 'nv-group nv-series-' + i;
                        }).classed('hover', function (d) {
                            return d.hover;
                        }).style('fill', function (d, i) {
                            return color(d, i);
                        }).style('stroke', function (d, i) {
                            return color(d, i);
                        });
                        groups.watchTransition(renderWatch, 'multibarhorizontal: groups').style('stroke-opacity', 1).style('fill-opacity', 0.75);
                        var bars = groups.selectAll('g.nv-bar').data(function (d) {
                            return d.values;
                        });
                        bars.exit().remove();
                        var barsEnter = bars.enter().append('g').attr('transform', function (d, i, j) {
                            return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : j * x.rangeBand() / data.length + x(getX(d, i))) + ')';
                        });
                        barsEnter.append('rect').attr('width', 0).attr('height', x.rangeBand() / (stacked ? 1 : data.length));
                        bars.on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true);
                            dispatch.elementMouseover({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false);
                            dispatch.elementMouseout({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            dispatch.elementMouseout({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mousemove', function (d, i) {
                            dispatch.elementMousemove({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        }).on('click', function (d, i) {
                            var element = this;
                            dispatch.elementClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill'),
                                event: d3.event,
                                element: element
                            });
                            d3.event.stopPropagation();
                        }).on('dblclick', function (d, i) {
                            dispatch.elementDblClick({
                                data: d,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                            d3.event.stopPropagation();
                        });
                        if (getYerr(data[0], 0)) {
                            barsEnter.append('polyline');
                            bars.select('polyline').attr('fill', 'none').attr('points', function (d, i) {
                                var xerr = getYerr(d, i), mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);
                                xerr = xerr.length ? xerr : [
                                    -Math.abs(xerr),
                                    Math.abs(xerr)
                                ];
                                xerr = xerr.map(function (e) {
                                    return y(e) - y(0);
                                });
                                var a = [
                                    [
                                        xerr[0],
                                        -mid
                                    ],
                                    [
                                        xerr[0],
                                        mid
                                    ],
                                    [
                                        xerr[0],
                                        0
                                    ],
                                    [
                                        xerr[1],
                                        0
                                    ],
                                    [
                                        xerr[1],
                                        -mid
                                    ],
                                    [
                                        xerr[1],
                                        mid
                                    ]
                                ];
                                return a.map(function (path) {
                                    return path.join(',');
                                }).join(' ');
                            }).attr('transform', function (d, i) {
                                var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);
                                return 'translate(' + (getY(d, i) < 0 ? 0 : y(getY(d, i)) - y(0)) + ', ' + mid + ')';
                            });
                        }
                        barsEnter.append('text');
                        if (showValues && !stacked) {
                            bars.select('text').attr('text-anchor', function (d, i) {
                                return getY(d, i) < 0 ? 'end' : 'start';
                            }).attr('y', x.rangeBand() / (data.length * 2)).attr('dy', '.32em').text(function (d, i) {
                                var t = valueFormat(getY(d, i)), yerr = getYerr(d, i);
                                if (yerr === undefined)
                                    return t;
                                if (!yerr.length)
                                    return t + '\xB1' + valueFormat(Math.abs(yerr));
                                return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));
                            });
                            bars.watchTransition(renderWatch, 'multibarhorizontal: bars').select('text').attr('x', function (d, i) {
                                return getY(d, i) < 0 ? -4 : y(getY(d, i)) - y(0) + 4;
                            });
                        } else {
                            bars.selectAll('text').text('');
                        }
                        if (showBarLabels && !stacked) {
                            barsEnter.append('text').classed('nv-bar-label', true);
                            bars.select('text.nv-bar-label').attr('text-anchor', function (d, i) {
                                return getY(d, i) < 0 ? 'start' : 'end';
                            }).attr('y', x.rangeBand() / (data.length * 2)).attr('dy', '.32em').text(function (d, i) {
                                return getX(d, i);
                            });
                            bars.watchTransition(renderWatch, 'multibarhorizontal: bars').select('text.nv-bar-label').attr('x', function (d, i) {
                                return getY(d, i) < 0 ? y(0) - y(getY(d, i)) + 4 : -4;
                            });
                        } else {
                            bars.selectAll('text.nv-bar-label').text('');
                        }
                        bars.attr('class', function (d, i) {
                            return getY(d, i) < 0 ? 'nv-bar negative' : 'nv-bar positive';
                        });
                        if (barColor) {
                            if (!disabled)
                                disabled = data.map(function () {
                                    return true;
                                });
                            bars.style('fill', function (d, i, j) {
                                return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
                                    return i;
                                }).filter(function (d, i) {
                                    return !disabled[i];
                                })[j]).toString();
                            }).style('stroke', function (d, i, j) {
                                return d3.rgb(barColor(d, i)).darker(disabled.map(function (d, i) {
                                    return i;
                                }).filter(function (d, i) {
                                    return !disabled[i];
                                })[j]).toString();
                            });
                        }
                        if (stacked)
                            bars.watchTransition(renderWatch, 'multibarhorizontal: bars').attr('transform', function (d, i) {
                                return 'translate(' + y(d.y1) + ',' + x(getX(d, i)) + ')';
                            }).select('rect').attr('width', function (d, i) {
                                return Math.abs(y(getY(d, i) + d.y0) - y(d.y0)) || 0;
                            }).attr('height', x.rangeBand());
                        else
                            bars.watchTransition(renderWatch, 'multibarhorizontal: bars').attr('transform', function (d, i) {
                                return 'translate(' + (getY(d, i) < 0 ? y(getY(d, i)) : y(0)) + ',' + (d.series * x.rangeBand() / data.length + x(getX(d, i))) + ')';
                            }).select('rect').attr('height', x.rangeBand() / data.length).attr('width', function (d, i) {
                                return Math.max(Math.abs(y(getY(d, i)) - y(0)), 1) || 0;
                            });
                        x0 = x.copy();
                        y0 = y.copy();
                    });
                    renderWatch.renderEnd('multibarHorizontal immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                        }
                    },
                    yErr: {
                        get: function () {
                            return getYerr;
                        },
                        set: function (_) {
                            getYerr = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    forceY: {
                        get: function () {
                            return forceY;
                        },
                        set: function (_) {
                            forceY = _;
                        }
                    },
                    stacked: {
                        get: function () {
                            return stacked;
                        },
                        set: function (_) {
                            stacked = _;
                        }
                    },
                    showValues: {
                        get: function () {
                            return showValues;
                        },
                        set: function (_) {
                            showValues = _;
                        }
                    },
                    disabled: {
                        get: function () {
                            return disabled;
                        },
                        set: function (_) {
                            disabled = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    valueFormat: {
                        get: function () {
                            return valueFormat;
                        },
                        set: function (_) {
                            valueFormat = _;
                        }
                    },
                    valuePadding: {
                        get: function () {
                            return valuePadding;
                        },
                        set: function (_) {
                            valuePadding = _;
                        }
                    },
                    groupSpacing: {
                        get: function () {
                            return groupSpacing;
                        },
                        set: function (_) {
                            groupSpacing = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    barColor: {
                        get: function () {
                            return barColor;
                        },
                        set: function (_) {
                            barColor = _ ? nv.utils.getColor(_) : null;
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.multiBarHorizontalChart = function () {
                'use strict';
                var multibar = nv.models.multiBarHorizontal(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend().height(30), controls = nv.models.legend().height(30), tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 20,
                        bottom: 50,
                        left: 60
                    }, width = null, height = null, color = nv.utils.defaultColor(), showControls = true, controlLabels = {}, showLegend = true, showXAxis = true, showYAxis = true, stacked = false, x, y, state = nv.utils.state(), defaultState = null, noData = null, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd'), controlWidth = function () {
                        return showControls ? 180 : 0;
                    }, duration = 250;
                state.stacked = false;
                multibar.stacked(stacked);
                xAxis.orient('left').tickPadding(5).showMaxMin(false).tickFormat(function (d) {
                    return d;
                });
                yAxis.orient('bottom').tickFormat(d3.format(',.1f'));
                tooltip.duration(0).valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                }).headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                });
                controls.updateState(false);
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            }),
                            stacked: stacked
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.stacked !== undefined)
                            stacked = state.stacked;
                        if (state.active !== undefined)
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                    };
                };
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(multibar);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    selection.each(function (data) {
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            container.transition().duration(duration).call(chart);
                        };
                        chart.container = this;
                        stacked = multibar.stacked();
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = multibar.xScale();
                        y = multibar.yScale().clamp(true);
                        var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y nv-axis').append('g').attr('class', 'nv-zeroLine').append('line');
                        gEnter.append('g').attr('class', 'nv-barsWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        gEnter.append('g').attr('class', 'nv-controlsWrap');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            legend.width(availableWidth - controlWidth());
                            g.select('.nv-legendWrap').datum(data).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            g.select('.nv-legendWrap').attr('transform', 'translate(' + controlWidth() + ',' + -margin.top + ')');
                        }
                        if (!showControls) {
                            g.select('.nv-controlsWrap').selectAll('*').remove();
                        } else {
                            var controlsData = [
                                {
                                    key: controlLabels.grouped || 'Grouped',
                                    disabled: multibar.stacked()
                                },
                                {
                                    key: controlLabels.stacked || 'Stacked',
                                    disabled: !multibar.stacked()
                                }
                            ];
                            controls.width(controlWidth()).color([
                                '#444',
                                '#444',
                                '#444'
                            ]);
                            g.select('.nv-controlsWrap').datum(controlsData).attr('transform', 'translate(0,' + -margin.top + ')').call(controls);
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        multibar.disabled(data.map(function (series) {
                            return series.disabled;
                        })).width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
                            return d.color || color(d, i);
                        }).filter(function (d, i) {
                            return !data[i].disabled;
                        }));
                        var barsWrap = g.select('.nv-barsWrap').datum(data.filter(function (d) {
                            return !d.disabled;
                        }));
                        barsWrap.transition().call(multibar);
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksY(availableHeight / 24, data)).tickSize(-availableWidth, 0);
                            g.select('.nv-x.nv-axis').call(xAxis);
                            var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
                            xTicks.selectAll('line, text');
                        }
                        if (showYAxis) {
                            yAxis.scale(y)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(0,' + availableHeight + ')');
                            g.select('.nv-y.nv-axis').call(yAxis);
                        }
                        g.select('.nv-zeroLine line').attr('x1', y(0)).attr('x2', y(0)).attr('y1', 0).attr('y2', -availableHeight);
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState)
                                state[key] = newState[key];
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        controls.dispatch.on('legendClick', function (d, i) {
                            if (!d.disabled)
                                return;
                            controlsData = controlsData.map(function (s) {
                                s.disabled = true;
                                return s;
                            });
                            d.disabled = false;
                            switch (d.key) {
                            case 'Grouped':
                            case controlLabels.grouped:
                                multibar.stacked(false);
                                break;
                            case 'Stacked':
                            case controlLabels.stacked:
                                multibar.stacked(true);
                                break;
                            }
                            state.stacked = multibar.stacked();
                            dispatch.stateChange(state);
                            stacked = multibar.stacked();
                            chart.update();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            if (typeof e.stacked !== 'undefined') {
                                multibar.stacked(e.stacked);
                                state.stacked = e.stacked;
                                stacked = e.stacked;
                            }
                            chart.update();
                        });
                    });
                    renderWatch.renderEnd('multibar horizontal chart immediate');
                    return chart;
                }
                multibar.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt.value = chart.x()(evt.data);
                    evt['series'] = {
                        key: evt.data.key,
                        value: chart.y()(evt.data),
                        color: evt.color
                    };
                    tooltip.data(evt).hidden(false);
                });
                multibar.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                multibar.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.dispatch = dispatch;
                chart.multibar = multibar;
                chart.legend = legend;
                chart.controls = controls;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.state = state;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    showControls: {
                        get: function () {
                            return showControls;
                        },
                        set: function (_) {
                            showControls = _;
                        }
                    },
                    controlLabels: {
                        get: function () {
                            return controlLabels;
                        },
                        set: function (_) {
                            controlLabels = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            multibar.duration(duration);
                            xAxis.duration(duration);
                            yAxis.duration(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                        }
                    },
                    barColor: {
                        get: function () {
                            return multibar.barColor;
                        },
                        set: function (_) {
                            multibar.barColor(_);
                            legend.color(function (d, i) {
                                return d3.rgb('#ccc').darker(i * 1.5).toString();
                            });
                        }
                    }
                });
                nv.utils.inheritOptions(chart, multibar);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.multiChart = function () {
                'use strict';
                var margin = {
                        top: 30,
                        right: 20,
                        bottom: 50,
                        left: 60
                    }, color = nv.utils.defaultColor(), width = null, height = null, showLegend = true, noData = null, yDomain1, yDomain2, getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, interpolate = 'linear', useVoronoi = true, interactiveLayer = nv.interactiveGuideline(), useInteractiveGuideline = false, legendRightAxisHint = ' (right axis)';
                var x = d3.scale.linear(), yScale1 = d3.scale.linear(), yScale2 = d3.scale.linear(), lines1 = nv.models.line().yScale(yScale1), lines2 = nv.models.line().yScale(yScale2), scatters1 = nv.models.scatter().yScale(yScale1), scatters2 = nv.models.scatter().yScale(yScale2), bars1 = nv.models.multiBar().stacked(false).yScale(yScale1), bars2 = nv.models.multiBar().stacked(false).yScale(yScale2), stack1 = nv.models.stackedArea().yScale(yScale1), stack2 = nv.models.stackedArea().yScale(yScale2), xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5), yAxis1 = nv.models.axis().scale(yScale1).orient('left'), yAxis2 = nv.models.axis().scale(yScale2).orient('right'), legend = nv.models.legend().height(30), tooltip = nv.models.tooltip(), dispatch = d3.dispatch();
                var charts = [
                    lines1,
                    lines2,
                    scatters1,
                    scatters2,
                    bars1,
                    bars2,
                    stack1,
                    stack2
                ];
                function chart(selection) {
                    selection.each(function (data) {
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        chart.update = function () {
                            container.transition().call(chart);
                        };
                        chart.container = this;
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        var dataLines1 = data.filter(function (d) {
                            return d.type == 'line' && d.yAxis == 1;
                        });
                        var dataLines2 = data.filter(function (d) {
                            return d.type == 'line' && d.yAxis == 2;
                        });
                        var dataScatters1 = data.filter(function (d) {
                            return d.type == 'scatter' && d.yAxis == 1;
                        });
                        var dataScatters2 = data.filter(function (d) {
                            return d.type == 'scatter' && d.yAxis == 2;
                        });
                        var dataBars1 = data.filter(function (d) {
                            return d.type == 'bar' && d.yAxis == 1;
                        });
                        var dataBars2 = data.filter(function (d) {
                            return d.type == 'bar' && d.yAxis == 2;
                        });
                        var dataStack1 = data.filter(function (d) {
                            return d.type == 'area' && d.yAxis == 1;
                        });
                        var dataStack2 = data.filter(function (d) {
                            return d.type == 'area' && d.yAxis == 2;
                        });
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        var series1 = data.filter(function (d) {
                            return !d.disabled && d.yAxis == 1;
                        }).map(function (d) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d),
                                    y: getY(d)
                                };
                            });
                        });
                        var series2 = data.filter(function (d) {
                            return !d.disabled && d.yAxis == 2;
                        }).map(function (d) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d),
                                    y: getY(d)
                                };
                            });
                        });
                        x.domain(d3.extent(d3.merge(series1.concat(series2)), function (d) {
                            return d.x;
                        })).range([
                            0,
                            availableWidth
                        ]);
                        var wrap = container.selectAll('g.wrap.multiChart').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y1 nv-axis');
                        gEnter.append('g').attr('class', 'nv-y2 nv-axis');
                        gEnter.append('g').attr('class', 'stack1Wrap');
                        gEnter.append('g').attr('class', 'stack2Wrap');
                        gEnter.append('g').attr('class', 'bars1Wrap');
                        gEnter.append('g').attr('class', 'bars2Wrap');
                        gEnter.append('g').attr('class', 'scatters1Wrap');
                        gEnter.append('g').attr('class', 'scatters2Wrap');
                        gEnter.append('g').attr('class', 'lines1Wrap');
                        gEnter.append('g').attr('class', 'lines2Wrap');
                        gEnter.append('g').attr('class', 'legendWrap');
                        gEnter.append('g').attr('class', 'nv-interactive');
                        var g = wrap.select('g');
                        var color_array = data.map(function (d, i) {
                            return data[i].color || color(d, i);
                        });
                        if (!showLegend) {
                            g.select('.legendWrap').selectAll('*').remove();
                        } else {
                            var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;
                            var legendXPosition = legend.align() ? legendWidth : 0;
                            legend.width(legendWidth);
                            legend.color(color_array);
                            g.select('.legendWrap').datum(data.map(function (series) {
                                series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
                                series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);
                                return series;
                            })).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            g.select('.legendWrap').attr('transform', 'translate(' + legendXPosition + ',' + -margin.top + ')');
                        }
                        lines1.width(availableWidth).height(availableHeight).interpolate(interpolate).color(color_array.filter(function (d, i) {
                            return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line';
                        }));
                        lines2.width(availableWidth).height(availableHeight).interpolate(interpolate).color(color_array.filter(function (d, i) {
                            return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line';
                        }));
                        scatters1.width(availableWidth).height(availableHeight).color(color_array.filter(function (d, i) {
                            return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter';
                        }));
                        scatters2.width(availableWidth).height(availableHeight).color(color_array.filter(function (d, i) {
                            return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter';
                        }));
                        bars1.width(availableWidth).height(availableHeight).color(color_array.filter(function (d, i) {
                            return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar';
                        }));
                        bars2.width(availableWidth).height(availableHeight).color(color_array.filter(function (d, i) {
                            return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar';
                        }));
                        stack1.width(availableWidth).height(availableHeight).interpolate(interpolate).color(color_array.filter(function (d, i) {
                            return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area';
                        }));
                        stack2.width(availableWidth).height(availableHeight).interpolate(interpolate).color(color_array.filter(function (d, i) {
                            return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area';
                        }));
                        g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var lines1Wrap = g.select('.lines1Wrap').datum(dataLines1.filter(function (d) {
                            return !d.disabled;
                        }));
                        var scatters1Wrap = g.select('.scatters1Wrap').datum(dataScatters1.filter(function (d) {
                            return !d.disabled;
                        }));
                        var bars1Wrap = g.select('.bars1Wrap').datum(dataBars1.filter(function (d) {
                            return !d.disabled;
                        }));
                        var stack1Wrap = g.select('.stack1Wrap').datum(dataStack1.filter(function (d) {
                            return !d.disabled;
                        }));
                        var lines2Wrap = g.select('.lines2Wrap').datum(dataLines2.filter(function (d) {
                            return !d.disabled;
                        }));
                        var scatters2Wrap = g.select('.scatters2Wrap').datum(dataScatters2.filter(function (d) {
                            return !d.disabled;
                        }));
                        var bars2Wrap = g.select('.bars2Wrap').datum(dataBars2.filter(function (d) {
                            return !d.disabled;
                        }));
                        var stack2Wrap = g.select('.stack2Wrap').datum(dataStack2.filter(function (d) {
                            return !d.disabled;
                        }));
                        var extraValue1 = dataStack1.length ? dataStack1.map(function (a) {
                            return a.values;
                        }).reduce(function (a, b) {
                            return a.map(function (aVal, i) {
                                return {
                                    x: aVal.x,
                                    y: aVal.y + b[i].y
                                };
                            });
                        }).concat([{
                                x: 0,
                                y: 0
                            }]) : [];
                        var extraValue2 = dataStack2.length ? dataStack2.map(function (a) {
                            return a.values;
                        }).reduce(function (a, b) {
                            return a.map(function (aVal, i) {
                                return {
                                    x: aVal.x,
                                    y: aVal.y + b[i].y
                                };
                            });
                        }).concat([{
                                x: 0,
                                y: 0
                            }]) : [];
                        yScale1.domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function (d) {
                            return d.y;
                        })).range([
                            0,
                            availableHeight
                        ]);
                        yScale2.domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function (d) {
                            return d.y;
                        })).range([
                            0,
                            availableHeight
                        ]);
                        lines1.yDomain(yScale1.domain());
                        scatters1.yDomain(yScale1.domain());
                        bars1.yDomain(yScale1.domain());
                        stack1.yDomain(yScale1.domain());
                        lines2.yDomain(yScale2.domain());
                        scatters2.yDomain(yScale2.domain());
                        bars2.yDomain(yScale2.domain());
                        stack2.yDomain(yScale2.domain());
                        if (dataStack1.length) {
                            d3.transition(stack1Wrap).call(stack1);
                        }
                        if (dataStack2.length) {
                            d3.transition(stack2Wrap).call(stack2);
                        }
                        if (dataBars1.length) {
                            d3.transition(bars1Wrap).call(bars1);
                        }
                        if (dataBars2.length) {
                            d3.transition(bars2Wrap).call(bars2);
                        }
                        if (dataLines1.length) {
                            d3.transition(lines1Wrap).call(lines1);
                        }
                        if (dataLines2.length) {
                            d3.transition(lines2Wrap).call(lines2);
                        }
                        if (dataScatters1.length) {
                            d3.transition(scatters1Wrap).call(scatters1);
                        }
                        if (dataScatters2.length) {
                            d3.transition(scatters2Wrap).call(scatters2);
                        }
                        xAxis._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                        g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + availableHeight + ')');
                        d3.transition(g.select('.nv-x.nv-axis')).call(xAxis);
                        yAxis1._ticks(nv.utils.calcTicksY(availableHeight / 36, data)).tickSize(-availableWidth, 0);
                        d3.transition(g.select('.nv-y1.nv-axis')).call(yAxis1);
                        yAxis2._ticks(nv.utils.calcTicksY(availableHeight / 36, data)).tickSize(-availableWidth, 0);
                        d3.transition(g.select('.nv-y2.nv-axis')).call(yAxis2);
                        g.select('.nv-y1.nv-axis').classed('nv-disabled', series1.length ? false : true).attr('transform', 'translate(' + x.range()[0] + ',0)');
                        g.select('.nv-y2.nv-axis').classed('nv-disabled', series2.length ? false : true).attr('transform', 'translate(' + x.range()[1] + ',0)');
                        legend.dispatch.on('stateChange', function (newState) {
                            chart.update();
                        });
                        if (useInteractiveGuideline) {
                            interactiveLayer.width(availableWidth).height(availableHeight).margin({
                                left: margin.left,
                                top: margin.top
                            }).svgContainer(container).xScale(x);
                            wrap.select('.nv-interactive').call(interactiveLayer);
                        }
                        function mouseover_line(evt) {
                            var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
                            evt.value = evt.point.x;
                            evt.series = {
                                value: evt.point.y,
                                color: evt.point.color,
                                key: evt.series.key
                            };
                            tooltip.duration(0).headerFormatter(function (d, i) {
                                return xAxis.tickFormat()(d, i);
                            }).valueFormatter(function (d, i) {
                                return yaxis.tickFormat()(d, i);
                            }).data(evt).hidden(false);
                        }
                        function mouseover_scatter(evt) {
                            var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
                            evt.value = evt.point.x;
                            evt.series = {
                                value: evt.point.y,
                                color: evt.point.color,
                                key: evt.series.key
                            };
                            tooltip.duration(100).headerFormatter(function (d, i) {
                                return xAxis.tickFormat()(d, i);
                            }).valueFormatter(function (d, i) {
                                return yaxis.tickFormat()(d, i);
                            }).data(evt).hidden(false);
                        }
                        function mouseover_stack(evt) {
                            var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
                            evt.point['x'] = stack1.x()(evt.point);
                            evt.point['y'] = stack1.y()(evt.point);
                            tooltip.duration(0).headerFormatter(function (d, i) {
                                return xAxis.tickFormat()(d, i);
                            }).valueFormatter(function (d, i) {
                                return yaxis.tickFormat()(d, i);
                            }).data(evt).hidden(false);
                        }
                        function mouseover_bar(evt) {
                            var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;
                            evt.value = bars1.x()(evt.data);
                            evt['series'] = {
                                value: bars1.y()(evt.data),
                                color: evt.color,
                                key: evt.data.key
                            };
                            tooltip.duration(0).headerFormatter(function (d, i) {
                                return xAxis.tickFormat()(d, i);
                            }).valueFormatter(function (d, i) {
                                return yaxis.tickFormat()(d, i);
                            }).data(evt).hidden(false);
                        }
                        function clearHighlights() {
                            for (var i = 0, il = charts.length; i < il; i++) {
                                var chart = charts[i];
                                try {
                                    chart.clearHighlights();
                                } catch (e) {
                                }
                            }
                        }
                        function highlightPoint(serieIndex, pointIndex, b) {
                            for (var i = 0, il = charts.length; i < il; i++) {
                                var chart = charts[i];
                                try {
                                    chart.highlightPoint(serieIndex, pointIndex, b);
                                } catch (e) {
                                }
                            }
                        }
                        if (useInteractiveGuideline) {
                            interactiveLayer.dispatch.on('elementMousemove', function (e) {
                                clearHighlights();
                                var singlePoint, pointIndex, pointXLocation, allData = [];
                                data.filter(function (series, i) {
                                    series.seriesIndex = i;
                                    return !series.disabled;
                                }).forEach(function (series, i) {
                                    var extent = x.domain();
                                    var currentValues = series.values.filter(function (d, i) {
                                        return chart.x()(d, i) >= extent[0] && chart.x()(d, i) <= extent[1];
                                    });
                                    pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());
                                    var point = currentValues[pointIndex];
                                    var pointYValue = chart.y()(point, pointIndex);
                                    if (pointYValue !== null) {
                                        highlightPoint(i, pointIndex, true);
                                    }
                                    if (point === undefined)
                                        return;
                                    if (singlePoint === undefined)
                                        singlePoint = point;
                                    if (pointXLocation === undefined)
                                        pointXLocation = x(chart.x()(point, pointIndex));
                                    allData.push({
                                        key: series.key,
                                        value: pointYValue,
                                        color: color(series, series.seriesIndex),
                                        data: point,
                                        yAxis: series.yAxis == 2 ? yAxis2 : yAxis1
                                    });
                                });
                                interactiveLayer.tooltip.chartContainer(chart.container.parentNode).headerFormatter(function (d, i) {
                                    return xAxis.tickFormat()(d, i);
                                }).valueFormatter(function (d, i) {
                                    var yAxis = allData[i].yAxis;
                                    return d === null ? 'N/A' : yAxis.tickFormat()(d);
                                }).data({
                                    value: chart.x()(singlePoint, pointIndex),
                                    index: pointIndex,
                                    series: allData
                                })();
                                interactiveLayer.renderGuideLine(pointXLocation);
                            });
                            interactiveLayer.dispatch.on('elementMouseout', function (e) {
                                clearHighlights();
                            });
                        } else {
                            lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);
                            lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);
                            lines1.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            lines2.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);
                            scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);
                            scatters1.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            scatters2.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);
                            stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);
                            stack1.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            stack2.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);
                            bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);
                            bars1.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            bars2.dispatch.on('elementMouseout.tooltip', function (evt) {
                                tooltip.hidden(true);
                            });
                            bars1.dispatch.on('elementMousemove.tooltip', function (evt) {
                                tooltip();
                            });
                            bars2.dispatch.on('elementMousemove.tooltip', function (evt) {
                                tooltip();
                            });
                        }
                    });
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.legend = legend;
                chart.lines1 = lines1;
                chart.lines2 = lines2;
                chart.scatters1 = scatters1;
                chart.scatters2 = scatters2;
                chart.bars1 = bars1;
                chart.bars2 = bars2;
                chart.stack1 = stack1;
                chart.stack2 = stack2;
                chart.xAxis = xAxis;
                chart.yAxis1 = yAxis1;
                chart.yAxis2 = yAxis2;
                chart.tooltip = tooltip;
                chart.interactiveLayer = interactiveLayer;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    yDomain1: {
                        get: function () {
                            return yDomain1;
                        },
                        set: function (_) {
                            yDomain1 = _;
                        }
                    },
                    yDomain2: {
                        get: function () {
                            return yDomain2;
                        },
                        set: function (_) {
                            yDomain2 = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    interpolate: {
                        get: function () {
                            return interpolate;
                        },
                        set: function (_) {
                            interpolate = _;
                        }
                    },
                    legendRightAxisHint: {
                        get: function () {
                            return legendRightAxisHint;
                        },
                        set: function (_) {
                            legendRightAxisHint = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                            lines1.x(_);
                            lines2.x(_);
                            scatters1.x(_);
                            scatters2.x(_);
                            bars1.x(_);
                            bars2.x(_);
                            stack1.x(_);
                            stack2.x(_);
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                            lines1.y(_);
                            lines2.y(_);
                            scatters1.y(_);
                            scatters2.y(_);
                            stack1.y(_);
                            stack2.y(_);
                            bars1.y(_);
                            bars2.y(_);
                        }
                    },
                    useVoronoi: {
                        get: function () {
                            return useVoronoi;
                        },
                        set: function (_) {
                            useVoronoi = _;
                            lines1.useVoronoi(_);
                            lines2.useVoronoi(_);
                            stack1.useVoronoi(_);
                            stack2.useVoronoi(_);
                        }
                    },
                    useInteractiveGuideline: {
                        get: function () {
                            return useInteractiveGuideline;
                        },
                        set: function (_) {
                            useInteractiveGuideline = _;
                            if (useInteractiveGuideline) {
                                lines1.interactive(false);
                                lines1.useVoronoi(false);
                                lines2.interactive(false);
                                lines2.useVoronoi(false);
                                stack1.interactive(false);
                                stack1.useVoronoi(false);
                                stack2.interactive(false);
                                stack2.useVoronoi(false);
                                scatters1.interactive(false);
                                scatters2.interactive(false);
                            }
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.ohlcBar = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = null, height = null, id = Math.floor(Math.random() * 10000), container = null, x = d3.scale.linear(), y = d3.scale.linear(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, getOpen = function (d) {
                        return d.open;
                    }, getClose = function (d) {
                        return d.close;
                    }, getHigh = function (d) {
                        return d.high;
                    }, getLow = function (d) {
                        return d.low;
                    }, forceX = [], forceY = [], padData = false, clipEdge = true, color = nv.utils.defaultColor(), interactive = false, xDomain, yDomain, xRange, yRange, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove');
                function chart(selection) {
                    selection.each(function (data) {
                        container = d3.select(this);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        nv.utils.initSVG(container);
                        var w = availableWidth / data[0].values.length * 0.9;
                        x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX)));
                        if (padData)
                            x.range(xRange || [
                                availableWidth * 0.5 / data[0].values.length,
                                availableWidth * (data[0].values.length - 0.5) / data[0].values.length
                            ]);
                        else
                            x.range(xRange || [
                                5 + w / 2,
                                availableWidth - w / 2 - 5
                            ]);
                        y.domain(yDomain || [
                            d3.min(data[0].values.map(getLow).concat(forceY)),
                            d3.max(data[0].values.map(getHigh).concat(forceY))
                        ]).range(yRange || [
                            availableHeight,
                            0
                        ]);
                        if (x.domain()[0] === x.domain()[1])
                            x.domain()[0] ? x.domain([
                                x.domain()[0] - x.domain()[0] * 0.01,
                                x.domain()[1] + x.domain()[1] * 0.01
                            ]) : x.domain([
                                -1,
                                1
                            ]);
                        if (y.domain()[0] === y.domain()[1])
                            y.domain()[0] ? y.domain([
                                y.domain()[0] + y.domain()[0] * 0.01,
                                y.domain()[1] - y.domain()[1] * 0.01
                            ]) : y.domain([
                                -1,
                                1
                            ]);
                        var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-ticks');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        container.on('click', function (d, i) {
                            dispatch.chartClick({
                                data: d,
                                index: i,
                                pos: d3.event,
                                id: id
                            });
                        });
                        defsEnter.append('clipPath').attr('id', 'nv-chart-clip-path-' + id).append('rect');
                        wrap.select('#nv-chart-clip-path-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
                        g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
                        var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick').data(function (d) {
                            return d;
                        });
                        ticks.exit().remove();
                        ticks.enter().append('path').attr('class', function (d, i, j) {
                            return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;
                        }).attr('d', function (d, i) {
                            return 'm0,0l0,' + (y(getOpen(d, i)) - y(getHigh(d, i))) + 'l' + -w / 2 + ',0l' + w / 2 + ',0l0,' + (y(getLow(d, i)) - y(getOpen(d, i))) + 'l0,' + (y(getClose(d, i)) - y(getLow(d, i))) + 'l' + w / 2 + ',0l' + -w / 2 + ',0z';
                        }).attr('transform', function (d, i) {
                            return 'translate(' + x(getX(d, i)) + ',' + y(getHigh(d, i)) + ')';
                        }).attr('fill', function (d, i) {
                            return color[0];
                        }).attr('stroke', function (d, i) {
                            return color[0];
                        }).attr('x', 0).attr('y', function (d, i) {
                            return y(Math.max(0, getY(d, i)));
                        }).attr('height', function (d, i) {
                            return Math.abs(y(getY(d, i)) - y(0));
                        });
                        ticks.attr('class', function (d, i, j) {
                            return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;
                        });
                        d3.transition(ticks).attr('transform', function (d, i) {
                            return 'translate(' + x(getX(d, i)) + ',' + y(getHigh(d, i)) + ')';
                        }).attr('d', function (d, i) {
                            var w = availableWidth / data[0].values.length * 0.9;
                            return 'm0,0l0,' + (y(getOpen(d, i)) - y(getHigh(d, i))) + 'l' + -w / 2 + ',0l' + w / 2 + ',0l0,' + (y(getLow(d, i)) - y(getOpen(d, i))) + 'l0,' + (y(getClose(d, i)) - y(getLow(d, i))) + 'l' + w / 2 + ',0l' + -w / 2 + ',0z';
                        });
                    });
                    return chart;
                }
                chart.highlightPoint = function (pointIndex, isHoverOver) {
                    chart.clearHighlights();
                    container.select('.nv-ohlcBar .nv-tick-0-' + pointIndex).classed('hover', isHoverOver);
                };
                chart.clearHighlights = function () {
                    container.select('.nv-ohlcBar .nv-tick.hover').classed('hover', false);
                };
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    forceX: {
                        get: function () {
                            return forceX;
                        },
                        set: function (_) {
                            forceX = _;
                        }
                    },
                    forceY: {
                        get: function () {
                            return forceY;
                        },
                        set: function (_) {
                            forceY = _;
                        }
                    },
                    padData: {
                        get: function () {
                            return padData;
                        },
                        set: function (_) {
                            padData = _;
                        }
                    },
                    clipEdge: {
                        get: function () {
                            return clipEdge;
                        },
                        set: function (_) {
                            clipEdge = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    interactive: {
                        get: function () {
                            return interactive;
                        },
                        set: function (_) {
                            interactive = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = _;
                        }
                    },
                    open: {
                        get: function () {
                            return getOpen();
                        },
                        set: function (_) {
                            getOpen = _;
                        }
                    },
                    close: {
                        get: function () {
                            return getClose();
                        },
                        set: function (_) {
                            getClose = _;
                        }
                    },
                    high: {
                        get: function () {
                            return getHigh;
                        },
                        set: function (_) {
                            getHigh = _;
                        }
                    },
                    low: {
                        get: function () {
                            return getLow;
                        },
                        set: function (_) {
                            getLow = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top != undefined ? _.top : margin.top;
                            margin.right = _.right != undefined ? _.right : margin.right;
                            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
                            margin.left = _.left != undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.parallelCoordinates = function () {
                'use strict';
                var margin = {
                        top: 30,
                        right: 0,
                        bottom: 10,
                        left: 0
                    }, width = null, height = null, availableWidth = null, availableHeight = null, x = d3.scale.ordinal(), y = {}, undefinedValuesLabel = 'undefined values', dimensionData = [], enabledDimensions = [], dimensionNames = [], displayBrush = true, color = nv.utils.defaultColor(), filters = [], active = [], dragging = [], axisWithUndefinedValues = [], lineTension = 1, foreground, background, dimensions, line = d3.svg.line(), axis = d3.svg.axis(), dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', 'stateChange', 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged');
                var renderWatch = nv.utils.renderWatch(dispatch);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var container = d3.select(this);
                        availableWidth = nv.utils.availableWidth(width, container, margin);
                        availableHeight = nv.utils.availableHeight(height, container, margin);
                        nv.utils.initSVG(container);
                        if (data[0].values === undefined) {
                            var newData = [];
                            data.forEach(function (d) {
                                var val = {};
                                var key = Object.keys(d);
                                key.forEach(function (k) {
                                    if (k !== 'name')
                                        val[k] = d[k];
                                });
                                newData.push({
                                    key: d.name,
                                    values: val
                                });
                            });
                            data = newData;
                        }
                        var dataValues = data.map(function (d) {
                            return d.values;
                        });
                        if (active.length === 0) {
                            active = data;
                        }
                        ;
                        dimensionNames = dimensionData.sort(function (a, b) {
                            return a.currentPosition - b.currentPosition;
                        }).map(function (d) {
                            return d.key;
                        });
                        enabledDimensions = dimensionData.filter(function (d) {
                            return !d.disabled;
                        });
                        x.rangePoints([
                            0,
                            availableWidth
                        ], 1).domain(enabledDimensions.map(function (d) {
                            return d.key;
                        }));
                        var oldDomainMaxValue = {};
                        var displayMissingValuesline = false;
                        var currentTicks = [];
                        dimensionNames.forEach(function (d) {
                            var extent = d3.extent(dataValues, function (p) {
                                return +p[d];
                            });
                            var min = extent[0];
                            var max = extent[1];
                            var onlyUndefinedValues = false;
                            if (isNaN(min) || isNaN(max)) {
                                onlyUndefinedValues = true;
                                min = 0;
                                max = 0;
                            }
                            if (min === max) {
                                min = min - 1;
                                max = max + 1;
                            }
                            var f = filters.filter(function (k) {
                                return k.dimension == d;
                            });
                            if (f.length !== 0) {
                                if (onlyUndefinedValues) {
                                    min = y[d].domain()[0];
                                    max = y[d].domain()[1];
                                } else if (!f[0].hasOnlyNaN && displayBrush) {
                                    min = min > f[0].extent[0] ? f[0].extent[0] : min;
                                    max = max < f[0].extent[1] ? f[0].extent[1] : max;
                                } else if (f[0].hasNaN) {
                                    max = max < f[0].extent[1] ? f[0].extent[1] : max;
                                    oldDomainMaxValue[d] = y[d].domain()[1];
                                    displayMissingValuesline = true;
                                }
                            }
                            y[d] = d3.scale.linear().domain([
                                min,
                                max
                            ]).range([
                                (availableHeight - 12) * 0.9,
                                0
                            ]);
                            axisWithUndefinedValues = [];
                            y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);
                        });
                        var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-parallelCoordinates background');
                        gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');
                        gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        line.interpolate('cardinal').tension(lineTension);
                        axis.orient('left');
                        var axisDrag = d3.behavior.drag().on('dragstart', dragStart).on('drag', dragMove).on('dragend', dragEnd);
                        var missingValuesline, missingValueslineText;
                        var step = x.range()[1] - x.range()[0];
                        if (!isNaN(step)) {
                            var lineData = [
                                0 + step / 2,
                                availableHeight - 12,
                                availableWidth - step / 2,
                                availableHeight - 12
                            ];
                            missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);
                            missingValuesline.enter().append('line');
                            missingValuesline.exit().remove();
                            missingValuesline.attr('x1', function (d) {
                                return d[0];
                            }).attr('y1', function (d) {
                                return d[1];
                            }).attr('x2', function (d) {
                                return d[2];
                            }).attr('y2', function (d) {
                                return d[3];
                            });
                            missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);
                            missingValueslineText.append('text').data([undefinedValuesLabel]);
                            missingValueslineText.enter().append('text');
                            missingValueslineText.exit().remove();
                            missingValueslineText.attr('y', availableHeight).attr('x', availableWidth - 92 - step / 2).text(function (d) {
                                return d;
                            });
                        }
                        background = wrap.select('.background').selectAll('path').data(data);
                        background.enter().append('path');
                        background.exit().remove();
                        background.attr('d', path);
                        foreground = wrap.select('.foreground').selectAll('path').data(data);
                        foreground.enter().append('path');
                        foreground.exit().remove();
                        foreground.attr('d', path).style('stroke-width', function (d, i) {
                            if (isNaN(d.strokeWidth)) {
                                d.strokeWidth = 1;
                            }
                            return d.strokeWidth;
                        }).attr('stroke', function (d, i) {
                            return d.color || color(d, i);
                        });
                        foreground.on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true).style('stroke-width', d.strokeWidth + 2 + 'px').style('stroke-opacity', 1);
                            dispatch.elementMouseover({
                                label: d.name,
                                color: d.color || color(d, i),
                                values: d.values,
                                dimensions: enabledDimensions
                            });
                        });
                        foreground.on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false).style('stroke-width', d.strokeWidth + 'px').style('stroke-opacity', 0.7);
                            dispatch.elementMouseout({
                                label: d.name,
                                index: i
                            });
                        });
                        foreground.on('mousemove', function (d, i) {
                            dispatch.elementMousemove();
                        });
                        foreground.on('click', function (d) {
                            dispatch.elementClick({ id: d.id });
                        });
                        dimensions = g.selectAll('.dimension').data(enabledDimensions);
                        var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');
                        dimensions.attr('transform', function (d) {
                            return 'translate(' + x(d.key) + ',0)';
                        });
                        dimensionsEnter.append('g').attr('class', 'nv-axis');
                        dimensionsEnter.append('text').attr('class', 'nv-label').style('cursor', 'move').attr('dy', '-1em').attr('text-anchor', 'middle').on('mouseover', function (d, i) {
                            dispatch.elementMouseover({
                                label: d.tooltip || d.key,
                                color: d.color
                            });
                        }).on('mouseout', function (d, i) {
                            dispatch.elementMouseout({ label: d.tooltip });
                        }).on('mousemove', function (d, i) {
                            dispatch.elementMousemove();
                        }).call(axisDrag);
                        dimensionsEnter.append('g').attr('class', 'nv-brushBackground');
                        dimensions.exit().remove();
                        dimensions.select('.nv-label').text(function (d) {
                            return d.key;
                        });
                        restoreBrush(displayBrush);
                        var actives = dimensionNames.filter(function (p) {
                                return !y[p].brush.empty();
                            }), extents = actives.map(function (p) {
                                return y[p].brush.extent();
                            });
                        var formerActive = active.slice(0);
                        active = [];
                        foreground.style('display', function (d) {
                            var isActive = actives.every(function (p, i) {
                                if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {
                                    return true;
                                }
                                return extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1] && !isNaN(parseFloat(d.values[p]));
                            });
                            if (isActive)
                                active.push(d);
                            return !isActive ? 'none' : null;
                        });
                        if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {
                            dispatch.activeChanged(active);
                        }
                        function path(d) {
                            return line(enabledDimensions.map(function (p) {
                                if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {
                                    var domain = y[p.key].domain();
                                    var range = y[p.key].range();
                                    var min = domain[0] - (domain[1] - domain[0]) / 9;
                                    if (axisWithUndefinedValues.indexOf(p.key) < 0) {
                                        var newscale = d3.scale.linear().domain([
                                            min,
                                            domain[1]
                                        ]).range([
                                            availableHeight - 12,
                                            range[1]
                                        ]);
                                        y[p.key].brush.y(newscale);
                                        axisWithUndefinedValues.push(p.key);
                                    }
                                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {
                                        return [
                                            x(p.key),
                                            y[p.key](min)
                                        ];
                                    }
                                }
                                if (missingValuesline !== undefined) {
                                    if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {
                                        missingValuesline.style('display', 'inline');
                                        missingValueslineText.style('display', 'inline');
                                    } else {
                                        missingValuesline.style('display', 'none');
                                        missingValueslineText.style('display', 'none');
                                    }
                                }
                                return [
                                    x(p.key),
                                    y[p.key](d.values[p.key])
                                ];
                            }));
                        }
                        function restoreBrush(visible) {
                            filters.forEach(function (f) {
                                var brushDomain = y[f.dimension].brush.y().domain();
                                if (f.hasOnlyNaN) {
                                    f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];
                                }
                                if (f.hasNaN) {
                                    f.extent[0] = brushDomain[0];
                                }
                                if (visible)
                                    y[f.dimension].brush.extent(f.extent);
                            });
                            dimensions.select('.nv-brushBackground').each(function (d) {
                                d3.select(this).call(y[d.key].brush);
                            }).selectAll('rect').attr('x', -8).attr('width', 16);
                            updateTicks();
                        }
                        function brushstart() {
                            if (displayBrush === false) {
                                displayBrush = true;
                                restoreBrush(true);
                            }
                        }
                        function brush() {
                            actives = dimensionNames.filter(function (p) {
                                return !y[p].brush.empty();
                            });
                            extents = actives.map(function (p) {
                                return y[p].brush.extent();
                            });
                            filters = [];
                            actives.forEach(function (d, i) {
                                filters[i] = {
                                    dimension: d,
                                    extent: extents[i],
                                    hasNaN: false,
                                    hasOnlyNaN: false
                                };
                            });
                            active = [];
                            foreground.style('display', function (d) {
                                var isActive = actives.every(function (p, i) {
                                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0])
                                        return true;
                                    return extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1] && !isNaN(parseFloat(d.values[p]));
                                });
                                if (isActive)
                                    active.push(d);
                                return isActive ? null : 'none';
                            });
                            updateTicks();
                            dispatch.brush({
                                filters: filters,
                                active: active
                            });
                        }
                        function brushend() {
                            var hasActiveBrush = actives.length > 0 ? true : false;
                            filters.forEach(function (f) {
                                if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)
                                    f.hasNaN = true;
                                if (f.extent[1] < y[f.dimension].domain()[0])
                                    f.hasOnlyNaN = true;
                            });
                            dispatch.brushEnd(active, hasActiveBrush);
                        }
                        function updateTicks() {
                            dimensions.select('.nv-axis').each(function (d, i) {
                                var f = filters.filter(function (k) {
                                    return k.dimension == d.key;
                                });
                                currentTicks[d.key] = y[d.key].domain();
                                if (f.length != 0 && displayBrush) {
                                    currentTicks[d.key] = [];
                                    if (f[0].extent[1] > y[d.key].domain()[0])
                                        currentTicks[d.key] = [f[0].extent[1]];
                                    if (f[0].extent[0] >= y[d.key].domain()[0])
                                        currentTicks[d.key].push(f[0].extent[0]);
                                }
                                d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));
                            });
                        }
                        function dragStart(d) {
                            dragging[d.key] = this.parentNode.__origin__ = x(d.key);
                            background.attr('visibility', 'hidden');
                        }
                        function dragMove(d) {
                            dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));
                            foreground.attr('d', path);
                            enabledDimensions.sort(function (a, b) {
                                return dimensionPosition(a.key) - dimensionPosition(b.key);
                            });
                            enabledDimensions.forEach(function (d, i) {
                                return d.currentPosition = i;
                            });
                            x.domain(enabledDimensions.map(function (d) {
                                return d.key;
                            }));
                            dimensions.attr('transform', function (d) {
                                return 'translate(' + dimensionPosition(d.key) + ')';
                            });
                        }
                        function dragEnd(d, i) {
                            delete this.parentNode.__origin__;
                            delete dragging[d.key];
                            d3.select(this.parentNode).attr('transform', 'translate(' + x(d.key) + ')');
                            foreground.attr('d', path);
                            background.attr('d', path).attr('visibility', null);
                            dispatch.dimensionsOrder(enabledDimensions);
                        }
                        function dimensionPosition(d) {
                            var v = dragging[d];
                            return v == null ? x(d) : v;
                        }
                    });
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    dimensionData: {
                        get: function () {
                            return dimensionData;
                        },
                        set: function (_) {
                            dimensionData = _;
                        }
                    },
                    displayBrush: {
                        get: function () {
                            return displayBrush;
                        },
                        set: function (_) {
                            displayBrush = _;
                        }
                    },
                    filters: {
                        get: function () {
                            return filters;
                        },
                        set: function (_) {
                            filters = _;
                        }
                    },
                    active: {
                        get: function () {
                            return active;
                        },
                        set: function (_) {
                            active = _;
                        }
                    },
                    lineTension: {
                        get: function () {
                            return lineTension;
                        },
                        set: function (_) {
                            lineTension = _;
                        }
                    },
                    undefinedValuesLabel: {
                        get: function () {
                            return undefinedValuesLabel;
                        },
                        set: function (_) {
                            undefinedValuesLabel = _;
                        }
                    },
                    dimensions: {
                        get: function () {
                            return dimensionData.map(function (d) {
                                return d.key;
                            });
                        },
                        set: function (_) {
                            nv.deprecated('dimensions', 'use dimensionData instead');
                            if (dimensionData.length === 0) {
                                _.forEach(function (k) {
                                    dimensionData.push({ key: k });
                                });
                            } else {
                                _.forEach(function (k, i) {
                                    dimensionData[i].key = k;
                                });
                            }
                        }
                    },
                    dimensionNames: {
                        get: function () {
                            return dimensionData.map(function (d) {
                                return d.key;
                            });
                        },
                        set: function (_) {
                            nv.deprecated('dimensionNames', 'use dimensionData instead');
                            dimensionNames = [];
                            if (dimensionData.length === 0) {
                                _.forEach(function (k) {
                                    dimensionData.push({ key: k });
                                });
                            } else {
                                _.forEach(function (k, i) {
                                    dimensionData[i].key = k;
                                });
                            }
                        }
                    },
                    dimensionFormats: {
                        get: function () {
                            return dimensionData.map(function (d) {
                                return d.format;
                            });
                        },
                        set: function (_) {
                            nv.deprecated('dimensionFormats', 'use dimensionData instead');
                            if (dimensionData.length === 0) {
                                _.forEach(function (f) {
                                    dimensionData.push({ format: f });
                                });
                            } else {
                                _.forEach(function (f, i) {
                                    dimensionData[i].format = f;
                                });
                            }
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.parallelCoordinatesChart = function () {
                'use strict';
                var parallelCoordinates = nv.models.parallelCoordinates();
                var legend = nv.models.legend();
                var tooltip = nv.models.tooltip();
                var dimensionTooltip = nv.models.tooltip();
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = null, height = null, showLegend = true, color = nv.utils.defaultColor(), state = nv.utils.state(), dimensionData = [], displayBrush = true, defaultState = null, noData = null, nanValue = 'undefined', dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd'), controlWidth = function () {
                        return showControls ? 180 : 0;
                    };
                var renderWatch = nv.utils.renderWatch(dispatch);
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            })
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.active !== undefined) {
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                        }
                    };
                };
                tooltip.contentGenerator(function (data) {
                    var str = '<table><thead><tr><td class="legend-color-guide"><div style="background-color:' + data.color + '"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';
                    if (data.series.length !== 0) {
                        str = str + '<tbody><tr><td height ="10px"></td></tr>';
                        data.series.forEach(function (d) {
                            str = str + '<tr><td class="legend-color-guide"><div style="background-color:' + d.color + '"></div></td><td class="key">' + d.key + '</td><td class="value">' + d.value + '</td></tr>';
                        });
                        str = str + '</tbody>';
                    }
                    str = str + '</table>';
                    return str;
                });
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(parallelCoordinates);
                    selection.each(function (data) {
                        var container = d3.select(this);
                        nv.utils.initSVG(container);
                        var that = this;
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            container.call(chart);
                        };
                        chart.container = this;
                        state.setter(stateSetter(dimensionData), chart.update).getter(stateGetter(dimensionData)).update();
                        state.disabled = dimensionData.map(function (d) {
                            return !!d.disabled;
                        });
                        dimensionData = dimensionData.map(function (d) {
                            d.disabled = !!d.disabled;
                            return d;
                        });
                        dimensionData.forEach(function (d, i) {
                            d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;
                            d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        g.select('rect').attr('width', availableWidth).attr('height', availableHeight > 0 ? availableHeight : 0);
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            legend.width(availableWidth).color(function (d) {
                                return 'rgb(188,190,192)';
                            });
                            g.select('.nv-legendWrap').datum(dimensionData.sort(function (a, b) {
                                return a.originalPosition - b.originalPosition;
                            })).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            wrap.select('.nv-legendWrap').attr('transform', 'translate( 0 ,' + -margin.top + ')');
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        parallelCoordinates.width(availableWidth).height(availableHeight).dimensionData(dimensionData).displayBrush(displayBrush);
                        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ').datum(data);
                        parallelCoordinatesWrap.transition().call(parallelCoordinates);
                        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {
                            if (hasActiveBrush) {
                                displayBrush = true;
                                dispatch.brushEnd(active);
                            } else {
                                displayBrush = false;
                            }
                        });
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState) {
                                state[key] = newState[key];
                            }
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {
                            dimensionData.sort(function (a, b) {
                                return a.currentPosition - b.currentPosition;
                            });
                            var isSorted = false;
                            dimensionData.forEach(function (d, i) {
                                d.currentPosition = i;
                                if (d.currentPosition !== d.originalPosition)
                                    isSorted = true;
                            });
                            dispatch.dimensionsOrder(dimensionData, isSorted);
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                dimensionData.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            chart.update();
                        });
                    });
                    renderWatch.renderEnd('parraleleCoordinateChart immediate');
                    return chart;
                }
                parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {
                    var tp = {
                        key: evt.label,
                        color: evt.color,
                        series: []
                    };
                    if (evt.values) {
                        Object.keys(evt.values).forEach(function (d) {
                            var dim = evt.dimensions.filter(function (dd) {
                                return dd.key === d;
                            })[0];
                            if (dim) {
                                var v;
                                if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {
                                    v = nanValue;
                                } else {
                                    v = dim.format(evt.values[d]);
                                }
                                tp.series.push({
                                    idx: dim.currentPosition,
                                    key: d,
                                    value: v,
                                    color: dim.color
                                });
                            }
                        });
                        tp.series.sort(function (a, b) {
                            return a.idx - b.idx;
                        });
                    }
                    tooltip.data(tp).hidden(false);
                });
                parallelCoordinates.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {
                    tooltip();
                });
                chart.dispatch = dispatch;
                chart.parallelCoordinates = parallelCoordinates;
                chart.legend = legend;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    dimensionData: {
                        get: function () {
                            return dimensionData;
                        },
                        set: function (_) {
                            dimensionData = _;
                        }
                    },
                    displayBrush: {
                        get: function () {
                            return displayBrush;
                        },
                        set: function (_) {
                            displayBrush = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    nanValue: {
                        get: function () {
                            return nanValue;
                        },
                        set: function (_) {
                            nanValue = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                            parallelCoordinates.color(color);
                        }
                    }
                });
                nv.utils.inheritOptions(chart, parallelCoordinates);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.pie = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 500, height = 500, getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, id = Math.floor(Math.random() * 10000), container = null, color = nv.utils.defaultColor(), valueFormat = d3.format(',.2f'), showLabels = true, labelsOutside = false, labelType = 'key', labelThreshold = 0.02, donut = false, title = false, growOnHover = true, titleOffset = 0, labelSunbeamLayout = false, startAngle = false, padAngle = false, endAngle = false, cornerRadius = 0, donutRatio = 0.5, arcsRadius = [], dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd');
                var arcs = [];
                var arcsOver = [];
                var renderWatch = nv.utils.renderWatch(dispatch);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom, radius = Math.min(availableWidth, availableHeight) / 2, arcsRadiusOuter = [], arcsRadiusInner = [];
                        container = d3.select(this);
                        if (arcsRadius.length === 0) {
                            var outer = radius - radius / 5;
                            var inner = donutRatio * radius;
                            for (var i = 0; i < data[0].length; i++) {
                                arcsRadiusOuter.push(outer);
                                arcsRadiusInner.push(inner);
                            }
                        } else {
                            if (growOnHover) {
                                arcsRadiusOuter = arcsRadius.map(function (d) {
                                    return (d.outer - d.outer / 5) * radius;
                                });
                                arcsRadiusInner = arcsRadius.map(function (d) {
                                    return (d.inner - d.inner / 5) * radius;
                                });
                                donutRatio = d3.min(arcsRadius.map(function (d) {
                                    return d.inner - d.inner / 5;
                                }));
                            } else {
                                arcsRadiusOuter = arcsRadius.map(function (d) {
                                    return d.outer * radius;
                                });
                                arcsRadiusInner = arcsRadius.map(function (d) {
                                    return d.inner * radius;
                                });
                                donutRatio = d3.min(arcsRadius.map(function (d) {
                                    return d.inner;
                                }));
                            }
                        }
                        nv.utils.initSVG(container);
                        var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pie nv-chart-' + id);
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        var g_pie = gEnter.append('g').attr('class', 'nv-pie');
                        gEnter.append('g').attr('class', 'nv-pieLabels');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
                        g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
                        container.on('click', function (d, i) {
                            dispatch.chartClick({
                                data: d,
                                index: i,
                                pos: d3.event,
                                id: id
                            });
                        });
                        arcs = [];
                        arcsOver = [];
                        for (var i = 0; i < data[0].length; i++) {
                            var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);
                            var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);
                            if (startAngle !== false) {
                                arc.startAngle(startAngle);
                                arcOver.startAngle(startAngle);
                            }
                            if (endAngle !== false) {
                                arc.endAngle(endAngle);
                                arcOver.endAngle(endAngle);
                            }
                            if (donut) {
                                arc.innerRadius(arcsRadiusInner[i]);
                                arcOver.innerRadius(arcsRadiusInner[i]);
                            }
                            if (arc.cornerRadius && cornerRadius) {
                                arc.cornerRadius(cornerRadius);
                                arcOver.cornerRadius(cornerRadius);
                            }
                            arcs.push(arc);
                            arcsOver.push(arcOver);
                        }
                        var pie = d3.layout.pie().sort(null).value(function (d) {
                            return d.disabled ? 0 : getY(d);
                        });
                        if (pie.padAngle && padAngle) {
                            pie.padAngle(padAngle);
                        }
                        if (donut && title) {
                            g_pie.append('text').attr('class', 'nv-pie-title');
                            wrap.select('.nv-pie-title').style('text-anchor', 'middle').text(function (d) {
                                return title;
                            }).style('font-size', Math.min(availableWidth, availableHeight) * donutRatio * 2 / (title.length + 2) + 'px').attr('dy', '0.35em').attr('transform', function (d, i) {
                                return 'translate(0, ' + titleOffset + ')';
                            });
                        }
                        var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);
                        var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);
                        slices.exit().remove();
                        pieLabels.exit().remove();
                        var ae = slices.enter().append('g');
                        ae.attr('class', 'nv-slice');
                        ae.on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true);
                            if (growOnHover) {
                                d3.select(this).select('path').transition().duration(70).attr('d', arcsOver[i]);
                            }
                            dispatch.elementMouseover({
                                data: d.data,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        });
                        ae.on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false);
                            if (growOnHover) {
                                d3.select(this).select('path').transition().duration(50).attr('d', arcs[i]);
                            }
                            dispatch.elementMouseout({
                                data: d.data,
                                index: i
                            });
                        });
                        ae.on('mousemove', function (d, i) {
                            dispatch.elementMousemove({
                                data: d.data,
                                index: i
                            });
                        });
                        ae.on('click', function (d, i) {
                            var element = this;
                            dispatch.elementClick({
                                data: d.data,
                                index: i,
                                color: d3.select(this).style('fill'),
                                event: d3.event,
                                element: element
                            });
                        });
                        ae.on('dblclick', function (d, i) {
                            dispatch.elementDblClick({
                                data: d.data,
                                index: i,
                                color: d3.select(this).style('fill')
                            });
                        });
                        slices.attr('fill', function (d, i) {
                            return color(d.data, i);
                        });
                        slices.attr('stroke', function (d, i) {
                            return color(d.data, i);
                        });
                        var paths = ae.append('path').each(function (d) {
                            this._current = d;
                        });
                        slices.select('path').transition().attr('d', function (d, i) {
                            return arcs[i](d);
                        }).attrTween('d', arcTween);
                        if (showLabels) {
                            var labelsArc = [];
                            for (var i = 0; i < data[0].length; i++) {
                                labelsArc.push(arcs[i]);
                                if (labelsOutside) {
                                    if (donut) {
                                        labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());
                                        if (startAngle !== false)
                                            labelsArc[i].startAngle(startAngle);
                                        if (endAngle !== false)
                                            labelsArc[i].endAngle(endAngle);
                                    }
                                } else if (!donut) {
                                    labelsArc[i].innerRadius(0);
                                }
                            }
                            pieLabels.enter().append('g').classed('nv-label', true).each(function (d, i) {
                                var group = d3.select(this);
                                group.attr('transform', function (d, i) {
                                    if (labelSunbeamLayout) {
                                        d.outerRadius = arcsRadiusOuter[i] + 10;
                                        d.innerRadius = arcsRadiusOuter[i] + 15;
                                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);
                                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {
                                            rotateAngle -= 90;
                                        } else {
                                            rotateAngle += 90;
                                        }
                                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';
                                    } else {
                                        d.outerRadius = radius + 10;
                                        d.innerRadius = radius + 15;
                                        return 'translate(' + labelsArc[i].centroid(d) + ')';
                                    }
                                });
                                group.append('rect').style('stroke', '#fff').style('fill', '#fff').attr('rx', 3).attr('ry', 3);
                                group.append('text').style('text-anchor', labelSunbeamLayout ? (d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end' : 'middle').style('fill', '#000');
                            });
                            var labelLocationHash = {};
                            var avgHeight = 14;
                            var avgWidth = 140;
                            var createHashKey = function (coordinates) {
                                return Math.floor(coordinates[0] / avgWidth) * avgWidth + ',' + Math.floor(coordinates[1] / avgHeight) * avgHeight;
                            };
                            var getSlicePercentage = function (d) {
                                return (d.endAngle - d.startAngle) / (2 * Math.PI);
                            };
                            pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {
                                if (labelSunbeamLayout) {
                                    d.outerRadius = arcsRadiusOuter[i] + 10;
                                    d.innerRadius = arcsRadiusOuter[i] + 15;
                                    var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);
                                    if ((d.startAngle + d.endAngle) / 2 < Math.PI) {
                                        rotateAngle -= 90;
                                    } else {
                                        rotateAngle += 90;
                                    }
                                    return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';
                                } else {
                                    d.outerRadius = radius + 10;
                                    d.innerRadius = radius + 15;
                                    var center = labelsArc[i].centroid(d);
                                    var percent = getSlicePercentage(d);
                                    if (d.value && percent >= labelThreshold) {
                                        var hashKey = createHashKey(center);
                                        if (labelLocationHash[hashKey]) {
                                            center[1] -= avgHeight;
                                        }
                                        labelLocationHash[createHashKey(center)] = true;
                                    }
                                    return 'translate(' + center + ')';
                                }
                            });
                            pieLabels.select('.nv-label text').style('text-anchor', function (d, i) {
                                return labelSunbeamLayout ? (d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end' : 'middle';
                            }).text(function (d, i) {
                                var percent = getSlicePercentage(d);
                                var label = '';
                                if (!d.value || percent < labelThreshold)
                                    return '';
                                if (typeof labelType === 'function') {
                                    label = labelType(d, i, {
                                        'key': getX(d.data),
                                        'value': getY(d.data),
                                        'percent': valueFormat(percent)
                                    });
                                } else {
                                    switch (labelType) {
                                    case 'key':
                                        label = getX(d.data);
                                        break;
                                    case 'value':
                                        label = valueFormat(getY(d.data));
                                        break;
                                    case 'percent':
                                        label = d3.format('%')(percent);
                                        break;
                                    }
                                }
                                return label;
                            });
                        }
                        function angle(d) {
                            var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;
                            return a > 90 ? a - 180 : a;
                        }
                        function arcTween(a, idx) {
                            a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;
                            a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;
                            if (!donut)
                                a.innerRadius = 0;
                            var i = d3.interpolate(this._current, a);
                            this._current = i(0);
                            return function (t) {
                                return arcs[idx](i(t));
                            };
                        }
                    });
                    renderWatch.renderEnd('pie immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    arcsRadius: {
                        get: function () {
                            return arcsRadius;
                        },
                        set: function (_) {
                            arcsRadius = _;
                        }
                    },
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLabels: {
                        get: function () {
                            return showLabels;
                        },
                        set: function (_) {
                            showLabels = _;
                        }
                    },
                    title: {
                        get: function () {
                            return title;
                        },
                        set: function (_) {
                            title = _;
                        }
                    },
                    titleOffset: {
                        get: function () {
                            return titleOffset;
                        },
                        set: function (_) {
                            titleOffset = _;
                        }
                    },
                    labelThreshold: {
                        get: function () {
                            return labelThreshold;
                        },
                        set: function (_) {
                            labelThreshold = _;
                        }
                    },
                    valueFormat: {
                        get: function () {
                            return valueFormat;
                        },
                        set: function (_) {
                            valueFormat = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    endAngle: {
                        get: function () {
                            return endAngle;
                        },
                        set: function (_) {
                            endAngle = _;
                        }
                    },
                    startAngle: {
                        get: function () {
                            return startAngle;
                        },
                        set: function (_) {
                            startAngle = _;
                        }
                    },
                    padAngle: {
                        get: function () {
                            return padAngle;
                        },
                        set: function (_) {
                            padAngle = _;
                        }
                    },
                    cornerRadius: {
                        get: function () {
                            return cornerRadius;
                        },
                        set: function (_) {
                            cornerRadius = _;
                        }
                    },
                    donutRatio: {
                        get: function () {
                            return donutRatio;
                        },
                        set: function (_) {
                            donutRatio = _;
                        }
                    },
                    labelsOutside: {
                        get: function () {
                            return labelsOutside;
                        },
                        set: function (_) {
                            labelsOutside = _;
                        }
                    },
                    labelSunbeamLayout: {
                        get: function () {
                            return labelSunbeamLayout;
                        },
                        set: function (_) {
                            labelSunbeamLayout = _;
                        }
                    },
                    donut: {
                        get: function () {
                            return donut;
                        },
                        set: function (_) {
                            donut = _;
                        }
                    },
                    growOnHover: {
                        get: function () {
                            return growOnHover;
                        },
                        set: function (_) {
                            growOnHover = _;
                        }
                    },
                    pieLabelsOutside: {
                        get: function () {
                            return labelsOutside;
                        },
                        set: function (_) {
                            labelsOutside = _;
                            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');
                        }
                    },
                    donutLabelsOutside: {
                        get: function () {
                            return labelsOutside;
                        },
                        set: function (_) {
                            labelsOutside = _;
                            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');
                        }
                    },
                    labelFormat: {
                        get: function () {
                            return valueFormat;
                        },
                        set: function (_) {
                            valueFormat = _;
                            nv.deprecated('labelFormat', 'use valueFormat instead');
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = typeof _.top != 'undefined' ? _.top : margin.top;
                            margin.right = typeof _.right != 'undefined' ? _.right : margin.right;
                            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
                            margin.left = typeof _.left != 'undefined' ? _.left : margin.left;
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = d3.functor(_);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    labelType: {
                        get: function () {
                            return labelType;
                        },
                        set: function (_) {
                            labelType = _ || 'key';
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.pieChart = function () {
                'use strict';
                var pie = nv.models.pie();
                var legend = nv.models.legend();
                var tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 20,
                        bottom: 20,
                        left: 20
                    }, width = null, height = null, showLegend = true, legendPosition = 'top', color = nv.utils.defaultColor(), state = nv.utils.state(), defaultState = null, noData = null, duration = 250, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd');
                tooltip.duration(0).headerEnabled(false).valueFormatter(function (d, i) {
                    return pie.valueFormat()(d, i);
                });
                var renderWatch = nv.utils.renderWatch(dispatch);
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            })
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.active !== undefined) {
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                        }
                    };
                };
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(pie);
                    selection.each(function (data) {
                        var container = d3.select(this);
                        nv.utils.initSVG(container);
                        var that = this;
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            container.transition().call(chart);
                        };
                        chart.container = this;
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-pieWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            if (legendPosition === 'top') {
                                legend.width(availableWidth).key(pie.x());
                                wrap.select('.nv-legendWrap').datum(data).call(legend);
                                if (margin.top != legend.height()) {
                                    margin.top = legend.height();
                                    availableHeight = nv.utils.availableHeight(height, container, margin);
                                }
                                wrap.select('.nv-legendWrap').attr('transform', 'translate(0,' + -margin.top + ')');
                            } else if (legendPosition === 'right') {
                                var legendWidth = nv.models.legend().width();
                                if (availableWidth / 2 < legendWidth) {
                                    legendWidth = availableWidth / 2;
                                }
                                legend.height(availableHeight).key(pie.x());
                                legend.width(legendWidth);
                                availableWidth -= legend.width();
                                wrap.select('.nv-legendWrap').datum(data).call(legend).attr('transform', 'translate(' + availableWidth + ',0)');
                            }
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        pie.width(availableWidth).height(availableHeight);
                        var pieWrap = g.select('.nv-pieWrap').datum([data]);
                        d3.transition(pieWrap).call(pie);
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState) {
                                state[key] = newState[key];
                            }
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            chart.update();
                        });
                    });
                    renderWatch.renderEnd('pieChart immediate');
                    return chart;
                }
                pie.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt['series'] = {
                        key: chart.x()(evt.data),
                        value: chart.y()(evt.data),
                        color: evt.color
                    };
                    tooltip.data(evt).hidden(false);
                });
                pie.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                pie.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.legend = legend;
                chart.dispatch = dispatch;
                chart.pie = pie;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    legendPosition: {
                        get: function () {
                            return legendPosition;
                        },
                        set: function (_) {
                            legendPosition = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = _;
                            legend.color(color);
                            pie.color(color);
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    }
                });
                nv.utils.inheritOptions(chart, pie);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.scatter = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = null, height = null, color = nv.utils.defaultColor(), id = Math.floor(Math.random() * 100000), container = null, x = d3.scale.linear(), y = d3.scale.linear(), z = d3.scale.linear(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, getSize = function (d) {
                        return d.size || 1;
                    }, getShape = function (d) {
                        return d.shape || 'circle';
                    }, forceX = [], forceY = [], forceSize = [], interactive = true, pointActive = function (d) {
                        return !d.notActive;
                    }, padData = false, padDataOuter = 0.1, clipEdge = false, clipVoronoi = true, showVoronoi = false, clipRadius = function () {
                        return 25;
                    }, xDomain = null, yDomain = null, xRange = null, yRange = null, sizeDomain = null, sizeRange = null, singlePoint = false, dispatch = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd'), useVoronoi = true, duration = 250, interactiveUpdateDelay = 300, showLabels = false;
                var x0, y0, z0, timeoutID, needsUpdate = false, renderWatch = nv.utils.renderWatch(dispatch, duration), _sizeRange_def = [
                        16,
                        256
                    ], _caches;
                function getCache(d) {
                    var cache, i;
                    cache = _caches = _caches || {};
                    i = d[0].series;
                    cache = cache[i] = cache[i] || {};
                    i = d[1];
                    cache = cache[i] = cache[i] || {};
                    return cache;
                }
                function getDiffs(d) {
                    var i, key, point = d[0], cache = getCache(d), diffs = false;
                    for (i = 1; i < arguments.length; i++) {
                        key = arguments[i];
                        if (cache[key] !== point[key] || !cache.hasOwnProperty(key)) {
                            cache[key] = point[key];
                            diffs = true;
                        }
                    }
                    return diffs;
                }
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        container = d3.select(this);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        nv.utils.initSVG(container);
                        data.forEach(function (series, i) {
                            series.values.forEach(function (point) {
                                point.series = i;
                            });
                        });
                        var logScale = chart.yScale().name === d3.scale.log().name ? true : false;
                        var seriesData = xDomain && yDomain && sizeDomain ? [] : d3.merge(data.map(function (d) {
                            return d.values.map(function (d, i) {
                                return {
                                    x: getX(d, i),
                                    y: getY(d, i),
                                    size: getSize(d, i)
                                };
                            });
                        }));
                        x.domain(xDomain || d3.extent(seriesData.map(function (d) {
                            return d.x;
                        }).concat(forceX)));
                        if (padData && data[0])
                            x.range(xRange || [
                                (availableWidth * padDataOuter + availableWidth) / (2 * data[0].values.length),
                                availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)
                            ]);
                        else
                            x.range(xRange || [
                                0,
                                availableWidth
                            ]);
                        if (logScale) {
                            var min = d3.min(seriesData.map(function (d) {
                                if (d.y !== 0)
                                    return d.y;
                            }));
                            y.clamp(true).domain(yDomain || d3.extent(seriesData.map(function (d) {
                                if (d.y !== 0)
                                    return d.y;
                                else
                                    return min * 0.1;
                            }).concat(forceY))).range(yRange || [
                                availableHeight,
                                0
                            ]);
                        } else {
                            y.domain(yDomain || d3.extent(seriesData.map(function (d) {
                                return d.y;
                            }).concat(forceY))).range(yRange || [
                                availableHeight,
                                0
                            ]);
                        }
                        z.domain(sizeDomain || d3.extent(seriesData.map(function (d) {
                            return d.size;
                        }).concat(forceSize))).range(sizeRange || _sizeRange_def);
                        singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];
                        if (x.domain()[0] === x.domain()[1])
                            x.domain()[0] ? x.domain([
                                x.domain()[0] - x.domain()[0] * 0.01,
                                x.domain()[1] + x.domain()[1] * 0.01
                            ]) : x.domain([
                                -1,
                                1
                            ]);
                        if (y.domain()[0] === y.domain()[1])
                            y.domain()[0] ? y.domain([
                                y.domain()[0] - y.domain()[0] * 0.01,
                                y.domain()[1] + y.domain()[1] * 0.01
                            ]) : y.domain([
                                -1,
                                1
                            ]);
                        if (isNaN(x.domain()[0])) {
                            x.domain([
                                -1,
                                1
                            ]);
                        }
                        if (isNaN(y.domain()[0])) {
                            y.domain([
                                -1,
                                1
                            ]);
                        }
                        x0 = x0 || x;
                        y0 = y0 || y;
                        z0 = z0 || z;
                        var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);
                        var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        wrap.classed('nv-single-point', singlePoint);
                        gEnter.append('g').attr('class', 'nv-groups');
                        gEnter.append('g').attr('class', 'nv-point-paths');
                        wrapEnter.append('g').attr('class', 'nv-point-clips');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        defsEnter.append('clipPath').attr('id', 'nv-edge-clip-' + id).append('rect');
                        wrap.select('#nv-edge-clip-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight > 0 ? availableHeight : 0);
                        g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
                        function updateInteractiveLayer() {
                            needsUpdate = false;
                            if (!interactive)
                                return false;
                            if (useVoronoi === true) {
                                var vertices = d3.merge(data.map(function (group, groupIndex) {
                                    return group.values.map(function (point, pointIndex) {
                                        var pX = getX(point, pointIndex);
                                        var pY = getY(point, pointIndex);
                                        return [
                                            nv.utils.NaNtoZero(x(pX)) + Math.random() * 0.0001,
                                            nv.utils.NaNtoZero(y(pY)) + Math.random() * 0.0001,
                                            groupIndex,
                                            pointIndex,
                                            point
                                        ];
                                    }).filter(function (pointArray, pointIndex) {
                                        return pointActive(pointArray[4], pointIndex);
                                    });
                                }));
                                if (vertices.length == 0)
                                    return false;
                                if (vertices.length < 3) {
                                    vertices.push([
                                        x.range()[0] - 20,
                                        y.range()[0] - 20,
                                        null,
                                        null
                                    ]);
                                    vertices.push([
                                        x.range()[1] + 20,
                                        y.range()[1] + 20,
                                        null,
                                        null
                                    ]);
                                    vertices.push([
                                        x.range()[0] - 20,
                                        y.range()[0] + 20,
                                        null,
                                        null
                                    ]);
                                    vertices.push([
                                        x.range()[1] + 20,
                                        y.range()[1] - 20,
                                        null,
                                        null
                                    ]);
                                }
                                var bounds = d3.geom.polygon([
                                    [
                                        -10,
                                        -10
                                    ],
                                    [
                                        -10,
                                        height + 10
                                    ],
                                    [
                                        width + 10,
                                        height + 10
                                    ],
                                    [
                                        width + 10,
                                        -10
                                    ]
                                ]);
                                var voronoi = d3.geom.voronoi(vertices).map(function (d, i) {
                                    return {
                                        'data': bounds.clip(d),
                                        'series': vertices[i][2],
                                        'point': vertices[i][3]
                                    };
                                });
                                wrap.select('.nv-point-paths').selectAll('path').remove();
                                var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);
                                var vPointPaths = pointPaths.enter().append('svg:path').attr('d', function (d) {
                                    if (!d || !d.data || d.data.length === 0)
                                        return 'M 0 0';
                                    else
                                        return 'M' + d.data.join(',') + 'Z';
                                }).attr('id', function (d, i) {
                                    return 'nv-path-' + i;
                                }).attr('clip-path', function (d, i) {
                                    return 'url(#nv-clip-' + id + '-' + i + ')';
                                });
                                if (showVoronoi) {
                                    vPointPaths.style('fill', d3.rgb(230, 230, 230)).style('fill-opacity', 0.4).style('stroke-opacity', 1).style('stroke', d3.rgb(200, 200, 200));
                                }
                                if (clipVoronoi) {
                                    wrap.select('.nv-point-clips').selectAll('*').remove();
                                    var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);
                                    var vPointClips = pointClips.enter().append('svg:clipPath').attr('id', function (d, i) {
                                        return 'nv-clip-' + id + '-' + i;
                                    }).append('svg:circle').attr('cx', function (d) {
                                        return d[0];
                                    }).attr('cy', function (d) {
                                        return d[1];
                                    }).attr('r', clipRadius);
                                }
                                var mouseEventCallback = function (d, mDispatch) {
                                    if (needsUpdate)
                                        return 0;
                                    var series = data[d.series];
                                    if (series === undefined)
                                        return;
                                    var point = series.values[d.point];
                                    point['color'] = color(series, d.series);
                                    point['x'] = getX(point);
                                    point['y'] = getY(point);
                                    var box = container.node().getBoundingClientRect();
                                    var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                                    var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
                                    var pos = {
                                        left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,
                                        top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10
                                    };
                                    mDispatch({
                                        point: point,
                                        series: series,
                                        pos: pos,
                                        relativePos: [
                                            x(getX(point, d.point)) + margin.left,
                                            y(getY(point, d.point)) + margin.top
                                        ],
                                        seriesIndex: d.series,
                                        pointIndex: d.point
                                    });
                                };
                                pointPaths.on('click', function (d) {
                                    mouseEventCallback(d, dispatch.elementClick);
                                }).on('dblclick', function (d) {
                                    mouseEventCallback(d, dispatch.elementDblClick);
                                }).on('mouseover', function (d) {
                                    mouseEventCallback(d, dispatch.elementMouseover);
                                }).on('mouseout', function (d, i) {
                                    mouseEventCallback(d, dispatch.elementMouseout);
                                });
                            } else {
                                wrap.select('.nv-groups').selectAll('.nv-group').selectAll('.nv-point').on('click', function (d, i) {
                                    if (needsUpdate || !data[d.series])
                                        return 0;
                                    var series = data[d.series], point = series.values[i];
                                    dispatch.elementClick({
                                        point: point,
                                        series: series,
                                        pos: [
                                            x(getX(point, i)) + margin.left,
                                            y(getY(point, i)) + margin.top
                                        ],
                                        relativePos: [
                                            x(getX(point, i)) + margin.left,
                                            y(getY(point, i)) + margin.top
                                        ],
                                        seriesIndex: d.series,
                                        pointIndex: i
                                    });
                                }).on('dblclick', function (d, i) {
                                    if (needsUpdate || !data[d.series])
                                        return 0;
                                    var series = data[d.series], point = series.values[i];
                                    dispatch.elementDblClick({
                                        point: point,
                                        series: series,
                                        pos: [
                                            x(getX(point, i)) + margin.left,
                                            y(getY(point, i)) + margin.top
                                        ],
                                        relativePos: [
                                            x(getX(point, i)) + margin.left,
                                            y(getY(point, i)) + margin.top
                                        ],
                                        seriesIndex: d.series,
                                        pointIndex: i
                                    });
                                }).on('mouseover', function (d, i) {
                                    if (needsUpdate || !data[d.series])
                                        return 0;
                                    var series = data[d.series], point = series.values[i];
                                    dispatch.elementMouseover({
                                        point: point,
                                        series: series,
                                        pos: [
                                            x(getX(point, i)) + margin.left,
                                            y(getY(point, i)) + margin.top
                                        ],
                                        relativePos: [
                                            x(getX(point, i)) + margin.left,
                                            y(getY(point, i)) + margin.top
                                        ],
                                        seriesIndex: d.series,
                                        pointIndex: i,
                                        color: color(d, i)
                                    });
                                }).on('mouseout', function (d, i) {
                                    if (needsUpdate || !data[d.series])
                                        return 0;
                                    var series = data[d.series], point = series.values[i];
                                    dispatch.elementMouseout({
                                        point: point,
                                        series: series,
                                        pos: [
                                            x(getX(point, i)) + margin.left,
                                            y(getY(point, i)) + margin.top
                                        ],
                                        relativePos: [
                                            x(getX(point, i)) + margin.left,
                                            y(getY(point, i)) + margin.top
                                        ],
                                        seriesIndex: d.series,
                                        pointIndex: i,
                                        color: color(d, i)
                                    });
                                });
                            }
                        }
                        needsUpdate = true;
                        var groups = wrap.select('.nv-groups').selectAll('.nv-group').data(function (d) {
                            return d;
                        }, function (d) {
                            return d.key;
                        });
                        groups.enter().append('g').style('stroke-opacity', 0.000001).style('fill-opacity', 0.000001);
                        groups.exit().remove();
                        groups.attr('class', function (d, i) {
                            return (d.classed || '') + ' nv-group nv-series-' + i;
                        }).classed('nv-noninteractive', !interactive).classed('hover', function (d) {
                            return d.hover;
                        });
                        groups.watchTransition(renderWatch, 'scatter: groups').style('fill', function (d, i) {
                            return color(d, i);
                        }).style('stroke', function (d, i) {
                            return color(d, i);
                        }).style('stroke-opacity', 1).style('fill-opacity', 0.5);
                        var points = groups.selectAll('path.nv-point').data(function (d) {
                            return d.values.map(function (point, pointIndex) {
                                return [
                                    point,
                                    pointIndex
                                ];
                            }).filter(function (pointArray, pointIndex) {
                                return pointActive(pointArray[0], pointIndex);
                            });
                        });
                        points.enter().append('path').attr('class', function (d) {
                            return 'nv-point nv-point-' + d[1];
                        }).style('fill', function (d) {
                            return d.color;
                        }).style('stroke', function (d) {
                            return d.color;
                        }).attr('transform', function (d) {
                            return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0], d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0], d[1]))) + ')';
                        }).attr('d', nv.utils.symbol().type(function (d) {
                            return getShape(d[0]);
                        }).size(function (d) {
                            return z(getSize(d[0], d[1]));
                        }));
                        points.exit().remove();
                        groups.exit().selectAll('path.nv-point').watchTransition(renderWatch, 'scatter exit').attr('transform', function (d) {
                            return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0], d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0], d[1]))) + ')';
                        }).remove();
                        points.filter(function (d) {
                            return scaleDiff || getDiffs(d, 'x', 'y');
                        }).watchTransition(renderWatch, 'scatter points').attr('transform', function (d) {
                            return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0], d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0], d[1]))) + ')';
                        });
                        points.filter(function (d) {
                            return scaleDiff || getDiffs(d, 'shape', 'size');
                        }).watchTransition(renderWatch, 'scatter points').attr('d', nv.utils.symbol().type(function (d) {
                            return getShape(d[0]);
                        }).size(function (d) {
                            return z(getSize(d[0], d[1]));
                        }));
                        if (showLabels) {
                            var titles = groups.selectAll('.nv-label').data(function (d) {
                                return d.values.map(function (point, pointIndex) {
                                    return [
                                        point,
                                        pointIndex
                                    ];
                                }).filter(function (pointArray, pointIndex) {
                                    return pointActive(pointArray[0], pointIndex);
                                });
                            });
                            titles.enter().append('text').style('fill', function (d, i) {
                                return d.color;
                            }).style('stroke-opacity', 0).style('fill-opacity', 1).attr('transform', function (d) {
                                var dx = nv.utils.NaNtoZero(x0(getX(d[0], d[1]))) + Math.sqrt(z(getSize(d[0], d[1])) / Math.PI) + 2;
                                return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0], d[1]))) + ')';
                            }).text(function (d, i) {
                                return d[0].label;
                            });
                            titles.exit().remove();
                            groups.exit().selectAll('path.nv-label').watchTransition(renderWatch, 'scatter exit').attr('transform', function (d) {
                                var dx = nv.utils.NaNtoZero(x(getX(d[0], d[1]))) + Math.sqrt(z(getSize(d[0], d[1])) / Math.PI) + 2;
                                return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0], d[1]))) + ')';
                            }).remove();
                            titles.each(function (d) {
                                d3.select(this).classed('nv-label', true).classed('nv-label-' + d[1], false).classed('hover', false);
                            });
                            titles.watchTransition(renderWatch, 'scatter labels').attr('transform', function (d) {
                                var dx = nv.utils.NaNtoZero(x(getX(d[0], d[1]))) + Math.sqrt(z(getSize(d[0], d[1])) / Math.PI) + 2;
                                return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0], d[1]))) + ')';
                            });
                        }
                        if (interactiveUpdateDelay) {
                            clearTimeout(timeoutID);
                            timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay);
                        } else {
                            updateInteractiveLayer();
                        }
                        x0 = x.copy();
                        y0 = y.copy();
                        z0 = z.copy();
                    });
                    renderWatch.renderEnd('scatter immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._calls = new function () {
                    this.clearHighlights = function () {
                        nv.dom.write(function () {
                            container.selectAll('.nv-point.hover').classed('hover', false);
                        });
                        return null;
                    };
                    this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {
                        nv.dom.write(function () {
                            container.select('.nv-groups').selectAll('.nv-series-' + seriesIndex).selectAll('.nv-point-' + pointIndex).classed('hover', isHoverOver);
                        });
                    };
                }();
                dispatch.on('elementMouseover.point', function (d) {
                    if (interactive)
                        chart._calls.highlightPoint(d.seriesIndex, d.pointIndex, true);
                });
                dispatch.on('elementMouseout.point', function (d) {
                    if (interactive)
                        chart._calls.highlightPoint(d.seriesIndex, d.pointIndex, false);
                });
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    pointScale: {
                        get: function () {
                            return z;
                        },
                        set: function (_) {
                            z = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    pointDomain: {
                        get: function () {
                            return sizeDomain;
                        },
                        set: function (_) {
                            sizeDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    pointRange: {
                        get: function () {
                            return sizeRange;
                        },
                        set: function (_) {
                            sizeRange = _;
                        }
                    },
                    forceX: {
                        get: function () {
                            return forceX;
                        },
                        set: function (_) {
                            forceX = _;
                        }
                    },
                    forceY: {
                        get: function () {
                            return forceY;
                        },
                        set: function (_) {
                            forceY = _;
                        }
                    },
                    forcePoint: {
                        get: function () {
                            return forceSize;
                        },
                        set: function (_) {
                            forceSize = _;
                        }
                    },
                    interactive: {
                        get: function () {
                            return interactive;
                        },
                        set: function (_) {
                            interactive = _;
                        }
                    },
                    pointActive: {
                        get: function () {
                            return pointActive;
                        },
                        set: function (_) {
                            pointActive = _;
                        }
                    },
                    padDataOuter: {
                        get: function () {
                            return padDataOuter;
                        },
                        set: function (_) {
                            padDataOuter = _;
                        }
                    },
                    padData: {
                        get: function () {
                            return padData;
                        },
                        set: function (_) {
                            padData = _;
                        }
                    },
                    clipEdge: {
                        get: function () {
                            return clipEdge;
                        },
                        set: function (_) {
                            clipEdge = _;
                        }
                    },
                    clipVoronoi: {
                        get: function () {
                            return clipVoronoi;
                        },
                        set: function (_) {
                            clipVoronoi = _;
                        }
                    },
                    clipRadius: {
                        get: function () {
                            return clipRadius;
                        },
                        set: function (_) {
                            clipRadius = _;
                        }
                    },
                    showVoronoi: {
                        get: function () {
                            return showVoronoi;
                        },
                        set: function (_) {
                            showVoronoi = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    interactiveUpdateDelay: {
                        get: function () {
                            return interactiveUpdateDelay;
                        },
                        set: function (_) {
                            interactiveUpdateDelay = _;
                        }
                    },
                    showLabels: {
                        get: function () {
                            return showLabels;
                        },
                        set: function (_) {
                            showLabels = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = d3.functor(_);
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = d3.functor(_);
                        }
                    },
                    pointSize: {
                        get: function () {
                            return getSize;
                        },
                        set: function (_) {
                            getSize = d3.functor(_);
                        }
                    },
                    pointShape: {
                        get: function () {
                            return getShape;
                        },
                        set: function (_) {
                            getShape = d3.functor(_);
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    useVoronoi: {
                        get: function () {
                            return useVoronoi;
                        },
                        set: function (_) {
                            useVoronoi = _;
                            if (useVoronoi === false) {
                                clipVoronoi = false;
                            }
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.scatterChart = function () {
                'use strict';
                var scatter = nv.models.scatter(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), distX = nv.models.distribution(), distY = nv.models.distribution(), tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 20,
                        bottom: 50,
                        left: 75
                    }, width = null, height = null, container = null, color = nv.utils.defaultColor(), x = scatter.xScale(), y = scatter.yScale(), showDistX = false, showDistY = false, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, state = nv.utils.state(), defaultState = null, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd'), noData = null, duration = 250, showLabels = false;
                scatter.xScale(x).yScale(y);
                xAxis.orient('bottom').tickPadding(10);
                yAxis.orient(rightAlignYAxis ? 'right' : 'left').tickPadding(10);
                distX.axis('x');
                distY.axis('y');
                tooltip.headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                }).valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                });
                var x0, y0, renderWatch = nv.utils.renderWatch(dispatch, duration);
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            })
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.active !== undefined)
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                    };
                };
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(scatter);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    if (showDistX)
                        renderWatch.models(distX);
                    if (showDistY)
                        renderWatch.models(distY);
                    selection.each(function (data) {
                        var that = this;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            if (duration === 0)
                                container.call(chart);
                            else
                                container.transition().duration(duration).call(chart);
                        };
                        chart.container = this;
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            renderWatch.renderEnd('scatter immediate');
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = scatter.xScale();
                        y = scatter.yScale();
                        var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('rect').attr('class', 'nvd3 nv-background').style('pointer-events', 'none');
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y nv-axis');
                        gEnter.append('g').attr('class', 'nv-scatterWrap');
                        gEnter.append('g').attr('class', 'nv-regressionLinesWrap');
                        gEnter.append('g').attr('class', 'nv-distWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        if (rightAlignYAxis) {
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
                        }
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            var legendWidth = availableWidth;
                            legend.width(legendWidth);
                            wrap.select('.nv-legendWrap').datum(data).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            wrap.select('.nv-legendWrap').attr('transform', 'translate(0' + ',' + -margin.top + ')');
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        scatter.width(availableWidth).height(availableHeight).color(data.map(function (d, i) {
                            d.color = d.color || color(d, i);
                            return d.color;
                        }).filter(function (d, i) {
                            return !data[i].disabled;
                        })).showLabels(showLabels);
                        wrap.select('.nv-scatterWrap').datum(data.filter(function (d) {
                            return !d.disabled;
                        })).call(scatter);
                        wrap.select('.nv-regressionLinesWrap').attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');
                        var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines').data(function (d) {
                            return d;
                        });
                        regWrap.enter().append('g').attr('class', 'nv-regLines');
                        var regLine = regWrap.selectAll('.nv-regLine').data(function (d) {
                            return [d];
                        });
                        regLine.enter().append('line').attr('class', 'nv-regLine').style('stroke-opacity', 0);
                        regLine.filter(function (d) {
                            return d.intercept && d.slope;
                        }).watchTransition(renderWatch, 'scatterPlusLineChart: regline').attr('x1', x.range()[0]).attr('x2', x.range()[1]).attr('y1', function (d, i) {
                            return y(x.domain()[0] * d.slope + d.intercept);
                        }).attr('y2', function (d, i) {
                            return y(x.domain()[1] * d.slope + d.intercept);
                        }).style('stroke', function (d, i, j) {
                            return color(d, j);
                        }).style('stroke-opacity', function (d, i) {
                            return d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined' ? 0 : 1;
                        });
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')').call(xAxis);
                        }
                        if (showYAxis) {
                            yAxis.scale(y)._ticks(nv.utils.calcTicksY(availableHeight / 36, data)).tickSize(-availableWidth, 0);
                            g.select('.nv-y.nv-axis').call(yAxis);
                        }
                        if (showDistX) {
                            distX.getData(scatter.x()).scale(x).width(availableWidth).color(data.map(function (d, i) {
                                return d.color || color(d, i);
                            }).filter(function (d, i) {
                                return !data[i].disabled;
                            }));
                            gEnter.select('.nv-distWrap').append('g').attr('class', 'nv-distributionX');
                            g.select('.nv-distributionX').attr('transform', 'translate(0,' + y.range()[0] + ')').datum(data.filter(function (d) {
                                return !d.disabled;
                            })).call(distX);
                        }
                        if (showDistY) {
                            distY.getData(scatter.y()).scale(y).width(availableHeight).color(data.map(function (d, i) {
                                return d.color || color(d, i);
                            }).filter(function (d, i) {
                                return !data[i].disabled;
                            }));
                            gEnter.select('.nv-distWrap').append('g').attr('class', 'nv-distributionY');
                            g.select('.nv-distributionY').attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size()) + ',0)').datum(data.filter(function (d) {
                                return !d.disabled;
                            })).call(distY);
                        }
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState)
                                state[key] = newState[key];
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined') {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            chart.update();
                        });
                        scatter.dispatch.on('elementMouseout.tooltip', function (evt) {
                            tooltip.hidden(true);
                            container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex).attr('y1', 0);
                            container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex).attr('x2', distY.size());
                        });
                        scatter.dispatch.on('elementMouseover.tooltip', function (evt) {
                            container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex).attr('y1', evt.relativePos[1] - availableHeight);
                            container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex).attr('x2', evt.relativePos[0] + distX.size());
                            tooltip.data(evt).hidden(false);
                        });
                        x0 = x.copy();
                        y0 = y.copy();
                    });
                    renderWatch.renderEnd('scatter with line immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.scatter = scatter;
                chart.legend = legend;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.distX = distX;
                chart.distY = distY;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    container: {
                        get: function () {
                            return container;
                        },
                        set: function (_) {
                            container = _;
                        }
                    },
                    showDistX: {
                        get: function () {
                            return showDistX;
                        },
                        set: function (_) {
                            showDistX = _;
                        }
                    },
                    showDistY: {
                        get: function () {
                            return showDistY;
                        },
                        set: function (_) {
                            showDistY = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                        }
                    },
                    showLabels: {
                        get: function () {
                            return showLabels;
                        },
                        set: function (_) {
                            showLabels = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    rightAlignYAxis: {
                        get: function () {
                            return rightAlignYAxis;
                        },
                        set: function (_) {
                            rightAlignYAxis = _;
                            yAxis.orient(_ ? 'right' : 'left');
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                            distX.color(color);
                            distY.color(color);
                        }
                    }
                });
                nv.utils.inheritOptions(chart, scatter);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.sparkline = function () {
                'use strict';
                var margin = {
                        top: 2,
                        right: 0,
                        bottom: 2,
                        left: 0
                    }, width = 400, height = 32, container = null, animate = true, x = d3.scale.linear(), y = d3.scale.linear(), getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, color = nv.utils.getColor(['#000']), xDomain, yDomain, xRange, yRange, showMinMaxPoints = true, showCurrentPoint = true, dispatch = d3.dispatch('renderEnd');
                var renderWatch = nv.utils.renderWatch(dispatch);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        x.domain(xDomain || d3.extent(data, getX)).range(xRange || [
                            0,
                            availableWidth
                        ]);
                        y.domain(yDomain || d3.extent(data, getY)).range(yRange || [
                            availableHeight,
                            0
                        ]);
                        var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var paths = wrap.selectAll('path').data(function (d) {
                            return [d];
                        });
                        paths.enter().append('path');
                        paths.exit().remove();
                        paths.style('stroke', function (d, i) {
                            return d.color || color(d, i);
                        }).attr('d', d3.svg.line().x(function (d, i) {
                            return x(getX(d, i));
                        }).y(function (d, i) {
                            return y(getY(d, i));
                        }));
                        var points = wrap.selectAll('circle.nv-point').data(function (data) {
                            var yValues = data.map(function (d, i) {
                                return getY(d, i);
                            });
                            function pointIndex(index) {
                                if (index != -1) {
                                    var result = data[index];
                                    result.pointIndex = index;
                                    return result;
                                } else {
                                    return null;
                                }
                            }
                            var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])), minPoint = pointIndex(yValues.indexOf(y.domain()[0])), currentPoint = pointIndex(yValues.length - 1);
                            return [
                                showMinMaxPoints ? minPoint : null,
                                showMinMaxPoints ? maxPoint : null,
                                showCurrentPoint ? currentPoint : null
                            ].filter(function (d) {
                                return d != null;
                            });
                        });
                        points.enter().append('circle');
                        points.exit().remove();
                        points.attr('cx', function (d, i) {
                            return x(getX(d, d.pointIndex));
                        }).attr('cy', function (d, i) {
                            return y(getY(d, d.pointIndex));
                        }).attr('r', 2).attr('class', function (d, i) {
                            return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' : getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue';
                        });
                    });
                    renderWatch.renderEnd('sparkline immediate');
                    return chart;
                }
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    xDomain: {
                        get: function () {
                            return xDomain;
                        },
                        set: function (_) {
                            xDomain = _;
                        }
                    },
                    yDomain: {
                        get: function () {
                            return yDomain;
                        },
                        set: function (_) {
                            yDomain = _;
                        }
                    },
                    xRange: {
                        get: function () {
                            return xRange;
                        },
                        set: function (_) {
                            xRange = _;
                        }
                    },
                    yRange: {
                        get: function () {
                            return yRange;
                        },
                        set: function (_) {
                            yRange = _;
                        }
                    },
                    xScale: {
                        get: function () {
                            return x;
                        },
                        set: function (_) {
                            x = _;
                        }
                    },
                    yScale: {
                        get: function () {
                            return y;
                        },
                        set: function (_) {
                            y = _;
                        }
                    },
                    animate: {
                        get: function () {
                            return animate;
                        },
                        set: function (_) {
                            animate = _;
                        }
                    },
                    showMinMaxPoints: {
                        get: function () {
                            return showMinMaxPoints;
                        },
                        set: function (_) {
                            showMinMaxPoints = _;
                        }
                    },
                    showCurrentPoint: {
                        get: function () {
                            return showCurrentPoint;
                        },
                        set: function (_) {
                            showCurrentPoint = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = d3.functor(_);
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = d3.functor(_);
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                chart.dispatch = dispatch;
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.sparklinePlus = function () {
                'use strict';
                var sparkline = nv.models.sparkline();
                var margin = {
                        top: 15,
                        right: 100,
                        bottom: 10,
                        left: 50
                    }, width = null, height = null, x, y, index = [], paused = false, xTickFormat = d3.format(',r'), yTickFormat = d3.format(',.2f'), showLastValue = true, alignValue = true, rightAlignValue = false, noData = null, dispatch = d3.dispatch('renderEnd');
                var renderWatch = nv.utils.renderWatch(dispatch);
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(sparkline);
                    selection.each(function (data) {
                        var container = d3.select(this);
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            container.call(chart);
                        };
                        chart.container = this;
                        if (!data || !data.length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        var currentValue = sparkline.y()(data[data.length - 1], data.length - 1);
                        x = sparkline.xScale();
                        y = sparkline.yScale();
                        var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-sparklineWrap');
                        gEnter.append('g').attr('class', 'nv-valueWrap');
                        gEnter.append('g').attr('class', 'nv-hoverArea');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        var sparklineWrap = g.select('.nv-sparklineWrap');
                        sparkline.width(availableWidth).height(availableHeight);
                        sparklineWrap.call(sparkline);
                        if (showLastValue) {
                            var valueWrap = g.select('.nv-valueWrap');
                            var value = valueWrap.selectAll('.nv-currentValue').data([currentValue]);
                            value.enter().append('text').attr('class', 'nv-currentValue').attr('dx', rightAlignValue ? -8 : 8).attr('dy', '.9em').style('text-anchor', rightAlignValue ? 'end' : 'start');
                            value.attr('x', availableWidth + (rightAlignValue ? margin.right : 0)).attr('y', alignValue ? function (d) {
                                return y(d);
                            } : 0).style('fill', sparkline.color()(data[data.length - 1], data.length - 1)).text(yTickFormat(currentValue));
                        }
                        gEnter.select('.nv-hoverArea').append('rect').on('mousemove', sparklineHover).on('click', function () {
                            paused = !paused;
                        }).on('mouseout', function () {
                            index = [];
                            updateValueLine();
                        });
                        g.select('.nv-hoverArea rect').attr('transform', function (d) {
                            return 'translate(' + -margin.left + ',' + -margin.top + ')';
                        }).attr('width', availableWidth + margin.left + margin.right).attr('height', availableHeight + margin.top);
                        function updateValueLine() {
                            if (paused)
                                return;
                            var hoverValue = g.selectAll('.nv-hoverValue').data(index);
                            var hoverEnter = hoverValue.enter().append('g').attr('class', 'nv-hoverValue').style('stroke-opacity', 0).style('fill-opacity', 0);
                            hoverValue.exit().transition().duration(250).style('stroke-opacity', 0).style('fill-opacity', 0).remove();
                            hoverValue.attr('transform', function (d) {
                                return 'translate(' + x(sparkline.x()(data[d], d)) + ',0)';
                            }).transition().duration(250).style('stroke-opacity', 1).style('fill-opacity', 1);
                            if (!index.length)
                                return;
                            hoverEnter.append('line').attr('x1', 0).attr('y1', -margin.top).attr('x2', 0).attr('y2', availableHeight);
                            hoverEnter.append('text').attr('class', 'nv-xValue').attr('x', -6).attr('y', -margin.top).attr('text-anchor', 'end').attr('dy', '.9em');
                            g.select('.nv-hoverValue .nv-xValue').text(xTickFormat(sparkline.x()(data[index[0]], index[0])));
                            hoverEnter.append('text').attr('class', 'nv-yValue').attr('x', 6).attr('y', -margin.top).attr('text-anchor', 'start').attr('dy', '.9em');
                            g.select('.nv-hoverValue .nv-yValue').text(yTickFormat(sparkline.y()(data[index[0]], index[0])));
                        }
                        function sparklineHover() {
                            if (paused)
                                return;
                            var pos = d3.mouse(this)[0] - margin.left;
                            function getClosestIndex(data, x) {
                                var distance = Math.abs(sparkline.x()(data[0], 0) - x);
                                var closestIndex = 0;
                                for (var i = 0; i < data.length; i++) {
                                    if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {
                                        distance = Math.abs(sparkline.x()(data[i], i) - x);
                                        closestIndex = i;
                                    }
                                }
                                return closestIndex;
                            }
                            index = [getClosestIndex(data, Math.round(x.invert(pos)))];
                            updateValueLine();
                        }
                    });
                    renderWatch.renderEnd('sparklinePlus immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.sparkline = sparkline;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    xTickFormat: {
                        get: function () {
                            return xTickFormat;
                        },
                        set: function (_) {
                            xTickFormat = _;
                        }
                    },
                    yTickFormat: {
                        get: function () {
                            return yTickFormat;
                        },
                        set: function (_) {
                            yTickFormat = _;
                        }
                    },
                    showLastValue: {
                        get: function () {
                            return showLastValue;
                        },
                        set: function (_) {
                            showLastValue = _;
                        }
                    },
                    alignValue: {
                        get: function () {
                            return alignValue;
                        },
                        set: function (_) {
                            alignValue = _;
                        }
                    },
                    rightAlignValue: {
                        get: function () {
                            return rightAlignValue;
                        },
                        set: function (_) {
                            rightAlignValue = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    }
                });
                nv.utils.inheritOptions(chart, sparkline);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.stackedArea = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 960, height = 500, color = nv.utils.defaultColor(), id = Math.floor(Math.random() * 100000), container = null, getX = function (d) {
                        return d.x;
                    }, getY = function (d) {
                        return d.y;
                    }, defined = function (d, i) {
                        return !isNaN(getY(d, i)) && getY(d, i) !== null;
                    }, style = 'stack', offset = 'zero', order = 'default', interpolate = 'linear', clipEdge = false, x, y, scatter = nv.models.scatter(), duration = 250, dispatch = d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout', 'renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout');
                scatter.pointSize(2.2).pointDomain([
                    2.2,
                    2.2
                ]);
                var renderWatch = nv.utils.renderWatch(dispatch, duration);
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(scatter);
                    selection.each(function (data) {
                        var availableWidth = width - margin.left - margin.right, availableHeight = height - margin.top - margin.bottom;
                        container = d3.select(this);
                        nv.utils.initSVG(container);
                        x = scatter.xScale();
                        y = scatter.yScale();
                        var dataRaw = data;
                        data.forEach(function (aseries, i) {
                            aseries.seriesIndex = i;
                            aseries.values = aseries.values.map(function (d, j) {
                                d.index = j;
                                d.seriesIndex = i;
                                return d;
                            });
                        });
                        var dataFiltered = data.filter(function (series) {
                            return !series.disabled;
                        });
                        data = d3.layout.stack().order(order).offset(offset).values(function (d) {
                            return d.values;
                        }).x(getX).y(getY).out(function (d, y0, y) {
                            d.display = {
                                y: y,
                                y0: y0
                            };
                        })(dataFiltered);
                        var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);
                        var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');
                        var defsEnter = wrapEnter.append('defs');
                        var gEnter = wrapEnter.append('g');
                        var g = wrap.select('g');
                        gEnter.append('g').attr('class', 'nv-areaWrap');
                        gEnter.append('g').attr('class', 'nv-scatterWrap');
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        if (scatter.forceY().length == 0) {
                            scatter.forceY().push(0);
                        }
                        scatter.width(availableWidth).height(availableHeight).x(getX).y(function (d) {
                            if (d.display !== undefined) {
                                return d.display.y + d.display.y0;
                            }
                        }).color(data.map(function (d, i) {
                            d.color = d.color || color(d, d.seriesIndex);
                            return d.color;
                        }));
                        var scatterWrap = g.select('.nv-scatterWrap').datum(data);
                        scatterWrap.call(scatter);
                        defsEnter.append('clipPath').attr('id', 'nv-edge-clip-' + id).append('rect');
                        wrap.select('#nv-edge-clip-' + id + ' rect').attr('width', availableWidth).attr('height', availableHeight);
                        g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
                        var area = d3.svg.area().defined(defined).x(function (d, i) {
                            return x(getX(d, i));
                        }).y0(function (d) {
                            return y(d.display.y0);
                        }).y1(function (d) {
                            return y(d.display.y + d.display.y0);
                        }).interpolate(interpolate);
                        var zeroArea = d3.svg.area().defined(defined).x(function (d, i) {
                            return x(getX(d, i));
                        }).y0(function (d) {
                            return y(d.display.y0);
                        }).y1(function (d) {
                            return y(d.display.y0);
                        });
                        var path = g.select('.nv-areaWrap').selectAll('path.nv-area').data(function (d) {
                            return d;
                        });
                        path.enter().append('path').attr('class', function (d, i) {
                            return 'nv-area nv-area-' + i;
                        }).attr('d', function (d, i) {
                            return zeroArea(d.values, d.seriesIndex);
                        }).on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true);
                            dispatch.areaMouseover({
                                point: d,
                                series: d.key,
                                pos: [
                                    d3.event.pageX,
                                    d3.event.pageY
                                ],
                                seriesIndex: d.seriesIndex
                            });
                        }).on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false);
                            dispatch.areaMouseout({
                                point: d,
                                series: d.key,
                                pos: [
                                    d3.event.pageX,
                                    d3.event.pageY
                                ],
                                seriesIndex: d.seriesIndex
                            });
                        }).on('click', function (d, i) {
                            d3.select(this).classed('hover', false);
                            dispatch.areaClick({
                                point: d,
                                series: d.key,
                                pos: [
                                    d3.event.pageX,
                                    d3.event.pageY
                                ],
                                seriesIndex: d.seriesIndex
                            });
                        });
                        path.exit().remove();
                        path.style('fill', function (d, i) {
                            return d.color || color(d, d.seriesIndex);
                        }).style('stroke', function (d, i) {
                            return d.color || color(d, d.seriesIndex);
                        });
                        path.watchTransition(renderWatch, 'stackedArea path').attr('d', function (d, i) {
                            return area(d.values, i);
                        });
                        scatter.dispatch.on('elementMouseover.area', function (e) {
                            g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);
                        });
                        scatter.dispatch.on('elementMouseout.area', function (e) {
                            g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);
                        });
                        chart.d3_stackedOffset_stackPercent = function (stackData) {
                            var n = stackData.length, m = stackData[0].length, i, j, o, y0 = [];
                            for (j = 0; j < m; ++j) {
                                for (i = 0, o = 0; i < dataRaw.length; i++) {
                                    o += getY(dataRaw[i].values[j]);
                                }
                                if (o)
                                    for (i = 0; i < n; i++) {
                                        stackData[i][j][1] /= o;
                                    }
                                else {
                                    for (i = 0; i < n; i++) {
                                        stackData[i][j][1] = 0;
                                    }
                                }
                            }
                            for (j = 0; j < m; ++j)
                                y0[j] = 0;
                            return y0;
                        };
                    });
                    renderWatch.renderEnd('stackedArea immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.scatter = scatter;
                scatter.dispatch.on('elementClick', function () {
                    dispatch.elementClick.apply(this, arguments);
                });
                scatter.dispatch.on('elementMouseover', function () {
                    dispatch.elementMouseover.apply(this, arguments);
                });
                scatter.dispatch.on('elementMouseout', function () {
                    dispatch.elementMouseout.apply(this, arguments);
                });
                chart.interpolate = function (_) {
                    if (!arguments.length)
                        return interpolate;
                    interpolate = _;
                    return chart;
                };
                chart.duration = function (_) {
                    if (!arguments.length)
                        return duration;
                    duration = _;
                    renderWatch.reset(duration);
                    scatter.duration(duration);
                    return chart;
                };
                chart.dispatch = dispatch;
                chart.scatter = scatter;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    defined: {
                        get: function () {
                            return defined;
                        },
                        set: function (_) {
                            defined = _;
                        }
                    },
                    clipEdge: {
                        get: function () {
                            return clipEdge;
                        },
                        set: function (_) {
                            clipEdge = _;
                        }
                    },
                    offset: {
                        get: function () {
                            return offset;
                        },
                        set: function (_) {
                            offset = _;
                        }
                    },
                    order: {
                        get: function () {
                            return order;
                        },
                        set: function (_) {
                            order = _;
                        }
                    },
                    interpolate: {
                        get: function () {
                            return interpolate;
                        },
                        set: function (_) {
                            interpolate = _;
                        }
                    },
                    x: {
                        get: function () {
                            return getX;
                        },
                        set: function (_) {
                            getX = d3.functor(_);
                        }
                    },
                    y: {
                        get: function () {
                            return getY;
                        },
                        set: function (_) {
                            getY = d3.functor(_);
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    },
                    style: {
                        get: function () {
                            return style;
                        },
                        set: function (_) {
                            style = _;
                            switch (style) {
                            case 'stack':
                                chart.offset('zero');
                                chart.order('default');
                                break;
                            case 'stream':
                                chart.offset('wiggle');
                                chart.order('inside-out');
                                break;
                            case 'stream-center':
                                chart.offset('silhouette');
                                chart.order('inside-out');
                                break;
                            case 'expand':
                                chart.offset('expand');
                                chart.order('default');
                                break;
                            case 'stack_percent':
                                chart.offset(chart.d3_stackedOffset_stackPercent);
                                chart.order('default');
                                break;
                            }
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            scatter.duration(duration);
                        }
                    }
                });
                nv.utils.inheritOptions(chart, scatter);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.stackedAreaChart = function () {
                'use strict';
                var stacked = nv.models.stackedArea(), xAxis = nv.models.axis(), yAxis = nv.models.axis(), legend = nv.models.legend(), controls = nv.models.legend(), interactiveLayer = nv.interactiveGuideline(), tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 25,
                        bottom: 50,
                        left: 60
                    }, width = null, height = null, color = nv.utils.defaultColor(), showControls = true, showLegend = true, showXAxis = true, showYAxis = true, rightAlignYAxis = false, useInteractiveGuideline = false, showTotalInTooltip = true, totalLabel = 'TOTAL', x, y, state = nv.utils.state(), defaultState = null, noData = null, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd'), controlWidth = 250, controlOptions = [
                        'Stacked',
                        'Stream',
                        'Expanded'
                    ], controlLabels = {}, duration = 250;
                state.style = stacked.style();
                xAxis.orient('bottom').tickPadding(7);
                yAxis.orient(rightAlignYAxis ? 'right' : 'left');
                tooltip.headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                }).valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                });
                interactiveLayer.tooltip.headerFormatter(function (d, i) {
                    return xAxis.tickFormat()(d, i);
                }).valueFormatter(function (d, i) {
                    return yAxis.tickFormat()(d, i);
                });
                var oldYTickFormat = null, oldValueFormatter = null;
                controls.updateState(false);
                var renderWatch = nv.utils.renderWatch(dispatch);
                var style = stacked.style();
                var stateGetter = function (data) {
                    return function () {
                        return {
                            active: data.map(function (d) {
                                return !d.disabled;
                            }),
                            style: stacked.style()
                        };
                    };
                };
                var stateSetter = function (data) {
                    return function (state) {
                        if (state.style !== undefined)
                            style = state.style;
                        if (state.active !== undefined)
                            data.forEach(function (series, i) {
                                series.disabled = !state.active[i];
                            });
                    };
                };
                var percentFormatter = d3.format('%');
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(stacked);
                    if (showXAxis)
                        renderWatch.models(xAxis);
                    if (showYAxis)
                        renderWatch.models(yAxis);
                    selection.each(function (data) {
                        var container = d3.select(this), that = this;
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin), availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            container.transition().duration(duration).call(chart);
                        };
                        chart.container = this;
                        state.setter(stateSetter(data), chart.update).getter(stateGetter(data)).update();
                        state.disabled = data.map(function (d) {
                            return !!d.disabled;
                        });
                        if (!defaultState) {
                            var key;
                            defaultState = {};
                            for (key in state) {
                                if (state[key] instanceof Array)
                                    defaultState[key] = state[key].slice(0);
                                else
                                    defaultState[key] = state[key];
                            }
                        }
                        if (!data || !data.length || !data.filter(function (d) {
                                return d.values.length;
                            }).length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        x = stacked.xScale();
                        y = stacked.yScale();
                        var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);
                        var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');
                        var g = wrap.select('g');
                        gEnter.append('rect').style('opacity', 0);
                        gEnter.append('g').attr('class', 'nv-x nv-axis');
                        gEnter.append('g').attr('class', 'nv-y nv-axis');
                        gEnter.append('g').attr('class', 'nv-stackedWrap');
                        gEnter.append('g').attr('class', 'nv-legendWrap');
                        gEnter.append('g').attr('class', 'nv-controlsWrap');
                        gEnter.append('g').attr('class', 'nv-interactive');
                        g.select('rect').attr('width', availableWidth).attr('height', availableHeight);
                        if (!showLegend) {
                            g.select('.nv-legendWrap').selectAll('*').remove();
                        } else {
                            var legendWidth = showControls ? availableWidth - controlWidth : availableWidth;
                            legend.width(legendWidth);
                            g.select('.nv-legendWrap').datum(data).call(legend);
                            if (margin.top != legend.height()) {
                                margin.top = legend.height();
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            g.select('.nv-legendWrap').attr('transform', 'translate(' + (availableWidth - legendWidth) + ',' + -margin.top + ')');
                        }
                        if (!showControls) {
                            g.select('.nv-controlsWrap').selectAll('*').remove();
                        } else {
                            var controlsData = [
                                {
                                    key: controlLabels.stacked || 'Stacked',
                                    metaKey: 'Stacked',
                                    disabled: stacked.style() != 'stack',
                                    style: 'stack'
                                },
                                {
                                    key: controlLabels.stream || 'Stream',
                                    metaKey: 'Stream',
                                    disabled: stacked.style() != 'stream',
                                    style: 'stream'
                                },
                                {
                                    key: controlLabels.expanded || 'Expanded',
                                    metaKey: 'Expanded',
                                    disabled: stacked.style() != 'expand',
                                    style: 'expand'
                                },
                                {
                                    key: controlLabels.stack_percent || 'Stack %',
                                    metaKey: 'Stack_Percent',
                                    disabled: stacked.style() != 'stack_percent',
                                    style: 'stack_percent'
                                }
                            ];
                            controlWidth = controlOptions.length / 3 * 260;
                            controlsData = controlsData.filter(function (d) {
                                return controlOptions.indexOf(d.metaKey) !== -1;
                            });
                            controls.width(controlWidth).color([
                                '#444',
                                '#444',
                                '#444'
                            ]);
                            g.select('.nv-controlsWrap').datum(controlsData).call(controls);
                            if (margin.top != Math.max(controls.height(), legend.height())) {
                                margin.top = Math.max(controls.height(), legend.height());
                                availableHeight = nv.utils.availableHeight(height, container, margin);
                            }
                            g.select('.nv-controlsWrap').attr('transform', 'translate(0,' + -margin.top + ')');
                        }
                        wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                        if (rightAlignYAxis) {
                            g.select('.nv-y.nv-axis').attr('transform', 'translate(' + availableWidth + ',0)');
                        }
                        if (useInteractiveGuideline) {
                            interactiveLayer.width(availableWidth).height(availableHeight).margin({
                                left: margin.left,
                                top: margin.top
                            }).svgContainer(container).xScale(x);
                            wrap.select('.nv-interactive').call(interactiveLayer);
                        }
                        stacked.width(availableWidth).height(availableHeight);
                        var stackedWrap = g.select('.nv-stackedWrap').datum(data);
                        stackedWrap.transition().call(stacked);
                        if (showXAxis) {
                            xAxis.scale(x)._ticks(nv.utils.calcTicksX(availableWidth / 100, data)).tickSize(-availableHeight, 0);
                            g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + availableHeight + ')');
                            g.select('.nv-x.nv-axis').transition().duration(0).call(xAxis);
                        }
                        if (showYAxis) {
                            var ticks;
                            if (stacked.offset() === 'wiggle') {
                                ticks = 0;
                            } else {
                                ticks = nv.utils.calcTicksY(availableHeight / 36, data);
                            }
                            yAxis.scale(y)._ticks(ticks).tickSize(-availableWidth, 0);
                            if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {
                                var currentFormat = yAxis.tickFormat();
                                if (!oldYTickFormat || currentFormat !== percentFormatter)
                                    oldYTickFormat = currentFormat;
                                yAxis.tickFormat(percentFormatter);
                            } else {
                                if (oldYTickFormat) {
                                    yAxis.tickFormat(oldYTickFormat);
                                    oldYTickFormat = null;
                                }
                            }
                            g.select('.nv-y.nv-axis').transition().duration(0).call(yAxis);
                        }
                        stacked.dispatch.on('areaClick.toggle', function (e) {
                            if (data.filter(function (d) {
                                    return !d.disabled;
                                }).length === 1)
                                data.forEach(function (d) {
                                    d.disabled = false;
                                });
                            else
                                data.forEach(function (d, i) {
                                    d.disabled = i != e.seriesIndex;
                                });
                            state.disabled = data.map(function (d) {
                                return !!d.disabled;
                            });
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        legend.dispatch.on('stateChange', function (newState) {
                            for (var key in newState)
                                state[key] = newState[key];
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        controls.dispatch.on('legendClick', function (d, i) {
                            if (!d.disabled)
                                return;
                            controlsData = controlsData.map(function (s) {
                                s.disabled = true;
                                return s;
                            });
                            d.disabled = false;
                            stacked.style(d.style);
                            state.style = stacked.style();
                            dispatch.stateChange(state);
                            chart.update();
                        });
                        interactiveLayer.dispatch.on('elementMousemove', function (e) {
                            stacked.clearHighlights();
                            var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0;
                            data.filter(function (series, i) {
                                series.seriesIndex = i;
                                return !series.disabled;
                            }).forEach(function (series, i) {
                                pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
                                var point = series.values[pointIndex];
                                var pointYValue = chart.y()(point, pointIndex);
                                if (pointYValue != null) {
                                    stacked.highlightPoint(i, pointIndex, true);
                                }
                                if (typeof point === 'undefined')
                                    return;
                                if (typeof singlePoint === 'undefined')
                                    singlePoint = point;
                                if (typeof pointXLocation === 'undefined')
                                    pointXLocation = chart.xScale()(chart.x()(point, pointIndex));
                                var tooltipValue = stacked.style() == 'expand' ? point.display.y : chart.y()(point, pointIndex);
                                allData.push({
                                    key: series.key,
                                    value: tooltipValue,
                                    color: color(series, series.seriesIndex),
                                    point: point
                                });
                                if (showTotalInTooltip && stacked.style() != 'expand') {
                                    valueSum += tooltipValue;
                                }
                                ;
                            });
                            allData.reverse();
                            if (allData.length > 2) {
                                var yValue = chart.yScale().invert(e.mouseY);
                                var yDistMax = Infinity, indexToHighlight = null;
                                allData.forEach(function (series, i) {
                                    yValue = Math.abs(yValue);
                                    var stackedY0 = Math.abs(series.point.display.y0);
                                    var stackedY = Math.abs(series.point.display.y);
                                    if (yValue >= stackedY0 && yValue <= stackedY + stackedY0) {
                                        indexToHighlight = i;
                                        return;
                                    }
                                });
                                if (indexToHighlight != null)
                                    allData[indexToHighlight].highlight = true;
                            }
                            if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2) {
                                allData.push({
                                    key: totalLabel,
                                    value: valueSum,
                                    total: true
                                });
                            }
                            var xValue = chart.x()(singlePoint, pointIndex);
                            var valueFormatter = interactiveLayer.tooltip.valueFormatter();
                            if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {
                                if (!oldValueFormatter) {
                                    oldValueFormatter = valueFormatter;
                                }
                                valueFormatter = d3.format('.1%');
                            } else {
                                if (oldValueFormatter) {
                                    valueFormatter = oldValueFormatter;
                                    oldValueFormatter = null;
                                }
                            }
                            interactiveLayer.tooltip.chartContainer(that.parentNode).valueFormatter(valueFormatter).data({
                                value: xValue,
                                series: allData
                            })();
                            interactiveLayer.renderGuideLine(pointXLocation);
                        });
                        interactiveLayer.dispatch.on('elementMouseout', function (e) {
                            stacked.clearHighlights();
                        });
                        dispatch.on('changeState', function (e) {
                            if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {
                                data.forEach(function (series, i) {
                                    series.disabled = e.disabled[i];
                                });
                                state.disabled = e.disabled;
                            }
                            if (typeof e.style !== 'undefined') {
                                stacked.style(e.style);
                                style = e.style;
                            }
                            chart.update();
                        });
                    });
                    renderWatch.renderEnd('stacked Area chart immediate');
                    return chart;
                }
                stacked.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt.point['x'] = stacked.x()(evt.point);
                    evt.point['y'] = stacked.y()(evt.point);
                    tooltip.data(evt).hidden(false);
                });
                stacked.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                chart.dispatch = dispatch;
                chart.stacked = stacked;
                chart.legend = legend;
                chart.controls = controls;
                chart.xAxis = xAxis;
                chart.yAxis = yAxis;
                chart.interactiveLayer = interactiveLayer;
                chart.tooltip = tooltip;
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    showLegend: {
                        get: function () {
                            return showLegend;
                        },
                        set: function (_) {
                            showLegend = _;
                        }
                    },
                    showXAxis: {
                        get: function () {
                            return showXAxis;
                        },
                        set: function (_) {
                            showXAxis = _;
                        }
                    },
                    showYAxis: {
                        get: function () {
                            return showYAxis;
                        },
                        set: function (_) {
                            showYAxis = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    showControls: {
                        get: function () {
                            return showControls;
                        },
                        set: function (_) {
                            showControls = _;
                        }
                    },
                    controlLabels: {
                        get: function () {
                            return controlLabels;
                        },
                        set: function (_) {
                            controlLabels = _;
                        }
                    },
                    controlOptions: {
                        get: function () {
                            return controlOptions;
                        },
                        set: function (_) {
                            controlOptions = _;
                        }
                    },
                    showTotalInTooltip: {
                        get: function () {
                            return showTotalInTooltip;
                        },
                        set: function (_) {
                            showTotalInTooltip = _;
                        }
                    },
                    totalLabel: {
                        get: function () {
                            return totalLabel;
                        },
                        set: function (_) {
                            totalLabel = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            stacked.duration(duration);
                            xAxis.duration(duration);
                            yAxis.duration(duration);
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                            legend.color(color);
                            stacked.color(color);
                        }
                    },
                    rightAlignYAxis: {
                        get: function () {
                            return rightAlignYAxis;
                        },
                        set: function (_) {
                            rightAlignYAxis = _;
                            yAxis.orient(rightAlignYAxis ? 'right' : 'left');
                        }
                    },
                    useInteractiveGuideline: {
                        get: function () {
                            return useInteractiveGuideline;
                        },
                        set: function (_) {
                            useInteractiveGuideline = !!_;
                            chart.interactive(!_);
                            chart.useVoronoi(!_);
                            stacked.scatter.interactive(!_);
                        }
                    }
                });
                nv.utils.inheritOptions(chart, stacked);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.sunburst = function () {
                'use strict';
                var margin = {
                        top: 0,
                        right: 0,
                        bottom: 0,
                        left: 0
                    }, width = 600, height = 600, mode = 'count', modes = {
                        count: function (d) {
                            return 1;
                        },
                        value: function (d) {
                            return d.value || d.size;
                        },
                        size: function (d) {
                            return d.value || d.size;
                        }
                    }, id = Math.floor(Math.random() * 10000), container = null, color = nv.utils.defaultColor(), showLabels = false, labelFormat = function (d) {
                        if (mode === 'count') {
                            return d.name + ' #' + d.value;
                        } else {
                            return d.name + ' ' + (d.value || d.size);
                        }
                    }, labelThreshold = 0.02, sort = function (d1, d2) {
                        return d1.name > d2.name;
                    }, key = function (d, i) {
                        return d.name;
                    }, groupColorByParent = true, duration = 500, dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');
                var x = d3.scale.linear().range([
                    0,
                    2 * Math.PI
                ]);
                var y = d3.scale.sqrt();
                var partition = d3.layout.partition().sort(sort);
                var node, availableWidth, availableHeight, radius;
                var prevPositions = {};
                var arc = d3.svg.arc().startAngle(function (d) {
                    return Math.max(0, Math.min(2 * Math.PI, x(d.x)));
                }).endAngle(function (d) {
                    return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));
                }).innerRadius(function (d) {
                    return Math.max(0, y(d.y));
                }).outerRadius(function (d) {
                    return Math.max(0, y(d.y + d.dy));
                });
                function rotationToAvoidUpsideDown(d) {
                    var centerAngle = computeCenterAngle(d);
                    if (centerAngle > 90) {
                        return 180;
                    } else {
                        return 0;
                    }
                }
                function computeCenterAngle(d) {
                    var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));
                    var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));
                    var centerAngle = (startAngle + endAngle) / 2 * (180 / Math.PI) - 90;
                    return centerAngle;
                }
                function labelThresholdMatched(d) {
                    var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));
                    var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));
                    var size = endAngle - startAngle;
                    return size > labelThreshold;
                }
                function arcTweenZoom(e, i) {
                    var xd = d3.interpolate(x.domain(), [
                            node.x,
                            node.x + node.dx
                        ]), yd = d3.interpolate(y.domain(), [
                            node.y,
                            1
                        ]), yr = d3.interpolate(y.range(), [
                            node.y ? 20 : 0,
                            radius
                        ]);
                    if (i === 0) {
                        return function () {
                            return arc(e);
                        };
                    } else {
                        return function (t) {
                            x.domain(xd(t));
                            y.domain(yd(t)).range(yr(t));
                            return arc(e);
                        };
                    }
                    ;
                }
                function arcTweenUpdate(d) {
                    var ipo = d3.interpolate({
                        x: d.x0,
                        dx: d.dx0,
                        y: d.y0,
                        dy: d.dy0
                    }, d);
                    return function (t) {
                        var b = ipo(t);
                        d.x0 = b.x;
                        d.dx0 = b.dx;
                        d.y0 = b.y;
                        d.dy0 = b.dy;
                        return arc(b);
                    };
                }
                function updatePrevPosition(node) {
                    var k = key(node);
                    if (!prevPositions[k])
                        prevPositions[k] = {};
                    var pP = prevPositions[k];
                    pP.dx = node.dx;
                    pP.x = node.x;
                    pP.dy = node.dy;
                    pP.y = node.y;
                }
                function storeRetrievePrevPositions(nodes) {
                    nodes.forEach(function (n) {
                        var k = key(n);
                        var pP = prevPositions[k];
                        if (pP) {
                            n.dx0 = pP.dx;
                            n.x0 = pP.x;
                            n.dy0 = pP.dy;
                            n.y0 = pP.y;
                        } else {
                            n.dx0 = n.dx;
                            n.x0 = n.x;
                            n.dy0 = n.dy;
                            n.y0 = n.y;
                        }
                        updatePrevPosition(n);
                    });
                }
                function zoomClick(d) {
                    var labels = container.selectAll('text');
                    var path = container.selectAll('path');
                    labels.transition().attr('opacity', 0);
                    node = d;
                    path.transition().duration(duration).attrTween('d', arcTweenZoom).each('end', function (e) {
                        if (e.x >= d.x && e.x < d.x + d.dx) {
                            if (e.depth >= d.depth) {
                                var parentNode = d3.select(this.parentNode);
                                var arcText = parentNode.select('text');
                                arcText.transition().duration(duration).text(function (e) {
                                    return labelFormat(e);
                                }).attr('opacity', function (d) {
                                    if (labelThresholdMatched(d)) {
                                        return 1;
                                    } else {
                                        return 0;
                                    }
                                }).attr('transform', function () {
                                    var width = this.getBBox().width;
                                    if (e.depth === 0)
                                        return 'translate(' + width / 2 * -1 + ',0)';
                                    else if (e.depth === d.depth) {
                                        return 'translate(' + (y(e.y) + 5) + ',0)';
                                    } else {
                                        var centerAngle = computeCenterAngle(e);
                                        var rotation = rotationToAvoidUpsideDown(e);
                                        if (rotation === 0) {
                                            return 'rotate(' + centerAngle + ')translate(' + (y(e.y) + 5) + ',0)';
                                        } else {
                                            return 'rotate(' + centerAngle + ')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';
                                        }
                                    }
                                });
                            }
                        }
                    });
                }
                var renderWatch = nv.utils.renderWatch(dispatch);
                function chart(selection) {
                    renderWatch.reset();
                    selection.each(function (data) {
                        container = d3.select(this);
                        availableWidth = nv.utils.availableWidth(width, container, margin);
                        availableHeight = nv.utils.availableHeight(height, container, margin);
                        radius = Math.min(availableWidth, availableHeight) / 2;
                        y.range([
                            0,
                            radius
                        ]);
                        var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');
                        if (!wrap[0][0]) {
                            wrap = container.append('g').attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id).attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
                        }
                        container.on('click', function (d, i) {
                            dispatch.chartClick({
                                data: d,
                                index: i,
                                pos: d3.event,
                                id: id
                            });
                        });
                        partition.value(modes[mode] || modes['count']);
                        var nodes = partition.nodes(data[0]).reverse();
                        storeRetrievePrevPositions(nodes);
                        var cG = wrap.selectAll('.arc-container').data(nodes, key);
                        var cGE = cG.enter().append('g').attr('class', 'arc-container');
                        cGE.append('path').attr('d', arc).style('fill', function (d) {
                            if (d.color) {
                                return d.color;
                            } else if (groupColorByParent) {
                                return color((d.children ? d : d.parent).name);
                            } else {
                                return color(d.name);
                            }
                        }).style('stroke', '#FFF').on('click', zoomClick).on('mouseover', function (d, i) {
                            d3.select(this).classed('hover', true).style('opacity', 0.8);
                            dispatch.elementMouseover({
                                data: d,
                                color: d3.select(this).style('fill')
                            });
                        }).on('mouseout', function (d, i) {
                            d3.select(this).classed('hover', false).style('opacity', 1);
                            dispatch.elementMouseout({ data: d });
                        }).on('mousemove', function (d, i) {
                            dispatch.elementMousemove({ data: d });
                        });
                        cG.each(function (d) {
                            d3.select(this).select('path').transition().duration(duration).attrTween('d', arcTweenUpdate);
                        });
                        if (showLabels) {
                            cG.selectAll('text').remove();
                            cG.append('text').text(function (e) {
                                return labelFormat(e);
                            }).transition().duration(duration).attr('opacity', function (d) {
                                if (labelThresholdMatched(d)) {
                                    return 1;
                                } else {
                                    return 0;
                                }
                            }).attr('transform', function (d) {
                                var width = this.getBBox().width;
                                if (d.depth === 0) {
                                    return 'rotate(0)translate(' + width / 2 * -1 + ',0)';
                                } else {
                                    var centerAngle = computeCenterAngle(d);
                                    var rotation = rotationToAvoidUpsideDown(d);
                                    if (rotation === 0) {
                                        return 'rotate(' + centerAngle + ')translate(' + (y(d.y) + 5) + ',0)';
                                    } else {
                                        return 'rotate(' + centerAngle + ')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';
                                    }
                                }
                            });
                        }
                        zoomClick(nodes[nodes.length - 1]);
                        cG.exit().transition().duration(duration).attr('opacity', 0).each('end', function (d) {
                            var k = key(d);
                            prevPositions[k] = undefined;
                        }).remove();
                    });
                    renderWatch.renderEnd('sunburst immediate');
                    return chart;
                }
                chart.dispatch = dispatch;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    width: {
                        get: function () {
                            return width;
                        },
                        set: function (_) {
                            width = _;
                        }
                    },
                    height: {
                        get: function () {
                            return height;
                        },
                        set: function (_) {
                            height = _;
                        }
                    },
                    mode: {
                        get: function () {
                            return mode;
                        },
                        set: function (_) {
                            mode = _;
                        }
                    },
                    id: {
                        get: function () {
                            return id;
                        },
                        set: function (_) {
                            id = _;
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                        }
                    },
                    groupColorByParent: {
                        get: function () {
                            return groupColorByParent;
                        },
                        set: function (_) {
                            groupColorByParent = !!_;
                        }
                    },
                    showLabels: {
                        get: function () {
                            return showLabels;
                        },
                        set: function (_) {
                            showLabels = !!_;
                        }
                    },
                    labelFormat: {
                        get: function () {
                            return labelFormat;
                        },
                        set: function (_) {
                            labelFormat = _;
                        }
                    },
                    labelThreshold: {
                        get: function () {
                            return labelThreshold;
                        },
                        set: function (_) {
                            labelThreshold = _;
                        }
                    },
                    sort: {
                        get: function () {
                            return sort;
                        },
                        set: function (_) {
                            sort = _;
                        }
                    },
                    key: {
                        get: function () {
                            return key;
                        },
                        set: function (_) {
                            key = _;
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top != undefined ? _.top : margin.top;
                            margin.right = _.right != undefined ? _.right : margin.right;
                            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
                            margin.left = _.left != undefined ? _.left : margin.left;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = nv.utils.getColor(_);
                        }
                    }
                });
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.models.sunburstChart = function () {
                'use strict';
                var sunburst = nv.models.sunburst();
                var tooltip = nv.models.tooltip();
                var margin = {
                        top: 30,
                        right: 20,
                        bottom: 20,
                        left: 20
                    }, width = null, height = null, color = nv.utils.defaultColor(), id = Math.round(Math.random() * 100000), defaultState = null, noData = null, duration = 250, dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd');
                var renderWatch = nv.utils.renderWatch(dispatch);
                tooltip.duration(0).headerEnabled(false).valueFormatter(function (d) {
                    return d;
                });
                function chart(selection) {
                    renderWatch.reset();
                    renderWatch.models(sunburst);
                    selection.each(function (data) {
                        var container = d3.select(this);
                        nv.utils.initSVG(container);
                        var availableWidth = nv.utils.availableWidth(width, container, margin);
                        var availableHeight = nv.utils.availableHeight(height, container, margin);
                        chart.update = function () {
                            if (duration === 0) {
                                container.call(chart);
                            } else {
                                container.transition().duration(duration).call(chart);
                            }
                        };
                        chart.container = container;
                        if (!data || !data.length) {
                            nv.utils.noData(chart, container);
                            return chart;
                        } else {
                            container.selectAll('.nv-noData').remove();
                        }
                        sunburst.width(availableWidth).height(availableHeight);
                        container.call(sunburst);
                    });
                    renderWatch.renderEnd('sunburstChart immediate');
                    return chart;
                }
                sunburst.dispatch.on('elementMouseover.tooltip', function (evt) {
                    evt.series = {
                        key: evt.data.name,
                        value: evt.data.value || evt.data.size,
                        color: evt.color
                    };
                    tooltip.data(evt).hidden(false);
                });
                sunburst.dispatch.on('elementMouseout.tooltip', function (evt) {
                    tooltip.hidden(true);
                });
                sunburst.dispatch.on('elementMousemove.tooltip', function (evt) {
                    tooltip();
                });
                chart.dispatch = dispatch;
                chart.sunburst = sunburst;
                chart.tooltip = tooltip;
                chart.options = nv.utils.optionsFunc.bind(chart);
                chart._options = Object.create({}, {
                    noData: {
                        get: function () {
                            return noData;
                        },
                        set: function (_) {
                            noData = _;
                        }
                    },
                    defaultState: {
                        get: function () {
                            return defaultState;
                        },
                        set: function (_) {
                            defaultState = _;
                        }
                    },
                    color: {
                        get: function () {
                            return color;
                        },
                        set: function (_) {
                            color = _;
                            sunburst.color(color);
                        }
                    },
                    duration: {
                        get: function () {
                            return duration;
                        },
                        set: function (_) {
                            duration = _;
                            renderWatch.reset(duration);
                            sunburst.duration(duration);
                        }
                    },
                    margin: {
                        get: function () {
                            return margin;
                        },
                        set: function (_) {
                            margin.top = _.top !== undefined ? _.top : margin.top;
                            margin.right = _.right !== undefined ? _.right : margin.right;
                            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
                            margin.left = _.left !== undefined ? _.left : margin.left;
                        }
                    }
                });
                nv.utils.inheritOptions(chart, sunburst);
                nv.utils.initOptions(chart);
                return chart;
            };
            nv.version = '1.8.2-dev';
        }());
    }(function () {
        return this;
    }()));
});
/*angular-nvd3@1.0.9#dist/angular-nvd3*/
define('angular-nvd3@1.0.9#dist/angular-nvd3', function (require, exports, module) {
    (function (global) {
        (function (window) {
            'use strict';
            var nv = window.nv;
            if (typeof exports !== 'undefined') {
                nv = require('nvd3');
            }
            angular.module('nvd3', []).directive('nvd3', [
                'nvd3Utils',
                function (nvd3Utils) {
                    return {
                        restrict: 'AE',
                        scope: {
                            data: '=',
                            options: '=',
                            api: '=?',
                            events: '=?',
                            config: '=?',
                            onReady: '&?'
                        },
                        link: function (scope, element, attrs) {
                            var defaultConfig = {
                                extended: false,
                                visible: true,
                                disabled: false,
                                refreshDataOnly: true,
                                deepWatchOptions: true,
                                deepWatchData: true,
                                deepWatchDataDepth: 2,
                                debounce: 10,
                                debounceImmediate: true
                            };
                            scope.isReady = false;
                            scope._config = angular.extend(defaultConfig, scope.config);
                            scope.api = {
                                refresh: function () {
                                    scope.api.updateWithOptions();
                                    scope.isReady = true;
                                },
                                refreshWithTimeout: function (t) {
                                    setTimeout(function () {
                                        scope.api.refresh();
                                    }, t);
                                },
                                update: function () {
                                    if (scope.chart && scope.svg) {
                                        if (scope.options.chart.type === 'sunburstChart') {
                                            scope.svg.datum(angular.copy(scope.data)).call(scope.chart);
                                        } else {
                                            scope.svg.datum(scope.data).call(scope.chart);
                                        }
                                    } else {
                                        scope.api.refresh();
                                    }
                                },
                                updateWithTimeout: function (t) {
                                    setTimeout(function () {
                                        scope.api.update();
                                    }, t);
                                },
                                updateWithOptions: function (options) {
                                    if (!arguments.length) {
                                        options = scope.options;
                                    } else {
                                        scope.options = options;
                                        if (scope._config.deepWatchOptions && !scope._config.disabled)
                                            return;
                                    }
                                    scope.api.clearElement();
                                    if (angular.isDefined(options) === false)
                                        return;
                                    if (!scope._config.visible)
                                        return;
                                    scope.chart = nv.models[options.chart.type]();
                                    scope.chart.id = Math.random().toString(36).substr(2, 15);
                                    angular.forEach(scope.chart, function (value, key) {
                                        if (key[0] === '_');
                                        else if ([
                                                'clearHighlights',
                                                'highlightPoint',
                                                'id',
                                                'options',
                                                'resizeHandler',
                                                'state',
                                                'open',
                                                'close',
                                                'tooltipContent'
                                            ].indexOf(key) >= 0);
                                        else if (key === 'dispatch') {
                                            if (options.chart[key] === undefined || options.chart[key] === null) {
                                                if (scope._config.extended)
                                                    options.chart[key] = {};
                                            }
                                            configureEvents(scope.chart[key], options.chart[key]);
                                        } else if ([
                                                'bars',
                                                'bars1',
                                                'bars2',
                                                'boxplot',
                                                'bullet',
                                                'controls',
                                                'discretebar',
                                                'distX',
                                                'distY',
                                                'focus',
                                                'interactiveLayer',
                                                'legend',
                                                'lines',
                                                'lines1',
                                                'lines2',
                                                'multibar',
                                                'pie',
                                                'scatter',
                                                'scatters1',
                                                'scatters2',
                                                'sparkline',
                                                'stack1',
                                                'stack2',
                                                'sunburst',
                                                'tooltip',
                                                'x2Axis',
                                                'xAxis',
                                                'y1Axis',
                                                'y2Axis',
                                                'y3Axis',
                                                'y4Axis',
                                                'yAxis',
                                                'yAxis1',
                                                'yAxis2'
                                            ].indexOf(key) >= 0 || key === 'stacked' && options.chart.type === 'stackedAreaChart') {
                                            if (options.chart[key] === undefined || options.chart[key] === null) {
                                                if (scope._config.extended)
                                                    options.chart[key] = {};
                                            }
                                            configure(scope.chart[key], options.chart[key], options.chart.type);
                                        } else if (key === 'focusHeight' && options.chart.type === 'lineChart');
                                        else if (key === 'focusHeight' && options.chart.type === 'lineWithFocusChart');
                                        else if ((key === 'xTickFormat' || key === 'yTickFormat') && options.chart.type === 'lineWithFocusChart');
                                        else if (key === 'tooltips' && options.chart.type === 'boxPlotChart');
                                        else if ((key === 'tooltipXContent' || key === 'tooltipYContent') && options.chart.type === 'scatterChart');
                                        else if ((key === 'x' || key === 'y') && options.chart.type === 'forceDirectedGraph');
                                        else if (options.chart[key] === undefined || options.chart[key] === null) {
                                            if (scope._config.extended) {
                                                if (key === 'barColor')
                                                    options.chart[key] = value()();
                                                else
                                                    options.chart[key] = value();
                                            }
                                        } else
                                            scope.chart[key](options.chart[key]);
                                    });
                                    scope.api.updateWithData();
                                    if (options['title'] || scope._config.extended)
                                        configureWrapper('title');
                                    if (options['subtitle'] || scope._config.extended)
                                        configureWrapper('subtitle');
                                    if (options['caption'] || scope._config.extended)
                                        configureWrapper('caption');
                                    if (options['styles'] || scope._config.extended)
                                        configureStyles();
                                    nv.addGraph(function () {
                                        if (!scope.chart)
                                            return;
                                        if (scope.chart.resizeHandler)
                                            scope.chart.resizeHandler.clear();
                                        scope.chart.resizeHandler = nv.utils.windowResize(function () {
                                            scope.chart && scope.chart.update && scope.chart.update();
                                        });
                                        if (options.chart.zoom !== undefined && [
                                                'scatterChart',
                                                'lineChart',
                                                'candlestickBarChart',
                                                'cumulativeLineChart',
                                                'historicalBarChart',
                                                'ohlcBarChart',
                                                'stackedAreaChart'
                                            ].indexOf(options.chart.type) > -1) {
                                            nvd3Utils.zoom(scope, options);
                                        }
                                        return scope.chart;
                                    }, options.chart['callback']);
                                },
                                updateWithData: function (data) {
                                    if (!arguments.length) {
                                        if (scope.options.chart.type === 'sunburstChart') {
                                            data = angular.copy(scope.data);
                                        } else {
                                            data = scope.data;
                                        }
                                    } else {
                                        scope.data = data;
                                        if (scope._config.deepWatchData && !scope._config.disabled)
                                            return;
                                    }
                                    if (data) {
                                        d3.select(element[0]).select('svg').remove();
                                        var h, w;
                                        scope.svg = d3.select(element[0]).insert('svg', '.caption');
                                        if (h = scope.options.chart.height) {
                                            if (!isNaN(+h))
                                                h += 'px';
                                            scope.svg.attr('height', h).style({ height: h });
                                        }
                                        if (w = scope.options.chart.width) {
                                            if (!isNaN(+w))
                                                w += 'px';
                                            scope.svg.attr('width', w).style({ width: w });
                                        } else {
                                            scope.svg.attr('width', '100%').style({ width: '100%' });
                                        }
                                        scope.svg.datum(data).call(scope.chart);
                                        if (scope.chart && scope.chart.zoomRender)
                                            scope.chart.zoomRender();
                                    }
                                },
                                clearElement: function () {
                                    element.find('.title').remove();
                                    element.find('.subtitle').remove();
                                    element.find('.caption').remove();
                                    element.empty();
                                    if (scope.chart && scope.chart.tooltip && scope.chart.tooltip.id) {
                                        d3.select('#' + scope.chart.tooltip.id()).remove();
                                    }
                                    if (nv.graphs && scope.chart) {
                                        for (var i = nv.graphs.length - 1; i >= 0; i--) {
                                            if (nv.graphs[i] && nv.graphs[i].id === scope.chart.id) {
                                                nv.graphs.splice(i, 1);
                                            }
                                        }
                                    }
                                    if (nv.tooltip && nv.tooltip.cleanup) {
                                        nv.tooltip.cleanup();
                                    }
                                    if (scope.chart && scope.chart.resizeHandler)
                                        scope.chart.resizeHandler.clear();
                                    scope.chart = null;
                                },
                                getScope: function () {
                                    return scope;
                                },
                                getElement: function () {
                                    return element;
                                }
                            };
                            function configure(chart, options, chartType) {
                                if (chart && options) {
                                    angular.forEach(chart, function (value, key) {
                                        if (key[0] === '_');
                                        else if (key === 'dispatch') {
                                            if (options[key] === undefined || options[key] === null) {
                                                if (scope._config.extended)
                                                    options[key] = {};
                                            }
                                            configureEvents(value, options[key]);
                                        } else if (key === 'tooltip') {
                                            if (options[key] === undefined || options[key] === null) {
                                                if (scope._config.extended)
                                                    options[key] = {};
                                            }
                                            configure(chart[key], options[key], chartType);
                                        } else if (key === 'contentGenerator') {
                                            if (options[key])
                                                chart[key](options[key]);
                                        } else if ([
                                                'axis',
                                                'clearHighlights',
                                                'defined',
                                                'highlightPoint',
                                                'nvPointerEventsClass',
                                                'options',
                                                'rangeBand',
                                                'rangeBands',
                                                'scatter',
                                                'open',
                                                'close',
                                                'node'
                                            ].indexOf(key) === -1) {
                                            if (options[key] === undefined || options[key] === null) {
                                                if (scope._config.extended)
                                                    options[key] = value();
                                            } else
                                                chart[key](options[key]);
                                        }
                                    });
                                }
                            }
                            function configureEvents(dispatch, options) {
                                if (dispatch && options) {
                                    angular.forEach(dispatch, function (value, key) {
                                        if (options[key] === undefined || options[key] === null) {
                                            if (scope._config.extended)
                                                options[key] = value.on;
                                        } else
                                            dispatch.on(key + '._', options[key]);
                                    });
                                }
                            }
                            function configureWrapper(name) {
                                var _ = nvd3Utils.deepExtend(defaultWrapper(name), scope.options[name] || {});
                                if (scope._config.extended)
                                    scope.options[name] = _;
                                var wrapElement = angular.element('<div></div>').html(_['html'] || '').addClass(name).addClass(_.className).removeAttr('style').css(_.css);
                                if (!_['html'])
                                    wrapElement.text(_.text);
                                if (_.enable) {
                                    if (name === 'title')
                                        element.prepend(wrapElement);
                                    else if (name === 'subtitle')
                                        angular.element(element[0].querySelector('.title')).after(wrapElement);
                                    else if (name === 'caption')
                                        element.append(wrapElement);
                                }
                            }
                            function configureStyles() {
                                var _ = nvd3Utils.deepExtend(defaultStyles(), scope.options['styles'] || {});
                                if (scope._config.extended)
                                    scope.options['styles'] = _;
                                angular.forEach(_.classes, function (value, key) {
                                    value ? element.addClass(key) : element.removeClass(key);
                                });
                                element.removeAttr('style').css(_.css);
                            }
                            function defaultWrapper(_) {
                                switch (_) {
                                case 'title':
                                    return {
                                        enable: false,
                                        text: 'Write Your Title',
                                        className: 'h4',
                                        css: {
                                            width: scope.options.chart.width + 'px',
                                            textAlign: 'center'
                                        }
                                    };
                                case 'subtitle':
                                    return {
                                        enable: false,
                                        text: 'Write Your Subtitle',
                                        css: {
                                            width: scope.options.chart.width + 'px',
                                            textAlign: 'center'
                                        }
                                    };
                                case 'caption':
                                    return {
                                        enable: false,
                                        text: 'Figure 1. Write Your Caption text.',
                                        css: {
                                            width: scope.options.chart.width + 'px',
                                            textAlign: 'center'
                                        }
                                    };
                                }
                            }
                            function defaultStyles() {
                                return {
                                    classes: {
                                        'with-3d-shadow': true,
                                        'with-transitions': true,
                                        'gallery': false
                                    },
                                    css: {}
                                };
                            }
                            if (scope._config.deepWatchOptions) {
                                scope.$watch('options', nvd3Utils.debounce(function (newOptions) {
                                    if (!scope._config.disabled)
                                        scope.api.refresh();
                                }, scope._config.debounce, scope._config.debounceImmediate), true);
                            }
                            function dataWatchFn(newData, oldData) {
                                if (newData !== oldData) {
                                    if (!scope._config.disabled) {
                                        scope._config.refreshDataOnly ? scope.api.update() : scope.api.refresh();
                                    }
                                }
                            }
                            if (scope._config.deepWatchData) {
                                if (scope._config.deepWatchDataDepth === 1) {
                                    scope.$watchCollection('data', dataWatchFn);
                                } else {
                                    scope.$watch('data', dataWatchFn, scope._config.deepWatchDataDepth === 2);
                                }
                            }
                            scope.$watch('config', function (newConfig, oldConfig) {
                                if (newConfig !== oldConfig) {
                                    scope._config = angular.extend(defaultConfig, newConfig);
                                    scope.api.refresh();
                                }
                            }, true);
                            if (!scope._config.deepWatchOptions && !scope._config.deepWatchData) {
                                scope.api.refresh();
                            }
                            angular.forEach(scope.events, function (eventHandler, event) {
                                scope.$on(event, function (e, args) {
                                    return eventHandler(e, scope, args);
                                });
                            });
                            element.on('$destroy', function () {
                                scope.api.clearElement();
                            });
                            scope.$watch('isReady', function (isReady) {
                                if (isReady) {
                                    if (scope.onReady && typeof scope.onReady() === 'function')
                                        scope.onReady()(scope, element);
                                }
                            });
                        }
                    };
                }
            ]).factory('nvd3Utils', function () {
                return {
                    debounce: function (func, wait, immediate) {
                        var timeout;
                        return function () {
                            var context = this, args = arguments;
                            var later = function () {
                                timeout = null;
                                if (!immediate)
                                    func.apply(context, args);
                            };
                            var callNow = immediate && !timeout;
                            clearTimeout(timeout);
                            timeout = setTimeout(later, wait);
                            if (callNow)
                                func.apply(context, args);
                        };
                    },
                    deepExtend: function (dst) {
                        var me = this;
                        angular.forEach(arguments, function (obj) {
                            if (obj !== dst) {
                                angular.forEach(obj, function (value, key) {
                                    if (dst[key] && dst[key].constructor && dst[key].constructor === Object) {
                                        me.deepExtend(dst[key], value);
                                    } else {
                                        dst[key] = value;
                                    }
                                });
                            }
                        });
                        return dst;
                    },
                    zoom: function (scope, options) {
                        var zoom = options.chart.zoom;
                        var enabled = typeof zoom.enabled === 'undefined' || zoom.enabled === null ? true : zoom.enabled;
                        if (!enabled)
                            return;
                        var xScale = scope.chart.xAxis.scale(), yScale = scope.chart.yAxis.scale(), xDomain = scope.chart.xDomain || xScale.domain, yDomain = scope.chart.yDomain || yScale.domain, x_boundary = xScale.domain().slice(), y_boundary = yScale.domain().slice(), scale = zoom.scale || 1, translate = zoom.translate || [
                                0,
                                0
                            ], scaleExtent = zoom.scaleExtent || [
                                1,
                                10
                            ], useFixedDomain = zoom.useFixedDomain || false, useNiceScale = zoom.useNiceScale || false, horizontalOff = zoom.horizontalOff || false, verticalOff = zoom.verticalOff || false, unzoomEventType = zoom.unzoomEventType || 'dblclick.zoom', fixDomain, d3zoom, zoomed, unzoomed, zoomend;
                        if (useNiceScale) {
                            xScale.nice();
                            yScale.nice();
                        }
                        fixDomain = function (domain, boundary) {
                            domain[0] = Math.min(Math.max(domain[0], boundary[0]), boundary[1] - boundary[1] / scaleExtent[1]);
                            domain[1] = Math.max(boundary[0] + boundary[1] / scaleExtent[1], Math.min(domain[1], boundary[1]));
                            return domain;
                        };
                        zoomed = function () {
                            if (zoom.zoomed !== undefined) {
                                var domains = zoom.zoomed(xScale.domain(), yScale.domain());
                                if (!horizontalOff)
                                    xDomain([
                                        domains.x1,
                                        domains.x2
                                    ]);
                                if (!verticalOff)
                                    yDomain([
                                        domains.y1,
                                        domains.y2
                                    ]);
                            } else {
                                if (!horizontalOff)
                                    xDomain(useFixedDomain ? fixDomain(xScale.domain(), x_boundary) : xScale.domain());
                                if (!verticalOff)
                                    yDomain(useFixedDomain ? fixDomain(yScale.domain(), y_boundary) : yScale.domain());
                            }
                            if (scope.chart)
                                scope.chart.update();
                        };
                        unzoomed = function () {
                            if (zoom.unzoomed !== undefined) {
                                var domains = zoom.unzoomed(xScale.domain(), yScale.domain());
                                if (!horizontalOff)
                                    xDomain([
                                        domains.x1,
                                        domains.x2
                                    ]);
                                if (!verticalOff)
                                    yDomain([
                                        domains.y1,
                                        domains.y2
                                    ]);
                            } else {
                                if (!horizontalOff)
                                    xDomain(x_boundary);
                                if (!verticalOff)
                                    yDomain(y_boundary);
                            }
                            d3zoom.scale(scale).translate(translate);
                            if (scope.chart)
                                scope.chart.update();
                        };
                        zoomend = function () {
                            if (zoom.zoomend !== undefined) {
                                zoom.zoomend();
                            }
                        };
                        d3zoom = d3.behavior.zoom().x(xScale).y(yScale).scaleExtent(scaleExtent).on('zoom', zoomed).on('zoomend', zoomend);
                        if (scope.svg) {
                            scope.svg.call(d3zoom);
                            d3zoom.scale(scale).translate(translate).event(scope.svg);
                            if (unzoomEventType !== 'none')
                                scope.svg.on(unzoomEventType, unzoomed);
                        }
                        if (scope.chart)
                            scope.chart.zoomRender = function () {
                                d3zoom.scale(scale).translate(translate);
                                xScale = scope.chart.xAxis.scale();
                                yScale = scope.chart.yAxis.scale();
                                xDomain = scope.chart.xDomain || xScale.domain;
                                yDomain = scope.chart.yDomain || yScale.domain;
                                x_boundary = xScale.domain().slice();
                                y_boundary = yScale.domain().slice();
                                d3zoom.x(xScale).y(yScale);
                                scope.svg.call(d3zoom);
                                if (unzoomEventType !== 'none')
                                    scope.svg.on(unzoomEventType, unzoomed);
                            };
                    }
                };
            });
        }(window));
    }(function () {
        return this;
    }()));
});
/*angular-nvd3@1.0.9#index*/
define('angular-nvd3@1.0.9#index', function (require, exports, module) {
    require('./dist/angular-nvd3');
    module.exports = 'nvd3';
});
/*mev-glyph-alt@0.0.1#src/main/view/mevGlyphAltDirective*/
define('mev-glyph-alt@0.0.1#src/main/view/mevGlyphAltDirective', ['lodash'], function (_) {
    'use strict';
    var directive = function () {
        return {
            restrict: 'A',
            scope: { config: '@mevGlyphAlt' },
            link: function (scope, elm) {
                var domElm = elm.get(0);
                scope.glyphAlt = {
                    width: function () {
                        return domElm.offsetWidth;
                    },
                    height: function () {
                        return domElm.offsetHeight;
                    },
                    hasDims: function () {
                        return this.height() > 0 && this.width() > 0;
                    },
                    isInView: function () {
                        return domElm.offsetParent !== null;
                    }
                };
                scope.$watch(scope.glyphAlt.isInView.bind(scope.glyphAlt), function (newVal) {
                    if (newVal === true)
                        if (!scope.glyphAlt.hasDims())
                            elm.text(scope.config);
                });
            }
        };
    };
    directive.$name = 'mevGlyphAlt';
    directive.$provider = 'directive';
    directive.$inject = [];
    return directive;
});
/*mev-glyph-alt@0.0.1#src/main/mev-glyph-alt*/
define('mev-glyph-alt@0.0.1#src/main/mev-glyph-alt', [
    'mui',
    './view/mevGlyphAltDirective'
], function (ng) {
    return ng.module('mev-glyph-alt', arguments, arguments);
});
/*mev-chart-utils@0.0.1#src/main/tooltip/services/mevTooltipContent*/
define('mev-chart-utils@0.0.1#src/main/tooltip/services/mevTooltipContent', [
    'mui',
    'd3'
], function (ng, d3) {
    var service = function () {
        return function mevTooltipContent(config, item) {
            if (item === null)
                return '';
            _.extend(config, {
                tooltip: {
                    title: function (config, item) {
                        var key = config.x.label;
                        if (!key && _.isString(config.x.field))
                            key = config.x.field;
                        return (key ? key + ': ' : '') + config.x.get(item.data);
                    }
                }
            });
            function keyFormatter(d, i) {
                return d;
            }
            ;
            function isInTitle(sTitle, dimConfig, item) {
                return sTitle.indexOf(dimConfig.get(item.data)) >= 0;
            }
            function findColorDim(config) {
                var colorDim = _.find(config, function (item, key) {
                    return item.colors || key === 'color';
                });
                return colorDim;
            }
            function addDimRow(tbodyEnter, dimConfig, item) {
                var trowEnter = tbodyEnter.selectAll('tr').data(function (p) {
                    return p.series;
                }).append('tr').classed('highlight', function (p) {
                    return p.highlight;
                });
                trowEnter.append('td').append('div');
                trowEnter.append('td').classed('key', true).classed('total', function (p) {
                    return !!p.total;
                }).html(function (p, i) {
                    return keyFormatter(dimConfig.label, i) + ': ' + dimConfig.get(item.data);
                });
            }
            function addFieldRow(tbodyEnter, item, field, key) {
                var trowEnter = tbodyEnter.selectAll('tr').data(function (p) {
                    return p.series;
                }).append('tr').classed('highlight', function (p) {
                    return p.highlight;
                });
                trowEnter.append('td').append('div');
                trowEnter.append('td').classed('key', true).classed('total', function (p) {
                    return !!p.total;
                }).html(function (p, i) {
                    return key + ': ' + (_.isFunction(field) ? field.call(item.data, item.data) : item.data[field]);
                });
            }
            var tooltip = d3.select(document.createElement('div')).data([item]).classed('mev-tooltip', true);
            var title = tooltip.append('div');
            title.classed('tooltip-title', true).html(config.tooltip.title(config, item));
            var table = tooltip.append('table');
            var tbodyEnter = table.selectAll('tbody').data([item]).enter().append('tbody');
            var trowEnter = tbodyEnter.selectAll('tr').data(function (p) {
                return p.series;
            }).enter().append('tr').classed('highlight', function (p) {
                return p.highlight;
            });
            trowEnter.append('td').classed('legend-color-guide', true).append('div').style('background-color', function (p) {
                return p.color;
            });
            trowEnter.append('td').classed('key', true).classed('total', function (p) {
                return !!p.total;
            }).html(function (p, i) {
                var colorDim = findColorDim(config);
                return colorDim ? keyFormatter(colorDim.label, i) + ': ' + colorDim.get(item.data) : keyFormatter(p.key, i);
            });
            var sTitle = title.node().innerHTML;
            var colorDim = findColorDim(config);
            if (!isInTitle(sTitle, config.x, item))
                addDimRow(tbodyEnter, config.x, item);
            if (!isInTitle(sTitle, config.y, item))
                addDimRow(tbodyEnter, config.y, item);
            if (config.z && config.z !== colorDim && !isInTitle(sTitle, config.z, item))
                addDimRow(tbodyEnter, config.z, item);
            if (config.size && config.size !== colorDim && !isInTitle(sTitle, config.size, item))
                addDimRow(tbodyEnter, config.size, item);
            var fields = config.tooltip ? config.tooltip.fields : {};
            _.forEach(fields, addFieldRow.bind(null, tbodyEnter, item));
            trowEnter.selectAll('td').each(function (p) {
                if (p.highlight) {
                    var opacityScale = d3.scale.linear().domain([
                        0,
                        1
                    ]).range([
                        '#fff',
                        p.color
                    ]);
                    var opacity = 0.6;
                    d3.select(this).style('border-bottom-color', opacityScale(opacity)).style('border-top-color', opacityScale(opacity));
                }
            });
            var html = tooltip.node().outerHTML;
            if (item.footer !== undefined)
                html += '<div class=\'footer\'>' + d.footer + '</div>';
            return html;
        };
    };
    service.$name = 'mevTooltipContent';
    service.$inject = [];
    service.$provider = 'factory';
    return service;
});
/*mev-chart-utils@0.0.1#src/main/dimConfig/model/mevChartConfig*/
define('mev-chart-utils@0.0.1#src/main/dimConfig/model/mevChartConfig', ['lodash'], function (_) {
    var factory = function (mevChartDimConfig, mevChartColorDimConfig) {
        function ChartDimConfigMixin(config, options) {
            if (!config)
                throw new Error('No config provided for ChartDimConfig');
            if (options)
                _.extend(config, options);
            mevChartDimConfig(config.x, config);
            mevChartDimConfig(config.y, config);
            if (config.size)
                mevChartDimConfig(config.size, config);
            if (config.color)
                mevChartColorDimConfig(mevChartDimConfig(config.color, config), config.data, config.onUpdateColor);
            if (config.z) {
                mevChartDimConfig(config.z, config);
                if (config.z.display === 'color')
                    mevChartColorDimConfig(config.z, config.data, config.onUpdateColor);
            }
        }
        return ChartDimConfigMixin;
    };
    factory.$name = 'mevChartConfig';
    factory.$provider = 'factory';
    factory.$inject = [
        'mevChartDimConfig',
        'mevChartColorDimConfig'
    ];
    return factory;
});
/*mev-chart-utils@0.0.1#src/main/dimConfig/model/mevChartDimConfig*/
define('mev-chart-utils@0.0.1#src/main/dimConfig/model/mevChartDimConfig', ['lodash'], function (_) {
    function mixinGetter(dimConfig) {
        if (_.isString(dimConfig.field)) {
            dimConfig.get = function (d) {
                return d[dimConfig.field];
            };
            dimConfig.label = dimConfig.label || dimConfig.field;
        } else if (_.isFunction(dimConfig.field))
            dimConfig.get = dimConfig.field;
        else
            throw new Error('DimConfig - no field specified: ' + JSON.stringify(dimConfig));
    }
    function mixinDimConfig(dimConfig, chartConfig) {
        if (!dimConfig)
            throw new Error('dimConfig is undefined ' + JSON.stringify(dimConfig));
        mixinGetter(dimConfig);
        if (chartConfig) {
            _.extend(dimConfig, { chartConfig: chartConfig });
        }
        return dimConfig;
    }
    var factory = function () {
        return mixinDimConfig;
    };
    factory.$name = 'mevChartDimConfig';
    factory.$provider = 'factory';
    factory.$inject = [];
    return factory;
});
/*mev-chart-utils@0.0.1#src/main/dimConfig/model/mevChartColorDimConfig*/
define('mev-chart-utils@0.0.1#src/main/dimConfig/model/mevChartColorDimConfig', ['lodash'], function (_) {
    var defaultColor = {
        label: 'Blue,Yellow',
        range: [
            'blue',
            'yellow'
        ]
    };
    var factory = function ($rootScope) {
        function mixinColorDimConfig(colorConfig, data, onUpdateColor) {
            function updateColor(color) {
                this.colors = color;
                defaultColor = color;
                this.scale = d3.scale.linear().domain([
                    colorConfig.min,
                    colorConfig.max
                ]).range(colorConfig.colors.range);
                if (onUpdateColor)
                    onUpdateColor();
            }
            ;
            if (!colorConfig)
                throw new Error('colorConfig is undefined ' + JSON.stringify(colorConfig));
            _.extend(colorConfig, {
                sync: true,
                min: 0,
                max: data.length > 0 ? colorConfig.get(_.maxBy(data, colorConfig.get)) : 0,
                updateColor: function (color) {
                    updateColor.call(this, color);
                    $rootScope.$broadcast('mui:charts:color:updated', this, this.colors);
                }.bind(colorConfig),
                colorOptions: {
                    available: [
                        {
                            label: 'Blue,Yellow',
                            range: [
                                'blue',
                                'yellow'
                            ]
                        },
                        {
                            label: 'Red,Green',
                            range: [
                                'red',
                                'green'
                            ]
                        },
                        {
                            label: 'Red,Blue',
                            range: [
                                'red',
                                'blue'
                            ]
                        }
                    ],
                    find: function (color) {
                        if (_.isArray(color.range) && color.label) {
                            return color;
                        } else if (_.isArray(color))
                            return _.find(this.available, function (item) {
                                return _.isEqual(color, item.range);
                            });
                        else
                            return _.find(this.available, function (item) {
                                return color === item.label;
                            });
                    }
                }
            });
            colorConfig.colors = defaultColor || colorConfig.colorOptions.available[0];
            _.extend(colorConfig, {
                scale: d3.scale.linear().domain([
                    colorConfig.min,
                    colorConfig.max
                ]).range(colorConfig.colors.range)
            });
            $rootScope.$on('mui:charts:color:updated', function ($evnet, source, color) {
                if (colorConfig.sync && source !== this)
                    updateColor.call(this, color);
            }.bind(colorConfig));
            return colorConfig;
        }
        return mixinColorDimConfig;
    };
    factory.$name = 'mevChartColorDimConfig';
    factory.$provider = 'factory';
    factory.$inject = ['$rootScope'];
    return factory;
});
/*mev-chart-utils@0.0.1#src/main/colorLegend/view/mevChartColorLegend.tpl.html!system-text@0.1.0#text*/
define('mev-chart-utils@0.0.1#src/main/colorLegend/view/mevChartColorLegend.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<select ng-change="vm.updateColor()" ng-model="vm.color" ng-options="color as color.label for color in config.colorOptions.available track by color.label"></select>\n<label class="break">Save</label>\n<div class="btn-group">\n    <label class="btn btn-info btn-sm">\n        <a mev-svg-save-as="saveAsConfig">\n            <span class="glyphicon glyphicon-floppy-save" mev-glyph-alt="png"></span>\n        </a>\n    </label>\n</div>';
});
/*mev-chart-utils@0.0.1#src/main/colorLegend/view/mevChartColorLegendDirective*/
define('mev-chart-utils@0.0.1#src/main/colorLegend/view/mevChartColorLegendDirective', [
    'lodash',
    'd3',
    './mevChartColorLegend.tpl.html',
    './mevChartColorLegend.less'
], function (_, d3, template) {
    'use strict';
    var directive = function () {
        return {
            restrict: 'AEC',
            scope: { config: '=?mevChartColorLegend' },
            template: template,
            controller: [
                '$scope',
                function (scope) {
                    if (!scope.config)
                        throw new Error('Config is undefined');
                    _.extend(scope.config, {
                        legend: {
                            width: 150,
                            height: 190,
                            margin: [
                                30,
                                120
                            ]
                        }
                    });
                }
            ],
            link: function (scope, elem, attr, ctrl) {
                scope.vm = {
                    updateColor: function updateColor(broadcast) {
                        scope.config.updateColor(scope.vm.color);
                        this.draw(scope.config, d3.select(elem[0]));
                    },
                    color: scope.config.colors,
                    draw: function (config, d3root) {
                        var colorLegendConfig = config.legend;
                        d3root.select('svg').remove();
                        var svgColorValueLegend = d3root.insert('svg', ':first-child');
                        svgColorValueLegend.attr('width', colorLegendConfig.width).attr('height', colorLegendConfig.height);
                        var w = colorLegendConfig.width, h = colorLegendConfig.height;
                        var marginv = _.isArray(colorLegendConfig.margin) ? colorLegendConfig.margin[0] : colorLegendConfig.margin;
                        var marginh = _.isArray(colorLegendConfig.margin) ? colorLegendConfig.margin[1] : colorLegendConfig.margin;
                        var key = svgColorValueLegend;
                        var legend = key.append('defs').append('svg:linearGradient').attr('id', 'gradient').attr('x1', '100%').attr('y1', '0%').attr('x2', '100%').attr('y2', '100%').attr('spreadMethod', 'pad');
                        legend.append('stop').attr('offset', '0%').attr('stop-color', config.colors.range[1]).attr('stop-opacity', 1);
                        legend.append('stop').attr('offset', '100%').attr('stop-color', config.colors.range[0]).attr('stop-opacity', 1);
                        key.append('rect').attr('width', w - marginh).attr('height', h - marginv).style('fill', 'url(#gradient)').attr('transform', 'translate(0,10)');
                        var y = d3.scale.linear().range([
                            h - marginv,
                            0
                        ]).domain([
                            config.min,
                            config.max
                        ]).nice();
                        var yAxis = d3.svg.axis().scale(y).orient('right');
                        key.append('g').attr('class', 'y axis').attr('transform', 'translate(31,10)').call(yAxis).append('text').attr('y', h - marginv).attr('dy', '.71em').style('text-anchor', 'end').text(config.label);
                    }
                };
                scope.saveAsConfig = {
                    name: scope.config.chartConfig ? scope.config.chartConfig.name : 'mev-chart.png',
                    selector: 'nvd3 svg'
                };
                scope.$on('mui:charts:color:updated', function ($event, source, color) {
                    if (source !== scope.config) {
                        scope.vm.draw(scope.config, d3.select(elem[0]));
                        scope.vm.color = scope.config.colors;
                    }
                });
                scope.vm.draw(scope.config, d3.select(elem[0]));
            }
        };
    };
    directive.$name = 'mevChartColorLegend';
    directive.$provider = 'directive';
    directive.$inject = [];
    return directive;
});
/*save-svg-as-png@1.2.0#saveSvgAsPng*/
(function () {
    var out$ = typeof exports != 'undefined' && exports || typeof define != 'undefined' && {} || this;
    var doctype = '<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd" [<!ENTITY nbsp "&#160;">]>';
    function isElement(obj) {
        return obj instanceof HTMLElement || obj instanceof SVGElement;
    }
    function requireDomNode(el) {
        if (!isElement(el)) {
            throw new Error('an HTMLElement or SVGElement is required; got ' + el);
        }
    }
    function isExternal(url) {
        return url && url.lastIndexOf('http', 0) == 0 && url.lastIndexOf(window.location.host) == -1;
    }
    function inlineImages(el, callback) {
        requireDomNode(el);
        var images = el.querySelectorAll('image'), left = images.length, checkDone = function () {
                if (left === 0) {
                    callback();
                }
            };
        checkDone();
        for (var i = 0; i < images.length; i++) {
            (function (image) {
                var href = image.getAttributeNS('http://www.w3.org/1999/xlink', 'href');
                if (href) {
                    if (isExternal(href.value)) {
                        console.warn('Cannot render embedded images linking to external hosts: ' + href.value);
                        return;
                    }
                }
                var canvas = document.createElement('canvas');
                var ctx = canvas.getContext('2d');
                var img = new Image();
                img.crossOrigin = 'anonymous';
                href = href || image.getAttribute('href');
                if (href) {
                    img.src = href;
                    img.onload = function () {
                        canvas.width = img.width;
                        canvas.height = img.height;
                        ctx.drawImage(img, 0, 0);
                        image.setAttributeNS('http://www.w3.org/1999/xlink', 'href', canvas.toDataURL('image/png'));
                        left--;
                        checkDone();
                    };
                    img.onerror = function () {
                        console.log('Could not load ' + href);
                        left--;
                        checkDone();
                    };
                } else {
                    left--;
                    checkDone();
                }
            }(images[i]));
        }
    }
    function styles(el, options, cssLoadedCallback) {
        var selectorRemap = options.selectorRemap;
        var modifyStyle = options.modifyStyle;
        var css = '';
        var fontsQueue = [];
        var sheets = document.styleSheets;
        for (var i = 0; i < sheets.length; i++) {
            try {
                var rules = sheets[i].cssRules;
            } catch (e) {
                console.warn('Stylesheet could not be loaded: ' + sheets[i].href);
                continue;
            }
            if (rules != null) {
                for (var j = 0, match; j < rules.length; j++, match = null) {
                    var rule = rules[j];
                    if (typeof rule.style != 'undefined') {
                        var selectorText;
                        try {
                            selectorText = rule.selectorText;
                        } catch (err) {
                            console.warn('The following CSS rule has an invalid selector: "' + rule + '"', err);
                        }
                        try {
                            if (selectorText) {
                                match = el.querySelector(selectorText) || el.parentNode.querySelector(selectorText);
                            }
                        } catch (err) {
                            console.warn('Invalid CSS selector "' + selectorText + '"', err);
                        }
                        if (match) {
                            var selector = selectorRemap ? selectorRemap(rule.selectorText) : rule.selectorText;
                            var cssText = modifyStyle ? modifyStyle(rule.style.cssText) : rule.style.cssText;
                            css += selector + ' { ' + cssText + ' }\n';
                        } else if (rule.cssText.match(/^@font-face/)) {
                            var fontUrlRegexp = /url\(["']?(.+?)["']?\)/;
                            var fontUrlMatch = rule.cssText.match(fontUrlRegexp);
                            var externalFontUrl = fontUrlMatch && fontUrlMatch[1] || '';
                            var fontUrlIsDataURI = externalFontUrl.match(/^data:/);
                            if (fontUrlIsDataURI) {
                                externalFontUrl = '';
                            }
                            if (externalFontUrl) {
                                if (externalFontUrl.startsWith('../')) {
                                    externalFontUrl = sheets[i].href + '/../' + externalFontUrl;
                                } else if (externalFontUrl.startsWith('./')) {
                                    externalFontUrl = sheets[i].href + '/.' + externalFontUrl;
                                }
                                fontsQueue.push({
                                    text: rule.cssText,
                                    fontUrlRegexp: fontUrlRegexp,
                                    format: getFontMimeTypeFromUrl(externalFontUrl),
                                    url: externalFontUrl
                                });
                            } else {
                                css += rule.cssText + '\n';
                            }
                        }
                    }
                }
            }
        }
        processFontQueue(fontsQueue);
        function getFontMimeTypeFromUrl(fontUrl) {
            var supportedFormats = {
                'woff2': 'font/woff2',
                'woff': 'font/woff',
                'otf': 'application/x-font-opentype',
                'ttf': 'application/x-font-ttf',
                'eot': 'application/vnd.ms-fontobject',
                'sfnt': 'application/font-sfnt',
                'svg': 'image/svg+xml'
            };
            var extensions = Object.keys(supportedFormats);
            for (var i = 0; i < extensions.length; ++i) {
                var extension = extensions[i];
                if (fontUrl.indexOf('.' + extension) > 0) {
                    return supportedFormats[extension];
                }
            }
            console.error('Unknown font format for ' + fontUrl + '; Fonts may not be working correctly');
            return 'application/octet-stream';
        }
        function processFontQueue(queue) {
            if (queue.length > 0) {
                var font = queue.pop();
                processNext(font);
            } else {
                cssLoadedCallback(css);
            }
            function processNext(font) {
                var oReq = new XMLHttpRequest();
                oReq.addEventListener('load', fontLoaded);
                oReq.addEventListener('error', transferFailed);
                oReq.addEventListener('abort', transferFailed);
                oReq.open('GET', font.url);
                oReq.responseType = 'arraybuffer';
                oReq.send();
                function fontLoaded() {
                    var fontBits = oReq.response;
                    var fontInBase64 = arrayBufferToBase64(fontBits);
                    updateFontStyle(font, fontInBase64);
                }
                function transferFailed(e) {
                    console.warn('Failed to load font from: ' + font.url);
                    console.warn(e);
                    css += font.text + '\n';
                    processFontQueue();
                }
                function updateFontStyle(font, fontInBase64) {
                    var dataUrl = 'url("data:' + font.format + ';base64,' + fontInBase64 + '")';
                    css += font.text.replace(font.fontUrlRegexp, dataUrl) + '\n';
                    setTimeout(function () {
                        processFontQueue(queue);
                    }, 0);
                }
            }
        }
        function arrayBufferToBase64(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            return window.btoa(binary);
        }
    }
    function getDimension(el, clone, dim) {
        var v = el.viewBox && el.viewBox.baseVal && el.viewBox.baseVal[dim] || clone.getAttribute(dim) !== null && !clone.getAttribute(dim).match(/%$/) && parseInt(clone.getAttribute(dim)) || el.getBoundingClientRect()[dim] || parseInt(clone.style[dim]) || parseInt(window.getComputedStyle(el).getPropertyValue(dim));
        return typeof v === 'undefined' || v === null || isNaN(parseFloat(v)) ? 0 : v;
    }
    function reEncode(data) {
        data = encodeURIComponent(data);
        data = data.replace(/%([0-9A-F]{2})/g, function (match, p1) {
            var c = String.fromCharCode('0x' + p1);
            return c === '%' ? '%25' : c;
        });
        return decodeURIComponent(data);
    }
    out$.prepareSvg = function (el, options, cb) {
        requireDomNode(el);
        options = options || {};
        options.scale = options.scale || 1;
        options.responsive = options.responsive || false;
        var xmlns = 'http://www.w3.org/2000/xmlns/';
        inlineImages(el, function () {
            var outer = document.createElement('div');
            var clone = el.cloneNode(true);
            var width, height;
            if (el.tagName == 'svg') {
                width = options.width || getDimension(el, clone, 'width');
                height = options.height || getDimension(el, clone, 'height');
            } else if (el.getBBox) {
                var box = el.getBBox();
                width = box.x + box.width;
                height = box.y + box.height;
                clone.setAttribute('transform', clone.getAttribute('transform').replace(/translate\(.*?\)/, ''));
                var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                svg.appendChild(clone);
                clone = svg;
            } else {
                console.error('Attempted to render non-SVG element', el);
                return;
            }
            clone.setAttribute('version', '1.1');
            if (!clone.getAttribute('xmlns')) {
                clone.setAttributeNS(xmlns, 'xmlns', 'http://www.w3.org/2000/svg');
            }
            if (!clone.getAttribute('xmlns:xlink')) {
                clone.setAttributeNS(xmlns, 'xmlns:xlink', 'http://www.w3.org/1999/xlink');
            }
            if (options.responsive) {
                clone.removeAttribute('width');
                clone.removeAttribute('height');
                clone.setAttribute('preserveAspectRatio', 'xMinYMin meet');
            } else {
                clone.setAttribute('width', width * options.scale);
                clone.setAttribute('height', height * options.scale);
            }
            clone.setAttribute('viewBox', [
                options.left || 0,
                options.top || 0,
                width,
                height
            ].join(' '));
            var fos = clone.querySelectorAll('foreignObject > *');
            for (var i = 0; i < fos.length; i++) {
                if (!fos[i].getAttribute('xmlns')) {
                    fos[i].setAttributeNS(xmlns, 'xmlns', 'http://www.w3.org/1999/xhtml');
                }
            }
            outer.appendChild(clone);
            styles(el, options, cssLoadedCallback);
            function cssLoadedCallback(css) {
                var s = document.createElement('style');
                s.setAttribute('type', 'text/css');
                s.innerHTML = '<![CDATA[\n' + css + '\n]]>';
                var defs = document.createElement('defs');
                defs.appendChild(s);
                clone.insertBefore(defs, clone.firstChild);
                if (cb) {
                    var outHtml = outer.innerHTML;
                    outHtml = outHtml.replace(/NS\d+:href/gi, 'xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href');
                    cb(outHtml, width, height);
                }
            }
        });
    };
    out$.svgAsDataUri = function (el, options, cb) {
        out$.prepareSvg(el, options, function (svg) {
            var uri = 'data:image/svg+xml;base64,' + window.btoa(reEncode(doctype + svg));
            if (cb) {
                cb(uri);
            }
        });
    };
    out$.svgAsPngUri = function (el, options, cb) {
        requireDomNode(el);
        options = options || {};
        options.encoderType = options.encoderType || 'image/png';
        options.encoderOptions = options.encoderOptions || 0.8;
        var convertToPng = function (src, w, h) {
            var canvas = document.createElement('canvas');
            var context = canvas.getContext('2d');
            canvas.width = w;
            canvas.height = h;
            if (options.canvg) {
                options.canvg(canvas, src);
            } else {
                context.drawImage(src, 0, 0);
            }
            if (options.backgroundColor) {
                context.globalCompositeOperation = 'destination-over';
                context.fillStyle = options.backgroundColor;
                context.fillRect(0, 0, canvas.width, canvas.height);
            }
            var png;
            try {
                png = canvas.toDataURL(options.encoderType, options.encoderOptions);
            } catch (e) {
                if (typeof SecurityError !== 'undefined' && e instanceof SecurityError || e.name == 'SecurityError') {
                    console.error('Rendered SVG images cannot be downloaded in this browser.');
                    return;
                } else {
                    throw e;
                }
            }
            cb(png);
        };
        if (options.canvg) {
            out$.prepareSvg(el, options, convertToPng);
        } else {
            out$.svgAsDataUri(el, options, function (uri) {
                var image = new Image();
                image.onload = function () {
                    convertToPng(image, image.width, image.height);
                };
                image.onerror = function () {
                    console.error('There was an error loading the data URI as an image on the following SVG\n', window.atob(uri.slice(26)), '\n', 'Open the following link to see browser\'s diagnosis\n', uri);
                };
                image.src = uri;
            });
        }
    };
    out$.download = function (name, uri) {
        if (navigator.msSaveOrOpenBlob) {
            navigator.msSaveOrOpenBlob(uriToBlob(uri), name);
        } else {
            var saveLink = document.createElement('a');
            var downloadSupported = 'download' in saveLink;
            if (downloadSupported) {
                saveLink.download = name;
                saveLink.style.display = 'none';
                document.body.appendChild(saveLink);
                try {
                    var blob = uriToBlob(uri);
                    var url = URL.createObjectURL(blob);
                    saveLink.href = url;
                    saveLink.onclick = function () {
                        requestAnimationFrame(function () {
                            URL.revokeObjectURL(url);
                        });
                    };
                } catch (e) {
                    console.warn('This browser does not support object URLs. Falling back to string URL.');
                    saveLink.href = uri;
                }
                saveLink.click();
                document.body.removeChild(saveLink);
            } else {
                window.open(uri, '_temp', 'menubar=no,toolbar=no,status=no');
            }
        }
    };
    function uriToBlob(uri) {
        var byteString = window.atob(uri.split(',')[1]);
        var mimeString = uri.split(',')[0].split(':')[1].split(';')[0];
        var buffer = new ArrayBuffer(byteString.length);
        var intArray = new Uint8Array(buffer);
        for (var i = 0; i < byteString.length; i++) {
            intArray[i] = byteString.charCodeAt(i);
        }
        return new Blob([buffer], { type: mimeString });
    }
    out$.saveSvg = function (el, name, options) {
        requireDomNode(el);
        options = options || {};
        out$.svgAsDataUri(el, options, function (uri) {
            out$.download(name, uri);
        });
    };
    out$.saveSvgAsPng = function (el, name, options) {
        requireDomNode(el);
        options = options || {};
        out$.svgAsPngUri(el, options, function (uri) {
            out$.download(name, uri);
        });
    };
    if (typeof define !== 'undefined') {
        define('save-svg-as-png@1.2.0#saveSvgAsPng', function () {
            return out$;
        });
    }
}());
/*mev-chart-utils@0.0.1#src/main/saveAs/svgSaveAsPng*/
define('mev-chart-utils@0.0.1#src/main/saveAs/svgSaveAsPng', [
    'mui',
    'd3',
    'save-svg-as-png'
], function (ng, d3, saveSvgAsPng) {
    'use strict';
    var factory = function () {
        return function svgSaveAs(svgElm, name, selector) {
            saveSvgAsPng.saveSvgAsPng(svgElm.get(0), _.endsWith(name, '.png') ? name : name + '.png', {
                selectorRemap: function (s) {
                    return s.replace(new RegExp('^[[]*' + selector + '[]]*', 'g'), '');
                },
                backgroundColor: 'white'
            });
        };
    };
    factory.$name = 'mevSvgSaveAs';
    factory.$inject = [];
    factory.$provider = 'factory';
    return factory;
});
/*mev-chart-utils@0.0.1#src/main/saveAs/svgSaveAsDirective*/
define('mev-chart-utils@0.0.1#src/main/saveAs/svgSaveAsDirective', [
    'mui',
    'd3',
    './svgSaveAs.less'
], function (ng, d3) {
    var directive = function mevSvgSaveAsDirective(mevSvgSaveAs) {
        return {
            restrict: 'AEC',
            scope: { config: '=?mevSvgSaveAs' },
            link: function (scope, elm, attr) {
                elm.bind('click', function () {
                    var svg = ng.element('body').find(scope.config.selector || 'svg');
                    mevSvgSaveAs(svg, scope.config.name || 'download', scope.config.selector ? scope.config.selector.replace(/[ >]*[ ]*svg/g, '') : undefined);
                });
            }
        };
    };
    directive.$name = 'mevSvgSaveAs';
    directive.$inject = ['mevSvgSaveAs'];
    directive.$provider = 'directive';
    return directive;
});
/*mev-chart-utils@0.0.1#src/main/mev-chart-utils*/
define('mev-chart-utils@0.0.1#src/main/mev-chart-utils', [
    'mui',
    'mev-glyph-alt',
    './tooltip/services/mevTooltipContent',
    './dimConfig/model/mevChartConfig',
    './dimConfig/model/mevChartDimConfig',
    './dimConfig/model/mevChartColorDimConfig',
    './colorLegend/view/mevChartColorLegendDirective',
    './saveAs/svgSaveAsPng',
    './saveAs/svgSaveAsDirective',
    './style/mevChart.less',
    './tooltip/style/mevTooltipContent.less'
], function (ng) {
    return ng.module('mev-chart-utils', arguments, arguments);
});
/*crossfilter@1.3.12#crossfilter*/
define('crossfilter@1.3.12#crossfilter', function (require, exports, module) {
    (function (exports) {
        crossfilter.version = '1.3.12';
        function crossfilter_identity(d) {
            return d;
        }
        crossfilter.permute = permute;
        function permute(array, index) {
            for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {
                copy[i] = array[index[i]];
            }
            return copy;
        }
        var bisect = crossfilter.bisect = bisect_by(crossfilter_identity);
        bisect.by = bisect_by;
        function bisect_by(f) {
            function bisectLeft(a, x, lo, hi) {
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (f(a[mid]) < x)
                        lo = mid + 1;
                    else
                        hi = mid;
                }
                return lo;
            }
            function bisectRight(a, x, lo, hi) {
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (x < f(a[mid]))
                        hi = mid;
                    else
                        lo = mid + 1;
                }
                return lo;
            }
            bisectRight.right = bisectRight;
            bisectRight.left = bisectLeft;
            return bisectRight;
        }
        var heap = crossfilter.heap = heap_by(crossfilter_identity);
        heap.by = heap_by;
        function heap_by(f) {
            function heap(a, lo, hi) {
                var n = hi - lo, i = (n >>> 1) + 1;
                while (--i > 0)
                    sift(a, i, n, lo);
                return a;
            }
            function sort(a, lo, hi) {
                var n = hi - lo, t;
                while (--n > 0)
                    t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);
                return a;
            }
            function sift(a, i, n, lo) {
                var d = a[--lo + i], x = f(d), child;
                while ((child = i << 1) <= n) {
                    if (child < n && f(a[lo + child]) > f(a[lo + child + 1]))
                        child++;
                    if (x <= f(a[lo + child]))
                        break;
                    a[lo + i] = a[lo + child];
                    i = child;
                }
                a[lo + i] = d;
            }
            heap.sort = sort;
            return heap;
        }
        var heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);
        heapselect.by = heapselect_by;
        function heapselect_by(f) {
            var heap = heap_by(f);
            function heapselect(a, lo, hi, k) {
                var queue = new Array(k = Math.min(hi - lo, k)), min, i, x, d;
                for (i = 0; i < k; ++i)
                    queue[i] = a[lo++];
                heap(queue, 0, k);
                if (lo < hi) {
                    min = f(queue[0]);
                    do {
                        if (x = f(d = a[lo]) > min) {
                            queue[0] = d;
                            min = f(heap(queue, 0, k)[0]);
                        }
                    } while (++lo < hi);
                }
                return queue;
            }
            return heapselect;
        }
        var insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);
        insertionsort.by = insertionsort_by;
        function insertionsort_by(f) {
            function insertionsort(a, lo, hi) {
                for (var i = lo + 1; i < hi; ++i) {
                    for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {
                        a[j] = a[j - 1];
                    }
                    a[j] = t;
                }
                return a;
            }
            return insertionsort;
        }
        var quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);
        quicksort.by = quicksort_by;
        function quicksort_by(f) {
            var insertionsort = insertionsort_by(f);
            function sort(a, lo, hi) {
                return (hi - lo < quicksort_sizeThreshold ? insertionsort : quicksort)(a, lo, hi);
            }
            function quicksort(a, lo, hi) {
                var sixth = (hi - lo) / 6 | 0, i1 = lo + sixth, i5 = hi - 1 - sixth, i3 = lo + hi - 1 >> 1, i2 = i3 - sixth, i4 = i3 + sixth;
                var e1 = a[i1], x1 = f(e1), e2 = a[i2], x2 = f(e2), e3 = a[i3], x3 = f(e3), e4 = a[i4], x4 = f(e4), e5 = a[i5], x5 = f(e5);
                var t;
                if (x1 > x2)
                    t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;
                if (x4 > x5)
                    t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;
                if (x1 > x3)
                    t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;
                if (x2 > x3)
                    t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;
                if (x1 > x4)
                    t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;
                if (x3 > x4)
                    t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;
                if (x2 > x5)
                    t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;
                if (x2 > x3)
                    t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;
                if (x4 > x5)
                    t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;
                var pivot1 = e2, pivotValue1 = x2, pivot2 = e4, pivotValue2 = x4;
                a[i1] = e1;
                a[i2] = a[lo];
                a[i3] = e3;
                a[i4] = a[hi - 1];
                a[i5] = e5;
                var less = lo + 1, great = hi - 2;
                var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;
                if (pivotsEqual) {
                    for (var k = less; k <= great; ++k) {
                        var ek = a[k], xk = f(ek);
                        if (xk < pivotValue1) {
                            if (k !== less) {
                                a[k] = a[less];
                                a[less] = ek;
                            }
                            ++less;
                        } else if (xk > pivotValue1) {
                            while (true) {
                                var greatValue = f(a[great]);
                                if (greatValue > pivotValue1) {
                                    great--;
                                    continue;
                                } else if (greatValue < pivotValue1) {
                                    a[k] = a[less];
                                    a[less++] = a[great];
                                    a[great--] = ek;
                                    break;
                                } else {
                                    a[k] = a[great];
                                    a[great--] = ek;
                                    break;
                                }
                            }
                        }
                    }
                } else {
                    for (var k = less; k <= great; k++) {
                        var ek = a[k], xk = f(ek);
                        if (xk < pivotValue1) {
                            if (k !== less) {
                                a[k] = a[less];
                                a[less] = ek;
                            }
                            ++less;
                        } else {
                            if (xk > pivotValue2) {
                                while (true) {
                                    var greatValue = f(a[great]);
                                    if (greatValue > pivotValue2) {
                                        great--;
                                        if (great < k)
                                            break;
                                        continue;
                                    } else {
                                        if (greatValue < pivotValue1) {
                                            a[k] = a[less];
                                            a[less++] = a[great];
                                            a[great--] = ek;
                                        } else {
                                            a[k] = a[great];
                                            a[great--] = ek;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                a[lo] = a[less - 1];
                a[less - 1] = pivot1;
                a[hi - 1] = a[great + 1];
                a[great + 1] = pivot2;
                sort(a, lo, less - 1);
                sort(a, great + 2, hi);
                if (pivotsEqual) {
                    return a;
                }
                if (less < i1 && great > i5) {
                    var lessValue, greatValue;
                    while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1)
                        ++less;
                    while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2)
                        --great;
                    for (var k = less; k <= great; k++) {
                        var ek = a[k], xk = f(ek);
                        if (xk <= pivotValue1 && xk >= pivotValue1) {
                            if (k !== less) {
                                a[k] = a[less];
                                a[less] = ek;
                            }
                            less++;
                        } else {
                            if (xk <= pivotValue2 && xk >= pivotValue2) {
                                while (true) {
                                    var greatValue = f(a[great]);
                                    if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {
                                        great--;
                                        if (great < k)
                                            break;
                                        continue;
                                    } else {
                                        if (greatValue < pivotValue1) {
                                            a[k] = a[less];
                                            a[less++] = a[great];
                                            a[great--] = ek;
                                        } else {
                                            a[k] = a[great];
                                            a[great--] = ek;
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                return sort(a, less, great + 1);
            }
            return sort;
        }
        var quicksort_sizeThreshold = 32;
        var crossfilter_array8 = crossfilter_arrayUntyped, crossfilter_array16 = crossfilter_arrayUntyped, crossfilter_array32 = crossfilter_arrayUntyped, crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped, crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;
        if (typeof Uint8Array !== 'undefined') {
            crossfilter_array8 = function (n) {
                return new Uint8Array(n);
            };
            crossfilter_array16 = function (n) {
                return new Uint16Array(n);
            };
            crossfilter_array32 = function (n) {
                return new Uint32Array(n);
            };
            crossfilter_arrayLengthen = function (array, length) {
                if (array.length >= length)
                    return array;
                var copy = new array.constructor(length);
                copy.set(array);
                return copy;
            };
            crossfilter_arrayWiden = function (array, width) {
                var copy;
                switch (width) {
                case 16:
                    copy = crossfilter_array16(array.length);
                    break;
                case 32:
                    copy = crossfilter_array32(array.length);
                    break;
                default:
                    throw new Error('invalid array width!');
                }
                copy.set(array);
                return copy;
            };
        }
        function crossfilter_arrayUntyped(n) {
            var array = new Array(n), i = -1;
            while (++i < n)
                array[i] = 0;
            return array;
        }
        function crossfilter_arrayLengthenUntyped(array, length) {
            var n = array.length;
            while (n < length)
                array[n++] = 0;
            return array;
        }
        function crossfilter_arrayWidenUntyped(array, width) {
            if (width > 32)
                throw new Error('invalid array width!');
            return array;
        }
        function crossfilter_filterExact(bisect, value) {
            return function (values) {
                var n = values.length;
                return [
                    bisect.left(values, value, 0, n),
                    bisect.right(values, value, 0, n)
                ];
            };
        }
        function crossfilter_filterRange(bisect, range) {
            var min = range[0], max = range[1];
            return function (values) {
                var n = values.length;
                return [
                    bisect.left(values, min, 0, n),
                    bisect.left(values, max, 0, n)
                ];
            };
        }
        function crossfilter_filterAll(values) {
            return [
                0,
                values.length
            ];
        }
        function crossfilter_null() {
            return null;
        }
        function crossfilter_zero() {
            return 0;
        }
        function crossfilter_reduceIncrement(p) {
            return p + 1;
        }
        function crossfilter_reduceDecrement(p) {
            return p - 1;
        }
        function crossfilter_reduceAdd(f) {
            return function (p, v) {
                return p + +f(v);
            };
        }
        function crossfilter_reduceSubtract(f) {
            return function (p, v) {
                return p - f(v);
            };
        }
        exports.crossfilter = crossfilter;
        function crossfilter() {
            var crossfilter = {
                add: add,
                remove: removeData,
                dimension: dimension,
                groupAll: groupAll,
                size: size
            };
            var data = [], n = 0, m = 0, M = 8, filters = crossfilter_array8(0), filterListeners = [], dataListeners = [], removeDataListeners = [];
            function add(newData) {
                var n0 = n, n1 = newData.length;
                if (n1) {
                    data = data.concat(newData);
                    filters = crossfilter_arrayLengthen(filters, n += n1);
                    dataListeners.forEach(function (l) {
                        l(newData, n0, n1);
                    });
                }
                return crossfilter;
            }
            function removeData() {
                var newIndex = crossfilter_index(n, n), removed = [];
                for (var i = 0, j = 0; i < n; ++i) {
                    if (filters[i])
                        newIndex[i] = j++;
                    else
                        removed.push(i);
                }
                filterListeners.forEach(function (l) {
                    l(0, [], removed);
                });
                removeDataListeners.forEach(function (l) {
                    l(newIndex);
                });
                for (var i = 0, j = 0, k; i < n; ++i) {
                    if (k = filters[i]) {
                        if (i !== j)
                            filters[j] = k, data[j] = data[i];
                        ++j;
                    }
                }
                data.length = j;
                while (n > j)
                    filters[--n] = 0;
            }
            function dimension(value) {
                var dimension = {
                    filter: filter,
                    filterExact: filterExact,
                    filterRange: filterRange,
                    filterFunction: filterFunction,
                    filterAll: filterAll,
                    top: top,
                    bottom: bottom,
                    group: group,
                    groupAll: groupAll,
                    dispose: dispose,
                    remove: dispose
                };
                var one = ~m & -~m, zero = ~one, values, index, newValues, newIndex, sort = quicksort_by(function (i) {
                        return newValues[i];
                    }), refilter = crossfilter_filterAll, refilterFunction, indexListeners = [], dimensionGroups = [], lo0 = 0, hi0 = 0;
                dataListeners.unshift(preAdd);
                dataListeners.push(postAdd);
                removeDataListeners.push(removeData);
                m |= one;
                if (M >= 32 ? !one : m & -(1 << M)) {
                    filters = crossfilter_arrayWiden(filters, M <<= 1);
                }
                preAdd(data, 0, n);
                postAdd(data, 0, n);
                function preAdd(newData, n0, n1) {
                    newValues = newData.map(value);
                    newIndex = sort(crossfilter_range(n1), 0, n1);
                    newValues = permute(newValues, newIndex);
                    var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;
                    if (refilterFunction) {
                        for (i = 0; i < n1; ++i) {
                            if (!refilterFunction(newValues[i], i))
                                filters[newIndex[i] + n0] |= one;
                        }
                    } else {
                        for (i = 0; i < lo1; ++i)
                            filters[newIndex[i] + n0] |= one;
                        for (i = hi1; i < n1; ++i)
                            filters[newIndex[i] + n0] |= one;
                    }
                    if (!n0) {
                        values = newValues;
                        index = newIndex;
                        lo0 = lo1;
                        hi0 = hi1;
                        return;
                    }
                    var oldValues = values, oldIndex = index, i0 = 0, i1 = 0;
                    values = new Array(n);
                    index = crossfilter_index(n, n);
                    for (i = 0; i0 < n0 && i1 < n1; ++i) {
                        if (oldValues[i0] < newValues[i1]) {
                            values[i] = oldValues[i0];
                            index[i] = oldIndex[i0++];
                        } else {
                            values[i] = newValues[i1];
                            index[i] = newIndex[i1++] + n0;
                        }
                    }
                    for (; i0 < n0; ++i0, ++i) {
                        values[i] = oldValues[i0];
                        index[i] = oldIndex[i0];
                    }
                    for (; i1 < n1; ++i1, ++i) {
                        values[i] = newValues[i1];
                        index[i] = newIndex[i1] + n0;
                    }
                    bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];
                }
                function postAdd(newData, n0, n1) {
                    indexListeners.forEach(function (l) {
                        l(newValues, newIndex, n0, n1);
                    });
                    newValues = newIndex = null;
                }
                function removeData(reIndex) {
                    for (var i = 0, j = 0, k; i < n; ++i) {
                        if (filters[k = index[i]]) {
                            if (i !== j)
                                values[j] = values[i];
                            index[j] = reIndex[k];
                            ++j;
                        }
                    }
                    values.length = j;
                    while (j < n)
                        index[j++] = 0;
                    var bounds = refilter(values);
                    lo0 = bounds[0], hi0 = bounds[1];
                }
                function filterIndexBounds(bounds) {
                    var lo1 = bounds[0], hi1 = bounds[1];
                    if (refilterFunction) {
                        refilterFunction = null;
                        filterIndexFunction(function (d, i) {
                            return lo1 <= i && i < hi1;
                        });
                        lo0 = lo1;
                        hi0 = hi1;
                        return dimension;
                    }
                    var i, j, k, added = [], removed = [];
                    if (lo1 < lo0) {
                        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {
                            filters[k = index[i]] ^= one;
                            added.push(k);
                        }
                    } else if (lo1 > lo0) {
                        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {
                            filters[k = index[i]] ^= one;
                            removed.push(k);
                        }
                    }
                    if (hi1 > hi0) {
                        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {
                            filters[k = index[i]] ^= one;
                            added.push(k);
                        }
                    } else if (hi1 < hi0) {
                        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {
                            filters[k = index[i]] ^= one;
                            removed.push(k);
                        }
                    }
                    lo0 = lo1;
                    hi0 = hi1;
                    filterListeners.forEach(function (l) {
                        l(one, added, removed);
                    });
                    return dimension;
                }
                function filter(range) {
                    return range == null ? filterAll() : Array.isArray(range) ? filterRange(range) : typeof range === 'function' ? filterFunction(range) : filterExact(range);
                }
                function filterExact(value) {
                    return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));
                }
                function filterRange(range) {
                    return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));
                }
                function filterAll() {
                    return filterIndexBounds((refilter = crossfilter_filterAll)(values));
                }
                function filterFunction(f) {
                    refilter = crossfilter_filterAll;
                    filterIndexFunction(refilterFunction = f);
                    lo0 = 0;
                    hi0 = n;
                    return dimension;
                }
                function filterIndexFunction(f) {
                    var i, k, x, added = [], removed = [];
                    for (i = 0; i < n; ++i) {
                        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {
                            if (x)
                                filters[k] &= zero, added.push(k);
                            else
                                filters[k] |= one, removed.push(k);
                        }
                    }
                    filterListeners.forEach(function (l) {
                        l(one, added, removed);
                    });
                }
                function top(k) {
                    var array = [], i = hi0, j;
                    while (--i >= lo0 && k > 0) {
                        if (!filters[j = index[i]]) {
                            array.push(data[j]);
                            --k;
                        }
                    }
                    return array;
                }
                function bottom(k) {
                    var array = [], i = lo0, j;
                    while (i < hi0 && k > 0) {
                        if (!filters[j = index[i]]) {
                            array.push(data[j]);
                            --k;
                        }
                        i++;
                    }
                    return array;
                }
                function group(key) {
                    var group = {
                        top: top,
                        all: all,
                        reduce: reduce,
                        reduceCount: reduceCount,
                        reduceSum: reduceSum,
                        order: order,
                        orderNatural: orderNatural,
                        size: size,
                        dispose: dispose,
                        remove: dispose
                    };
                    dimensionGroups.push(group);
                    var groups, groupIndex, groupWidth = 8, groupCapacity = crossfilter_capacity(groupWidth), k = 0, select, heap, reduceAdd, reduceRemove, reduceInitial, update = crossfilter_null, reset = crossfilter_null, resetNeeded = true, groupAll = key === crossfilter_null;
                    if (arguments.length < 1)
                        key = crossfilter_identity;
                    filterListeners.push(update);
                    indexListeners.push(add);
                    removeDataListeners.push(removeData);
                    add(values, index, 0, n);
                    function add(newValues, newIndex, n0, n1) {
                        var oldGroups = groups, reIndex = crossfilter_index(k, groupCapacity), add = reduceAdd, initial = reduceInitial, k0 = k, i0 = 0, i1 = 0, j, g0, x0, x1, g, x;
                        if (resetNeeded)
                            add = initial = crossfilter_null;
                        groups = new Array(k), k = 0;
                        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);
                        if (k0)
                            x0 = (g0 = oldGroups[0]).key;
                        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1))
                            ++i1;
                        while (i1 < n1) {
                            if (g0 && x0 <= x1) {
                                g = g0, x = x0;
                                reIndex[i0] = k;
                                if (g0 = oldGroups[++i0])
                                    x0 = g0.key;
                            } else {
                                g = {
                                    key: x1,
                                    value: initial()
                                }, x = x1;
                            }
                            groups[k] = g;
                            while (!(x1 > x)) {
                                groupIndex[j = newIndex[i1] + n0] = k;
                                if (!(filters[j] & zero))
                                    g.value = add(g.value, data[j]);
                                if (++i1 >= n1)
                                    break;
                                x1 = key(newValues[i1]);
                            }
                            groupIncrement();
                        }
                        while (i0 < k0) {
                            groups[reIndex[i0] = k] = oldGroups[i0++];
                            groupIncrement();
                        }
                        if (k > i0)
                            for (i0 = 0; i0 < n0; ++i0) {
                                groupIndex[i0] = reIndex[groupIndex[i0]];
                            }
                        j = filterListeners.indexOf(update);
                        if (k > 1) {
                            update = updateMany;
                            reset = resetMany;
                        } else {
                            if (!k && groupAll) {
                                k = 1;
                                groups = [{
                                        key: null,
                                        value: initial()
                                    }];
                            }
                            if (k === 1) {
                                update = updateOne;
                                reset = resetOne;
                            } else {
                                update = crossfilter_null;
                                reset = crossfilter_null;
                            }
                            groupIndex = null;
                        }
                        filterListeners[j] = update;
                        function groupIncrement() {
                            if (++k === groupCapacity) {
                                reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);
                                groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);
                                groupCapacity = crossfilter_capacity(groupWidth);
                            }
                        }
                    }
                    function removeData() {
                        if (k > 1) {
                            var oldK = k, oldGroups = groups, seenGroups = crossfilter_index(oldK, oldK);
                            for (var i = 0, j = 0; i < n; ++i) {
                                if (filters[i]) {
                                    seenGroups[groupIndex[j] = groupIndex[i]] = 1;
                                    ++j;
                                }
                            }
                            groups = [], k = 0;
                            for (i = 0; i < oldK; ++i) {
                                if (seenGroups[i]) {
                                    seenGroups[i] = k++;
                                    groups.push(oldGroups[i]);
                                }
                            }
                            if (k > 1) {
                                for (var i = 0; i < j; ++i)
                                    groupIndex[i] = seenGroups[groupIndex[i]];
                            } else {
                                groupIndex = null;
                            }
                            filterListeners[filterListeners.indexOf(update)] = k > 1 ? (reset = resetMany, update = updateMany) : k === 1 ? (reset = resetOne, update = updateOne) : reset = update = crossfilter_null;
                        } else if (k === 1) {
                            if (groupAll)
                                return;
                            for (var i = 0; i < n; ++i)
                                if (filters[i])
                                    return;
                            groups = [], k = 0;
                            filterListeners[filterListeners.indexOf(update)] = update = reset = crossfilter_null;
                        }
                    }
                    function updateMany(filterOne, added, removed) {
                        if (filterOne === one || resetNeeded)
                            return;
                        var i, k, n, g;
                        for (i = 0, n = added.length; i < n; ++i) {
                            if (!(filters[k = added[i]] & zero)) {
                                g = groups[groupIndex[k]];
                                g.value = reduceAdd(g.value, data[k]);
                            }
                        }
                        for (i = 0, n = removed.length; i < n; ++i) {
                            if ((filters[k = removed[i]] & zero) === filterOne) {
                                g = groups[groupIndex[k]];
                                g.value = reduceRemove(g.value, data[k]);
                            }
                        }
                    }
                    function updateOne(filterOne, added, removed) {
                        if (filterOne === one || resetNeeded)
                            return;
                        var i, k, n, g = groups[0];
                        for (i = 0, n = added.length; i < n; ++i) {
                            if (!(filters[k = added[i]] & zero)) {
                                g.value = reduceAdd(g.value, data[k]);
                            }
                        }
                        for (i = 0, n = removed.length; i < n; ++i) {
                            if ((filters[k = removed[i]] & zero) === filterOne) {
                                g.value = reduceRemove(g.value, data[k]);
                            }
                        }
                    }
                    function resetMany() {
                        var i, g;
                        for (i = 0; i < k; ++i) {
                            groups[i].value = reduceInitial();
                        }
                        for (i = 0; i < n; ++i) {
                            if (!(filters[i] & zero)) {
                                g = groups[groupIndex[i]];
                                g.value = reduceAdd(g.value, data[i]);
                            }
                        }
                    }
                    function resetOne() {
                        var i, g = groups[0];
                        g.value = reduceInitial();
                        for (i = 0; i < n; ++i) {
                            if (!(filters[i] & zero)) {
                                g.value = reduceAdd(g.value, data[i]);
                            }
                        }
                    }
                    function all() {
                        if (resetNeeded)
                            reset(), resetNeeded = false;
                        return groups;
                    }
                    function top(k) {
                        var top = select(all(), 0, groups.length, k);
                        return heap.sort(top, 0, top.length);
                    }
                    function reduce(add, remove, initial) {
                        reduceAdd = add;
                        reduceRemove = remove;
                        reduceInitial = initial;
                        resetNeeded = true;
                        return group;
                    }
                    function reduceCount() {
                        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);
                    }
                    function reduceSum(value) {
                        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);
                    }
                    function order(value) {
                        select = heapselect_by(valueOf);
                        heap = heap_by(valueOf);
                        function valueOf(d) {
                            return value(d.value);
                        }
                        return group;
                    }
                    function orderNatural() {
                        return order(crossfilter_identity);
                    }
                    function size() {
                        return k;
                    }
                    function dispose() {
                        var i = filterListeners.indexOf(update);
                        if (i >= 0)
                            filterListeners.splice(i, 1);
                        i = indexListeners.indexOf(add);
                        if (i >= 0)
                            indexListeners.splice(i, 1);
                        i = removeDataListeners.indexOf(removeData);
                        if (i >= 0)
                            removeDataListeners.splice(i, 1);
                        return group;
                    }
                    return reduceCount().orderNatural();
                }
                function groupAll() {
                    var g = group(crossfilter_null), all = g.all;
                    delete g.all;
                    delete g.top;
                    delete g.order;
                    delete g.orderNatural;
                    delete g.size;
                    g.value = function () {
                        return all()[0].value;
                    };
                    return g;
                }
                function dispose() {
                    dimensionGroups.forEach(function (group) {
                        group.dispose();
                    });
                    var i = dataListeners.indexOf(preAdd);
                    if (i >= 0)
                        dataListeners.splice(i, 1);
                    i = dataListeners.indexOf(postAdd);
                    if (i >= 0)
                        dataListeners.splice(i, 1);
                    i = removeDataListeners.indexOf(removeData);
                    if (i >= 0)
                        removeDataListeners.splice(i, 1);
                    m &= zero;
                    return filterAll();
                }
                return dimension;
            }
            function groupAll() {
                var group = {
                    reduce: reduce,
                    reduceCount: reduceCount,
                    reduceSum: reduceSum,
                    value: value,
                    dispose: dispose,
                    remove: dispose
                };
                var reduceValue, reduceAdd, reduceRemove, reduceInitial, resetNeeded = true;
                filterListeners.push(update);
                dataListeners.push(add);
                add(data, 0, n);
                function add(newData, n0) {
                    var i;
                    if (resetNeeded)
                        return;
                    for (i = n0; i < n; ++i) {
                        if (!filters[i]) {
                            reduceValue = reduceAdd(reduceValue, data[i]);
                        }
                    }
                }
                function update(filterOne, added, removed) {
                    var i, k, n;
                    if (resetNeeded)
                        return;
                    for (i = 0, n = added.length; i < n; ++i) {
                        if (!filters[k = added[i]]) {
                            reduceValue = reduceAdd(reduceValue, data[k]);
                        }
                    }
                    for (i = 0, n = removed.length; i < n; ++i) {
                        if (filters[k = removed[i]] === filterOne) {
                            reduceValue = reduceRemove(reduceValue, data[k]);
                        }
                    }
                }
                function reset() {
                    var i;
                    reduceValue = reduceInitial();
                    for (i = 0; i < n; ++i) {
                        if (!filters[i]) {
                            reduceValue = reduceAdd(reduceValue, data[i]);
                        }
                    }
                }
                function reduce(add, remove, initial) {
                    reduceAdd = add;
                    reduceRemove = remove;
                    reduceInitial = initial;
                    resetNeeded = true;
                    return group;
                }
                function reduceCount() {
                    return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);
                }
                function reduceSum(value) {
                    return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);
                }
                function value() {
                    if (resetNeeded)
                        reset(), resetNeeded = false;
                    return reduceValue;
                }
                function dispose() {
                    var i = filterListeners.indexOf(update);
                    if (i >= 0)
                        filterListeners.splice(i);
                    i = dataListeners.indexOf(add);
                    if (i >= 0)
                        dataListeners.splice(i);
                    return group;
                }
                return reduceCount();
            }
            function size() {
                return n;
            }
            return arguments.length ? add(arguments[0]) : crossfilter;
        }
        function crossfilter_index(n, m) {
            return (m < 257 ? crossfilter_array8 : m < 65537 ? crossfilter_array16 : crossfilter_array32)(n);
        }
        function crossfilter_range(n) {
            var range = crossfilter_index(n, n);
            for (var i = -1; ++i < n;)
                range[i] = i;
            return range;
        }
        function crossfilter_capacity(w) {
            return w === 8 ? 256 : w === 16 ? 65536 : 4294967296;
        }
    }(typeof exports !== 'undefined' && exports || this));
});
/*crossfilter@1.3.12#index*/
define('crossfilter@1.3.12#index', function (require, exports, module) {
    module.exports = require('./crossfilter').crossfilter;
});
/*mev-scatter-plot@0.0.0#src/_directives/scatterPlot.tpl.html!system-text@0.1.0#text*/
define('mev-scatter-plot@0.0.0#src/_directives/scatterPlot.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="chart">\n\t<div class="controls">\t\n\t\t<label>X</label>\t\t\t\t\t\n\t\t<select ng-change="vm.updateXAxis()" ng-model="xField" ng-options="field for field in fields"></select>\n\n\t\t<label>Y</label>\t\t\t\t\t\n\t\t<select ng-change="vm.updateYAxis()" ng-model="yField" ng-options="field for field in fields"></select>\n\t\t\n\t\t<label class="break">Log Scale</label>\t\t\t\t\n\t\t<div class="inlineGroup">\n\t\t\t<label>X</label><input ng-model="logScaleX" type="checkbox" />\n\t\t    <label>Y</label><input ng-model="logScaleY" type="checkbox" />\n\t\t</div>\n\n\t\t<label class="break">Tools</label>\n\t\t<div class="btn-group">\n\t        <label class="btn btn-info btn-sm" ng-model="dragAction" uib-btn-radio="\'zoom\'">\n\t        \t<input name="dragAction" type="radio" ng-model="dragAction" ng-value="\'zoom\'" aria-label="Zoom"/>\n\t        \t<span class="glyphicon glyphicon-zoom-in"  aria-hidden="true" mev-glyph-alt="zoom"></span>\n\t        </label>\n\t        <label class="btn btn-info btn-sm" ng-model="dragAction" uib-btn-radio="\'select\'">\n\t        \t<input name="dragAction" type="radio" ng-model="dragAction" ng-value="\'select\'" aria-label="Select"/>\n\t        \t<span class="glyphicon glyphicon-screenshot"  aria-hidden="true" mev-glyph-alt="brush"></span>\n\t        </label>\t\t\t        \n\t    </div>\n\n\t\t<label class="break">Save</label>\n\t\t<div class="btn-group">\n\t\t\t<label class="btn btn-info btn-sm">\n\t\t\t\t<a mev-svg-save-as="saveAsConfig">\n\t\t\t\t\t<span class="glyphicon glyphicon-floppy-save" mev-glyph-alt="png"></span>\n\t\t\t\t</a>\n\t\t\t</label>\n\t\t</div>\n\n\t\t<table class="table table-condensed controls" ng-if="vm.selections && vm.selections.length>0">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th class="mev-control-label">Selections</th>\n\t\t\t\t\t<th class="mev-control-label">Experiment</th>\n\t\t\t\t\t<th class="mev-control-label">Control</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr ng-repeat="selection in vm.selections">\n\t\t\t\t\t<td class="mev-control">\n\t\t\t\t\t\t<!--<input type="checkbox" ng-model="selection.checked" ng-change="vm.updateSelection(selection)" ng-true-value="true" ng-false-value="false">-->\n\t\t\t\t\t\t<button type="button" class="btn btn-primary btn-xs"\n\t\t\t\t\t\t\t\tng-model="selection.checked"\n\t\t\t\t\t\t\t\tng-change="vm.updateSelection(selection)"\n\t\t\t\t\t\t\t\tuib-btn-checkbox\n\t\t\t\t\t\t\t\tng-style="{\'background-color\':selection.properties.selectionColor, \'border-color\': selection.properties.selectionColor}">\n\t\t\t\t\t\t\t{{selection.name}}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</td>\n\t\t\t\t\t<!--<td style="width: 20px" bgcolor="{{selection.properties.selectionColor}}">&nbsp;</td>-->\n\t\t\t\t\t<!--<td>{{selection.properties.selectionDescription}}</td>-->\n\t\t\t\t\t<td class="mev-control">\n\t\t\t\t\t\t<div class="btn-group btn-group-xs">\n\t\t\t\t\t\t\t<label class="btn" ng-model="selection.group" ng-change="vm.updateGroup(selection)" uib-btn-radio="\'experiment\'" uncheckable></label>\n\t\t\t\t\t\t\t<!--<input type="checkbox"-->\n\t\t\t\t\t\t\t\t   <!--ng-model="selection.group"-->\n\t\t\t\t\t\t\t\t   <!--ng-change="vm.updateGroup(selection)"-->\n\t\t\t\t\t\t\t\t   <!--ng-true-value="experiment" ng-false-value="null"-->\n\t\t\t\t\t\t\t<!--/>-->\n\t\t\t\t\t\t\t<!--ng-click="vm.uncheckGroup($event, selection)"-->\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t\t<td class="mev-control">\n\t\t\t\t\t\t<div class="btn-group btn-group-xs">\n\t\t\t\t\t\t\t<label class="btn" ng-model="selection.group" ng-change="vm.updateGroup(selection)" uib-btn-radio="\'control\'" uncheckable></label>\n\t\t\t\t\t\t\t<!--<input type="checkbox"-->\n\t\t\t\t\t\t\t\t   <!--ng-model="selection.group"-->\n\t\t\t\t\t\t\t\t   <!--ng-change="vm.updateGroup(selection)"-->\n\t\t\t\t\t\t\t\t   <!--ng-true-value="control" ng-false-value="null"-->\n\t\t\t\t\t\t\t<!--/>-->\n\t\t\t\t\t\t\t<!--ng-click="vm.uncheckGroup($event, selection)"-->\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t<div class="body">\n\t\t<nvd3 options=\'options\' data=\'data\' config=\'config\' api=\'api\'></nvd3>\n\t</div>\n\t<div class="footer">\n\t\t<div class="selection" ng-if="vm.selected && vm.selected.items.length>0">\n\t\t\t<table class="table table-condensed" >\t\t\n\t\t\t\t<thead>\n\t\t\t\t\t<th>Selected</th>\n\t\t\t\t\t<th>{{vm.selected.xLabel}}</th>\n\t\t\t\t\t<th>{{vm.selected.yLabel}}</th>\n\t\t\t\t</thead>\n\t\t\t\t<tr ng-repeat="item in vm.selected.items">\t\n\t\t\t\t\t<td>{{item.id}}</td>\n\t\t\t\t\t<td>{{item.x}}</td>\n\t\t\t\t\t<td>{{item.y}}</td>\t\t\t\t\t\t\t\t\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t</div>\n\t</div>\n</div>';
});
/*mev-scatter-plot@0.0.0#src/_directives/scatterPlotDirective*/
'use strict';
define('mev-scatter-plot@0.0.0#src/_directives/scatterPlotDirective', [
    'angular',
    'd3',
    'lodash',
    'crossfilter',
    './scatterPlot.tpl.html'
], function (angular, d3, _, crossfilter, template) {
    'use strict';
    var ScatterPlotDirective = function ScatterPlotDirective(mevNvd3DataAdaptor) {
        return {
            restrict: 'AEC',
            scope: {
                config: '=?mevScatterPlot',
                input: '=mevInput',
                selections: '=mevSelections',
                xField: '@mevXField',
                yField: '@mevYField',
                fields: '=?mevFields',
                idField: '@mevIdField',
                selectionGroups: '=mevSelectionGroups',
                logScaleX: '=',
                logScaleY: '=',
                dragAction: '=',
                useCrossfilter: '='
            },
            controller: 'scatterCtrl',
            template: template,
            link: function (scope, elm, attrs, ctrl) {
                var _self = this;
                scope.api = undefined;
                if (!scope.fields)
                    scope.fields = [];
                if (!_.includes(scope.fields, scope.xField))
                    scope.fields.push(scope.xField);
                if (!_.includes(scope.fields, scope.yField))
                    scope.fields.push(scope.yField);
                function getCheckedSelections() {
                    if (!_.isArray(scope.vm.selections))
                        scope.vm.selections = [];
                    return _.filter(scope.vm.selections, function (s) {
                        return s.checked;
                    });
                }
                function createGroupSelections(groups, options) {
                    _.defaults(options = options || {}, {
                        formatName: function (group) {
                            return group.name;
                        },
                        getColor: function (group) {
                            return group.color;
                        }
                    });
                    return groups.map(function (group) {
                        group.selection = {
                            name: options.formatName(group),
                            keys: _.uniq(_.flatten(group.selections.map(function (selection) {
                                return selection.keys;
                            }))),
                            properties: { selectionColor: options.getColor(group) }
                        };
                        return _.cloneDeep(group.selection);
                    });
                }
                function getCheckedGroups() {
                    if (!_.isArray(scope.vm.selections))
                        scope.vm.selections = [];
                    console.debug('elm', elm);
                    return _.transform(scope.vm.selections, function (groups, s, index) {
                        var group = _.find(groups, { name: s.group });
                        if (group) {
                            group.selections.push(s);
                        }
                    }, [
                        {
                            name: 'experiment',
                            selections: [],
                            color: 'green'
                        },
                        {
                            name: 'control',
                            selections: [],
                            color: 'blue'
                        }
                    ]);
                }
                function findField(fixedFieldName) {
                    var targetField = fixedFieldName === 'xField' ? 'yField' : 'xField';
                    _.forEach(scope.fields, function (field) {
                        if (scope[fixedFieldName] !== field) {
                            scope[targetField] = field;
                            return false;
                        }
                    });
                }
                scope.saveAsConfig = {
                    name: scope.config.name ? scope.config.name : 'mev-scatter-chart.png',
                    selector: 'nvd3 svg'
                };
                scope.vm = {
                    selections: _.cloneDeep(scope.selections),
                    refresh: function () {
                        scope.api.updateWithOptions(getOptions());
                    },
                    zoomEnabled: function () {
                        return scope.dragAction === 'zoom';
                    },
                    dragAction: 'select',
                    updateSelection: function () {
                        var checkedSelections = getCheckedSelections();
                        updateData(scope.input, checkedSelections);
                        scope.$emit('mev.scatterPlot.selections.updated', checkedSelections);
                    },
                    updateGroup: function () {
                        var checkedGroups = getCheckedGroups();
                        updateData(scope.input, createGroupSelections(checkedGroups));
                        scope.$emit('mev.scatterPlot.groups.updated', checkedGroups);
                    },
                    uncheckGroup: function ($event, selection) {
                        if (selection.group === $event.target.value) {
                            delete selection.group;
                        }
                    },
                    updateXAxis: function () {
                        if (scope.xField === scope.yField)
                            findField('xField');
                        updateData();
                        updateOptions();
                    },
                    updateYAxis: function () {
                        if (scope.yField === scope.xField)
                            findField('yField');
                        updateData();
                        updateOptions();
                    },
                    selectionMode: {
                        _MODE_GROUPS: 'groups',
                        _MODE_SELECTIONS: 'selections',
                        value: 'selections',
                        get: function () {
                            return this.value;
                        },
                        setGroups: function () {
                            this.value = this._MODE_GROUPS;
                        },
                        setSelections: function () {
                            this.value = this._MODE_SELECTIONS;
                        },
                        isGroup: function () {
                            return this.value === this._MODE_GROUPS;
                        },
                        isSelections: function () {
                            return this.value === this._MODE_SELECTIONS;
                        }
                    }
                };
                var _svg, _brush, _chart;
                function _addBrush() {
                    if (_svg && _brush)
                        _svg.selectAll('.brush').remove();
                    _svg.insert('g', ':first-child').attr('class', 'brush').call(_brush);
                }
                if (scope.input === 'random') {
                    scope.inputData = ctrl.generateData(2, 3);
                }
                var xf, xfxDim, xfyDim;
                function updateData(newData, newSelections) {
                    if (!newData)
                        newData = scope.input;
                    if (!newSelections)
                        newSelections = getCheckedSelections();
                    scope.data = mevNvd3DataAdaptor.transform(newData, scope.xField, scope.yField, scope.idField, newSelections, 1000);
                    scope.inputData = scope.data;
                    if (scope.useCrossfilter) {
                        var values = _.flatten(_.map(scope.data, function (series) {
                            return series.values;
                        }));
                        xf = crossfilter(values);
                        xfxDim = xf.dimension(function (d) {
                            return d.x;
                        });
                        xfyDim = xf.dimension(function (d) {
                            return d.y;
                        });
                    }
                }
                scope.options = getOptions();
                scope.$watch('input', function (newVal) {
                    if (newVal) {
                        updateData(scope.input);
                        console.debug('domain data', scope.inputData);
                        scope.options = getOptions();
                    }
                });
                scope.$watch('logScaleX', function (newVal, oldVal) {
                    if (typeof newVal !== 'undefined' && typeof oldVal !== 'undefined') {
                        scope.options = getOptions();
                    }
                });
                scope.$watch('logScaleY', function (newVal, oldVal) {
                    if (typeof newVal !== 'undefined' && typeof oldVal !== 'undefined') {
                        scope.options = getOptions();
                    }
                });
                scope.$watch(function () {
                    return scope.vm.zoomEnabled();
                }, function (newVal, oldVal) {
                    if (typeof newVal !== 'undefined' && typeof oldVal !== 'undefined') {
                        scope.options = getOptions();
                        scope.api.updateWithOptions(scope.options);
                    }
                });
                scope.$watchCollection('selections', function (selections) {
                    scope.vm.selections = _.cloneDeep(selections);
                });
                function updateOptions() {
                    scope.options = getOptions();
                }
                function getDomain(dim) {
                    var theDomain = [
                        Infinity,
                        -Infinity
                    ];
                    if (scope.inputData) {
                        _.map(scope.inputData, function (group) {
                            var domain = d3.extent(group.values, function (d) {
                                return d[dim];
                            });
                            theDomain[0] = theDomain[0] > domain[0] ? domain[0] : theDomain[0];
                            theDomain[1] = theDomain[1] < domain[1] ? domain[1] : theDomain[1];
                        });
                        console.debug('theDomain ' + dim, theDomain);
                        return theDomain.map(function (v) {
                            if (dim === 'x' && scope.logScaleX)
                                return Math.abs(v) * 1.1;
                            else if (dim === 'y' && scope.logScaleY)
                                return Math.abs(v) * 1.1;
                            else
                                return v * 1.1;
                        });
                    }
                }
                function getScale(isLog) {
                    if (isLog)
                        return d3.scale.log();
                    else
                        return d3.scale.linear();
                }
                function getValue(dim, isLog) {
                    if (isLog)
                        return function (d) {
                            return Math.abs(d[dim]);
                        };
                    else
                        return function (d) {
                            return d[dim];
                        };
                }
                function getOptions() {
                    return {
                        chart: {
                            type: 'scatterChart',
                            showVoronoi: false,
                            interactive: true,
                            pointSize: 64,
                            pointScale: d3.scale.identity(),
                            callback: function (chart) {
                                _chart = chart;
                                chart.dispatch.on('renderEnd', function () {
                                    _chart = chart;
                                    var svgDom = angular.element('svg');
                                    console.debug('.nvd3-svg', svgDom.height());
                                    _svg = d3.select('.nvd3.nv-wrap.nv-scatter');
                                    console.debug('_svg', _svg);
                                    _brush = d3.svg.brush().x(chart.scatter.xScale()).y(chart.scatter.yScale());
                                    if (!scope.vm.zoomEnabled())
                                        _addBrush();
                                    var selection = [];
                                    function raiseEventSelectionUpdated(selection) {
                                        scope.vm.selected = {
                                            items: selection,
                                            xLabel: scope.xField,
                                            yLabel: scope.yField
                                        };
                                        scope.$apply(function () {
                                            scope.$emit('mev.scatterPlot.selection', _.clone(scope.vm.selected, true));
                                        });
                                    }
                                    function clearSelection() {
                                        var node = _svg.selectAll('.nv-group > path.nv-point');
                                        console.debug('node', node);
                                        node.classed('selected', false);
                                        selection.length = 0;
                                    }
                                    function getBrushExtent() {
                                        var extent = _brush.extent();
                                        extent.x = [
                                            extent[0][0],
                                            extent[1][0]
                                        ];
                                        extent.y = [
                                            extent[0][1],
                                            extent[1][1]
                                        ];
                                        return extent;
                                    }
                                    function updateSelection() {
                                        var extent = getBrushExtent();
                                        if (scope.useCrossfilter) {
                                            xfxDim.filterRange(extent.x);
                                            xfyDim.filterRange(extent.y);
                                            selection = xfxDim.top(Infinity);
                                        } else {
                                            var node = _svg.selectAll('.nv-group > path.nv-point');
                                            console.debug('node', node.size(), node);
                                            var count = 0;
                                            node.classed('selected', function (d) {
                                                console.debug('count', count++, d, d.length);
                                                if (d.length === 2) {
                                                    var datum = d[0];
                                                    var x = _chart.x()(datum);
                                                    var y = _chart.y()(datum);
                                                    var select = extent[0][0] <= x && x < extent[1][0] && extent[0][1] <= y && y < extent[1][1];
                                                    if (select) {
                                                        selection.push(datum);
                                                    } else {
                                                    }
                                                    return select;
                                                } else {
                                                    console.debug('bad datum', d, d.length);
                                                    return false;
                                                }
                                            });
                                        }
                                        raiseEventSelectionUpdated(selection);
                                    }
                                    function getSelectedData() {
                                    }
                                    _brush.on('brush', function () {
                                    });
                                    _brush.on('brushstart', function () {
                                        console.debug('brushstart', _brush.extent(), arguments);
                                        clearSelection();
                                    });
                                    _brush.on('brushend', function () {
                                        console.debug('brushend', _brush.extent(), arguments);
                                        updateSelection();
                                    });
                                });
                            },
                            height: 450,
                            color: d3.scale.category10().range(),
                            scatter: {
                                x: getValue('x', scope.logScaleX),
                                y: getValue('y', scope.logScaleY),
                                xScale: getScale(scope.logScaleX),
                                yScale: getScale(scope.logScaleY),
                                forceX: getDomain('x'),
                                forceY: getDomain('y'),
                                onlyCircles: true,
                                dispatch: {
                                    elementClick: function () {
                                        console.debug('click', arguments);
                                    },
                                    brushend: function () {
                                        console.debug('brush', arguments);
                                    }
                                }
                            },
                            tooltip: {
                                contentGenerator: function (d) {
                                    var valueFormatter = function (d, i) {
                                        return _chart.xAxis.axisLabel() + ': ' + d;
                                    };
                                    var headerFormatter = function (d) {
                                        return _chart.yAxis.axisLabel() + ': ' + d;
                                    };
                                    var keyFormatter = function (d, i) {
                                        return d;
                                    };
                                    if (d === null) {
                                        return '';
                                    }
                                    var table = d3.select(document.createElement('table'));
                                    var theadEnter = table.selectAll('thead').data([d]).enter().append('thead');
                                    theadEnter.append('tr').append('td').attr('colspan', 3).append('strong').classed('id', true).html(d.point.id);
                                    theadEnter.append('tr').append('td').attr('colspan', 3).classed('x-value', true).html(headerFormatter(d.series[0].value));
                                    var tbodyEnter = table.selectAll('tbody').data([d]).enter().append('tbody');
                                    var trowEnter = tbodyEnter.selectAll('tr').data(function (p) {
                                        return p.series;
                                    }).enter().append('tr').classed('highlight', function (p) {
                                        return p.highlight;
                                    });
                                    trowEnter.append('td').classed('legend-color-guide', true).append('div').style('background-color', function (p) {
                                        return p.color;
                                    });
                                    trowEnter.append('td').classed('key', true).classed('total', function (p) {
                                        return !!p.total;
                                    }).html(function (p, i) {
                                        return keyFormatter(p.key, i);
                                    });
                                    trowEnter.append('td').classed('value', true).html(function (p, i) {
                                        return valueFormatter(d.value, i);
                                    });
                                    trowEnter.selectAll('td').each(function (p) {
                                        if (p.highlight) {
                                            var opacityScale = d3.scale.linear().domain([
                                                0,
                                                1
                                            ]).range([
                                                '#fff',
                                                p.color
                                            ]);
                                            var opacity = 0.6;
                                            d3.select(this).style('border-bottom-color', opacityScale(opacity)).style('border-top-color', opacityScale(opacity));
                                        }
                                    });
                                    var html = table.node().outerHTML;
                                    if (d.footer !== undefined)
                                        html += '<div class=\'footer\'>' + d.footer + '</div>';
                                    return html;
                                }
                            },
                            showDistX: true,
                            showDistY: true,
                            duration: 350,
                            xAxis: {
                                axisLabel: scope.xField,
                                tickFormat: function (d) {
                                    return d3.format('.02f')(d);
                                }
                            },
                            yAxis: {
                                axisLabel: scope.yField,
                                tickFormat: function (d) {
                                    return d3.format('.02f')(d);
                                },
                                axisLabelDistance: -5
                            },
                            padData: false,
                            zoom: {
                                enabled: scope.vm.zoomEnabled(),
                                scaleExtent: [
                                    1,
                                    10
                                ],
                                useFixedDomain: false,
                                useNiceScale: false,
                                horizontalOff: false,
                                verticalOff: false,
                                unzoomEventType: 'dblclick.zoom'
                            }
                        }
                    };
                }
            }
        };
    };
    ScatterPlotDirective.$inject = ['mevNvd3DataAdaptor'];
    ScatterPlotDirective.$name = 'mevScatterPlot';
    ScatterPlotDirective.$provider = 'directive';
    ScatterPlotDirective.provider = 'directive';
    return ScatterPlotDirective;
});
/*mev-scatter-plot@0.0.0#src/services/adaptors/Nvd3DataAdaptor*/
'use strict';
define('mev-scatter-plot@0.0.0#src/services/adaptors/Nvd3DataAdaptor', ['lodash'], function (_) {
    var service = function Nvd3DataAdaptor() {
        function forEachById(input, fn, idField, thisArg) {
            return _.forEach(input, function (item, key, collection) {
                var bind = thisArg || this;
                var id;
                if (_.isArray(collection))
                    id = item[idField];
                else if (idField)
                    id = item[idField];
                else
                    id = key;
                return fn.call(bind, item, id, collection);
            });
        }
        function transform(input, x, y, idField, selections, limit) {
            if (!limit)
                limit = Infinity;
            if (!selections)
                selections = [];
            var groups = {};
            var count = 0;
            forEachById(input, function (item, id) {
                if (++count > limit)
                    return false;
                var groupAcc = {
                    names: [],
                    color: 'grey'
                };
                _.map(selections, function (selection) {
                    if (_.includes(selection.keys, id)) {
                        groupAcc.names.push(selection.name);
                        groupAcc.color = selection.properties.selectionColor;
                    }
                });
                var groupName = 'none';
                if (groupAcc.names.length === 1)
                    groupName = groupAcc.names[0];
                else if (groupAcc.names.length > 1)
                    groupName = groupAcc.names.join('+');
                var group = groups[groupName];
                if (!group) {
                    groups[groupName] = group = {};
                    group.name = group.key = groupName;
                    group.names = groupAcc.names;
                    if (group.names.length < 2) {
                        group.color = groupAcc.color;
                    } else {
                        group.color = '#' + Math.floor(Math.random() * 16777215).toString(16);
                    }
                    group.shape = 'circle';
                    group.values = [];
                }
                group.values.push({
                    x: item[x],
                    y: item[y],
                    size: 10,
                    id: id
                });
            }, idField);
            if (Object.keys(groups).length === 1 && groups.none)
                groups.none.name = groups.none.key = 'Selection: none';
            return _.sortBy(groups, function (group) {
                return group.name === 'none' ? -Infinity : -group.names.length;
            });
        }
        this.transform = transform;
        this.forEachById = forEachById;
    };
    service.$inject = [];
    service.$name = 'mevNvd3DataAdaptor';
    service.$provider = 'service';
    return service;
});
/*mev-scatter-plot@0.0.0#src/scatterPlot*/
define('mev-scatter-plot@0.0.0#src/scatterPlot', [
    'mui',
    'jquery',
    'd3',
    'nvd3',
    'angular-nvd3',
    'lodash',
    'mev-chart-utils',
    'angular-ui-bootstrap',
    './_directives/scatterPlotDirective',
    './services/adaptors/Nvd3DataAdaptor',
    'nvd3/build/nv.d3.css!',
    './style/scatter.less!'
], function (ng, $, d3, nvd3, ngnvd3, _) {
    'use strict';
    return ng.module('mevScatterPlot', arguments, arguments).controller('scatterCtrl', [
        '$scope',
        function () {
            var livex;
            this.generateData = function (groups, points) {
                var data = [], shapes = ['circle'], random = d3.random.normal();
                for (var i = 0; i < groups; i++) {
                    data.push({
                        key: 'Group ' + i,
                        values: []
                    });
                    for (var j = 0; j < points; j++) {
                        data[i].values.push({
                            x: random() * 1000,
                            y: random() * 1000,
                            size: Math.random(),
                            shape: shapes[j % 6]
                        });
                    }
                }
                return data;
            };
        }
    ]);
});
/*mev-scatter-plot@0.0.0#index*/
define('mev-scatter-plot@0.0.0#index', [
    'angular',
    'mev-scatter-plot/src/scatterPlot'
], function (ng, scatterPlot) {
    return scatterPlot;
});
/*mev-pca@0.0.0#src/view/pcaAnalysis.tpl.html!system-text@0.1.0#text*/
define('mev-pca@0.0.0#src/view/pcaAnalysis.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="pca-scatter-plot">\t\t\n\t<div mev-scatter-plot="{name: pcaAnalysis.name}" drag-action="\'select\'"\n    \tmev-input="pcaAnalysis.x" \n    \tmev-x-field="{{vm.fields[0]}}" \n    \tmev-y-field="{{vm.fields[1]}}" \n    \tmev-fields="vm.fields"\n    \tlog-scale-x="vm.logScaleX" \n    \tlog-scale-y="vm.logScaleY" \n    \tmev-selections="selections">\n    </div>\t\t\n</div>';
});
/*mev-pca@0.0.0#src/view/pcaAnalysisDirective*/
define('mev-pca@0.0.0#src/view/pcaAnalysisDirective', function (require) {
    'use strict';
    require('../style/pcaAnalysis.less');
    var ng = require('mui');
    var _ = require('lodash');
    var d3 = require('d3');
    var PcaAnalysisDirective = function PcaAnalysisDirective() {
        function transformData(analysis, x, y, selections) {
            var selectedSets = _.filter(selections, function (s) {
                return s.checked;
            });
            var groups = {};
            _.map(analysis.x, function (item, key) {
                var groupAcc = {
                    names: [],
                    color: 'grey'
                };
                _.map(selectedSets, function (selection) {
                    if (_.includes(selection.keys, key)) {
                        groupAcc.names.push(selection.name);
                        groupAcc.color = selection.properties.selectionColor;
                    }
                });
                var groupName = 'none';
                if (groupAcc.names.length === 1)
                    groupName = groupAcc.names[0];
                else if (groupAcc.names.length > 1)
                    groupName = groupAcc.names.join('+');
                var group = groups[groupName];
                if (!group) {
                    groups[groupName] = group = {};
                    group.name = group.key = groupName;
                    group.names = groupAcc.names;
                    if (group.names.length < 2) {
                        group.color = groupAcc.color;
                    } else {
                        group.color = '#' + Math.floor(Math.random() * 16777215).toString(16);
                    }
                    group.shape = 'circle';
                    group.values = [];
                }
                group.values.push({
                    x: item[x],
                    y: item[y],
                    size: 10,
                    sample: key,
                    id: key
                });
            });
            if (Object.keys(groups).length === 1)
                groups['none'].name = groups['none'].key = 'Selection: none';
            return _.sortBy(groups, function (group) {
                return group.name === 'none' ? Infinity : group.names.length;
            });
        }
        return {
            restrict: 'EAC',
            template: require('./pcaAnalysis.tpl.html!'),
            scope: {
                pcaAnalysis: '=mevPcaAnalysis',
                selections: '=mevSelections',
                curSelection: '=',
                curGroups: '=mevCurGroups',
                curSelections: '=mevCurSelections'
            },
            controller: [
                '$scope',
                function (scope) {
                    scope.vm = {
                        xLabel: 'PC1',
                        yLabel: 'PC2',
                        logScaleX: false,
                        logScaleY: false,
                        dragAction: 'select',
                        isZoomEnabled: function () {
                            return scope.vm.dragAction === 'zoom';
                        },
                        updateAxis: function () {
                            scope.vm.data = transformData(scope.pcaAnalysis, scope.vm.xLabel, scope.vm.yLabel, scope.selections);
                        },
                        updateSelection: function () {
                            scope.vm.setData(transformData(scope.pcaAnalysis, scope.vm.xLabel, scope.vm.yLabel, scope.selections));
                        },
                        setData: function (data) {
                            scope.vm.data = data;
                            scope.vm.selection = undefined;
                        },
                        updateScale: function () {
                            scope.vm.setData();
                        },
                        fields: [
                            'PC1',
                            'PC2',
                            'PC3'
                        ]
                    };
                    scope.$watch('pcaAnalysis', function (newVal) {
                        if (newVal)
                            scope.vm.setData(transformData(newVal, scope.vm.xLabel, scope.vm.yLabel, scope.selections));
                    });
                    scope.$on('mev.scatterPlot.selection', function ($event, selected) {
                        scope.curSelection.length = 0;
                        selected.items.map(function (item) {
                            scope.curSelection.push(item);
                        });
                        console.debug('pca selection', scope.vm.bar);
                    });
                    scope.$on('mev.scatterPlot.groups.updated', function ($event, groups) {
                        scope.curGroups.length = 0;
                        groups.map(function (group) {
                            _.assign(group.selection, {
                                name: group.selections.map(function (s) {
                                    return s.name;
                                }).join('+')
                            });
                            scope.curGroups.push(group.selection);
                        });
                        console.debug('pca groups', groups);
                    });
                    scope.$on('mev.scatterPlot.selections.updated', function ($event, selections) {
                        scope.curSelections.length = 0;
                        selections.map(function (selection) {
                            scope.curSelections.push(selection);
                        });
                        console.debug('pca selections', scope.curSelections);
                    });
                }
            ]
        };
    };
    PcaAnalysisDirective.$inject = [];
    PcaAnalysisDirective.$name = 'MevPcaAnalysisDirective';
    return PcaAnalysisDirective;
});
/*mev-pca@0.0.0#src/router/PcaState.tpl.html!system-text@0.1.0#text*/
define('mev-pca@0.0.0#src/router/PcaState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<!-- <project-analysis-parameters parameters="DatasetAnalysisVM.analysis.params"></project-analysis-parameters> -->\n<div class="column-wrapper">\n\t<ul class="nav nav-tabs column-header" id="importTabs">\n\t\t<li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n\t\t<div class="action-menu" mui-paste="action-menu"></div>\t\t\n\t</ul>\n\n\t<div class="tab-content column-body">\n\t\t<div class="tab-pane active results-wrapper" id="table" >\n\t\t\t<div class="results-header clearfix">\n\t\t\t\t<!--      \t<div class="btn-toolbar" role="toolbar" mui-yank="action-menu"> -->\n\t\t     \t<div class="btn-toolbar" role="toolbar" >\n\t\t     \t\t<div class="btn-group">\n\t\t\t\t\t\t<span uib-dropdown on-toggle="toggled(open)">\n\t\t\t\t\t\t\t  <a href id="simple-dropdown" uib-dropdown-toggle>\n\t\t\t\t\t\t\t\tDifferential Expression\n\t\t\t\t\t\t\t  </a>\n\t\t\t\t\t\t\t  <ul class="dropdown-menu" uib-dropdown-menu aria-labelledby="simple-dropdown">\n\t\t\t\t\t\t\t\t<li role="menuitem"><a class="mev-analysis-start-button" mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'limma\']" mev-context-level="bottom">limma</a></li>\n\t\t\t\t\t\t\t\t<li role="menuitem"><a class="mev-analysis-start-button" mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'edger\']" mev-context-level="bottom">edger</a></li>\n\t\t\t\t\t\t\t\t  <li role="menuitem"><a class="mev-analysis-start-button" mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'voom\']" mev-context-level="bottom">voom</a></li>\n\t\t\t\t\t\t\t\t  <li role="menuitem"><a class="mev-analysis-start-button" mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'ttest\']" mev-context-level="bottom">ttest</a></li>\n\t\t\t\t\t\t\t\t  <li role="menuitem"><a class="mev-analysis-start-button" mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'deseq\']" mev-context-level="bottom">deseq</a></li>\n\t\t\t\t\t\t\t\t  <li role="menuitem"><a class="mev-analysis-start-button" mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'anova\']" mev-context-level="bottom">anova</a></li>\n\t\t\t\t\t\t\t  </ul>\n\t\t\t\t\t\t</span>\n\t\t\t            <btn-create-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis" \n\t\t\t             \tmui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.getSelection()" mui-key-name="id" mui-dimension="column">\n\t\t\t            </btn-create-selection><!-- \n\t\t\t            --><btn-export-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis" \n\t\t\t             \tmui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.getSelection()" mui-key-name="id" mui-dimension="column">\n\t\t\t            </btn-export-selection>           \n\t\t            </div>\n\t\t      \t</div>\n\t\t\t</div>\n\t\t\t<div class="results-body">\n\t\t\t\t<div mev-pca-analysis="DatasetAnalysisVM.analysis"\n\t\t\t\t\t mev-selections="DatasetAnalysisVM.project.dataset.column.selections"\n\t\t\t\t\t cur-selection="DatasetAnalysisVM.curSelection"\n\t\t\t\t\t mev-cur-groups="DatasetAnalysisVM.curGroups"\n\t\t\t\t\t mev-cur-selections="DatasetAnalysisVM.curSelections"\n\t\t\t\t></div>\n<!-- \t\t\t\t<nvd3 options="DatasetAnalysisVM.options" data="DatasetAnalysisVM.data"></nvd3> -->\n<!-- \t\t\t\t<d3-Scatterplot data="DatasetAnalysisVM.pc.data" selected="DatasetAnalysisVM.selectionParams.samples" width="600" height="400"></d3-Scatterplot> -->\n\t\t\t</div>\n\t\t</div>\t\t\n\t</div>\n</div>\n';
});
/*mev-analysis@0.0.1#src/params/model/BaseParam*/
define('mev-analysis@0.0.1#src/params/model/BaseParam', ['lodash'], function (_) {
    'use strict';
    function BaseParam(spec) {
        _.assign(this, spec);
        this.validate = function () {
            if (this.required === true && !this.value)
                return this.id + ' is required';
        };
        this.checkConstraint = function (params) {
            var _self = this;
            var params = params || this.params;
            if (!this.constraint)
                return true;
            var constraintParam = _.find(params, function (param) {
                return _self.constraint.paramId === param.id;
            });
            if (!constraintParam)
                return true;
            if (constraintParam) {
                return constraintParam.value === this.constraint.value;
            }
        };
    }
    BaseParam.$injcect = [];
    BaseParam.$name = 'BaseParam';
    BaseParam.$provider = 'factory';
    return BaseParam;
});
/*mev-analysis@0.0.1#src/params/model/select/SelectParam*/
define('mev-analysis@0.0.1#src/params/model/select/SelectParam', [
    'lodash',
    '../BaseParam'
], function (_, BaseParam) {
    function SelectParam(spec) {
        var _self = this;
        BaseParam.call(_self, spec);
        _.assign(_self, {
            type: 'select',
            getValue: this.multiselect ? getMultiValue : getValue
        });
        function getValue() {
            return this.value && this.bound ? this.value[this.bound] : this.value;
        }
        function getMultiValue() {
            return _self.options().filter(function (option) {
                return option.selected;
            }).map(function (option) {
                return _self.bound ? option[_self.bound] : option;
            });
        }
    }
    ;
    SelectParam.prototype = new BaseParam();
    SelectParam.prototype.constructor = SelectParam;
    SelectParam.prototype.getOptions = function () {
        if (!this.options)
            throw new Error('SelectParam: options not defined');
        if (_.isFunction(this.options))
            return this.options();
        else
            return this.options;
    };
    return SelectParam;
});
/*mev-analysis@0.0.1#src/params/model/parentAnalysis/ParentAnalysisParam*/
define('mev-analysis@0.0.1#src/params/model/parentAnalysis/ParentAnalysisParam', [
    'lodash',
    '../select/SelectParam',
    '../BaseParam'
], function (_, SelectParam, BaseParam) {
    'use strict';
    function ParentAnalysisParamFactory(mevAnalysisLocator) {
        function ParentAnalysisParam(spec) {
            _.assign(this, spec, {
                type: 'select',
                options: function (type) {
                    var analyses = mevAnalysisLocator.find.call(this, type);
                    return _.isArray(analyses) ? analyses.map(function (analysis) {
                        return { name: analysis.name };
                    }) : analyses;
                }.bind(this, spec.type),
                setValue: function (options) {
                    var analyses = options;
                    if (analyses.length === 1) {
                        this.value = analyses[0];
                    }
                }.bind(this),
                display: 'name'
            });
        }
        ParentAnalysisParam.prototype = new SelectParam();
        return ParentAnalysisParam;
    }
    ParentAnalysisParamFactory.$name = 'mevParentAnalysisParam';
    ParentAnalysisParamFactory.$provider = 'factory';
    ParentAnalysisParamFactory.$inject = ['mevAnalysisLocator'];
    return ParentAnalysisParamFactory;
});
/*mev-analysis@0.0.1#src/params/model/selectionSet/SelectionSetParam*/
define('mev-analysis@0.0.1#src/params/model/selectionSet/SelectionSetParam', [
    'lodash',
    '../select/SelectParam',
    '../BaseParam'
], function (_, SelectParam, BaseParam) {
    'use strict';
    function SelectionSetParamFactory(mevSelectionLocator) {
        function SelectionSetParam(spec) {
            SelectParam.call(this, spec);
            _.assign(this, { options: mevSelectionLocator.find.bind(this, spec.dimension, undefined, this) });
            this.validate = function (values) {
                if (this.max)
                    if (this.value && _.isArray(this.value.keys) && this.value.keys.length > this.max)
                        return this.id + ' size may not exceed ' + this.max;
                if (this.disjoint) {
                    if (!this.multiselect)
                        if (this.value && _.isArray(this.value.keys)) {
                            var disjointTarget = values[this.disjoint];
                            if (disjointTarget && _.isArray(disjointTarget.keys)) {
                                var intersect = _.intersection(disjointTarget.keys, this.value.keys);
                                if (intersect.length > 0)
                                    return this.id + ' and ' + this.disjoint + ' must be disjoint sets but have ' + intersect.length + ' element in common: ' + intersect.slice(0, 9).join(',') + (intersect.length > 10 ? '...' : '');
                            }
                        }
                    if (this.multiselect) {
                        var value = this.getValue();
                        if (_.isArray(value)) {
                            for (var i = 0; i < value.length; i++) {
                                for (var j = i + 1; j < value.length; j++) {
                                    var intersect = _.intersection(value[i].keys, value[j].keys);
                                    if (intersect.length > 0)
                                        return 'Selections  must be disjoint sets but ' + value[i].name + ' and ' + value[j].name + ' have ' + intersect.length + ' element in common: ' + intersect.slice(0, 9).join(',') + (intersect.length > 10 ? '...' : '');
                                }
                            }
                        }
                    }
                }
            };
        }
        ;
        SelectionSetParam.prototype = new SelectParam();
        return SelectionSetParam;
    }
    SelectionSetParamFactory.$name = 'mevSelectionSetParam';
    SelectionSetParamFactory.$provider = 'factory';
    SelectionSetParamFactory.$inject = ['mevSelectionLocator'];
    return SelectionSetParamFactory;
});
/*mev-pca@0.0.0#src/model/PcaAnalysisType*/
define('mev-pca@0.0.0#src/model/PcaAnalysisType', [
    '../router/PcaState.tpl.html',
    'mev-analysis/src/params/model/parentAnalysis/ParentAnalysisParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam'
], function (template) {
    'use strict';
    function component(MevAnalysisType, mevAnalysisParams, MevParentAnalysisParam, mevSelectionSetParam) {
        var pcaType = new MevAnalysisType({
            id: 'pca',
            name: 'PCA',
            viewModel: 'PcaStateVM',
            template: template,
            params: mevAnalysisParams([
                new mevSelectionSetParam({
                    'id': 'sampleList',
                    'dimension': 'column',
                    'displayName': 'Sample Set',
                    'display': 'name',
                    'bound': 'keys',
                    'required': true
                }),
                new mevSelectionSetParam({
                    'id': 'geneList',
                    'dimension': 'row',
                    'displayName': 'Gene Set',
                    'display': 'name',
                    'bound': 'keys',
                    'required': true
                })
            ]),
            info: { template: 'Performs a principal components analysis on the given data matrix' + '<p>Reference: <a href=\'https://stat.ethz.ch/R-manual/R- devel/library/stats/html/prcomp.html\'>' + 'https://stat.ethz.ch/R-manual/R- devel/library/stats/html/prcomp.html</a></p>' }
        });
        pcaType.start = function () {
            var paramValues = this.params.getValues();
            this.parent.start.call(this, this, paramValues, { analysisName: paramValues.name }, 'put');
        };
        return pcaType;
    }
    component.$name = 'mevPcaAnalysisType';
    component.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevParentAnalysisParam',
        'mevSelectionSetParam'
    ];
    component.$provider = 'factory';
    return component;
});
/*mev-pca@0.0.0#src/router/PcaStateVM*/
define('mev-pca@0.0.0#src/router/PcaStateVM', ['lodash'], function (_) {
    'use strict';
    function PcaStateVMFactory(mevAnalysisTypes, mevLimmaAnalysisType, mevEdgerAnalysisType, mevVoomAnalysisType, mevtTestAnalysisType, mevDeseqAnalysisType, mevAnovaAnalysisType) {
        function factory(scope, project, analysis) {
            var _self = this;
            this.project = project;
            this.analysis = analysis;
            this.curSelection = [];
            this.curGroups = [];
            this.curSelections = [];
            this.analysisTypes = mevAnalysisTypes.all();
            this.getSelection = function () {
                return _self.curSelection;
            };
            this.analysis.getExperiment = function () {
                return _self.curGroups[0];
            };
            this.analysis.getControl = function () {
                return _self.curGroups[1];
                ;
            };
            this.analysis.getSelections = function () {
                return _self.curSelections;
            };
            scope.sizeChanged = function () {
                console.debug('pca resize');
                window.dispatchEvent(new Event('resize'));
            };
            scope.$on('mui:dashboard:panel:rowMax', scope.sizeChanged);
            scope.$on('mui:dashboard:panel:rowMin', scope.sizeChanged);
            scope.$on('mui:dashboard:panel:max', scope.sizeChanged);
            scope.$on('mui:dashboard:panel:min', scope.sizeChanged);
        }
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    PcaStateVMFactory.$inject = [
        'mevAnalysisTypes',
        'mevLimmaAnalysisType',
        'mevEdgerAnalysisType',
        'mevVoomAnalysisType',
        'mevtTestAnalysisType',
        'mevDeseqAnalysisType',
        'mevAnovaAnalysisType'
    ];
    PcaStateVMFactory.$name = 'PcaStateVMFactory';
    PcaStateVMFactory.$provider = 'factory';
    return PcaStateVMFactory;
});
/*mev-pca@0.0.0#src/router/PcaState*/
define('mev-pca@0.0.0#src/router/PcaState', [
    './PcaState.tpl.html',
    './PcaStateVM'
], function (template, PcaStateVM) {
    'use strict';
    function PcaState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.pca', {
            parent: 'root.dataset.analysisType',
            url: 'pca/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'PcaStateVMFactory',
                function (scope, project, analysis, PcaStateVMFactory) {
                    return PcaStateVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'DatasetAnalysisVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    PcaState.inject = ['$stateProvider'];
    PcaState.provider = 'config';
    return PcaState;
});
/*angular-resource@1.5.0#angular-resource*/
define('angular-resource@1.5.0#angular-resource', [
    'module',
    '@loader'
], function (module, loader) {
    loader.get('@@global-helpers').prepareGlobal(module.id, []);
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**\n * @license AngularJS v1.5.0\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {\'use strict\';\n\nvar $resourceMinErr = angular.$$minErr(\'$resource\');\n\n// Helper functions and regex to lookup a dotted path on an object\n// stopping at undefined/null.  The path must be composed of ASCII\n// identifiers (just like $parse)\nvar MEMBER_NAME_REGEX = /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;\n\nfunction isValidDottedPath(path) {\n  return (path != null && path !== \'\' && path !== \'hasOwnProperty\' &&\n      MEMBER_NAME_REGEX.test(\'.\' + path));\n}\n\nfunction lookupDottedPath(obj, path) {\n  if (!isValidDottedPath(path)) {\n    throw $resourceMinErr(\'badmember\', \'Dotted member path "@{0}" is invalid.\', path);\n  }\n  var keys = path.split(\'.\');\n  for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {\n    var key = keys[i];\n    obj = (obj !== null) ? obj[key] : undefined;\n  }\n  return obj;\n}\n\n/**\n * Create a shallow copy of an object and clear other fields from the destination\n */\nfunction shallowClearAndCopy(src, dst) {\n  dst = dst || {};\n\n  angular.forEach(dst, function(value, key) {\n    delete dst[key];\n  });\n\n  for (var key in src) {\n    if (src.hasOwnProperty(key) && !(key.charAt(0) === \'$\' && key.charAt(1) === \'$\')) {\n      dst[key] = src[key];\n    }\n  }\n\n  return dst;\n}\n\n/**\n * @ngdoc module\n * @name ngResource\n * @description\n *\n * # ngResource\n *\n * The `ngResource` module provides interaction support with RESTful services\n * via the $resource service.\n *\n *\n * <div doc-module-components="ngResource"></div>\n *\n * See {@link ngResource.$resource `$resource`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $resource\n * @requires $http\n * @requires ng.$log\n * @requires $q\n * @requires ng.$timeout\n *\n * @description\n * A factory which creates a resource object that lets you interact with\n * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\n *\n * The returned resource object has action methods which provide high-level behaviors without\n * the need to interact with the low level {@link ng.$http $http} service.\n *\n * Requires the {@link ngResource `ngResource`} module to be installed.\n *\n * By default, trailing slashes will be stripped from the calculated URLs,\n * which can pose problems with server backends that do not expect that\n * behavior.  This can be disabled by configuring the `$resourceProvider` like\n * this:\n *\n * ```js\n     app.config([\'$resourceProvider\', function($resourceProvider) {\n       // Don\'t strip trailing slashes from calculated URLs\n       $resourceProvider.defaults.stripTrailingSlashes = false;\n     }]);\n * ```\n *\n * @param {string} url A parameterized URL template with parameters prefixed by `:` as in\n *   `/user/:username`. If you are using a URL with a port number (e.g.\n *   `http://example.com:8080/api`), it will be respected.\n *\n *   If you are using a url with a suffix, just add the suffix, like this:\n *   `$resource(\'http://example.com/resource.json\')` or `$resource(\'http://example.com/:id.json\')`\n *   or even `$resource(\'http://example.com/resource/:resource_id.:format\')`\n *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be\n *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you\n *   can escape it with `/\\.`.\n *\n * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in\n *   `actions` methods. If a parameter value is a function, it will be executed every time\n *   when a param value needs to be obtained for a request (unless the param was overridden).\n *\n *   Each key value in the parameter object is first bound to url template if present and then any\n *   excess keys are appended to the url search query after the `?`.\n *\n *   Given a template `/path/:verb` and parameter `{verb:\'greet\', salutation:\'Hello\'}` results in\n *   URL `/path/greet?salutation=Hello`.\n *\n *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted\n *   from the corresponding property on the `data` object (provided when calling an action method).\n *   For example, if the `defaultParam` object is `{someParam: \'@someProp\'}` then the value of\n *   `someParam` will be `data.someProp`.\n *\n * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend\n *   the default set of resource actions. The declaration should be created in the format of {@link\n *   ng.$http#usage $http.config}:\n *\n *       {action1: {method:?, params:?, isArray:?, headers:?, ...},\n *        action2: {method:?, params:?, isArray:?, headers:?, ...},\n *        ...}\n *\n *   Where:\n *\n *   - **`action`** \u2013 {string} \u2013 The name of action. This name becomes the name of the method on\n *     your resource object.\n *   - **`method`** \u2013 {string} \u2013 Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,\n *     `DELETE`, `JSONP`, etc).\n *   - **`params`** \u2013 {Object=} \u2013 Optional set of pre-bound parameters for this action. If any of\n *     the parameter value is a function, it will be executed every time when a param value needs to\n *     be obtained for a request (unless the param was overridden).\n *   - **`url`** \u2013 {string} \u2013 action specific `url` override. The url templating is supported just\n *     like for the resource-level urls.\n *   - **`isArray`** \u2013 {boolean=} \u2013 If true then the returned object for this action is an array,\n *     see `returns` section.\n *   - **`transformRequest`** \u2013\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` \u2013\n *     transform function or an array of such functions. The transform function takes the http\n *     request body and headers and returns its transformed (typically serialized) version.\n *     By default, transformRequest will contain one function that checks if the request data is\n *     an object and serializes to using `angular.toJson`. To prevent this behavior, set\n *     `transformRequest` to an empty array: `transformRequest: []`\n *   - **`transformResponse`** \u2013\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` \u2013\n *     transform function or an array of such functions. The transform function takes the http\n *     response body and headers and returns its transformed (typically deserialized) version.\n *     By default, transformResponse will contain one function that checks if the response looks\n *     like a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior,\n *     set `transformResponse` to an empty array: `transformResponse: []`\n *   - **`cache`** \u2013 `{boolean|Cache}` \u2013 If true, a default $http cache will be used to cache the\n *     GET request, otherwise if a cache instance built with\n *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n *     caching.\n *   - **`timeout`** \u2013 `{number}` \u2013 timeout in milliseconds.<br />\n *     **Note:** In contrast to {@link ng.$http#usage $http.config}, {@link ng.$q promises} are\n *     **not** supported in $resource, because the same value would be used for multiple requests.\n *     If you are looking for a way to cancel requests, you should use the `cancellable` option.\n *   - **`cancellable`** \u2013 `{boolean}` \u2013 if set to true, the request made by a "non-instance" call\n *     will be cancelled (if not already completed) by calling `$cancelRequest()` on the call\'s\n *     return value. Calling `$cancelRequest()` for a non-cancellable or an already\n *     completed/cancelled request will have no effect.<br />\n *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the\n *     XHR object. See\n *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)\n *     for more information.\n *   - **`responseType`** - `{string}` - see\n *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).\n *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -\n *     `response` and `responseError`. Both `response` and `responseError` interceptors get called\n *     with `http response` object. See {@link ng.$http $http interceptors}.\n *\n * @param {Object} options Hash with custom settings that should extend the\n *   default `$resourceProvider` behavior.  The supported options are:\n *\n *   - **`stripTrailingSlashes`** \u2013 {boolean} \u2013 If true then the trailing\n *   slashes from any calculated URL will be stripped. (Defaults to true.)\n *   - **`cancellable`** \u2013 {boolean} \u2013 If true, the request made by a "non-instance" call will be\n *   cancelled (if not already completed) by calling `$cancelRequest()` on the call\'s return value.\n *   This can be overwritten per action. (Defaults to false.)\n *\n * @returns {Object} A resource "class" object with methods for the default set of resource actions\n *   optionally extended with custom `actions`. The default set contains these actions:\n *   ```js\n *   { \'get\':    {method:\'GET\'},\n *     \'save\':   {method:\'POST\'},\n *     \'query\':  {method:\'GET\', isArray:true},\n *     \'remove\': {method:\'DELETE\'},\n *     \'delete\': {method:\'DELETE\'} };\n *   ```\n *\n *   Calling these methods invoke an {@link ng.$http} with the specified http method,\n *   destination and parameters. When the data is returned from the server then the object is an\n *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it\n *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,\n *   read, update, delete) on server-side data like this:\n *   ```js\n *   var User = $resource(\'/user/:userId\', {userId:\'@id\'});\n *   var user = User.get({userId:123}, function() {\n *     user.abc = true;\n *     user.$save();\n *   });\n *   ```\n *\n *   It is important to realize that invoking a $resource object method immediately returns an\n *   empty reference (object or array depending on `isArray`). Once the data is returned from the\n *   server the existing reference is populated with the actual data. This is a useful trick since\n *   usually the resource is assigned to a model which is then rendered by the view. Having an empty\n *   object results in no rendering, once the data arrives from the server then the object is\n *   populated with the data and the view automatically re-renders itself showing the new data. This\n *   means that in most cases one never has to write a callback function for the action methods.\n *\n *   The action methods on the class object or instance object can be invoked with the following\n *   parameters:\n *\n *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`\n *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`\n *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`\n *\n *\n *   Success callback is called with (value, responseHeaders) arguments, where the value is\n *   the populated resource instance or collection object. The error callback is called\n *   with (httpResponse) argument.\n *\n *   Class actions return empty instance (with additional properties below).\n *   Instance actions return promise of the action.\n *\n *   The Resource instances and collections have these additional properties:\n *\n *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this\n *     instance or collection.\n *\n *     On success, the promise is resolved with the same resource instance or collection object,\n *     updated with data from server. This makes it easy to use in\n *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view\n *     rendering until the resource(s) are loaded.\n *\n *     On failure, the promise is rejected with the {@link ng.$http http response} object, without\n *     the `resource` property.\n *\n *     If an interceptor object was provided, the promise will instead be resolved with the value\n *     returned by the interceptor.\n *\n *   - `$resolved`: `true` after first server interaction is completed (either with success or\n *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in\n *      data-binding.\n *\n *   The Resource instances and collections have these additional methods:\n *\n *   - `$cancelRequest`: If there is a cancellable, pending request related to the instance or\n *      collection, calling this method will abort the request.\n *\n * @example\n *\n * # Credit card resource\n *\n * ```js\n     // Define CreditCard class\n     var CreditCard = $resource(\'/user/:userId/card/:cardId\',\n      {userId:123, cardId:\'@id\'}, {\n       charge: {method:\'POST\', params:{charge:true}}\n      });\n\n     // We can retrieve a collection from the server\n     var cards = CreditCard.query(function() {\n       // GET: /user/123/card\n       // server returns: [ {id:456, number:\'1234\', name:\'Smith\'} ];\n\n       var card = cards[0];\n       // each item is an instance of CreditCard\n       expect(card instanceof CreditCard).toEqual(true);\n       card.name = "J. Smith";\n       // non GET methods are mapped onto the instances\n       card.$save();\n       // POST: /user/123/card/456 {id:456, number:\'1234\', name:\'J. Smith\'}\n       // server returns: {id:456, number:\'1234\', name: \'J. Smith\'};\n\n       // our custom method is mapped as well.\n       card.$charge({amount:9.99});\n       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:\'1234\', name:\'J. Smith\'}\n     });\n\n     // we can create an instance as well\n     var newCard = new CreditCard({number:\'0123\'});\n     newCard.name = "Mike Smith";\n     newCard.$save();\n     // POST: /user/123/card {number:\'0123\', name:\'Mike Smith\'}\n     // server returns: {id:789, number:\'0123\', name: \'Mike Smith\'};\n     expect(newCard.id).toEqual(789);\n * ```\n *\n * The object returned from this function execution is a resource "class" which has "static" method\n * for each action in the definition.\n *\n * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and\n * `headers`.\n *\n * @example\n *\n * # User resource\n *\n * When the data is returned from the server then the object is an instance of the resource type and\n * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD\n * operations (create, read, update, delete) on server-side data.\n\n   ```js\n     var User = $resource(\'/user/:userId\', {userId:\'@id\'});\n     User.get({userId:123}, function(user) {\n       user.abc = true;\n       user.$save();\n     });\n   ```\n *\n * It\'s worth noting that the success callback for `get`, `query` and other methods gets passed\n * in the response that came from the server as well as $http header getter function, so one\n * could rewrite the above example and get access to http headers as:\n *\n   ```js\n     var User = $resource(\'/user/:userId\', {userId:\'@id\'});\n     User.get({userId:123}, function(user, getResponseHeaders){\n       user.abc = true;\n       user.$save(function(user, putResponseHeaders) {\n         //user => saved user object\n         //putResponseHeaders => $http header getter\n       });\n     });\n   ```\n *\n * You can also access the raw `$http` promise via the `$promise` property on the object returned\n *\n   ```\n     var User = $resource(\'/user/:userId\', {userId:\'@id\'});\n     User.get({userId:123})\n         .$promise.then(function(user) {\n           $scope.user = user;\n         });\n   ```\n *\n * @example\n *\n * # Creating a custom \'PUT\' request\n *\n * In this example we create a custom method on our resource to make a PUT request\n * ```js\n *    var app = angular.module(\'app\', [\'ngResource\', \'ngRoute\']);\n *\n *    // Some APIs expect a PUT request in the format URL/object/ID\n *    // Here we are creating an \'update\' method\n *    app.factory(\'Notes\', [\'$resource\', function($resource) {\n *    return $resource(\'/notes/:id\', null,\n *        {\n *            \'update\': { method:\'PUT\' }\n *        });\n *    }]);\n *\n *    // In our controller we get the ID from the URL using ngRoute and $routeParams\n *    // We pass in $routeParams and our Notes factory along with $scope\n *    app.controller(\'NotesCtrl\', [\'$scope\', \'$routeParams\', \'Notes\',\n                                      function($scope, $routeParams, Notes) {\n *    // First get a note object from the factory\n *    var note = Notes.get({ id:$routeParams.id });\n *    $id = note.id;\n *\n *    // Now call update passing in the ID first then the object you are updating\n *    Notes.update({ id:$id }, note);\n *\n *    // This will PUT /notes/ID with the note object in the request payload\n *    }]);\n * ```\n *\n * @example\n *\n * # Cancelling requests\n *\n * If an action\'s configuration specifies that it is cancellable, you can cancel the request related\n * to an instance or collection (as long as it is a result of a "non-instance" call):\n *\n   ```js\n     // ...defining the `Hotel` resource...\n     var Hotel = $resource(\'/api/hotel/:id\', {id: \'@id\'}, {\n       // Let\'s make the `query()` method cancellable\n       query: {method: \'get\', isArray: true, cancellable: true}\n     });\n\n     // ...somewhere in the PlanVacationController...\n     ...\n     this.onDestinationChanged = function onDestinationChanged(destination) {\n       // We don\'t care about any pending request for hotels\n       // in a different destination any more\n       this.availableHotels.$cancelRequest();\n\n       // Let\'s query for hotels in \'<destination>\'\n       // (calls: /api/hotel?location=<destination>)\n       this.availableHotels = Hotel.query({location: destination});\n     };\n   ```\n *\n */\nangular.module(\'ngResource\', [\'ng\']).\n  provider(\'$resource\', function() {\n    var PROTOCOL_AND_DOMAIN_REGEX = /^https?:\\/\\/[^\\/]*/;\n    var provider = this;\n\n    this.defaults = {\n      // Strip slashes by default\n      stripTrailingSlashes: true,\n\n      // Default actions configuration\n      actions: {\n        \'get\': {method: \'GET\'},\n        \'save\': {method: \'POST\'},\n        \'query\': {method: \'GET\', isArray: true},\n        \'remove\': {method: \'DELETE\'},\n        \'delete\': {method: \'DELETE\'}\n      }\n    };\n\n    this.$get = [\'$http\', \'$log\', \'$q\', \'$timeout\', function($http, $log, $q, $timeout) {\n\n      var noop = angular.noop,\n        forEach = angular.forEach,\n        extend = angular.extend,\n        copy = angular.copy,\n        isFunction = angular.isFunction;\n\n      /**\n       * We need our custom method because encodeURIComponent is too aggressive and doesn\'t follow\n       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set\n       * (pchar) allowed in path segments:\n       *    segment       = *pchar\n       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"\n       *    pct-encoded   = "%" HEXDIG HEXDIG\n       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"\n       *    sub-delims    = "!" / "$" / "&" / "\'" / "(" / ")"\n       *                     / "*" / "+" / "," / ";" / "="\n       */\n      function encodeUriSegment(val) {\n        return encodeUriQuery(val, true).\n          replace(/%26/gi, \'&\').\n          replace(/%3D/gi, \'=\').\n          replace(/%2B/gi, \'+\');\n      }\n\n\n      /**\n       * This method is intended for encoding *key* or *value* parts of query component. We need a\n       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn\'t\n       * have to be encoded per http://tools.ietf.org/html/rfc3986:\n       *    query       = *( pchar / "/" / "?" )\n       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"\n       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"\n       *    pct-encoded   = "%" HEXDIG HEXDIG\n       *    sub-delims    = "!" / "$" / "&" / "\'" / "(" / ")"\n       *                     / "*" / "+" / "," / ";" / "="\n       */\n      function encodeUriQuery(val, pctEncodeSpaces) {\n        return encodeURIComponent(val).\n          replace(/%40/gi, \'@\').\n          replace(/%3A/gi, \':\').\n          replace(/%24/g, \'$\').\n          replace(/%2C/gi, \',\').\n          replace(/%20/g, (pctEncodeSpaces ? \'%20\' : \'+\'));\n      }\n\n      function Route(template, defaults) {\n        this.template = template;\n        this.defaults = extend({}, provider.defaults, defaults);\n        this.urlParams = {};\n      }\n\n      Route.prototype = {\n        setUrlParams: function(config, params, actionUrl) {\n          var self = this,\n            url = actionUrl || self.template,\n            val,\n            encodedVal,\n            protocolAndDomain = \'\';\n\n          var urlParams = self.urlParams = {};\n          forEach(url.split(/\\W/), function(param) {\n            if (param === \'hasOwnProperty\') {\n              throw $resourceMinErr(\'badname\', "hasOwnProperty is not a valid parameter name.");\n            }\n            if (!(new RegExp("^\\\\d+$").test(param)) && param &&\n              (new RegExp("(^|[^\\\\\\\\]):" + param + "(\\\\W|$)").test(url))) {\n              urlParams[param] = {\n                isQueryParamValue: (new RegExp("\\\\?.*=:" + param + "(?:\\\\W|$)")).test(url)\n              };\n            }\n          });\n          url = url.replace(/\\\\:/g, \':\');\n          url = url.replace(PROTOCOL_AND_DOMAIN_REGEX, function(match) {\n            protocolAndDomain = match;\n            return \'\';\n          });\n\n          params = params || {};\n          forEach(self.urlParams, function(paramInfo, urlParam) {\n            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];\n            if (angular.isDefined(val) && val !== null) {\n              if (paramInfo.isQueryParamValue) {\n                encodedVal = encodeUriQuery(val, true);\n              } else {\n                encodedVal = encodeUriSegment(val);\n              }\n              url = url.replace(new RegExp(":" + urlParam + "(\\\\W|$)", "g"), function(match, p1) {\n                return encodedVal + p1;\n              });\n            } else {\n              url = url.replace(new RegExp("(\\/?):" + urlParam + "(\\\\W|$)", "g"), function(match,\n                  leadingSlashes, tail) {\n                if (tail.charAt(0) == \'/\') {\n                  return tail;\n                } else {\n                  return leadingSlashes + tail;\n                }\n              });\n            }\n          });\n\n          // strip trailing slashes and set the url (unless this behavior is specifically disabled)\n          if (self.defaults.stripTrailingSlashes) {\n            url = url.replace(/\\/+$/, \'\') || \'/\';\n          }\n\n          // then replace collapse `/.` if found in the last URL path segment before the query\n          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n          url = url.replace(/\\/\\.(?=\\w+($|\\?))/, \'.\');\n          // replace escaped `/\\.` with `/.`\n          config.url = protocolAndDomain + url.replace(/\\/\\\\\\./, \'/.\');\n\n\n          // set params - delegate param encoding to $http\n          forEach(params, function(value, key) {\n            if (!self.urlParams[key]) {\n              config.params = config.params || {};\n              config.params[key] = value;\n            }\n          });\n        }\n      };\n\n\n      function resourceFactory(url, paramDefaults, actions, options) {\n        var route = new Route(url, options);\n\n        actions = extend({}, provider.defaults.actions, actions);\n\n        function extractParams(data, actionParams) {\n          var ids = {};\n          actionParams = extend({}, paramDefaults, actionParams);\n          forEach(actionParams, function(value, key) {\n            if (isFunction(value)) { value = value(); }\n            ids[key] = value && value.charAt && value.charAt(0) == \'@\' ?\n              lookupDottedPath(data, value.substr(1)) : value;\n          });\n          return ids;\n        }\n\n        function defaultResponseInterceptor(response) {\n          return response.resource;\n        }\n\n        function Resource(value) {\n          shallowClearAndCopy(value || {}, this);\n        }\n\n        Resource.prototype.toJSON = function() {\n          var data = extend({}, this);\n          delete data.$promise;\n          delete data.$resolved;\n          return data;\n        };\n\n        forEach(actions, function(action, name) {\n          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);\n          var numericTimeout = action.timeout;\n          var cancellable = angular.isDefined(action.cancellable) ? action.cancellable :\n              (options && angular.isDefined(options.cancellable)) ? options.cancellable :\n              provider.defaults.cancellable;\n\n          if (numericTimeout && !angular.isNumber(numericTimeout)) {\n            $log.debug(\'ngResource:\\n\' +\n                       \'  Only numeric values are allowed as `timeout`.\\n\' +\n                       \'  Promises are not supported in $resource, because the same value would \' +\n                       \'be used for multiple requests. If you are looking for a way to cancel \' +\n                       \'requests, you should use the `cancellable` option.\');\n            delete action.timeout;\n            numericTimeout = null;\n          }\n\n          Resource[name] = function(a1, a2, a3, a4) {\n            var params = {}, data, success, error;\n\n            /* jshint -W086 */ /* (purposefully fall through case statements) */\n            switch (arguments.length) {\n              case 4:\n                error = a4;\n                success = a3;\n              //fallthrough\n              case 3:\n              case 2:\n                if (isFunction(a2)) {\n                  if (isFunction(a1)) {\n                    success = a1;\n                    error = a2;\n                    break;\n                  }\n\n                  success = a2;\n                  error = a3;\n                  //fallthrough\n                } else {\n                  params = a1;\n                  data = a2;\n                  success = a3;\n                  break;\n                }\n              case 1:\n                if (isFunction(a1)) success = a1;\n                else if (hasBody) data = a1;\n                else params = a1;\n                break;\n              case 0: break;\n              default:\n                throw $resourceMinErr(\'badargs\',\n                  "Expected up to 4 arguments [params, data, success, error], got {0} arguments",\n                  arguments.length);\n            }\n            /* jshint +W086 */ /* (purposefully fall through case statements) */\n\n            var isInstanceCall = this instanceof Resource;\n            var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));\n            var httpConfig = {};\n            var responseInterceptor = action.interceptor && action.interceptor.response ||\n              defaultResponseInterceptor;\n            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||\n              undefined;\n            var timeoutDeferred;\n            var numericTimeoutPromise;\n\n            forEach(action, function(value, key) {\n              switch (key) {\n                default:\n                  httpConfig[key] = copy(value);\n                  break;\n                case \'params\':\n                case \'isArray\':\n                case \'interceptor\':\n                case \'cancellable\':\n                  break;\n              }\n            });\n\n            if (!isInstanceCall && cancellable) {\n              timeoutDeferred = $q.defer();\n              httpConfig.timeout = timeoutDeferred.promise;\n\n              if (numericTimeout) {\n                numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout);\n              }\n            }\n\n            if (hasBody) httpConfig.data = data;\n            route.setUrlParams(httpConfig,\n              extend({}, extractParams(data, action.params || {}), params),\n              action.url);\n\n            var promise = $http(httpConfig).then(function(response) {\n              var data = response.data;\n\n              if (data) {\n                // Need to convert action.isArray to boolean in case it is undefined\n                // jshint -W018\n                if (angular.isArray(data) !== (!!action.isArray)) {\n                  throw $resourceMinErr(\'badcfg\',\n                      \'Error in resource configuration for action `{0}`. Expected response to \' +\n                      \'contain an {1} but got an {2} (Request: {3} {4})\', name, action.isArray ? \'array\' : \'object\',\n                    angular.isArray(data) ? \'array\' : \'object\', httpConfig.method, httpConfig.url);\n                }\n                // jshint +W018\n                if (action.isArray) {\n                  value.length = 0;\n                  forEach(data, function(item) {\n                    if (typeof item === "object") {\n                      value.push(new Resource(item));\n                    } else {\n                      // Valid JSON values may be string literals, and these should not be converted\n                      // into objects. These items will not have access to the Resource prototype\n                      // methods, but unfortunately there\n                      value.push(item);\n                    }\n                  });\n                } else {\n                  var promise = value.$promise;     // Save the promise\n                  shallowClearAndCopy(data, value);\n                  value.$promise = promise;         // Restore the promise\n                }\n              }\n              response.resource = value;\n\n              return response;\n            }, function(response) {\n              (error || noop)(response);\n              return $q.reject(response);\n            });\n\n            promise.finally(function() {\n              value.$resolved = true;\n              if (!isInstanceCall && cancellable) {\n                value.$cancelRequest = angular.noop;\n                $timeout.cancel(numericTimeoutPromise);\n                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;\n              }\n            });\n\n            promise = promise.then(\n              function(response) {\n                var value = responseInterceptor(response);\n                (success || noop)(value, response.headers);\n                return value;\n              },\n              responseErrorInterceptor);\n\n            if (!isInstanceCall) {\n              // we are creating instance / collection\n              // - set the initial promise\n              // - return the instance / collection\n              value.$promise = promise;\n              value.$resolved = false;\n              if (cancellable) value.$cancelRequest = timeoutDeferred.resolve;\n\n              return value;\n            }\n\n            // instance call\n            return promise;\n          };\n\n\n          Resource.prototype[\'$\' + name] = function(params, success, error) {\n            if (isFunction(params)) {\n              error = success; success = params; params = {};\n            }\n            var result = Resource[name].call(this, params, this, success, error);\n            return result.$promise || result;\n          };\n        });\n\n        Resource.bind = function(additionalParamDefaults) {\n          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);\n        };\n\n        return Resource;\n      }\n\n      return resourceFactory;\n    }];\n  });\n\n\n})(window, window.angular);\n';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*angular-resource@1.5.0#index*/
define('angular-resource@1.5.0#index', function (require, exports, module) {
    require('./angular-resource');
    module.exports = 'ngResource';
});
/*angular-ui-router@0.2.18#release/angular-ui-router*/
define('angular-ui-router@0.2.18#release/angular-ui-router', function (require, exports, module) {
    (function (global) {
        if (typeof module !== 'undefined' && typeof exports !== 'undefined' && module.exports === exports) {
            module.exports = 'ui.router';
        }
        (function (window, angular, undefined) {
            'use strict';
            var isDefined = angular.isDefined, isFunction = angular.isFunction, isString = angular.isString, isObject = angular.isObject, isArray = angular.isArray, forEach = angular.forEach, extend = angular.extend, copy = angular.copy, toJson = angular.toJson;
            function inherit(parent, extra) {
                return extend(new (extend(function () {
                }, { prototype: parent }))(), extra);
            }
            function merge(dst) {
                forEach(arguments, function (obj) {
                    if (obj !== dst) {
                        forEach(obj, function (value, key) {
                            if (!dst.hasOwnProperty(key))
                                dst[key] = value;
                        });
                    }
                });
                return dst;
            }
            function ancestors(first, second) {
                var path = [];
                for (var n in first.path) {
                    if (first.path[n] !== second.path[n])
                        break;
                    path.push(first.path[n]);
                }
                return path;
            }
            function objectKeys(object) {
                if (Object.keys) {
                    return Object.keys(object);
                }
                var result = [];
                forEach(object, function (val, key) {
                    result.push(key);
                });
                return result;
            }
            function indexOf(array, value) {
                if (Array.prototype.indexOf) {
                    return array.indexOf(value, Number(arguments[2]) || 0);
                }
                var len = array.length >>> 0, from = Number(arguments[2]) || 0;
                from = from < 0 ? Math.ceil(from) : Math.floor(from);
                if (from < 0)
                    from += len;
                for (; from < len; from++) {
                    if (from in array && array[from] === value)
                        return from;
                }
                return -1;
            }
            function inheritParams(currentParams, newParams, $current, $to) {
                var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];
                for (var i in parents) {
                    if (!parents[i] || !parents[i].params)
                        continue;
                    parentParams = objectKeys(parents[i].params);
                    if (!parentParams.length)
                        continue;
                    for (var j in parentParams) {
                        if (indexOf(inheritList, parentParams[j]) >= 0)
                            continue;
                        inheritList.push(parentParams[j]);
                        inherited[parentParams[j]] = currentParams[parentParams[j]];
                    }
                }
                return extend({}, inherited, newParams);
            }
            function equalForKeys(a, b, keys) {
                if (!keys) {
                    keys = [];
                    for (var n in a)
                        keys.push(n);
                }
                for (var i = 0; i < keys.length; i++) {
                    var k = keys[i];
                    if (a[k] != b[k])
                        return false;
                }
                return true;
            }
            function filterByKeys(keys, values) {
                var filtered = {};
                forEach(keys, function (name) {
                    filtered[name] = values[name];
                });
                return filtered;
            }
            function indexBy(array, propName) {
                var result = {};
                forEach(array, function (item) {
                    result[item[propName]] = item;
                });
                return result;
            }
            function pick(obj) {
                var copy = {};
                var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
                forEach(keys, function (key) {
                    if (key in obj)
                        copy[key] = obj[key];
                });
                return copy;
            }
            function omit(obj) {
                var copy = {};
                var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
                for (var key in obj) {
                    if (indexOf(keys, key) == -1)
                        copy[key] = obj[key];
                }
                return copy;
            }
            function pluck(collection, key) {
                var result = isArray(collection) ? [] : {};
                forEach(collection, function (val, i) {
                    result[i] = isFunction(key) ? key(val) : val[key];
                });
                return result;
            }
            function filter(collection, callback) {
                var array = isArray(collection);
                var result = array ? [] : {};
                forEach(collection, function (val, i) {
                    if (callback(val, i)) {
                        result[array ? result.length : i] = val;
                    }
                });
                return result;
            }
            function map(collection, callback) {
                var result = isArray(collection) ? [] : {};
                forEach(collection, function (val, i) {
                    result[i] = callback(val, i);
                });
                return result;
            }
            angular.module('ui.router.util', ['ng']);
            angular.module('ui.router.router', ['ui.router.util']);
            angular.module('ui.router.state', [
                'ui.router.router',
                'ui.router.util'
            ]);
            angular.module('ui.router', ['ui.router.state']);
            angular.module('ui.router.compat', ['ui.router']);
            $Resolve.$inject = [
                '$q',
                '$injector'
            ];
            function $Resolve($q, $injector) {
                var VISIT_IN_PROGRESS = 1, VISIT_DONE = 2, NOTHING = {}, NO_DEPENDENCIES = [], NO_LOCALS = NOTHING, NO_PARENT = extend($q.when(NOTHING), {
                        $$promises: NOTHING,
                        $$values: NOTHING
                    });
                this.study = function (invocables) {
                    if (!isObject(invocables))
                        throw new Error('\'invocables\' must be an object');
                    var invocableKeys = objectKeys(invocables || {});
                    var plan = [], cycle = [], visited = {};
                    function visit(value, key) {
                        if (visited[key] === VISIT_DONE)
                            return;
                        cycle.push(key);
                        if (visited[key] === VISIT_IN_PROGRESS) {
                            cycle.splice(0, indexOf(cycle, key));
                            throw new Error('Cyclic dependency: ' + cycle.join(' -> '));
                        }
                        visited[key] = VISIT_IN_PROGRESS;
                        if (isString(value)) {
                            plan.push(key, [function () {
                                    return $injector.get(value);
                                }], NO_DEPENDENCIES);
                        } else {
                            var params = $injector.annotate(value);
                            forEach(params, function (param) {
                                if (param !== key && invocables.hasOwnProperty(param))
                                    visit(invocables[param], param);
                            });
                            plan.push(key, value, params);
                        }
                        cycle.pop();
                        visited[key] = VISIT_DONE;
                    }
                    forEach(invocables, visit);
                    invocables = cycle = visited = null;
                    function isResolve(value) {
                        return isObject(value) && value.then && value.$$promises;
                    }
                    return function (locals, parent, self) {
                        if (isResolve(locals) && self === undefined) {
                            self = parent;
                            parent = locals;
                            locals = null;
                        }
                        if (!locals)
                            locals = NO_LOCALS;
                        else if (!isObject(locals)) {
                            throw new Error('\'locals\' must be an object');
                        }
                        if (!parent)
                            parent = NO_PARENT;
                        else if (!isResolve(parent)) {
                            throw new Error('\'parent\' must be a promise returned by $resolve.resolve()');
                        }
                        var resolution = $q.defer(), result = resolution.promise, promises = result.$$promises = {}, values = extend({}, locals), wait = 1 + plan.length / 3, merged = false;
                        function done() {
                            if (!--wait) {
                                if (!merged)
                                    merge(values, parent.$$values);
                                result.$$values = values;
                                result.$$promises = result.$$promises || true;
                                delete result.$$inheritedValues;
                                resolution.resolve(values);
                            }
                        }
                        function fail(reason) {
                            result.$$failure = reason;
                            resolution.reject(reason);
                        }
                        if (isDefined(parent.$$failure)) {
                            fail(parent.$$failure);
                            return result;
                        }
                        if (parent.$$inheritedValues) {
                            merge(values, omit(parent.$$inheritedValues, invocableKeys));
                        }
                        extend(promises, parent.$$promises);
                        if (parent.$$values) {
                            merged = merge(values, omit(parent.$$values, invocableKeys));
                            result.$$inheritedValues = omit(parent.$$values, invocableKeys);
                            done();
                        } else {
                            if (parent.$$inheritedValues) {
                                result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
                            }
                            parent.then(done, fail);
                        }
                        for (var i = 0, ii = plan.length; i < ii; i += 3) {
                            if (locals.hasOwnProperty(plan[i]))
                                done();
                            else
                                invoke(plan[i], plan[i + 1], plan[i + 2]);
                        }
                        function invoke(key, invocable, params) {
                            var invocation = $q.defer(), waitParams = 0;
                            function onfailure(reason) {
                                invocation.reject(reason);
                                fail(reason);
                            }
                            forEach(params, function (dep) {
                                if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
                                    waitParams++;
                                    promises[dep].then(function (result) {
                                        values[dep] = result;
                                        if (!--waitParams)
                                            proceed();
                                    }, onfailure);
                                }
                            });
                            if (!waitParams)
                                proceed();
                            function proceed() {
                                if (isDefined(result.$$failure))
                                    return;
                                try {
                                    invocation.resolve($injector.invoke(invocable, self, values));
                                    invocation.promise.then(function (result) {
                                        values[key] = result;
                                        done();
                                    }, onfailure);
                                } catch (e) {
                                    onfailure(e);
                                }
                            }
                            promises[key] = invocation.promise;
                        }
                        return result;
                    };
                };
                this.resolve = function (invocables, locals, parent, self) {
                    return this.study(invocables)(locals, parent, self);
                };
            }
            angular.module('ui.router.util').service('$resolve', $Resolve);
            $TemplateFactory.$inject = [
                '$http',
                '$templateCache',
                '$injector'
            ];
            function $TemplateFactory($http, $templateCache, $injector) {
                this.fromConfig = function (config, params, locals) {
                    return isDefined(config.template) ? this.fromString(config.template, params) : isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) : isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) : null;
                };
                this.fromString = function (template, params) {
                    return isFunction(template) ? template(params) : template;
                };
                this.fromUrl = function (url, params) {
                    if (isFunction(url))
                        url = url(params);
                    if (url == null)
                        return null;
                    else
                        return $http.get(url, {
                            cache: $templateCache,
                            headers: { Accept: 'text/html' }
                        }).then(function (response) {
                            return response.data;
                        });
                };
                this.fromProvider = function (provider, params, locals) {
                    return $injector.invoke(provider, null, locals || { params: params });
                };
            }
            angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);
            var $$UMFP;
            function UrlMatcher(pattern, config, parentMatcher) {
                config = extend({ params: {} }, isObject(config) ? config : {});
                var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, compiled = '^', last = 0, m, segments = this.segments = [], parentParams = parentMatcher ? parentMatcher.params : {}, params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(), paramNames = [];
                function addParameter(id, type, config, location) {
                    paramNames.push(id);
                    if (parentParams[id])
                        return parentParams[id];
                    if (!/^\w+([-.]+\w+)*(?:\[\])?$/.test(id))
                        throw new Error('Invalid parameter name \'' + id + '\' in pattern \'' + pattern + '\'');
                    if (params[id])
                        throw new Error('Duplicate parameter name \'' + id + '\' in pattern \'' + pattern + '\'');
                    params[id] = new $$UMFP.Param(id, type, config, location);
                    return params[id];
                }
                function quoteRegExp(string, pattern, squash, optional) {
                    var surroundPattern = [
                            '',
                            ''
                        ], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, '\\$&');
                    if (!pattern)
                        return result;
                    switch (squash) {
                    case false:
                        surroundPattern = [
                            '(',
                            ')' + (optional ? '?' : '')
                        ];
                        break;
                    case true:
                        result = result.replace(/\/$/, '');
                        surroundPattern = [
                            '(?:/(',
                            ')|/)?'
                        ];
                        break;
                    default:
                        surroundPattern = [
                            '(' + squash + '|',
                            ')?'
                        ];
                        break;
                    }
                    return result + surroundPattern[0] + pattern + surroundPattern[1];
                }
                this.source = pattern;
                function matchDetails(m, isSearch) {
                    var id, regexp, segment, type, cfg, arrayMode;
                    id = m[2] || m[3];
                    cfg = config.params[id];
                    segment = pattern.substring(last, m.index);
                    regexp = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
                    if (regexp) {
                        type = $$UMFP.type(regexp) || inherit($$UMFP.type('string'), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
                    }
                    return {
                        id: id,
                        regexp: regexp,
                        segment: segment,
                        type: type,
                        cfg: cfg
                    };
                }
                var p, param, segment;
                while (m = placeholder.exec(pattern)) {
                    p = matchDetails(m, false);
                    if (p.segment.indexOf('?') >= 0)
                        break;
                    param = addParameter(p.id, p.type, p.cfg, 'path');
                    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
                    segments.push(p.segment);
                    last = placeholder.lastIndex;
                }
                segment = pattern.substring(last);
                var i = segment.indexOf('?');
                if (i >= 0) {
                    var search = this.sourceSearch = segment.substring(i);
                    segment = segment.substring(0, i);
                    this.sourcePath = pattern.substring(0, last + i);
                    if (search.length > 0) {
                        last = 0;
                        while (m = searchPlaceholder.exec(search)) {
                            p = matchDetails(m, true);
                            param = addParameter(p.id, p.type, p.cfg, 'search');
                            last = placeholder.lastIndex;
                        }
                    }
                } else {
                    this.sourcePath = pattern;
                    this.sourceSearch = '';
                }
                compiled += quoteRegExp(segment) + (config.strict === false ? '/?' : '') + '$';
                segments.push(segment);
                this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
                this.prefix = segments[0];
                this.$$paramNames = paramNames;
            }
            UrlMatcher.prototype.concat = function (pattern, config) {
                var defaultConfig = {
                    caseInsensitive: $$UMFP.caseInsensitive(),
                    strict: $$UMFP.strictMode(),
                    squash: $$UMFP.defaultSquashPolicy()
                };
                return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
            };
            UrlMatcher.prototype.toString = function () {
                return this.source;
            };
            UrlMatcher.prototype.exec = function (path, searchParams) {
                var m = this.regexp.exec(path);
                if (!m)
                    return null;
                searchParams = searchParams || {};
                var paramNames = this.parameters(), nTotal = paramNames.length, nPath = this.segments.length - 1, values = {}, i, j, cfg, paramName;
                if (nPath !== m.length - 1)
                    throw new Error('Unbalanced capture group in route \'' + this.source + '\'');
                function decodePathArray(string) {
                    function reverseString(str) {
                        return str.split('').reverse().join('');
                    }
                    function unquoteDashes(str) {
                        return str.replace(/\\-/g, '-');
                    }
                    var split = reverseString(string).split(/-(?!\\)/);
                    var allReversed = map(split, reverseString);
                    return map(allReversed, unquoteDashes).reverse();
                }
                var param, paramVal;
                for (i = 0; i < nPath; i++) {
                    paramName = paramNames[i];
                    param = this.params[paramName];
                    paramVal = m[i + 1];
                    for (j = 0; j < param.replace.length; j++) {
                        if (param.replace[j].from === paramVal)
                            paramVal = param.replace[j].to;
                    }
                    if (paramVal && param.array === true)
                        paramVal = decodePathArray(paramVal);
                    if (isDefined(paramVal))
                        paramVal = param.type.decode(paramVal);
                    values[paramName] = param.value(paramVal);
                }
                for (; i < nTotal; i++) {
                    paramName = paramNames[i];
                    values[paramName] = this.params[paramName].value(searchParams[paramName]);
                    param = this.params[paramName];
                    paramVal = searchParams[paramName];
                    for (j = 0; j < param.replace.length; j++) {
                        if (param.replace[j].from === paramVal)
                            paramVal = param.replace[j].to;
                    }
                    if (isDefined(paramVal))
                        paramVal = param.type.decode(paramVal);
                    values[paramName] = param.value(paramVal);
                }
                return values;
            };
            UrlMatcher.prototype.parameters = function (param) {
                if (!isDefined(param))
                    return this.$$paramNames;
                return this.params[param] || null;
            };
            UrlMatcher.prototype.validates = function (params) {
                return this.params.$$validates(params);
            };
            UrlMatcher.prototype.format = function (values) {
                values = values || {};
                var segments = this.segments, params = this.parameters(), paramset = this.params;
                if (!this.validates(values))
                    return null;
                var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];
                function encodeDashes(str) {
                    return encodeURIComponent(str).replace(/-/g, function (c) {
                        return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase();
                    });
                }
                for (i = 0; i < nTotal; i++) {
                    var isPathParam = i < nPath;
                    var name = params[i], param = paramset[name], value = param.value(values[name]);
                    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
                    var squash = isDefaultValue ? param.squash : false;
                    var encoded = param.type.encode(value);
                    if (isPathParam) {
                        var nextSegment = segments[i + 1];
                        var isFinalPathParam = i + 1 === nPath;
                        if (squash === false) {
                            if (encoded != null) {
                                if (isArray(encoded)) {
                                    result += map(encoded, encodeDashes).join('-');
                                } else {
                                    result += encodeURIComponent(encoded);
                                }
                            }
                            result += nextSegment;
                        } else if (squash === true) {
                            var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
                            result += nextSegment.match(capture)[1];
                        } else if (isString(squash)) {
                            result += squash + nextSegment;
                        }
                        if (isFinalPathParam && param.squash === true && result.slice(-1) === '/')
                            result = result.slice(0, -1);
                    } else {
                        if (encoded == null || isDefaultValue && squash !== false)
                            continue;
                        if (!isArray(encoded))
                            encoded = [encoded];
                        if (encoded.length === 0)
                            continue;
                        encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
                        result += (search ? '&' : '?') + (name + '=' + encoded);
                        search = true;
                    }
                }
                return result;
            };
            function Type(config) {
                extend(this, config);
            }
            Type.prototype.is = function (val, key) {
                return true;
            };
            Type.prototype.encode = function (val, key) {
                return val;
            };
            Type.prototype.decode = function (val, key) {
                return val;
            };
            Type.prototype.equals = function (a, b) {
                return a == b;
            };
            Type.prototype.$subPattern = function () {
                var sub = this.pattern.toString();
                return sub.substr(1, sub.length - 2);
            };
            Type.prototype.pattern = /.*/;
            Type.prototype.toString = function () {
                return '{Type:' + this.name + '}';
            };
            Type.prototype.$normalize = function (val) {
                return this.is(val) ? val : this.decode(val);
            };
            Type.prototype.$asArray = function (mode, isSearch) {
                if (!mode)
                    return this;
                if (mode === 'auto' && !isSearch)
                    throw new Error('\'auto\' array mode is for query parameters only');
                function ArrayType(type, mode) {
                    function bindTo(type, callbackName) {
                        return function () {
                            return type[callbackName].apply(type, arguments);
                        };
                    }
                    function arrayWrap(val) {
                        return isArray(val) ? val : isDefined(val) ? [val] : [];
                    }
                    function arrayUnwrap(val) {
                        switch (val.length) {
                        case 0:
                            return undefined;
                        case 1:
                            return mode === 'auto' ? val[0] : val;
                        default:
                            return val;
                        }
                    }
                    function falsey(val) {
                        return !val;
                    }
                    function arrayHandler(callback, allTruthyMode) {
                        return function handleArray(val) {
                            if (isArray(val) && val.length === 0)
                                return val;
                            val = arrayWrap(val);
                            var result = map(val, callback);
                            if (allTruthyMode === true)
                                return filter(result, falsey).length === 0;
                            return arrayUnwrap(result);
                        };
                    }
                    function arrayEqualsHandler(callback) {
                        return function handleArray(val1, val2) {
                            var left = arrayWrap(val1), right = arrayWrap(val2);
                            if (left.length !== right.length)
                                return false;
                            for (var i = 0; i < left.length; i++) {
                                if (!callback(left[i], right[i]))
                                    return false;
                            }
                            return true;
                        };
                    }
                    this.encode = arrayHandler(bindTo(type, 'encode'));
                    this.decode = arrayHandler(bindTo(type, 'decode'));
                    this.is = arrayHandler(bindTo(type, 'is'), true);
                    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
                    this.pattern = type.pattern;
                    this.$normalize = arrayHandler(bindTo(type, '$normalize'));
                    this.name = type.name;
                    this.$arrayMode = mode;
                }
                return new ArrayType(this, mode);
            };
            function $UrlMatcherFactory() {
                $$UMFP = this;
                var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;
                function valToString(val) {
                    return val != null ? val.toString().replace(/~/g, '~~').replace(/\//g, '~2F') : val;
                }
                function valFromString(val) {
                    return val != null ? val.toString().replace(/~2F/g, '/').replace(/~~/g, '~') : val;
                }
                var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
                        'string': {
                            encode: valToString,
                            decode: valFromString,
                            is: function (val) {
                                return val == null || !isDefined(val) || typeof val === 'string';
                            },
                            pattern: /[^/]*/
                        },
                        'int': {
                            encode: valToString,
                            decode: function (val) {
                                return parseInt(val, 10);
                            },
                            is: function (val) {
                                return isDefined(val) && this.decode(val.toString()) === val;
                            },
                            pattern: /\d+/
                        },
                        'bool': {
                            encode: function (val) {
                                return val ? 1 : 0;
                            },
                            decode: function (val) {
                                return parseInt(val, 10) !== 0;
                            },
                            is: function (val) {
                                return val === true || val === false;
                            },
                            pattern: /0|1/
                        },
                        'date': {
                            encode: function (val) {
                                if (!this.is(val))
                                    return undefined;
                                return [
                                    val.getFullYear(),
                                    ('0' + (val.getMonth() + 1)).slice(-2),
                                    ('0' + val.getDate()).slice(-2)
                                ].join('-');
                            },
                            decode: function (val) {
                                if (this.is(val))
                                    return val;
                                var match = this.capture.exec(val);
                                return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
                            },
                            is: function (val) {
                                return val instanceof Date && !isNaN(val.valueOf());
                            },
                            equals: function (a, b) {
                                return this.is(a) && this.is(b) && a.toISOString() === b.toISOString();
                            },
                            pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
                            capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
                        },
                        'json': {
                            encode: angular.toJson,
                            decode: angular.fromJson,
                            is: angular.isObject,
                            equals: angular.equals,
                            pattern: /[^/]*/
                        },
                        'any': {
                            encode: angular.identity,
                            decode: angular.identity,
                            equals: angular.equals,
                            pattern: /.*/
                        }
                    };
                function getDefaultConfig() {
                    return {
                        strict: isStrictMode,
                        caseInsensitive: isCaseInsensitive
                    };
                }
                function isInjectable(value) {
                    return isFunction(value) || isArray(value) && isFunction(value[value.length - 1]);
                }
                $UrlMatcherFactory.$$getDefaultValue = function (config) {
                    if (!isInjectable(config.value))
                        return config.value;
                    if (!injector)
                        throw new Error('Injectable functions cannot be called at configuration time');
                    return injector.invoke(config.value);
                };
                this.caseInsensitive = function (value) {
                    if (isDefined(value))
                        isCaseInsensitive = value;
                    return isCaseInsensitive;
                };
                this.strictMode = function (value) {
                    if (isDefined(value))
                        isStrictMode = value;
                    return isStrictMode;
                };
                this.defaultSquashPolicy = function (value) {
                    if (!isDefined(value))
                        return defaultSquashPolicy;
                    if (value !== true && value !== false && !isString(value))
                        throw new Error('Invalid squash policy: ' + value + '. Valid policies: false, true, arbitrary-string');
                    defaultSquashPolicy = value;
                    return value;
                };
                this.compile = function (pattern, config) {
                    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
                };
                this.isMatcher = function (o) {
                    if (!isObject(o))
                        return false;
                    var result = true;
                    forEach(UrlMatcher.prototype, function (val, name) {
                        if (isFunction(val)) {
                            result = result && (isDefined(o[name]) && isFunction(o[name]));
                        }
                    });
                    return result;
                };
                this.type = function (name, definition, definitionFn) {
                    if (!isDefined(definition))
                        return $types[name];
                    if ($types.hasOwnProperty(name))
                        throw new Error('A type named \'' + name + '\' has already been defined.');
                    $types[name] = new Type(extend({ name: name }, definition));
                    if (definitionFn) {
                        typeQueue.push({
                            name: name,
                            def: definitionFn
                        });
                        if (!enqueue)
                            flushTypeQueue();
                    }
                    return this;
                };
                function flushTypeQueue() {
                    while (typeQueue.length) {
                        var type = typeQueue.shift();
                        if (type.pattern)
                            throw new Error('You cannot override a type\'s .pattern at runtime.');
                        angular.extend($types[type.name], injector.invoke(type.def));
                    }
                }
                forEach(defaultTypes, function (type, name) {
                    $types[name] = new Type(extend({ name: name }, type));
                });
                $types = inherit($types, {});
                this.$get = [
                    '$injector',
                    function ($injector) {
                        injector = $injector;
                        enqueue = false;
                        flushTypeQueue();
                        forEach(defaultTypes, function (type, name) {
                            if (!$types[name])
                                $types[name] = new Type(type);
                        });
                        return this;
                    }
                ];
                this.Param = function Param(id, type, config, location) {
                    var self = this;
                    config = unwrapShorthand(config);
                    type = getType(config, type, location);
                    var arrayMode = getArrayMode();
                    type = arrayMode ? type.$asArray(arrayMode, location === 'search') : type;
                    if (type.name === 'string' && !arrayMode && location === 'path' && config.value === undefined)
                        config.value = '';
                    var isOptional = config.value !== undefined;
                    var squash = getSquashPolicy(config, isOptional);
                    var replace = getReplace(config, arrayMode, isOptional, squash);
                    function unwrapShorthand(config) {
                        var keys = isObject(config) ? objectKeys(config) : [];
                        var isShorthand = indexOf(keys, 'value') === -1 && indexOf(keys, 'type') === -1 && indexOf(keys, 'squash') === -1 && indexOf(keys, 'array') === -1;
                        if (isShorthand)
                            config = { value: config };
                        config.$$fn = isInjectable(config.value) ? config.value : function () {
                            return config.value;
                        };
                        return config;
                    }
                    function getType(config, urlType, location) {
                        if (config.type && urlType)
                            throw new Error('Param \'' + id + '\' has two type configurations.');
                        if (urlType)
                            return urlType;
                        if (!config.type)
                            return location === 'config' ? $types.any : $types.string;
                        if (angular.isString(config.type))
                            return $types[config.type];
                        if (config.type instanceof Type)
                            return config.type;
                        return new Type(config.type);
                    }
                    function getArrayMode() {
                        var arrayDefaults = { array: location === 'search' ? 'auto' : false };
                        var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
                        return extend(arrayDefaults, arrayParamNomenclature, config).array;
                    }
                    function getSquashPolicy(config, isOptional) {
                        var squash = config.squash;
                        if (!isOptional || squash === false)
                            return false;
                        if (!isDefined(squash) || squash == null)
                            return defaultSquashPolicy;
                        if (squash === true || isString(squash))
                            return squash;
                        throw new Error('Invalid squash policy: \'' + squash + '\'. Valid policies: false, true, or arbitrary string');
                    }
                    function getReplace(config, arrayMode, isOptional, squash) {
                        var replace, configuredKeys, defaultPolicy = [
                                {
                                    from: '',
                                    to: isOptional || arrayMode ? undefined : ''
                                },
                                {
                                    from: null,
                                    to: isOptional || arrayMode ? undefined : ''
                                }
                            ];
                        replace = isArray(config.replace) ? config.replace : [];
                        if (isString(squash))
                            replace.push({
                                from: squash,
                                to: undefined
                            });
                        configuredKeys = map(replace, function (item) {
                            return item.from;
                        });
                        return filter(defaultPolicy, function (item) {
                            return indexOf(configuredKeys, item.from) === -1;
                        }).concat(replace);
                    }
                    function $$getDefaultValue() {
                        if (!injector)
                            throw new Error('Injectable functions cannot be called at configuration time');
                        var defaultValue = injector.invoke(config.$$fn);
                        if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
                            throw new Error('Default value (' + defaultValue + ') for parameter \'' + self.id + '\' is not an instance of Type (' + self.type.name + ')');
                        return defaultValue;
                    }
                    function $value(value) {
                        function hasReplaceVal(val) {
                            return function (obj) {
                                return obj.from === val;
                            };
                        }
                        function $replace(value) {
                            var replacement = map(filter(self.replace, hasReplaceVal(value)), function (obj) {
                                return obj.to;
                            });
                            return replacement.length ? replacement[0] : value;
                        }
                        value = $replace(value);
                        return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
                    }
                    function toString() {
                        return '{Param:' + id + ' ' + type + ' squash: \'' + squash + '\' optional: ' + isOptional + '}';
                    }
                    extend(this, {
                        id: id,
                        type: type,
                        location: location,
                        array: arrayMode,
                        squash: squash,
                        replace: replace,
                        isOptional: isOptional,
                        value: $value,
                        dynamic: undefined,
                        config: config,
                        toString: toString
                    });
                };
                function ParamSet(params) {
                    extend(this, params || {});
                }
                ParamSet.prototype = {
                    $$new: function () {
                        return inherit(this, extend(new ParamSet(), { $$parent: this }));
                    },
                    $$keys: function () {
                        var keys = [], chain = [], parent = this, ignore = objectKeys(ParamSet.prototype);
                        while (parent) {
                            chain.push(parent);
                            parent = parent.$$parent;
                        }
                        chain.reverse();
                        forEach(chain, function (paramset) {
                            forEach(objectKeys(paramset), function (key) {
                                if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1)
                                    keys.push(key);
                            });
                        });
                        return keys;
                    },
                    $$values: function (paramValues) {
                        var values = {}, self = this;
                        forEach(self.$$keys(), function (key) {
                            values[key] = self[key].value(paramValues && paramValues[key]);
                        });
                        return values;
                    },
                    $$equals: function (paramValues1, paramValues2) {
                        var equal = true, self = this;
                        forEach(self.$$keys(), function (key) {
                            var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
                            if (!self[key].type.equals(left, right))
                                equal = false;
                        });
                        return equal;
                    },
                    $$validates: function $$validate(paramValues) {
                        var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
                        for (i = 0; i < keys.length; i++) {
                            param = this[keys[i]];
                            rawVal = paramValues[keys[i]];
                            if ((rawVal === undefined || rawVal === null) && param.isOptional)
                                break;
                            normalized = param.type.$normalize(rawVal);
                            if (!param.type.is(normalized))
                                return false;
                            encoded = param.type.encode(normalized);
                            if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
                                return false;
                        }
                        return true;
                    },
                    $$parent: undefined
                };
                this.ParamSet = ParamSet;
            }
            angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
            angular.module('ui.router.util').run([
                '$urlMatcherFactory',
                function ($urlMatcherFactory) {
                }
            ]);
            $UrlRouterProvider.$inject = [
                '$locationProvider',
                '$urlMatcherFactoryProvider'
            ];
            function $UrlRouterProvider($locationProvider, $urlMatcherFactory) {
                var rules = [], otherwise = null, interceptDeferred = false, listener;
                function regExpPrefix(re) {
                    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
                    return prefix != null ? prefix[1].replace(/\\(.)/g, '$1') : '';
                }
                function interpolate(pattern, match) {
                    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
                        return match[what === '$' ? 0 : Number(what)];
                    });
                }
                this.rule = function (rule) {
                    if (!isFunction(rule))
                        throw new Error('\'rule\' must be a function');
                    rules.push(rule);
                    return this;
                };
                this.otherwise = function (rule) {
                    if (isString(rule)) {
                        var redirect = rule;
                        rule = function () {
                            return redirect;
                        };
                    } else if (!isFunction(rule))
                        throw new Error('\'rule\' must be a function');
                    otherwise = rule;
                    return this;
                };
                function handleIfMatch($injector, handler, match) {
                    if (!match)
                        return false;
                    var result = $injector.invoke(handler, handler, { $match: match });
                    return isDefined(result) ? result : true;
                }
                this.when = function (what, handler) {
                    var redirect, handlerIsString = isString(handler);
                    if (isString(what))
                        what = $urlMatcherFactory.compile(what);
                    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
                        throw new Error('invalid \'handler\' in when()');
                    var strategies = {
                        matcher: function (what, handler) {
                            if (handlerIsString) {
                                redirect = $urlMatcherFactory.compile(handler);
                                handler = [
                                    '$match',
                                    function ($match) {
                                        return redirect.format($match);
                                    }
                                ];
                            }
                            return extend(function ($injector, $location) {
                                return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
                            }, { prefix: isString(what.prefix) ? what.prefix : '' });
                        },
                        regex: function (what, handler) {
                            if (what.global || what.sticky)
                                throw new Error('when() RegExp must not be global or sticky');
                            if (handlerIsString) {
                                redirect = handler;
                                handler = [
                                    '$match',
                                    function ($match) {
                                        return interpolate(redirect, $match);
                                    }
                                ];
                            }
                            return extend(function ($injector, $location) {
                                return handleIfMatch($injector, handler, what.exec($location.path()));
                            }, { prefix: regExpPrefix(what) });
                        }
                    };
                    var check = {
                        matcher: $urlMatcherFactory.isMatcher(what),
                        regex: what instanceof RegExp
                    };
                    for (var n in check) {
                        if (check[n])
                            return this.rule(strategies[n](what, handler));
                    }
                    throw new Error('invalid \'what\' in when()');
                };
                this.deferIntercept = function (defer) {
                    if (defer === undefined)
                        defer = true;
                    interceptDeferred = defer;
                };
                this.$get = $get;
                $get.$inject = [
                    '$location',
                    '$rootScope',
                    '$injector',
                    '$browser',
                    '$sniffer'
                ];
                function $get($location, $rootScope, $injector, $browser, $sniffer) {
                    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;
                    function appendBasePath(url, isHtml5, absolute) {
                        if (baseHref === '/')
                            return url;
                        if (isHtml5)
                            return baseHref.slice(0, -1) + url;
                        if (absolute)
                            return baseHref.slice(1) + url;
                        return url;
                    }
                    function update(evt) {
                        if (evt && evt.defaultPrevented)
                            return;
                        var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
                        lastPushedUrl = undefined;
                        function check(rule) {
                            var handled = rule($injector, $location);
                            if (!handled)
                                return false;
                            if (isString(handled))
                                $location.replace().url(handled);
                            return true;
                        }
                        var n = rules.length, i;
                        for (i = 0; i < n; i++) {
                            if (check(rules[i]))
                                return;
                        }
                        if (otherwise)
                            check(otherwise);
                    }
                    function listen() {
                        listener = listener || $rootScope.$on('$locationChangeSuccess', update);
                        return listener;
                    }
                    if (!interceptDeferred)
                        listen();
                    return {
                        sync: function () {
                            update();
                        },
                        listen: function () {
                            return listen();
                        },
                        update: function (read) {
                            if (read) {
                                location = $location.url();
                                return;
                            }
                            if ($location.url() === location)
                                return;
                            $location.url(location);
                            $location.replace();
                        },
                        push: function (urlMatcher, params, options) {
                            var url = urlMatcher.format(params || {});
                            if (url !== null && params && params['#']) {
                                url += '#' + params['#'];
                            }
                            $location.url(url);
                            lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
                            if (options && options.replace)
                                $location.replace();
                        },
                        href: function (urlMatcher, params, options) {
                            if (!urlMatcher.validates(params))
                                return null;
                            var isHtml5 = $locationProvider.html5Mode();
                            if (angular.isObject(isHtml5)) {
                                isHtml5 = isHtml5.enabled;
                            }
                            isHtml5 = isHtml5 && $sniffer.history;
                            var url = urlMatcher.format(params);
                            options = options || {};
                            if (!isHtml5 && url !== null) {
                                url = '#' + $locationProvider.hashPrefix() + url;
                            }
                            if (url !== null && params && params['#']) {
                                url += '#' + params['#'];
                            }
                            url = appendBasePath(url, isHtml5, options.absolute);
                            if (!options.absolute || !url) {
                                return url;
                            }
                            var slash = !isHtml5 && url ? '/' : '', port = $location.port();
                            port = port === 80 || port === 443 ? '' : ':' + port;
                            return [
                                $location.protocol(),
                                '://',
                                $location.host(),
                                port,
                                slash,
                                url
                            ].join('');
                        }
                    };
                }
            }
            angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);
            $StateProvider.$inject = [
                '$urlRouterProvider',
                '$urlMatcherFactoryProvider'
            ];
            function $StateProvider($urlRouterProvider, $urlMatcherFactory) {
                var root, states = {}, $state, queue = {}, abstractKey = 'abstract';
                var stateBuilder = {
                    parent: function (state) {
                        if (isDefined(state.parent) && state.parent)
                            return findState(state.parent);
                        var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
                        return compositeName ? findState(compositeName[1]) : root;
                    },
                    data: function (state) {
                        if (state.parent && state.parent.data) {
                            state.data = state.self.data = inherit(state.parent.data, state.data);
                        }
                        return state.data;
                    },
                    url: function (state) {
                        var url = state.url, config = { params: state.params || {} };
                        if (isString(url)) {
                            if (url.charAt(0) == '^')
                                return $urlMatcherFactory.compile(url.substring(1), config);
                            return (state.parent.navigable || root).url.concat(url, config);
                        }
                        if (!url || $urlMatcherFactory.isMatcher(url))
                            return url;
                        throw new Error('Invalid url \'' + url + '\' in state \'' + state + '\'');
                    },
                    navigable: function (state) {
                        return state.url ? state : state.parent ? state.parent.navigable : null;
                    },
                    ownParams: function (state) {
                        var params = state.url && state.url.params || new $$UMFP.ParamSet();
                        forEach(state.params || {}, function (config, id) {
                            if (!params[id])
                                params[id] = new $$UMFP.Param(id, null, config, 'config');
                        });
                        return params;
                    },
                    params: function (state) {
                        var ownParams = pick(state.ownParams, state.ownParams.$$keys());
                        return state.parent && state.parent.params ? extend(state.parent.params.$$new(), ownParams) : new $$UMFP.ParamSet();
                    },
                    views: function (state) {
                        var views = {};
                        forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
                            if (name.indexOf('@') < 0)
                                name += '@' + state.parent.name;
                            views[name] = view;
                        });
                        return views;
                    },
                    path: function (state) {
                        return state.parent ? state.parent.path.concat(state) : [];
                    },
                    includes: function (state) {
                        var includes = state.parent ? extend({}, state.parent.includes) : {};
                        includes[state.name] = true;
                        return includes;
                    },
                    $delegates: {}
                };
                function isRelative(stateName) {
                    return stateName.indexOf('.') === 0 || stateName.indexOf('^') === 0;
                }
                function findState(stateOrName, base) {
                    if (!stateOrName)
                        return undefined;
                    var isStr = isString(stateOrName), name = isStr ? stateOrName : stateOrName.name, path = isRelative(name);
                    if (path) {
                        if (!base)
                            throw new Error('No reference point given for path \'' + name + '\'');
                        base = findState(base);
                        var rel = name.split('.'), i = 0, pathLength = rel.length, current = base;
                        for (; i < pathLength; i++) {
                            if (rel[i] === '' && i === 0) {
                                current = base;
                                continue;
                            }
                            if (rel[i] === '^') {
                                if (!current.parent)
                                    throw new Error('Path \'' + name + '\' not valid for state \'' + base.name + '\'');
                                current = current.parent;
                                continue;
                            }
                            break;
                        }
                        rel = rel.slice(i).join('.');
                        name = current.name + (current.name && rel ? '.' : '') + rel;
                    }
                    var state = states[name];
                    if (state && (isStr || !isStr && (state === stateOrName || state.self === stateOrName))) {
                        return state;
                    }
                    return undefined;
                }
                function queueState(parentName, state) {
                    if (!queue[parentName]) {
                        queue[parentName] = [];
                    }
                    queue[parentName].push(state);
                }
                function flushQueuedChildren(parentName) {
                    var queued = queue[parentName] || [];
                    while (queued.length) {
                        registerState(queued.shift());
                    }
                }
                function registerState(state) {
                    state = inherit(state, {
                        self: state,
                        resolve: state.resolve || {},
                        toString: function () {
                            return this.name;
                        }
                    });
                    var name = state.name;
                    if (!isString(name) || name.indexOf('@') >= 0)
                        throw new Error('State must have a valid name');
                    if (states.hasOwnProperty(name))
                        throw new Error('State \'' + name + '\' is already defined');
                    var parentName = name.indexOf('.') !== -1 ? name.substring(0, name.lastIndexOf('.')) : isString(state.parent) ? state.parent : isObject(state.parent) && isString(state.parent.name) ? state.parent.name : '';
                    if (parentName && !states[parentName]) {
                        return queueState(parentName, state.self);
                    }
                    for (var key in stateBuilder) {
                        if (isFunction(stateBuilder[key]))
                            state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
                    }
                    states[name] = state;
                    if (!state[abstractKey] && state.url) {
                        $urlRouterProvider.when(state.url, [
                            '$match',
                            '$stateParams',
                            function ($match, $stateParams) {
                                if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
                                    $state.transitionTo(state, $match, {
                                        inherit: true,
                                        location: false
                                    });
                                }
                            }
                        ]);
                    }
                    flushQueuedChildren(name);
                    return state;
                }
                function isGlob(text) {
                    return text.indexOf('*') > -1;
                }
                function doesStateMatchGlob(glob) {
                    var globSegments = glob.split('.'), segments = $state.$current.name.split('.');
                    for (var i = 0, l = globSegments.length; i < l; i++) {
                        if (globSegments[i] === '*') {
                            segments[i] = '*';
                        }
                    }
                    if (globSegments[0] === '**') {
                        segments = segments.slice(indexOf(segments, globSegments[1]));
                        segments.unshift('**');
                    }
                    if (globSegments[globSegments.length - 1] === '**') {
                        segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
                        segments.push('**');
                    }
                    if (globSegments.length != segments.length) {
                        return false;
                    }
                    return segments.join('') === globSegments.join('');
                }
                root = registerState({
                    name: '',
                    url: '^',
                    views: null,
                    'abstract': true
                });
                root.navigable = null;
                this.decorator = decorator;
                function decorator(name, func) {
                    if (isString(name) && !isDefined(func)) {
                        return stateBuilder[name];
                    }
                    if (!isFunction(func) || !isString(name)) {
                        return this;
                    }
                    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
                        stateBuilder.$delegates[name] = stateBuilder[name];
                    }
                    stateBuilder[name] = func;
                    return this;
                }
                this.state = state;
                function state(name, definition) {
                    if (isObject(name))
                        definition = name;
                    else
                        definition.name = name;
                    registerState(definition);
                    return this;
                }
                this.$get = $get;
                $get.$inject = [
                    '$rootScope',
                    '$q',
                    '$view',
                    '$injector',
                    '$resolve',
                    '$stateParams',
                    '$urlRouter',
                    '$location',
                    '$urlMatcherFactory'
                ];
                function $get($rootScope, $q, $view, $injector, $resolve, $stateParams, $urlRouter, $location, $urlMatcherFactory) {
                    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
                    var TransitionPrevented = $q.reject(new Error('transition prevented'));
                    var TransitionAborted = $q.reject(new Error('transition aborted'));
                    var TransitionFailed = $q.reject(new Error('transition failed'));
                    function handleRedirect(redirect, state, params, options) {
                        var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);
                        if (evt.defaultPrevented) {
                            $urlRouter.update();
                            return TransitionAborted;
                        }
                        if (!evt.retry) {
                            return null;
                        }
                        if (options.$retry) {
                            $urlRouter.update();
                            return TransitionFailed;
                        }
                        var retryTransition = $state.transition = $q.when(evt.retry);
                        retryTransition.then(function () {
                            if (retryTransition !== $state.transition)
                                return TransitionSuperseded;
                            redirect.options.$retry = true;
                            return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
                        }, function () {
                            return TransitionAborted;
                        });
                        $urlRouter.update();
                        return retryTransition;
                    }
                    root.locals = {
                        resolve: null,
                        globals: { $stateParams: {} }
                    };
                    $state = {
                        params: {},
                        current: root.self,
                        $current: root,
                        transition: null
                    };
                    $state.reload = function reload(state) {
                        return $state.transitionTo($state.current, $stateParams, {
                            reload: state || true,
                            inherit: false,
                            notify: true
                        });
                    };
                    $state.go = function go(to, params, options) {
                        return $state.transitionTo(to, params, extend({
                            inherit: true,
                            relative: $state.$current
                        }, options));
                    };
                    $state.transitionTo = function transitionTo(to, toParams, options) {
                        toParams = toParams || {};
                        options = extend({
                            location: true,
                            inherit: false,
                            relative: null,
                            notify: true,
                            reload: false,
                            $retry: false
                        }, options || {});
                        var from = $state.$current, fromParams = $state.params, fromPath = from.path;
                        var evt, toState = findState(to, options.relative);
                        var hash = toParams['#'];
                        if (!isDefined(toState)) {
                            var redirect = {
                                to: to,
                                toParams: toParams,
                                options: options
                            };
                            var redirectResult = handleRedirect(redirect, from.self, fromParams, options);
                            if (redirectResult) {
                                return redirectResult;
                            }
                            to = redirect.to;
                            toParams = redirect.toParams;
                            options = redirect.options;
                            toState = findState(to, options.relative);
                            if (!isDefined(toState)) {
                                if (!options.relative)
                                    throw new Error('No such state \'' + to + '\'');
                                throw new Error('Could not resolve \'' + to + '\' from state \'' + options.relative + '\'');
                            }
                        }
                        if (toState[abstractKey])
                            throw new Error('Cannot transition to abstract state \'' + to + '\'');
                        if (options.inherit)
                            toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
                        if (!toState.params.$$validates(toParams))
                            return TransitionFailed;
                        toParams = toState.params.$$values(toParams);
                        to = toState;
                        var toPath = to.path;
                        var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];
                        if (!options.reload) {
                            while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
                                locals = toLocals[keep] = state.locals;
                                keep++;
                                state = toPath[keep];
                            }
                        } else if (isString(options.reload) || isObject(options.reload)) {
                            if (isObject(options.reload) && !options.reload.name) {
                                throw new Error('Invalid reload state object');
                            }
                            var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
                            if (options.reload && !reloadState) {
                                throw new Error('No such reload state \'' + (isString(options.reload) ? options.reload : options.reload.name) + '\'');
                            }
                            while (state && state === fromPath[keep] && state !== reloadState) {
                                locals = toLocals[keep] = state.locals;
                                keep++;
                                state = toPath[keep];
                            }
                        }
                        if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
                            if (hash)
                                toParams['#'] = hash;
                            $state.params = toParams;
                            copy($state.params, $stateParams);
                            copy(filterByKeys(to.params.$$keys(), $stateParams), to.locals.globals.$stateParams);
                            if (options.location && to.navigable && to.navigable.url) {
                                $urlRouter.push(to.navigable.url, toParams, {
                                    $$avoidResync: true,
                                    replace: options.location === 'replace'
                                });
                                $urlRouter.update(true);
                            }
                            $state.transition = null;
                            return $q.when($state.current);
                        }
                        toParams = filterByKeys(to.params.$$keys(), toParams || {});
                        if (hash)
                            toParams['#'] = hash;
                        if (options.notify) {
                            if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams, options).defaultPrevented) {
                                $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
                                if ($state.transition == null)
                                    $urlRouter.update();
                                return TransitionPrevented;
                            }
                        }
                        var resolved = $q.when(locals);
                        for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
                            locals = toLocals[l] = inherit(locals);
                            resolved = resolveState(state, toParams, state === to, resolved, locals, options);
                        }
                        var transition = $state.transition = resolved.then(function () {
                            var l, entering, exiting;
                            if ($state.transition !== transition)
                                return TransitionSuperseded;
                            for (l = fromPath.length - 1; l >= keep; l--) {
                                exiting = fromPath[l];
                                if (exiting.self.onExit) {
                                    $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
                                }
                                exiting.locals = null;
                            }
                            for (l = keep; l < toPath.length; l++) {
                                entering = toPath[l];
                                entering.locals = toLocals[l];
                                if (entering.self.onEnter) {
                                    $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
                                }
                            }
                            if ($state.transition !== transition)
                                return TransitionSuperseded;
                            $state.$current = to;
                            $state.current = to.self;
                            $state.params = toParams;
                            copy($state.params, $stateParams);
                            $state.transition = null;
                            if (options.location && to.navigable) {
                                $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
                                    $$avoidResync: true,
                                    replace: options.location === 'replace'
                                });
                            }
                            if (options.notify) {
                                $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
                            }
                            $urlRouter.update(true);
                            return $state.current;
                        }, function (error) {
                            if ($state.transition !== transition)
                                return TransitionSuperseded;
                            $state.transition = null;
                            evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);
                            if (!evt.defaultPrevented) {
                                $urlRouter.update();
                            }
                            return $q.reject(error);
                        });
                        return transition;
                    };
                    $state.is = function is(stateOrName, params, options) {
                        options = extend({ relative: $state.$current }, options || {});
                        var state = findState(stateOrName, options.relative);
                        if (!isDefined(state)) {
                            return undefined;
                        }
                        if ($state.$current !== state) {
                            return false;
                        }
                        return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
                    };
                    $state.includes = function includes(stateOrName, params, options) {
                        options = extend({ relative: $state.$current }, options || {});
                        if (isString(stateOrName) && isGlob(stateOrName)) {
                            if (!doesStateMatchGlob(stateOrName)) {
                                return false;
                            }
                            stateOrName = $state.$current.name;
                        }
                        var state = findState(stateOrName, options.relative);
                        if (!isDefined(state)) {
                            return undefined;
                        }
                        if (!isDefined($state.$current.includes[state.name])) {
                            return false;
                        }
                        return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
                    };
                    $state.href = function href(stateOrName, params, options) {
                        options = extend({
                            lossy: true,
                            inherit: true,
                            absolute: false,
                            relative: $state.$current
                        }, options || {});
                        var state = findState(stateOrName, options.relative);
                        if (!isDefined(state))
                            return null;
                        if (options.inherit)
                            params = inheritParams($stateParams, params || {}, $state.$current, state);
                        var nav = state && options.lossy ? state.navigable : state;
                        if (!nav || nav.url === undefined || nav.url === null) {
                            return null;
                        }
                        return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), { absolute: options.absolute });
                    };
                    $state.get = function (stateOrName, context) {
                        if (arguments.length === 0)
                            return map(objectKeys(states), function (name) {
                                return states[name].self;
                            });
                        var state = findState(stateOrName, context || $state.$current);
                        return state && state.self ? state.self : null;
                    };
                    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
                        var $stateParams = paramsAreFiltered ? params : filterByKeys(state.params.$$keys(), params);
                        var locals = { $stateParams: $stateParams };
                        dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
                        var promises = [dst.resolve.then(function (globals) {
                                dst.globals = globals;
                            })];
                        if (inherited)
                            promises.push(inherited);
                        function resolveViews() {
                            var viewsPromises = [];
                            forEach(state.views, function (view, name) {
                                var injectables = view.resolve && view.resolve !== state.resolve ? view.resolve : {};
                                injectables.$template = [function () {
                                        return $view.load(name, {
                                            view: view,
                                            locals: dst.globals,
                                            params: $stateParams,
                                            notify: options.notify
                                        }) || '';
                                    }];
                                viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
                                    if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
                                        var injectLocals = angular.extend({}, injectables, dst.globals);
                                        result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
                                    } else {
                                        result.$$controller = view.controller;
                                    }
                                    result.$$state = state;
                                    result.$$controllerAs = view.controllerAs;
                                    dst[name] = result;
                                }));
                            });
                            return $q.all(viewsPromises).then(function () {
                                return dst.globals;
                            });
                        }
                        return $q.all(promises).then(resolveViews).then(function (values) {
                            return dst;
                        });
                    }
                    return $state;
                }
                function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
                    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
                        function notSearchParam(key) {
                            return fromAndToState.params[key].location != 'search';
                        }
                        var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
                        var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
                        var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
                        return nonQueryParamSet.$$equals(fromParams, toParams);
                    }
                    if (!options.reload && to === from && (locals === from.locals || to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams))) {
                        return true;
                    }
                }
            }
            angular.module('ui.router.state').factory('$stateParams', function () {
                return {};
            }).provider('$state', $StateProvider);
            $ViewProvider.$inject = [];
            function $ViewProvider() {
                this.$get = $get;
                $get.$inject = [
                    '$rootScope',
                    '$templateFactory'
                ];
                function $get($rootScope, $templateFactory) {
                    return {
                        load: function load(name, options) {
                            var result, defaults = {
                                    template: null,
                                    controller: null,
                                    view: null,
                                    locals: null,
                                    notify: true,
                                    async: true,
                                    params: {}
                                };
                            options = extend(defaults, options);
                            if (options.view) {
                                result = $templateFactory.fromConfig(options.view, options.params, options.locals);
                            }
                            return result;
                        }
                    };
                }
            }
            angular.module('ui.router.state').provider('$view', $ViewProvider);
            function $ViewScrollProvider() {
                var useAnchorScroll = false;
                this.useAnchorScroll = function () {
                    useAnchorScroll = true;
                };
                this.$get = [
                    '$anchorScroll',
                    '$timeout',
                    function ($anchorScroll, $timeout) {
                        if (useAnchorScroll) {
                            return $anchorScroll;
                        }
                        return function ($element) {
                            return $timeout(function () {
                                $element[0].scrollIntoView();
                            }, 0, false);
                        };
                    }
                ];
            }
            angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);
            var ngMajorVer = angular.version.major;
            var ngMinorVer = angular.version.minor;
            $ViewDirective.$inject = [
                '$state',
                '$injector',
                '$uiViewScroll',
                '$interpolate'
            ];
            function $ViewDirective($state, $injector, $uiViewScroll, $interpolate) {
                function getService() {
                    return $injector.has ? function (service) {
                        return $injector.has(service) ? $injector.get(service) : null;
                    } : function (service) {
                        try {
                            return $injector.get(service);
                        } catch (e) {
                            return null;
                        }
                    };
                }
                var service = getService(), $animator = service('$animator'), $animate = service('$animate');
                function getRenderer(attrs, scope) {
                    var statics = {
                        enter: function (element, target, cb) {
                            target.after(element);
                            cb();
                        },
                        leave: function (element, cb) {
                            element.remove();
                            cb();
                        }
                    };
                    if (!!attrs.noanimation)
                        return statics;
                    function animEnabled(element) {
                        if (ngMajorVer === 1 && ngMinorVer >= 4)
                            return !!$animate.enabled(element);
                        if (ngMajorVer === 1 && ngMinorVer >= 2)
                            return !!$animate.enabled();
                        return !!$animator;
                    }
                    if ($animate) {
                        return {
                            enter: function (element, target, cb) {
                                if (!animEnabled(element)) {
                                    statics.enter(element, target, cb);
                                } else if (angular.version.minor > 2) {
                                    $animate.enter(element, null, target).then(cb);
                                } else {
                                    $animate.enter(element, null, target, cb);
                                }
                            },
                            leave: function (element, cb) {
                                if (!animEnabled(element)) {
                                    statics.leave(element, cb);
                                } else if (angular.version.minor > 2) {
                                    $animate.leave(element).then(cb);
                                } else {
                                    $animate.leave(element, cb);
                                }
                            }
                        };
                    }
                    if ($animator) {
                        var animate = $animator && $animator(scope, attrs);
                        return {
                            enter: function (element, target, cb) {
                                animate.enter(element, null, target);
                                cb();
                            },
                            leave: function (element, cb) {
                                animate.leave(element);
                                cb();
                            }
                        };
                    }
                    return statics;
                }
                var directive = {
                    restrict: 'ECA',
                    terminal: true,
                    priority: 400,
                    transclude: 'element',
                    compile: function (tElement, tAttrs, $transclude) {
                        return function (scope, $element, attrs) {
                            var previousEl, currentEl, currentScope, latestLocals, onloadExp = attrs.onload || '', autoScrollExp = attrs.autoscroll, renderer = getRenderer(attrs, scope);
                            scope.$on('$stateChangeSuccess', function () {
                                updateView(false);
                            });
                            updateView(true);
                            function cleanupLastView() {
                                var _previousEl = previousEl;
                                var _currentScope = currentScope;
                                if (_currentScope) {
                                    _currentScope._willBeDestroyed = true;
                                }
                                function cleanOld() {
                                    if (_previousEl) {
                                        _previousEl.remove();
                                    }
                                    if (_currentScope) {
                                        _currentScope.$destroy();
                                    }
                                }
                                if (currentEl) {
                                    renderer.leave(currentEl, function () {
                                        cleanOld();
                                        previousEl = null;
                                    });
                                    previousEl = currentEl;
                                } else {
                                    cleanOld();
                                    previousEl = null;
                                }
                                currentEl = null;
                                currentScope = null;
                            }
                            function updateView(firstTime) {
                                var newScope, name = getUiViewName(scope, attrs, $element, $interpolate), previousLocals = name && $state.$current && $state.$current.locals[name];
                                if (!firstTime && previousLocals === latestLocals || scope._willBeDestroyed)
                                    return;
                                newScope = scope.$new();
                                latestLocals = $state.$current.locals[name];
                                newScope.$emit('$viewContentLoading', name);
                                var clone = $transclude(newScope, function (clone) {
                                    renderer.enter(clone, $element, function onUiViewEnter() {
                                        if (currentScope) {
                                            currentScope.$emit('$viewContentAnimationEnded');
                                        }
                                        if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                                            $uiViewScroll(clone);
                                        }
                                    });
                                    cleanupLastView();
                                });
                                currentEl = clone;
                                currentScope = newScope;
                                currentScope.$emit('$viewContentLoaded', name);
                                currentScope.$eval(onloadExp);
                            }
                        };
                    }
                };
                return directive;
            }
            $ViewDirectiveFill.$inject = [
                '$compile',
                '$controller',
                '$state',
                '$interpolate'
            ];
            function $ViewDirectiveFill($compile, $controller, $state, $interpolate) {
                return {
                    restrict: 'ECA',
                    priority: -400,
                    compile: function (tElement) {
                        var initial = tElement.html();
                        return function (scope, $element, attrs) {
                            var current = $state.$current, name = getUiViewName(scope, attrs, $element, $interpolate), locals = current && current.locals[name];
                            if (!locals) {
                                return;
                            }
                            $element.data('$uiView', {
                                name: name,
                                state: locals.$$state
                            });
                            $element.html(locals.$template ? locals.$template : initial);
                            var link = $compile($element.contents());
                            if (locals.$$controller) {
                                locals.$scope = scope;
                                locals.$element = $element;
                                var controller = $controller(locals.$$controller, locals);
                                if (locals.$$controllerAs) {
                                    scope[locals.$$controllerAs] = controller;
                                }
                                $element.data('$ngControllerController', controller);
                                $element.children().data('$ngControllerController', controller);
                            }
                            link(scope);
                        };
                    }
                };
            }
            function getUiViewName(scope, attrs, element, $interpolate) {
                var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
                var inherited = element.inheritedData('$uiView');
                return name.indexOf('@') >= 0 ? name : name + '@' + (inherited ? inherited.state.name : '');
            }
            angular.module('ui.router.state').directive('uiView', $ViewDirective);
            angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);
            function parseStateRef(ref, current) {
                var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
                if (preparsed)
                    ref = current + '(' + preparsed[1] + ')';
                parsed = ref.replace(/\n/g, ' ').match(/^([^(]+?)\s*(\((.*)\))?$/);
                if (!parsed || parsed.length !== 4)
                    throw new Error('Invalid state ref \'' + ref + '\'');
                return {
                    state: parsed[1],
                    paramExpr: parsed[3] || null
                };
            }
            function stateContext(el) {
                var stateData = el.parent().inheritedData('$uiView');
                if (stateData && stateData.state && stateData.state.name) {
                    return stateData.state;
                }
            }
            function getTypeInfo(el) {
                var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
                var isForm = el[0].nodeName === 'FORM';
                return {
                    attr: isForm ? 'action' : isSvg ? 'xlink:href' : 'href',
                    isAnchor: el.prop('tagName').toUpperCase() === 'A',
                    clickable: !isForm
                };
            }
            function clickHook(el, $state, $timeout, type, current) {
                return function (e) {
                    var button = e.which || e.button, target = current();
                    if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
                        var transition = $timeout(function () {
                            $state.go(target.state, target.params, target.options);
                        });
                        e.preventDefault();
                        var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
                        e.preventDefault = function () {
                            if (ignorePreventDefaultCount-- <= 0)
                                $timeout.cancel(transition);
                        };
                    }
                };
            }
            function defaultOpts(el, $state) {
                return {
                    relative: stateContext(el) || $state.$current,
                    inherit: true
                };
            }
            $StateRefDirective.$inject = [
                '$state',
                '$timeout'
            ];
            function $StateRefDirective($state, $timeout) {
                return {
                    restrict: 'A',
                    require: [
                        '?^uiSrefActive',
                        '?^uiSrefActiveEq'
                    ],
                    link: function (scope, element, attrs, uiSrefActive) {
                        var ref = parseStateRef(attrs.uiSref, $state.current.name);
                        var def = {
                            state: ref.state,
                            href: null,
                            params: null
                        };
                        var type = getTypeInfo(element);
                        var active = uiSrefActive[1] || uiSrefActive[0];
                        def.options = extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
                        var update = function (val) {
                            if (val)
                                def.params = angular.copy(val);
                            def.href = $state.href(ref.state, def.params, def.options);
                            if (active)
                                active.$$addStateInfo(ref.state, def.params);
                            if (def.href !== null)
                                attrs.$set(type.attr, def.href);
                        };
                        if (ref.paramExpr) {
                            scope.$watch(ref.paramExpr, function (val) {
                                if (val !== def.params)
                                    update(val);
                            }, true);
                            def.params = angular.copy(scope.$eval(ref.paramExpr));
                        }
                        update();
                        if (!type.clickable)
                            return;
                        element.bind('click', clickHook(element, $state, $timeout, type, function () {
                            return def;
                        }));
                    }
                };
            }
            $StateRefDynamicDirective.$inject = [
                '$state',
                '$timeout'
            ];
            function $StateRefDynamicDirective($state, $timeout) {
                return {
                    restrict: 'A',
                    require: [
                        '?^uiSrefActive',
                        '?^uiSrefActiveEq'
                    ],
                    link: function (scope, element, attrs, uiSrefActive) {
                        var type = getTypeInfo(element);
                        var active = uiSrefActive[1] || uiSrefActive[0];
                        var group = [
                            attrs.uiState,
                            attrs.uiStateParams || null,
                            attrs.uiStateOpts || null
                        ];
                        var watch = '[' + group.map(function (val) {
                            return val || 'null';
                        }).join(', ') + ']';
                        var def = {
                            state: null,
                            params: null,
                            options: null,
                            href: null
                        };
                        function runStateRefLink(group) {
                            def.state = group[0];
                            def.params = group[1];
                            def.options = group[2];
                            def.href = $state.href(def.state, def.params, def.options);
                            if (active)
                                active.$$addStateInfo(def.state, def.params);
                            if (def.href)
                                attrs.$set(type.attr, def.href);
                        }
                        scope.$watch(watch, runStateRefLink, true);
                        runStateRefLink(scope.$eval(watch));
                        if (!type.clickable)
                            return;
                        element.bind('click', clickHook(element, $state, $timeout, type, function () {
                            return def;
                        }));
                    }
                };
            }
            $StateRefActiveDirective.$inject = [
                '$state',
                '$stateParams',
                '$interpolate'
            ];
            function $StateRefActiveDirective($state, $stateParams, $interpolate) {
                return {
                    restrict: 'A',
                    controller: [
                        '$scope',
                        '$element',
                        '$attrs',
                        '$timeout',
                        function ($scope, $element, $attrs, $timeout) {
                            var states = [], activeClasses = {}, activeEqClass, uiSrefActive;
                            activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);
                            try {
                                uiSrefActive = $scope.$eval($attrs.uiSrefActive);
                            } catch (e) {
                            }
                            uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
                            if (isObject(uiSrefActive)) {
                                forEach(uiSrefActive, function (stateOrName, activeClass) {
                                    if (isString(stateOrName)) {
                                        var ref = parseStateRef(stateOrName, $state.current.name);
                                        addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
                                    }
                                });
                            }
                            this.$$addStateInfo = function (newState, newParams) {
                                if (isObject(uiSrefActive) && states.length > 0) {
                                    return;
                                }
                                addState(newState, newParams, uiSrefActive);
                                update();
                            };
                            $scope.$on('$stateChangeSuccess', update);
                            function addState(stateName, stateParams, activeClass) {
                                var state = $state.get(stateName, stateContext($element));
                                var stateHash = createStateHash(stateName, stateParams);
                                states.push({
                                    state: state || { name: stateName },
                                    params: stateParams,
                                    hash: stateHash
                                });
                                activeClasses[stateHash] = activeClass;
                            }
                            function createStateHash(state, params) {
                                if (!isString(state)) {
                                    throw new Error('state should be a string');
                                }
                                if (isObject(params)) {
                                    return state + toJson(params);
                                }
                                params = $scope.$eval(params);
                                if (isObject(params)) {
                                    return state + toJson(params);
                                }
                                return state;
                            }
                            function update() {
                                for (var i = 0; i < states.length; i++) {
                                    if (anyMatch(states[i].state, states[i].params)) {
                                        addClass($element, activeClasses[states[i].hash]);
                                    } else {
                                        removeClass($element, activeClasses[states[i].hash]);
                                    }
                                    if (exactMatch(states[i].state, states[i].params)) {
                                        addClass($element, activeEqClass);
                                    } else {
                                        removeClass($element, activeEqClass);
                                    }
                                }
                            }
                            function addClass(el, className) {
                                $timeout(function () {
                                    el.addClass(className);
                                });
                            }
                            function removeClass(el, className) {
                                el.removeClass(className);
                            }
                            function anyMatch(state, params) {
                                return $state.includes(state.name, params);
                            }
                            function exactMatch(state, params) {
                                return $state.is(state.name, params);
                            }
                            update();
                        }
                    ]
                };
            }
            angular.module('ui.router.state').directive('uiSref', $StateRefDirective).directive('uiSrefActive', $StateRefActiveDirective).directive('uiSrefActiveEq', $StateRefActiveDirective).directive('uiState', $StateRefDynamicDirective);
            $IsStateFilter.$inject = ['$state'];
            function $IsStateFilter($state) {
                var isFilter = function (state, params) {
                    return $state.is(state, params);
                };
                isFilter.$stateful = true;
                return isFilter;
            }
            $IncludedByStateFilter.$inject = ['$state'];
            function $IncludedByStateFilter($state) {
                var includesFilter = function (state, params, options) {
                    return $state.includes(state, params, options);
                };
                includesFilter.$stateful = true;
                return includesFilter;
            }
            angular.module('ui.router.state').filter('isState', $IsStateFilter).filter('includedByState', $IncludedByStateFilter);
        }(window, window.angular));
    }(function () {
        return this;
    }()));
});
/*mev-analysis@0.0.1#src/params/view/text/TextParam.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/params/view/text/TextParam.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="form-group">\n   <label class="mev-param-label" mev-param="param"></label>\n   <input id="{{param.id}}-param" ng-model="param.value" placeholder="Ex: My_Analysis_1">  \n</div>\n';
});
/*mev-analysis@0.0.1#src/params/view/label/ParamLabel.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/params/view/label/ParamLabel.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<label for="param-{{param.id}}" class="control-label">{{param.displayName || param.id }}</label>\n';
});
/*mev-analysis@0.0.1#src/params/view/label/ParamLabelDirective*/
define('mev-analysis@0.0.1#src/params/view/label/ParamLabelDirective', [
    'mui',
    'lodash',
    './ParamLabel.tpl.html'
], function (ng, _, template) {
    function mevParamLabelDirective() {
        return {
            restrict: 'AC',
            template: template,
            scope: { param: '=mevParam' }
        };
    }
    mevParamLabelDirective.$inject = [];
    mevParamLabelDirective.$name = 'mevParamLabelDirective';
    return mevParamLabelDirective;
});
/*mev-analysis@0.0.1#src/params/view/text/TextParamDirective*/
define('mev-analysis@0.0.1#src/params/view/text/TextParamDirective', [
    'mev-analysis',
    './TextParam.tpl.html',
    '../label/ParamLabelDirective'
], function (mod, template) {
    function mevTextParamDirective() {
        return {
            restrict: 'EAC',
            template: template,
            scope: { param: '=mevParam' }
        };
    }
    mevTextParamDirective.$inject = [];
    mevTextParamDirective.$name = 'mevTextParamDirective';
    return mevTextParamDirective;
});
/*mev-analysis@0.0.1#src/params/view/integer/IntegerParam.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/params/view/integer/IntegerParam.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '\t<div class="form-group">\t\t\n   <label class="mev-param-label" mev-param="param"></label>\n   <input type="number" pattern="[0-9]*" step="1" min="{{param.min}}" max="{{param.max}}" id="{{key}}-param" ng-model="param.value" placeholder="Ex: My_Analysis_1">  \n</div>\n';
});
/*mev-analysis@0.0.1#src/params/view/integer/IntegerParamDirective*/
define('mev-analysis@0.0.1#src/params/view/integer/IntegerParamDirective', [
    'mev-analysis',
    './IntegerParam.tpl.html',
    '../label/ParamLabelDirective'
], function (mod, template) {
    function mevIntegerParamDirective() {
        return {
            restrict: 'EAC',
            template: template,
            scope: { param: '=mevParam' }
        };
    }
    mevIntegerParamDirective.$inject = [];
    mevIntegerParamDirective.$name = 'mevIntegerParamDirective';
    return mevIntegerParamDirective;
});
/*mev-analysis@0.0.1#src/params/view/boolean/BooleanParam.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/params/view/boolean/BooleanParam.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="form-group">\n   <label class="mev-param-label" mev-param="param"></label>\n   <input type="checkbox" id="{{key}}-param" ng-model="param.value" />\n</div>\n';
});
/*mev-analysis@0.0.1#src/params/view/boolean/BooleanParamDirective*/
define('mev-analysis@0.0.1#src/params/view/boolean/BooleanParamDirective', [
    'mev-analysis',
    './BooleanParam.tpl.html',
    '../label/ParamLabelDirective'
], function (mod, template) {
    function mevBooleanParamDirective() {
        return {
            restrict: 'EAC',
            template: template,
            scope: { param: '=mevParam' }
        };
    }
    mevBooleanParamDirective.$inject = [];
    mevBooleanParamDirective.$name = 'mevBooleanParamDirective';
    return mevBooleanParamDirective;
});
/*mev-analysis@0.0.1#src/params/view/selectionSet/SelectionSetParamDirective*/
'use strict';
define('mev-analysis@0.0.1#src/params/view/selectionSet/SelectionSetParamDirective', [
    'lodash',
    'mev-analysis/src/params/model/select/SelectParam'
], function (_, SelectParam) {
    function SelectionSetParamDirective() {
        return {
            restrict: 'EAC',
            template: '<div class="mev-select-param" mev-param="selectParam"></div>',
            scope: {
                param: '=mevParam',
                dataset: '=mevDataset'
            },
            controller: [
                '$scope',
                function ($scope) {
                    this.selections = $scope.dataset[$scope.param.dimension].selections;
                    this.options = Object.values($scope.param)[0];
                    this.key = Object.keys($scope.param)[0];
                    this.selectParam[this.key] = new SelectParam(_.assign({}, this.options, {
                        displayName: this.options.dimension + ' set',
                        options: this.selection
                    }));
                }
            ],
            controllerAs: 'SelectionSetParamVM'
        };
    }
    SelectionSetParamDirective.$inject = [];
    SelectionSetParamDirective.$name = 'SelectionSetParamDirective';
    return SelectionSetParamDirective;
});
/*mev-analysis@0.0.1#src/params/view/decimal/DecimalParam.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/params/view/decimal/DecimalParam.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="form-group">\t\t\n   <label class="mev-param-label" mev-param="vm.param"></label>\n   <input type="number" pattern="[0-9\\.]*" step="{{vm.step}}" min="{{vm.param.min}}" max="{{vm.param.max}}" id="{{key}}-param" ng-model="vm.param.value" placeholder="Ex: My_Analysis_1">  \n</div>\n';
});
/*mev-analysis@0.0.1#src/params/view/decimal/DecimalParamDirective*/
define('mev-analysis@0.0.1#src/params/view/decimal/DecimalParamDirective', [
    'mev-analysis',
    './DecimalParam.tpl.html',
    '../label/ParamLabelDirective'
], function (mod, template) {
    function mevDecimalParamDirective() {
        return {
            restrict: 'EAC',
            template: template,
            scope: { param: '=mevParam' },
            controller: [
                '$scope',
                function (scope) {
                    this.param = scope.param;
                    this.step = 0.01;
                    if (this.param.precision)
                        this.step = Math.pow(0.1, this.param.precision);
                }
            ],
            controllerAs: 'vm'
        };
    }
    mevDecimalParamDirective.$inject = [];
    mevDecimalParamDirective.$name = 'mevDecimalParamDirective';
    return mevDecimalParamDirective;
});
/*mev-analysis@0.0.1#src/params/view/select/SelectParam.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/params/view/select/SelectParam.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="form-group" ng-if="!param.multiselect">\n   <label class="mev-param-label" mev-param="param"></label>\n   <select ng-if="!isOptionsArray && !param.bound" id="param-{{param.id}}" ng-options="option as option[param.display] for option in param.optionsx " ng-model="param.value">\n   \t\n   </select>\n   <select ng-if="!isOptionsArray &&  param.bound" id="param-{{param.id}}" ng-options="option as option[param.display] for option in param.optionsx " ng-model="param.value">\n   \t\n   </select>\n   <select ng-if="isOptionsArray" id="param-{{param.id}}" ng-options="option for option in param.optionsx" ng-model="param.value">\n   \t\n   </select>\n</div>\n<div class="form-group" ng-if="param.multiselect">\n   <label class="mev-param-label" mev-param="param"></label>\n   <label ng-repeat="option in param.optionsx">\n      <input type="checkbox" ng-model="option.selected" name="param.id" /> {{option[param.display]}}\n   </label>\n</div>';
});
/*mev-analysis@0.0.1#src/params/view/select/SelectParamDirective*/
define('mev-analysis@0.0.1#src/params/view/select/SelectParamDirective', [
    'lodash',
    './SelectParam.tpl.html'
], function (_, template) {
    function mevSelectParamDirective($q, mevContext) {
        return {
            restrict: 'EAC',
            template: template,
            scope: { param: '=mevParam' },
            controller: [
                '$scope',
                function (scope) {
                    var spec = scope.param;
                    scope.initial = spec.value;
                    function decorateOptions(options) {
                        scope.param.optionsx = _.clone(options);
                        if ((mevContext.getLevel() === scope.param.allowAll || scope.param.allowAll === true) && !_.find(scope.param.optionsx, function (item) {
                                return item === 'all' || scope.param.display && item[scope.param.display] === 'all';
                            })) {
                            var all;
                            if (scope.param.display) {
                                all = {};
                                all[scope.param.display] = 'all';
                                if (scope.param.bound)
                                    all[scope.param.bound] = undefined;
                            } else {
                                all = 'all';
                            }
                            scope.param.optionsx.unshift(all);
                        }
                        scope.setValue(options);
                    }
                    scope.setOptions = function setOptions() {
                        var theOptions = scope.param.getOptions();
                        if (_.isFunction(theOptions.then)) {
                            theOptions.then(function (options) {
                                scope.param.optionsx = options;
                            });
                        } else {
                            decorateOptions(theOptions);
                            scope.setValue(theOptions);
                            scope.$watch(function () {
                                return scope.param.getOptions();
                            }, function (newv, oldv) {
                                if (!newv)
                                    return;
                                if (_.isEqual(newv, oldv))
                                    return;
                                if (newv === oldv)
                                    return;
                                if (newv.length === 0 && oldv.length === 0)
                                    return;
                                decorateOptions(newv);
                            }, true);
                        }
                    };
                    scope.setValue = function setValue(options) {
                        if (scope.param.setValue) {
                            scope.param.setValue(options);
                        } else if (scope.param.required && options.length === 1) {
                            scope.param.value = options[0];
                        }
                    };
                    scope.registerEventListeners = function registerEventListeners() {
                        if (scope.param.refreshListeners) {
                            scope.param.refreshListeners.map(function (item) {
                                scope.$on(item, function () {
                                    scope.setOptions();
                                });
                            });
                        }
                    };
                    scope.isOptionsArray = spec.display ? false : true;
                    scope.setOptions();
                    scope.registerEventListeners();
                }
            ],
            link: function (scope) {
            }
        };
    }
    mevSelectParamDirective.$inject = [
        '$q',
        'mevContext'
    ];
    mevSelectParamDirective.$name = 'mevSelectParamDirective';
    return mevSelectParamDirective;
});
/*mev-analysis@0.0.1#src/params/view/any/AnyParameter.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/params/view/any/AnyParameter.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div ng-if="param.type===\'text\' && param.checkConstraint()" class="mev-text-param" mev-param="param"></div>\n<div ng-if="param.type===\'select\' && param.checkConstraint()" class="mev-select-param" mev-param="param"></div>\n<div ng-if="param.type===\'integer\' && param.checkConstraint()" class="mev-integer-param" mev-param="param"></div>\n<div ng-if="param.type===\'decimal\' && param.checkConstraint()" class="mev-decimal-param" mev-param="param"></div>\n<div ng-if="param.type===\'boolean\' && param.checkConstraint()" class="mev-boolean-param" mev-param="param"></div>';
});
/*mev-analysis@0.0.1#src/params/view/any/AnyParameterDirective*/
define('mev-analysis@0.0.1#src/params/view/any/AnyParameterDirective', ['./AnyParameter.tpl.html'], function (template) {
    'use strict';
    function AnyParameterDirective() {
        return {
            restrict: 'EAC',
            template: template,
            scope: { param: '=mevParam' }
        };
    }
    AnyParameterDirective.$name = 'mevAnyParameterDirective';
    AnyParameterDirective.$inject = [];
    return AnyParameterDirective;
});
/*mev-analysis@0.0.1#src/params/model/name/NameParam*/
define('mev-analysis@0.0.1#src/params/model/name/NameParam', [
    'lodash',
    '../BaseParam'
], function (_, BaseParam) {
    function NameParam(spec) {
        _.assign(this, spec, {
            displayName: 'Name',
            id: 'name',
            type: 'text',
            required: true
        });
    }
    NameParam.prototype = new BaseParam();
    return NameParam;
});
/*mev-analysis@0.0.1#src/params/model/AnalysisParamsFactory*/
define('mev-analysis@0.0.1#src/params/model/AnalysisParamsFactory', [
    'lodash',
    './name/NameParam'
], function (_, NameParam) {
    'use strict';
    function AnalysisParamsFactory() {
        return function mevAnalysisParamsFactory(params, validate) {
            var nameParam = new NameParam({ required: true });
            if (_.isArray(params)) {
                if (!_.find(params, function (item) {
                        return item.id === 'name';
                    })) {
                    params.unshift(nameParam);
                }
                params.getValues = function () {
                    var result = {};
                    return _.reduce(this, function (result, item, key) {
                        if (item.checkConstraint())
                            result[item.id] = item.getValue ? item.getValue() : item.value && item.bound ? item.value[item.bound] : item.value;
                        return result;
                    }, result);
                };
                _.forEach(params, function (param) {
                    param.params = params;
                });
                params.validate = validate;
                params.getById = function (id) {
                    return _.find(this, function (param) {
                        return param.id === id;
                    });
                };
                return params;
            } else {
                var tmp = Object.create({
                    getValues: function () {
                        return _.mapValues(this, function (o) {
                            return o.getValue ? o.getValue() : o.value;
                        });
                    },
                    validate: validate,
                    getById: function (id) {
                        return this[id];
                    }
                });
                tmp[nameParam.id] = nameParam;
                var ret = _.assign(tmp, params);
                console.log('ret', ret);
                _.map(ret, function (o, key) {
                    o.id = o.id || key;
                });
                return ret;
            }
        };
    }
    AnalysisParamsFactory.$inject = [];
    AnalysisParamsFactory.$name = 'mevAnalysisParams';
    AnalysisParamsFactory.$provider = 'factory';
    return AnalysisParamsFactory;
});
/*mev-analysis@0.0.1#src/params/model/annotationField/AnnotationFieldParam*/
define('mev-analysis@0.0.1#src/params/model/annotationField/AnnotationFieldParam', [
    'lodash',
    '../select/SelectParam',
    '../BaseParam'
], function (_, SelectParam, BaseParam) {
    'use strict';
    function AnnotationFieldParamFactory(mevAnnotationsLocator) {
        function AnnotationFieldParam(spec) {
            _.assign(this, spec, {
                options: function () {
                    return mevAnnotationsLocator.find(spec.dimension).getFields().then(function (options) {
                        return _.isArray(options) ? options.map(function (option) {
                            return option.name;
                        }) : undefined;
                    });
                },
                refreshListeners: ['openRefine:loadedAnnotations:' + spec.dimension]
            });
        }
        AnnotationFieldParam.prototype = new SelectParam();
        return AnnotationFieldParam;
    }
    AnnotationFieldParamFactory.$name = 'mevAnnotationFieldParam';
    AnnotationFieldParamFactory.$provider = 'factory';
    AnnotationFieldParamFactory.$inject = ['mevAnnotationsLocator'];
    return AnnotationFieldParamFactory;
});
/*mev-analysis@0.0.1#src/type/model/AnalysisTypes*/
'use strict';
define('mev-analysis@0.0.1#src/type/model/AnalysisTypes', [], function () {
    function mevAnalysisTypes() {
        var analysisTypes = {};
        function registerType(spec) {
            if (!spec.id) {
                throw 'Error: no id provided for analysisType: ' + JSON.stringify(spec);
            }
            if (analysisTypes[spec.id]) {
                throw new Error('Type with id \'' + spec.id + '\' is already registered');
            }
            analysisTypes[spec.id] = spec;
        }
        function getType(id) {
            return analysisTypes[id];
        }
        function getAll() {
            return analysisTypes;
        }
        return {
            register: registerType,
            get: getType,
            all: getAll
        };
    }
    mevAnalysisTypes.$inject = [];
    mevAnalysisTypes.$name = 'mevAnalysisTypes';
    mevAnalysisTypes.$provider = 'service';
    return mevAnalysisTypes;
});
/*mev-analysis@0.0.1#src/type/view/defaultTemplate/analysis.default.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/type/view/defaultTemplate/analysis.default.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div ng-if="!DatasetAnalysisVM.analysis">Loading ...</div>\n<div ng-if="DatasetAnalysisVM.analysis && DatasetAnalysisVM.analysis.status===\'ERROR\'" class="column-wrapper">\n\t<ul class="nav nav-tabs column-header" id="analysisTabs">\n\t\t<li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self" >{{DatasetAnalysisVM.analysis.name}}</a></li>\n\t</ul>\n\n\t<div class="tab-content column-body">\n\t\t<div class="tab-pane active results-wrapper" id="table" >\n\t\t\t<div class="results-header clearfix">\n\t\t\t</div>\n\t\t\t<div class="results-body">\n\t\t\t\t<div >Problem while running analysis: {{DatasetAnalysisVM.analysis.name}}\n\t\t\t\t\t<div>Parameters: <span class="mev-error-message">{{DatasetAnalysisVM.analysis.params}}</span></div>\n\t\t\t\t\t<div>Error: <span class="mev-error-message">{{DatasetAnalysisVM.analysis.error}}</span></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n';
});
/*mev-analysis@0.0.1#src/type/model/AnalysisType*/
define('mev-analysis@0.0.1#src/type/model/AnalysisType', [
    'lodash',
    '../view/defaultTemplate/analysis.default.tpl.html',
    './AnalysisTypes'
], function (_, defaultTemplate) {
    'use strict';
    var injectable = function (AnalysisLauncher, mevAnalysisTypes, AnalysisParamsFactory) {
        function AnalysisType(id, name, params) {
            if (arguments.length === 1)
                _.extend(this, arguments[0]);
            else
                _.extend(this, {
                    id: id,
                    name: name,
                    params: params
                });
            mevAnalysisTypes.register(this);
        }
        _.extend(AnalysisType.prototype, {
            start: function (params) {
                return AnalysisLauncher.start.apply(this, arguments);
            },
            validate: function (values) {
                return _.reduce(this.params, function (errors, param, key, params) {
                    if (_.isFunction(param.validate) && param.checkConstraint()) {
                        var error = param.validate(values || params.getValues());
                        if (error)
                            errors.push(error);
                    }
                    return errors;
                }, []);
            },
            parent: AnalysisType.prototype,
            defaultTemplate: defaultTemplate
        });
        return AnalysisType;
    };
    injectable.$inject = [
        'mevAnalysisLauncher',
        'mevAnalysisTypes',
        'mevAnalysisParams'
    ];
    injectable.$name = 'mevAnalysisType';
    injectable.$provider = 'factory';
    return injectable;
});
/*mev-analysis@0.0.1#src/launch/AnalysisLauncher*/
define('mev-analysis@0.0.1#src/launch/AnalysisLauncher', ['lodash'], function (_) {
    'use strict';
    function service(mevContext, mevAnalysisRest) {
        this.start = function (AnalysisType, data, urlParams, method) {
            if (!AnalysisType)
                AnalysisType = this;
            var project = mevContext.root();
            var dataParams = data || AnalysisType.params.getValues();
            if (!urlParams)
                urlParams = {};
            _.defaults(urlParams, {
                datasetName: project.dataset.datasetName,
                analysisType: AnalysisType.id
            });
            if (method === 'put')
                urlParams.analysisName = dataParams.name;
            if (mevContext.getLevel() === 'bottom') {
                dataParams.name = mevContext.current().name + '.' + urlParams.analysisType + '_' + dataParams.name;
                if (urlParams.analysisName)
                    urlParams.analysisName = dataParams.name;
            } else {
                if (urlParams.analysisName && urlParams.analysisName.toLowerCase() === urlParams.analysisType.toLowerCase()) {
                } else {
                    dataParams.name = urlParams.analysisType + '_' + dataParams.name;
                    if (urlParams.analysisName)
                        urlParams.analysisName = urlParams.analysisType + '_' + urlParams.analysisName;
                }
            }
            mevAnalysisRest[method || 'post'](urlParams, dataParams);
        };
    }
    service.$inject = [
        'mevContext',
        'mevAnalysisRest'
    ];
    service.$name = 'mevAnalysisLauncher';
    service.$provider = 'service';
    return service;
});
/*mev-analysis@0.0.1#src/type/view/startForm/AnalysisStartForm.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/type/view/startForm/AnalysisStartForm.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<form role="form">\t\n  <div class="errors" ng-if="!isValid">\n  \t<p class="error bg-warning " ng-repeat="error in errors">{{error}}</p>\n  </div>\n  <div ng-repeat="param in analysisType.params" class="mev-any-parameter" mev-param="param"></div>\t\n\t<a class="btn btn-success btn-block" ng-click="start()" aria-hidden="true">Analyze</a>\n</form>';
});
/*mev-analysis@0.0.1#src/type/view/startForm/AnalysisStartFormDirective*/
define('mev-analysis@0.0.1#src/type/view/startForm/AnalysisStartFormDirective', [
    './AnalysisStartForm.tpl.html',
    './AnalysisStartForm.less'
], function (template) {
    'use strict';
    function mevAnalsysStartFormDirective($modal, $compile) {
        return {
            restrict: 'EAC',
            scope: { analysisType: '=mevAnalysisType' },
            template: template,
            controller: [
                '$scope',
                function (scope) {
                    ;
                }
            ],
            link: function (scope, elm, attr, ctrl) {
                if (scope.analysisType.info && scope.analysisType.info.template) {
                    var elInfo = elm.find('.help-container');
                    elInfo.html(scope.analysisType.info.template);
                    $compile(elInfo.contents())(scope);
                }
                scope.start = function () {
                    console.debug('scope.analysisType', scope.analysisType, elm, attr);
                    var postData = scope.analysisType.params.getValues();
                    scope.errors = scope.analysisType.validate(postData);
                    scope.isValid = scope.errors.length === 0;
                    if (scope.isValid) {
                        scope.analysisType.start();
                        elm.parents('.modal').modal('hide');
                    }
                    return scope.isValid;
                };
                scope.info = function () {
                    $modal.open({
                        template: scope.analysisType.info.template,
                        controller: [
                            '$scope',
                            function (scope, selectionSet) {
                                scope.dismiss = function () {
                                    scope.$dismiss();
                                };
                            }
                        ]
                    }).result.finally(function () {
                    });
                };
            }
        };
    }
    mevAnalsysStartFormDirective.$inject = [
        '$uibModal',
        '$compile'
    ];
    mevAnalsysStartFormDirective.$name = 'mevAnalysisStartFormDirective';
    return mevAnalsysStartFormDirective;
});
/*mev-analysis@0.0.1#src/type/view/modal/AnalysisStartModal.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/type/view/modal/AnalysisStartModal.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<mev-bs-modal bindid="{{StartAnalysisModalVM.id}}" func=""\n\t\t\t  header="{{analysisType.name}}"\n\t\t\t  header-html="StartAnalysisModalVM.headerHtml"\n\t\t\t  hide-close="{{StartAnalysisModalVM.hasInfo}}" class="mev-analysis-start">\n\t<div class="mev-analysis-start-form" mev-analysis-type="analysisType">\n</mev-bs-modal>';
});
/*mev-analysis@0.0.1#src/type/view/modal/AnalysisStartModalHeader.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/type/view/modal/AnalysisStartModalHeader.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<uib-accordion close-others="oneAtATime">\n    <uib-accordion-group >\n        <uib-accordion-heading>\n            {{analysisType.name}} <i class="glyphicon glyphicon-question-sign pull-right"></i>\n        </uib-accordion-heading>\n        <div class="mev-analysis-info">\n            <div ng-bind-html="headerHtml"></div>\n        </div>\n    </uib-accordion-group>\n</uib-accordion>\n';
});
/*mev-analysis@0.0.1#src/type/view/modal/AnalysisStartModalDirective*/
define('mev-analysis@0.0.1#src/type/view/modal/AnalysisStartModalDirective', [
    './AnalysisStartModal.tpl.html',
    './AnalysisStartModalHeader.tpl.html',
    './AnalysisStartModal.less'
], function (template, headerTemplate) {
    'use strict';
    function AnalysisStartModalDirective($compile, $sce) {
        return {
            restrict: 'AEC',
            scope: { analysisType: '=mevAnalysisType' },
            template: template,
            controllerAs: 'StartAnalysisModalVM',
            controller: [
                '$scope',
                '$transclude',
                function (scope) {
                    this.id = scope.analysisType.id + '-start-analysis-modal';
                    this.hasInfo = scope.analysisType.info && scope.analysisType.info.template;
                    if (this.hasInfo) {
                        scope.headerHtml = $sce.trustAsHtml(scope.analysisType.info.template);
                        var elemHeader = $compile(headerTemplate)(scope);
                        this.headerHtml = elemHeader;
                    }
                }
            ],
            compile: function (tElem, tAttrs, transclude) {
                return {
                    pre: function (scope, elem, attrs, ctrl) {
                        if (ctrl.hasInfo) {
                            var elemInfo = elem.find('.mev-analysis-type-info');
                            elemInfo.html(scope.analysisType.info.template);
                        }
                    },
                    post: function (scope, elem, attrs, ctrl) {
                    }
                };
            }
        };
    }
    AnalysisStartModalDirective.$inject = [
        '$compile',
        '$sce'
    ];
    AnalysisStartModalDirective.$name = 'mevAnalysisStartModal';
    AnalysisStartModalDirective.$provider = 'directive';
    return AnalysisStartModalDirective;
});
/*mev-analysis@0.0.1#src/type/view/modal/AnalysisStartButton.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/type/view/modal/AnalysisStartButton.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<a mev-bs-modal-trigger="#{{StartAnalysisButtonVM.id}}" mev-bs-modal-text="show modal" ng-click="StartAnalysisButtonVM.onClick()">{{analysisType.name}}</a>';
});
/*mev-analysis@0.0.1#src/type/view/modal/AnalysisStartButtonDirective*/
define('mev-analysis@0.0.1#src/type/view/modal/AnalysisStartButtonDirective', ['./AnalysisStartButton.tpl.html'], function (template) {
    'use strict';
    function directive(mevContext) {
        return {
            restrict: 'AEC',
            scope: {
                analysisType: '=mevAnalysisType',
                contextLevel: '@mevContextLevel'
            },
            template: template,
            controller: [
                '$scope',
                function (scope) {
                    this.id = scope.analysisType.id + '-start-analysis-modal';
                    this.onClick = function () {
                        mevContext.setLevel(scope.contextLevel);
                    };
                }
            ],
            controllerAs: 'StartAnalysisButtonVM'
        };
    }
    directive.$inject = ['mevContext'];
    directive.$name = 'mevAnalysisStartButton';
    directive.$provider = 'directive';
    return directive;
});
/*mev-analysis@0.0.1#src/type/view/route/AnalysisTypeState*/
'use strict';
define('mev-analysis@0.0.1#src/type/view/route/AnalysisTypeState', [], function () {
    function state($stateProvider) {
        $stateProvider.state('root.dataset.analysisType', {
            parent: 'root.dataset',
            url: 'analysisType/',
            abstract: true,
            template: '<ui-view></ui-view>',
            resolve: {
                anaysisType: [function () {
                        console.log('pe hi');
                    }]
            }
        });
    }
    state.inject = ['$stateProvider'];
    state.provider = 'config';
    return state;
});
/*mev-analysis@0.0.1#src/type/view/route/AnalysisError.tpl.html!system-text@0.1.0#text*/
define('mev-analysis@0.0.1#src/type/view/route/AnalysisError.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div ng-if="AnalysisErrorVM.analysis && AnalysisErrorVM.analysis.status===\'ERROR\'" class="column-wrapper">\n    <ul class="nav nav-tabs column-header" id="analysisTabs">\n        <li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self" >{{AnalysisErrorVM.analysis.name}}</a></li>\n    </ul>\n\n    <div class="tab-content column-body">\n        <div class="tab-pane active results-wrapper" id="table" >\n            <div class="results-header clearfix">\n            </div>\n            <div class="results-body">\n                <div >Problem while running analysis: {{AnalysisErrorVM.analysis.name}}\n                    <div>Parameters: <span class="mev-error-message">{{AnalysisErrorVM.analysis.params}}</span></div>\n                    <div>Error: <span class="mev-error-message">{{AnalysisErrorVM.analysis.error}}</span></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</div>\n\n';
});
/*mev-analysis@0.0.1#src/type/view/route/AnalysisErrorState*/
define('mev-analysis@0.0.1#src/type/view/route/AnalysisErrorState', [
    'lodash',
    './AnalysisError.tpl.html'
], function (_, template) {
    'use strict';
    function state($stateProvider) {
        $stateProvider.state('root.dataset.analysisError', {
            parent: 'root.dataset',
            url: 'analysisError/{analysisId}',
            abstract: false,
            template: template,
            resolve: {
                analysis: [
                    '$stateParams',
                    'project',
                    'dataset',
                    function ($stateParams, project, dataset) {
                        return _.find(dataset.analyses, function (analysis) {
                            return analysis.name === $stateParams.analysisId;
                        });
                    }
                ]
            },
            controller: [
                'analysis',
                function (analysis) {
                    this.analysis = analysis;
                }
            ],
            controllerAs: 'AnalysisErrorVM'
        });
    }
    state.inject = ['$stateProvider'];
    state.provider = 'config';
    return state;
});
/*mev-analysis@0.0.1#src/events/AnalysisEventBus*/
define('mev-analysis@0.0.1#src/events/AnalysisEventBus', [
    'mui',
    'lodash'
], function (ng, _) {
    'use strict';
    var AnalysisEventBus = function ($rootScope, mevAnalysisTypes) {
        function formatAnalysisEventData(descriptor, params, response) {
            var eventData = { analysisName: descriptor.analysisName || params.analysisName || params.name || response.name };
            ng.extend(eventData, descriptor);
            ng.extend(eventData, params);
            var analysisType = mevAnalysisTypes.get(descriptor.analysisType || params.analysisType || response.type);
            if (!analysisType && _.isString(descriptor))
                analysisType = mevAnalysisTypes.get(descriptor);
            if (analysisType && _.isFunction(analysisType.modelDecorator))
                analysisType.modelDecorator(response);
            if (analysisType && _.isFunction(analysisType.onSuccess))
                analysisType.onSuccess(response);
            eventData.response = response;
            return eventData;
        }
        function raiseEvent(eventName, descriptor, params, response) {
            var data = formatAnalysisEventData(descriptor, params, response);
            $rootScope.$broadcast(eventName, data);
            console.debug('broadcast ' + eventName, data);
        }
        function registerHandler(eventName, $scope, handler) {
            console.debug('registered ' + eventName);
            $scope.$on(eventName, function ($event, data) {
                console.debug('recieved ' + eventName, $event, data);
                handler(data.analysisType, data.analysisName, data);
            });
        }
        var MSG_ANALYSIS_STARTED = 'event:analysis:start';
        this.analysisStarted = raiseEvent.bind(this, MSG_ANALYSIS_STARTED);
        this.onAnalysisStarted = registerHandler.bind(this, MSG_ANALYSIS_STARTED);
        var MSG_ANALYSIS_SUCCESS = 'event:analysis:success';
        this.analysisSucceeded = raiseEvent.bind(this, MSG_ANALYSIS_SUCCESS);
        this.onAnalysisSuccess = registerHandler.bind(this, MSG_ANALYSIS_SUCCESS);
        var MSG_ANALYSIS_FAILURE = 'event:analysis:failure';
        this.analysisFailed = raiseEvent.bind(this, MSG_ANALYSIS_FAILURE);
        this.onAnalysisFailure = registerHandler.bind(this, MSG_ANALYSIS_FAILURE);
        var MSG_ANALYSIS_LOADED_ALL = 'event:analysis:all';
        this.analysisLoadedAll = function () {
            $rootScope.$broadcast(MSG_ANALYSIS_LOADED_ALL);
        };
        this.onAnalysisLoadedAll = function ($scope, handler) {
            $scope.$on(MSG_ANALYSIS_LOADED_ALL, function ($event) {
                handler();
            });
        };
    };
    AnalysisEventBus.$inject = [
        '$rootScope',
        'mevAnalysisTypes'
    ];
    AnalysisEventBus.$name = 'mevAnalysisEventBus';
    AnalysisEventBus.$provider = 'service';
    return AnalysisEventBus;
});
/*mev-analysis@0.0.1#src/endpoint/rest/AnalysisRest*/
define('mev-analysis@0.0.1#src/endpoint/rest/AnalysisRest', [
    'mui',
    'lodash',
    '../../events/AnalysisEventBus',
    'mev-dataset/src/main/dataset/lib/AnalysisClass'
], function (ng, lodash, AnalysisEventBus, AnalysisClass) {
    function AnalysisRest($resource, $http, $timeout, $q, analysisEventBus, mevDb, mevWorkspace) {
        'use strict';
        var transformRequest = [function (data, headers) {
                console.log('transformRequest', data);
                return data;
            }].concat($http.defaults.transformRequest);
        var resource = $resource('/dataset/:datasetName/analysis', { 'format': 'json' }, {
            'getAll': {
                'url': '/dataset/:datasetName/analysis',
                'method': 'GET'
            },
            'get': {
                'url': '/dataset/:datasetName' + '/analysis/:analysisName',
                'method': 'GET'
            },
            'postf': {
                'method': 'POST',
                'url': '/dataset/:datasetName' + '/analyze/:analysisType/:analysisName(:analysisParams)'
            },
            'post': {
                'method': 'POST',
                'url': '/dataset/:datasetName' + '/analyze/:analysisType'
            },
            'post3': {
                'method': 'POST',
                'url': '/dataset/:datasetName' + '/analyze/:analysisType/:analysisName'
            },
            'post4': {
                'method': 'GET',
                'url': '/dataset/:datasetName' + '/analyze/:analysisType/:analysisName'
            },
            'put': {
                'method': 'PUT',
                'url': '/dataset/:datasetName' + '/analyze/:analysisType/:analysisName'
            },
            'delete': {
                'method': 'DELETE',
                'url': '/dataset/:datasetName/analysis/:analysisName'
            }
        });
        var AnalysisResource = Object.create(resource);
        AnalysisResource.getAll = function (params, data, callback) {
            var deferred = $q.defer();
            var cache = [];
            cache.$promise = deferred.promise;
            cache.$resolved = false;
            mevWorkspace.getDataset(params.datasetName).then(function (dataset) {
                if (dataset && dataset.isActive) {
                    return resource.getAll(params, data, callback).$promise;
                } else {
                    return { names: [] };
                }
            }).then(function (remote) {
                return mevDb.getAnalyses(params.datasetName).then(function (local) {
                    var all = { names: _.union(remote.names, local) };
                    deferred.resolve(all);
                    return all;
                });
            }).catch(function (e) {
                console.error('Error fetching dataset list: ', params, e);
                deferred.reject(e);
                throw new Error('Error fetching dataset list: ' + JSON.stringify(e));
            });
            return cache;
        };
        AnalysisResource.delete = function (params, data, callback) {
            var deferred = $q.defer();
            var cache = [];
            cache.$promise = deferred.promise;
            cache.$resolved = false;
            mevWorkspace.getDataset(params.datasetName).then(function (dataset) {
                if (dataset && dataset.isActive) {
                    return resource.getAll(params, data, callback).$promise.then(function (remoteResponse) {
                        if (_.includes(remoteResponse.names, params.analysisName)) {
                            return resource.delete(params).$promise.then(function (deleteResponse) {
                                console.debug('deleteResponse', deleteResponse);
                                deleteResponse.status = 200;
                                return deleteResponse;
                            }).catch(function (e) {
                                if (e.status === 404)
                                    return e;
                                else
                                    throw e;
                            });
                        } else {
                            return { status: 404 };
                        }
                    });
                } else {
                    return { status: 200 };
                }
            }).then(function (remote) {
                if (remote && (remote.status === 200 || remote.status === 404))
                    return mevDb.deleteAnalysis(params.datasetName, params.analysisName);
                return remote;
            }).then(function (deleteResult) {
                deferred.resolve(deleteResult);
            }).catch(function (e) {
                console.error('Error deleting analysis: ', params, e);
                deferred.reject(e);
                throw new Error('Error deleting analysis : ' + JSON.stringify(e));
            });
            return cache;
        };
        AnalysisResource.get = function (params, callback) {
            var deferred = $q.defer();
            var cache = {
                $promise: deferred.promise,
                $resolve: false
            };
            mevDb.getAnalysis(params.datasetName, params.analysisName).catch(function (e) {
                if (e.status === 404)
                    return resource.get(params).$promise.then(function (response) {
                        if (response.status !== 'IN_PROGRESS')
                            mevDb.putAnalysis(params.datasetName, response);
                        return response;
                    });
                else
                    throw new Error('Error retrieving analysis from cache: ' + JSON.stringify(params));
            }).then(function (doc) {
                if (callback)
                    callback(doc);
                deferred.resolve(doc);
            }).catch(function (e) {
                console.log('Error getting analysis: ', e);
                deferred.reject(e);
                throw new Error('Error getting analysis: ' + JSON.stringify(e));
            });
            return cache;
        };
        AnalysisResource.post = postWrapper('post');
        AnalysisResource.postf = postWrapper('postf');
        AnalysisResource.post3 = postWrapper('post3');
        AnalysisResource.put = postWrapper('put');
        function postWrapper(methodName) {
            return function (params, data, callback) {
                if (params.analysisName && params.analysisName.toLowerCase().indexOf(params.analysisType.toLowerCase()) > -1) {
                } else if (data.name && data.name.toLowerCase().indexOf(params.analysisType.toLowerCase()) > -1) {
                } else {
                    if (params.analysisName)
                        params.analysisName = params.analysisType + '_' + params.analysisName;
                    if (data.name)
                        data.name = params.analysisType + '_' + data.name;
                }
                var result = resource[methodName](params, data, callback);
                result.$promise.then(function (response) {
                    if (typeof data === 'string')
                        data = JSON.parse(data);
                    if (Array.isArray(data))
                        data = { data: data };
                    var allParams = { analysisName: params.analysisName || data.analysisName || params.name || data.name || response.name };
                    _.assign(allParams, data);
                    _.assign(allParams, params);
                    console.debug('AnalysisResource success', params, 'data', data, 'response', response);
                    var sessionStorageKey = allParams.datasetName + '.' + allParams.analysisName;
                    console.debug('sessionStorageKey set', sessionStorageKey);
                    delete params.limma;
                    delete allParams.limma;
                    sessionStorage.setItem(sessionStorageKey, JSON.stringify(allParams));
                    function poll(prevResponse, wait) {
                        if (prevResponse.status && prevResponse.status === 'IN_PROGRESS') {
                            $timeout(function () {
                                var pollParams = {
                                    datasetName: allParams.datasetName,
                                    analysisName: allParams.analysisName
                                };
                                AnalysisResource.get(pollParams, function (newResponse) {
                                    poll(newResponse, 5000);
                                });
                            }, wait);
                        } else {
                            var analysis = new AnalysisClass(prevResponse);
                            if (analysis.params)
                                ng.extend(analysis.params, allParams);
                            else
                                analysis.params = allParams;
                            mevDb.putAnalysis(allParams.datasetName, analysis);
                            if (prevResponse.status === 'ERROR') {
                                console.error('PollAnalysis error', analysis.name, analysis);
                                analysisEventBus.analysisFailed(params, data, analysis);
                            } else {
                                console.log('PollAnalysis result', analysis.name, analysis);
                                analysisEventBus.analysisSucceeded(params, data, analysis);
                            }
                        }
                    }
                    ;
                    analysisEventBus.analysisStarted(allParams.analysisType, allParams, new AnalysisClass(response));
                    poll(response, 500);
                }, function (response) {
                    console.debug('AnalysisResource error', response);
                    analysisEventBus.analysisFailed(params, data, response);
                });
                return result;
            };
        }
        return AnalysisResource;
    }
    AnalysisRest.$inject = [
        '$resource',
        '$http',
        '$timeout',
        '$q',
        'mevAnalysisEventBus',
        'mevDb',
        'mevWorkspace'
    ];
    AnalysisRest.$name = 'mevAnalysisRest';
    AnalysisRest.$provider = 'service';
    return AnalysisRest;
});
/*mev-analysis@0.0.1#src/mevAnalysis.module*/
define('mev-analysis@0.0.1#src/mevAnalysis.module', [
    'mui',
    'mev-bs-modal',
    'mev-domain-common',
    'angular-resource',
    'angular-ui-router',
    'mev-workspace',
    'angular-ui-bootstrap',
    './params/view/text/TextParamDirective',
    './params/view/integer/IntegerParamDirective',
    './params/view/boolean/BooleanParamDirective',
    './params/view/selectionSet/SelectionSetParamDirective',
    './params/view/decimal/DecimalParamDirective',
    './params/view/label/ParamLabelDirective',
    './params/view/select/SelectParamDirective',
    './params/view/any/AnyParameterDirective',
    './params/model/selectionSet/SelectionSetParam',
    './params/model/AnalysisParamsFactory',
    './params/model/parentAnalysis/ParentAnalysisParam',
    './params/model/annotationField/AnnotationFieldParam',
    './type/model/AnalysisTypes',
    './type/model/AnalysisType',
    './launch/AnalysisLauncher',
    './type/view/startForm/AnalysisStartFormDirective',
    './type/view/modal/AnalysisStartModalDirective',
    './type/view/modal/AnalysisStartButtonDirective',
    './type/view/route/AnalysisTypeState',
    './type/view/route/AnalysisErrorState',
    './endpoint/rest/AnalysisRest',
    './events/AnalysisEventBus'
], function (ng) {
    return ng.module('mevAnalysis', arguments, arguments);
});
/*angular-utils-pagination@0.10.1#dirPagination*/
define('angular-utils-pagination@0.10.1#dirPagination', [
    'module',
    '@loader'
], function (module, loader) {
    loader.get('@@global-helpers').prepareGlobal(module.id, []);
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**\r\n * dirPagination - AngularJS module for paginating (almost) anything.\r\n *\r\n *\r\n * Credits\r\n * =======\r\n *\r\n * Daniel Tabuenca: https://groups.google.com/d/msg/angular/an9QpzqIYiM/r8v-3W1X5vcJ\r\n * for the idea on how to dynamically invoke the ng-repeat directive.\r\n *\r\n * I borrowed a couple of lines and a few attribute names from the AngularUI Bootstrap project:\r\n * https://github.com/angular-ui/bootstrap/blob/master/src/pagination/pagination.js\r\n *\r\n * Copyright 2014 Michael Bromley <michael@michaelbromley.co.uk>\r\n */\r\n\r\n(function() {\r\n\r\n    /**\r\n     * Config\r\n     */\r\n    var moduleName = \'angularUtils.directives.dirPagination\';\r\n    var DEFAULT_ID = \'__default\';\r\n\r\n    /**\r\n     * Module\r\n     */\r\n    angular.module(moduleName, [])\r\n        .directive(\'dirPaginate\', [\'$compile\', \'$parse\', \'paginationService\', dirPaginateDirective])\r\n        .directive(\'dirPaginateNoCompile\', noCompileDirective)\r\n        .directive(\'dirPaginationControls\', [\'paginationService\', \'paginationTemplate\', dirPaginationControlsDirective])\r\n        .filter(\'itemsPerPage\', [\'paginationService\', itemsPerPageFilter])\r\n        .service(\'paginationService\', paginationService)\r\n        .provider(\'paginationTemplate\', paginationTemplateProvider)\r\n        .run([\'$templateCache\',dirPaginationControlsTemplateInstaller]);\r\n\r\n    function dirPaginateDirective($compile, $parse, paginationService) {\r\n\r\n        return  {\r\n            terminal: true,\r\n            multiElement: true,\r\n            priority: 100,\r\n            compile: dirPaginationCompileFn\r\n        };\r\n\r\n        function dirPaginationCompileFn(tElement, tAttrs){\r\n\r\n            var expression = tAttrs.dirPaginate;\r\n            // regex taken directly from https://github.com/angular/angular.js/blob/v1.4.x/src/ng/directive/ngRepeat.js#L339\r\n            var match = expression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\r\n\r\n            var filterPattern = /\\|\\s*itemsPerPage\\s*:\\s*(.*\\(\\s*\\w*\\)|([^\\)]*?(?=\\s+as\\s+))|[^\\)]*)/;\r\n            if (match[2].match(filterPattern) === null) {\r\n                throw \'pagination directive: the \\\'itemsPerPage\\\' filter must be set.\';\r\n            }\r\n            var itemsPerPageFilterRemoved = match[2].replace(filterPattern, \'\');\r\n            var collectionGetter = $parse(itemsPerPageFilterRemoved);\r\n\r\n            addNoCompileAttributes(tElement);\r\n\r\n            // If any value is specified for paginationId, we register the un-evaluated expression at this stage for the benefit of any\r\n            // dir-pagination-controls directives that may be looking for this ID.\r\n            var rawId = tAttrs.paginationId || DEFAULT_ID;\r\n            paginationService.registerInstance(rawId);\r\n\r\n            return function dirPaginationLinkFn(scope, element, attrs){\r\n\r\n                // Now that we have access to the `scope` we can interpolate any expression given in the paginationId attribute and\r\n                // potentially register a new ID if it evaluates to a different value than the rawId.\r\n                var paginationId = $parse(attrs.paginationId)(scope) || attrs.paginationId || DEFAULT_ID;\r\n                paginationService.registerInstance(paginationId);\r\n\r\n                var repeatExpression = getRepeatExpression(expression, paginationId);\r\n                addNgRepeatToElement(element, attrs, repeatExpression);\r\n\r\n                removeTemporaryAttributes(element);\r\n                var compiled =  $compile(element);\r\n\r\n                var currentPageGetter = makeCurrentPageGetterFn(scope, attrs, paginationId);\r\n                paginationService.setCurrentPageParser(paginationId, currentPageGetter, scope);\r\n\r\n                if (typeof attrs.totalItems !== \'undefined\') {\r\n                    paginationService.setAsyncModeTrue(paginationId);\r\n                    scope.$watch(function() {\r\n                        return $parse(attrs.totalItems)(scope);\r\n                    }, function (result) {\r\n                        if (0 <= result) {\r\n                            paginationService.setCollectionLength(paginationId, result);\r\n                        }\r\n                    });\r\n                } else {\r\n                    paginationService.setAsyncModeFalse(paginationId);\r\n                    scope.$watchCollection(function() {\r\n                        return collectionGetter(scope);\r\n                    }, function(collection) {\r\n                        if (collection) {\r\n                            var collectionLength = (collection instanceof Array) ? collection.length : Object.keys(collection).length;\r\n                            paginationService.setCollectionLength(paginationId, collectionLength);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Delegate to the link function returned by the new compilation of the ng-repeat\r\n                compiled(scope);\r\n            };\r\n        }\r\n\r\n        /**\r\n         * If a pagination id has been specified, we need to check that it is present as the second argument passed to\r\n         * the itemsPerPage filter. If it is not there, we add it and return the modified expression.\r\n         *\r\n         * @param expression\r\n         * @param paginationId\r\n         * @returns {*}\r\n         */\r\n        function getRepeatExpression(expression, paginationId) {\r\n            var repeatExpression,\r\n                idDefinedInFilter = !!expression.match(/(\\|\\s*itemsPerPage\\s*:[^|]*:[^|]*)/);\r\n\r\n            if (paginationId !== DEFAULT_ID && !idDefinedInFilter) {\r\n                repeatExpression = expression.replace(/(\\|\\s*itemsPerPage\\s*:\\s*[^|\\s]*)/, "$1 : \'" + paginationId + "\'");\r\n            } else {\r\n                repeatExpression = expression;\r\n            }\r\n\r\n            return repeatExpression;\r\n        }\r\n\r\n        /**\r\n         * Adds the ng-repeat directive to the element. In the case of multi-element (-start, -end) it adds the\r\n         * appropriate multi-element ng-repeat to the first and last element in the range.\r\n         * @param element\r\n         * @param attrs\r\n         * @param repeatExpression\r\n         */\r\n        function addNgRepeatToElement(element, attrs, repeatExpression) {\r\n            if (element[0].hasAttribute(\'dir-paginate-start\') || element[0].hasAttribute(\'data-dir-paginate-start\')) {\r\n                // using multiElement mode (dir-paginate-start, dir-paginate-end)\r\n                attrs.$set(\'ngRepeatStart\', repeatExpression);\r\n                element.eq(element.length - 1).attr(\'ng-repeat-end\', true);\r\n            } else {\r\n                attrs.$set(\'ngRepeat\', repeatExpression);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Adds the dir-paginate-no-compile directive to each element in the tElement range.\r\n         * @param tElement\r\n         */\r\n        function addNoCompileAttributes(tElement) {\r\n            angular.forEach(tElement, function(el) {\r\n                if (el.nodeType === 1) {\r\n                    angular.element(el).attr(\'dir-paginate-no-compile\', true);\r\n                }\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Removes the variations on dir-paginate (data-, -start, -end) and the dir-paginate-no-compile directives.\r\n         * @param element\r\n         */\r\n        function removeTemporaryAttributes(element) {\r\n            angular.forEach(element, function(el) {\r\n                if (el.nodeType === 1) {\r\n                    angular.element(el).removeAttr(\'dir-paginate-no-compile\');\r\n                }\r\n            });\r\n            element.eq(0).removeAttr(\'dir-paginate-start\').removeAttr(\'dir-paginate\').removeAttr(\'data-dir-paginate-start\').removeAttr(\'data-dir-paginate\');\r\n            element.eq(element.length - 1).removeAttr(\'dir-paginate-end\').removeAttr(\'data-dir-paginate-end\');\r\n        }\r\n\r\n        /**\r\n         * Creates a getter function for the current-page attribute, using the expression provided or a default value if\r\n         * no current-page expression was specified.\r\n         *\r\n         * @param scope\r\n         * @param attrs\r\n         * @param paginationId\r\n         * @returns {*}\r\n         */\r\n        function makeCurrentPageGetterFn(scope, attrs, paginationId) {\r\n            var currentPageGetter;\r\n            if (attrs.currentPage) {\r\n                currentPageGetter = $parse(attrs.currentPage);\r\n            } else {\r\n                // If the current-page attribute was not set, we\'ll make our own.\r\n                // Replace any non-alphanumeric characters which might confuse\r\n                // the $parse service and give unexpected results.\r\n                // See https://github.com/michaelbromley/angularUtils/issues/233\r\n                var defaultCurrentPage = (paginationId + \'__currentPage\').replace(/\\W/g, \'_\');\r\n                scope[defaultCurrentPage] = 1;\r\n                currentPageGetter = $parse(defaultCurrentPage);\r\n            }\r\n            return currentPageGetter;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is a helper directive that allows correct compilation when in multi-element mode (ie dir-paginate-start, dir-paginate-end).\r\n     * It is dynamically added to all elements in the dir-paginate compile function, and it prevents further compilation of\r\n     * any inner directives. It is then removed in the link function, and all inner directives are then manually compiled.\r\n     */\r\n    function noCompileDirective() {\r\n        return {\r\n            priority: 5000,\r\n            terminal: true\r\n        };\r\n    }\r\n\r\n    function dirPaginationControlsTemplateInstaller($templateCache) {\r\n        $templateCache.put(\'angularUtils.directives.dirPagination.template\', \'<ul class="pagination" ng-if="1 < pages.length || !autoHide"><li ng-if="boundaryLinks" ng-class="{ disabled : pagination.current == 1 }"><a href="" ng-click="setCurrent(1)">&laquo;</a></li><li ng-if="directionLinks" ng-class="{ disabled : pagination.current == 1 }"><a href="" ng-click="setCurrent(pagination.current - 1)">&lsaquo;</a></li><li ng-repeat="pageNumber in pages track by tracker(pageNumber, $index)" ng-class="{ active : pagination.current == pageNumber, disabled : pageNumber == \\\'...\\\' || ( ! autoHide && pages.length === 1 ) }"><a href="" ng-click="setCurrent(pageNumber)">{{ pageNumber }}</a></li><li ng-if="directionLinks" ng-class="{ disabled : pagination.current == pagination.last }"><a href="" ng-click="setCurrent(pagination.current + 1)">&rsaquo;</a></li><li ng-if="boundaryLinks"  ng-class="{ disabled : pagination.current == pagination.last }"><a href="" ng-click="setCurrent(pagination.last)">&raquo;</a></li></ul>\');\r\n    }\r\n\r\n    function dirPaginationControlsDirective(paginationService, paginationTemplate) {\r\n\r\n        var numberRegex = /^\\d+$/;\r\n\r\n        return {\r\n            restrict: \'AE\',\r\n            templateUrl: function(elem, attrs) {\r\n                return attrs.templateUrl || paginationTemplate.getPath();\r\n            },\r\n            scope: {\r\n                maxSize: \'=?\',\r\n                onPageChange: \'&?\',\r\n                paginationId: \'=?\',\r\n                autoHide: \'=?\'\r\n            },\r\n            link: dirPaginationControlsLinkFn\r\n        };\r\n\r\n        function dirPaginationControlsLinkFn(scope, element, attrs) {\r\n\r\n            // rawId is the un-interpolated value of the pagination-id attribute. This is only important when the corresponding dir-paginate directive has\r\n            // not yet been linked (e.g. if it is inside an ng-if block), and in that case it prevents this controls directive from assuming that there is\r\n            // no corresponding dir-paginate directive and wrongly throwing an exception.\r\n            var rawId = attrs.paginationId ||  DEFAULT_ID;\r\n            var paginationId = scope.paginationId || attrs.paginationId ||  DEFAULT_ID;\r\n\r\n            if (!paginationService.isRegistered(paginationId) && !paginationService.isRegistered(rawId)) {\r\n                var idMessage = (paginationId !== DEFAULT_ID) ? \' (id: \' + paginationId + \') \' : \' \';\r\n                if (window.console) {\r\n                    console.warn(\'Pagination directive: the pagination controls\' + idMessage + \'cannot be used without the corresponding pagination directive, which was not found at link time.\');\r\n                }\r\n            }\r\n\r\n            if (!scope.maxSize) { scope.maxSize = 9; }\r\n            scope.autoHide = scope.autoHide === undefined ? true : scope.autoHide;\r\n            scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : true;\r\n            scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : false;\r\n\r\n            var paginationRange = Math.max(scope.maxSize, 5);\r\n            scope.pages = [];\r\n            scope.pagination = {\r\n                last: 1,\r\n                current: 1\r\n            };\r\n            scope.range = {\r\n                lower: 1,\r\n                upper: 1,\r\n                total: 1\r\n            };\r\n\r\n            scope.$watch(\'maxSize\', function(val) {\r\n                if (val) {\r\n                    paginationRange = Math.max(scope.maxSize, 5);\r\n                    generatePagination();\r\n                }\r\n            });\r\n\r\n            scope.$watch(function() {\r\n                if (paginationService.isRegistered(paginationId)) {\r\n                    return (paginationService.getCollectionLength(paginationId) + 1) * paginationService.getItemsPerPage(paginationId);\r\n                }\r\n            }, function(length) {\r\n                if (0 < length) {\r\n                    generatePagination();\r\n                }\r\n            });\r\n\r\n            scope.$watch(function() {\r\n                if (paginationService.isRegistered(paginationId)) {\r\n                    return (paginationService.getItemsPerPage(paginationId));\r\n                }\r\n            }, function(current, previous) {\r\n                if (current != previous && typeof previous !== \'undefined\') {\r\n                    goToPage(scope.pagination.current);\r\n                }\r\n            });\r\n\r\n            scope.$watch(function() {\r\n                if (paginationService.isRegistered(paginationId)) {\r\n                    return paginationService.getCurrentPage(paginationId);\r\n                }\r\n            }, function(currentPage, previousPage) {\r\n                if (currentPage != previousPage) {\r\n                    goToPage(currentPage);\r\n                }\r\n            });\r\n\r\n            scope.setCurrent = function(num) {\r\n                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {\r\n                    num = parseInt(num, 10);\r\n                    paginationService.setCurrentPage(paginationId, num);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * Custom "track by" function which allows for duplicate "..." entries on long lists,\r\n             * yet fixes the problem of wrongly-highlighted links which happens when using\r\n             * "track by $index" - see https://github.com/michaelbromley/angularUtils/issues/153\r\n             * @param id\r\n             * @param index\r\n             * @returns {string}\r\n             */\r\n            scope.tracker = function(id, index) {\r\n                return id + \'_\' + index;\r\n            };\r\n\r\n            function goToPage(num) {\r\n                if (paginationService.isRegistered(paginationId) && isValidPageNumber(num)) {\r\n                    var oldPageNumber = scope.pagination.current;\r\n\r\n                    scope.pages = generatePagesArray(num, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);\r\n                    scope.pagination.current = num;\r\n                    updateRangeValues();\r\n\r\n                    // if a callback has been set, then call it with the page number as the first argument\r\n                    // and the previous page number as a second argument\r\n                    if (scope.onPageChange) {\r\n                        scope.onPageChange({\r\n                            newPageNumber : num,\r\n                            oldPageNumber : oldPageNumber\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            function generatePagination() {\r\n                if (paginationService.isRegistered(paginationId)) {\r\n                    var page = parseInt(paginationService.getCurrentPage(paginationId)) || 1;\r\n                    scope.pages = generatePagesArray(page, paginationService.getCollectionLength(paginationId), paginationService.getItemsPerPage(paginationId), paginationRange);\r\n                    scope.pagination.current = page;\r\n                    scope.pagination.last = scope.pages[scope.pages.length - 1];\r\n                    if (scope.pagination.last < scope.pagination.current) {\r\n                        scope.setCurrent(scope.pagination.last);\r\n                    } else {\r\n                        updateRangeValues();\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * This function updates the values (lower, upper, total) of the `scope.range` object, which can be used in the pagination\r\n             * template to display the current page range, e.g. "showing 21 - 40 of 144 results";\r\n             */\r\n            function updateRangeValues() {\r\n                if (paginationService.isRegistered(paginationId)) {\r\n                    var currentPage = paginationService.getCurrentPage(paginationId),\r\n                        itemsPerPage = paginationService.getItemsPerPage(paginationId),\r\n                        totalItems = paginationService.getCollectionLength(paginationId);\r\n\r\n                    scope.range.lower = (currentPage - 1) * itemsPerPage + 1;\r\n                    scope.range.upper = Math.min(currentPage * itemsPerPage, totalItems);\r\n                    scope.range.total = totalItems;\r\n                }\r\n            }\r\n            function isValidPageNumber(num) {\r\n                return (numberRegex.test(num) && (0 < num && num <= scope.pagination.last));\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Generate an array of page numbers (or the \'...\' string) which is used in an ng-repeat to generate the\r\n         * links used in pagination\r\n         *\r\n         * @param currentPage\r\n         * @param rowsPerPage\r\n         * @param paginationRange\r\n         * @param collectionLength\r\n         * @returns {Array}\r\n         */\r\n        function generatePagesArray(currentPage, collectionLength, rowsPerPage, paginationRange) {\r\n            var pages = [];\r\n            var totalPages = Math.ceil(collectionLength / rowsPerPage);\r\n            var halfWay = Math.ceil(paginationRange / 2);\r\n            var position;\r\n\r\n            if (currentPage <= halfWay) {\r\n                position = \'start\';\r\n            } else if (totalPages - halfWay < currentPage) {\r\n                position = \'end\';\r\n            } else {\r\n                position = \'middle\';\r\n            }\r\n\r\n            var ellipsesNeeded = paginationRange < totalPages;\r\n            var i = 1;\r\n            while (i <= totalPages && i <= paginationRange) {\r\n                var pageNumber = calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n\r\n                var openingEllipsesNeeded = (i === 2 && (position === \'middle\' || position === \'end\'));\r\n                var closingEllipsesNeeded = (i === paginationRange - 1 && (position === \'middle\' || position === \'start\'));\r\n                if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                    pages.push(\'...\');\r\n                } else {\r\n                    pages.push(pageNumber);\r\n                }\r\n                i ++;\r\n            }\r\n            return pages;\r\n        }\r\n\r\n        /**\r\n         * Given the position in the sequence of pagination links [i], figure out what page number corresponds to that position.\r\n         *\r\n         * @param i\r\n         * @param currentPage\r\n         * @param paginationRange\r\n         * @param totalPages\r\n         * @returns {*}\r\n         */\r\n        function calculatePageNumber(i, currentPage, paginationRange, totalPages) {\r\n            var halfWay = Math.ceil(paginationRange/2);\r\n            if (i === paginationRange) {\r\n                return totalPages;\r\n            } else if (i === 1) {\r\n                return i;\r\n            } else if (paginationRange < totalPages) {\r\n                if (totalPages - halfWay < currentPage) {\r\n                    return totalPages - paginationRange + i;\r\n                } else if (halfWay < currentPage) {\r\n                    return currentPage - halfWay + i;\r\n                } else {\r\n                    return i;\r\n                }\r\n            } else {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This filter slices the collection into pages based on the current page number and number of items per page.\r\n     * @param paginationService\r\n     * @returns {Function}\r\n     */\r\n    function itemsPerPageFilter(paginationService) {\r\n\r\n        return function(collection, itemsPerPage, paginationId) {\r\n            if (typeof (paginationId) === \'undefined\') {\r\n                paginationId = DEFAULT_ID;\r\n            }\r\n            if (!paginationService.isRegistered(paginationId)) {\r\n                throw \'pagination directive: the itemsPerPage id argument (id: \' + paginationId + \') does not match a registered pagination-id.\';\r\n            }\r\n            var end;\r\n            var start;\r\n            if (angular.isObject(collection)) {\r\n                itemsPerPage = parseInt(itemsPerPage) || 9999999999;\r\n                if (paginationService.isAsyncMode(paginationId)) {\r\n                    start = 0;\r\n                } else {\r\n                    start = (paginationService.getCurrentPage(paginationId) - 1) * itemsPerPage;\r\n                }\r\n                end = start + itemsPerPage;\r\n                paginationService.setItemsPerPage(paginationId, itemsPerPage);\r\n\r\n                if (collection instanceof Array) {\r\n                    // the array just needs to be sliced\r\n                    return collection.slice(start, end);\r\n                } else {\r\n                    // in the case of an object, we need to get an array of keys, slice that, then map back to\r\n                    // the original object.\r\n                    var slicedObject = {};\r\n                    angular.forEach(keys(collection).slice(start, end), function(key) {\r\n                        slicedObject[key] = collection[key];\r\n                    });\r\n                    return slicedObject;\r\n                }\r\n            } else {\r\n                return collection;\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Shim for the Object.keys() method which does not exist in IE < 9\r\n     * @param obj\r\n     * @returns {Array}\r\n     */\r\n    function keys(obj) {\r\n        if (!Object.keys) {\r\n            var objKeys = [];\r\n            for (var i in obj) {\r\n                if (obj.hasOwnProperty(i)) {\r\n                    objKeys.push(i);\r\n                }\r\n            }\r\n            return objKeys;\r\n        } else {\r\n            return Object.keys(obj);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This service allows the various parts of the module to communicate and stay in sync.\r\n     */\r\n    function paginationService() {\r\n\r\n        var instances = {};\r\n        var lastRegisteredInstance;\r\n\r\n        this.registerInstance = function(instanceId) {\r\n            if (typeof instances[instanceId] === \'undefined\') {\r\n                instances[instanceId] = {\r\n                    asyncMode: false\r\n                };\r\n                lastRegisteredInstance = instanceId;\r\n            }\r\n        };\r\n\r\n        this.isRegistered = function(instanceId) {\r\n            return (typeof instances[instanceId] !== \'undefined\');\r\n        };\r\n\r\n        this.getLastInstanceId = function() {\r\n            return lastRegisteredInstance;\r\n        };\r\n\r\n        this.setCurrentPageParser = function(instanceId, val, scope) {\r\n            instances[instanceId].currentPageParser = val;\r\n            instances[instanceId].context = scope;\r\n        };\r\n        this.setCurrentPage = function(instanceId, val) {\r\n            instances[instanceId].currentPageParser.assign(instances[instanceId].context, val);\r\n        };\r\n        this.getCurrentPage = function(instanceId) {\r\n            var parser = instances[instanceId].currentPageParser;\r\n            return parser ? parser(instances[instanceId].context) : 1;\r\n        };\r\n\r\n        this.setItemsPerPage = function(instanceId, val) {\r\n            instances[instanceId].itemsPerPage = val;\r\n        };\r\n        this.getItemsPerPage = function(instanceId) {\r\n            return instances[instanceId].itemsPerPage;\r\n        };\r\n\r\n        this.setCollectionLength = function(instanceId, val) {\r\n            instances[instanceId].collectionLength = val;\r\n        };\r\n        this.getCollectionLength = function(instanceId) {\r\n            return instances[instanceId].collectionLength;\r\n        };\r\n\r\n        this.setAsyncModeTrue = function(instanceId) {\r\n            instances[instanceId].asyncMode = true;\r\n        };\r\n\r\n        this.setAsyncModeFalse = function(instanceId) {\r\n            instances[instanceId].asyncMode = false;\r\n        };\r\n\r\n        this.isAsyncMode = function(instanceId) {\r\n            return instances[instanceId].asyncMode;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * This provider allows global configuration of the template path used by the dir-pagination-controls directive.\r\n     */\r\n    function paginationTemplateProvider() {\r\n\r\n        var templatePath = \'angularUtils.directives.dirPagination.template\';\r\n\r\n        this.setPath = function(path) {\r\n            templatePath = path;\r\n        };\r\n\r\n        this.$get = function() {\r\n            return {\r\n                getPath: function() {\r\n                    return templatePath;\r\n                }\r\n            };\r\n        };\r\n    }\r\n})();\r\n';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*angular-utils-pagination@0.10.1#index*/
define('angular-utils-pagination@0.10.1#index', function (require, exports, module) {
    require('./dirPagination');
    module.exports = 'angularUtils.directives.dirPagination';
});
/*mev-results-table@0.0.1#src/view/mevResultsTable.tpl.html!system-text@0.1.0#text*/
define('mev-results-table@0.0.1#src/view/mevResultsTable.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<ng-form id="filterForm" name="filterForm" class="filterForm">\n\t<table>\n\t\t<thead>\t\t\n\t\t\t<tr ng-if="pagination  || top ">\n\t\t\t\t<td colspan="{{headers.length}}">\n\t\t\t\t\t<div class="mev-results-table-toolbar">\n\t\t\t\t\t\t<div dir-pagination-controls ng-if="pagination && pagination.itemsPerPage"></div>\n\t\t\t\t\t\t<div ng-if="top"><ul class="pagination">\n\t\t\t\t\t\t\t\t<li><span>Top:</span></li>\n\t\t\t\t\t\t\t\t<li ng-class="{active: limit===top.current}" ng-repeat="limit in top.options">\n\t\t\t\t\t\t\t\t\t<a id="mev-top-{{limit}}" ng-click="vm.updateTop(limit)" >{{limit}}</a>\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class="mev-flex-push-right btn-group">\n\t\t\t\t\t\t\t<label class="btn">\n\t\t\t\t\t\t\t\t<a ng-click="vm.save()">\n\t\t\t\t\t\t\t\t\t<span class="glyphicon glyphicon-floppy-save" mev-glyph-alt="save"></span>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t</tr>\t\t\n\t\t   \t<tr>\t   \t\n\t\t\t<th ng-repeat="header in headers">\n\t\t\t\t<p ng-click="reorderTable(header)">{{header.name}}</p>\n\n\t\t\t      \n\t\t\t\t<div class="input-group" ng-hide="header.icon == \'none\'">\n\t\t\t\t\t<span class="input-group-addon" ng-show="header.icon === \'search\'">\n\t\t\t\t\t    <span class="glyphicon glyphicon-search"></span>\n\t\t\t\t\t</span>\n\t\t\t\t\t<span class="input-group-addon" ng-hide="header.icon===\'search\' || (header.icon | mevIsArray)">{{header.icon}}</span>\t\t\t\t\n\t\t\t\t\t<span class="input-group-addon" ng-show="header.icon | mevIsArray">\n\t\t\t\t\t\t<select ng-model="filters[header.field].op">\n\t\t\t\t\t\t\t<option ng-repeat="icon in header.icon track by $index">{{icon}}</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</span>\n\t\t\t\t\t<input class="form-control input-small" ng-keypress="vm.applyFilter($event)"\n\t\t\t\t\ttype="{{(header.min || header.max) ? \'number\' : \'text\'}}" min="{{header.min.toString()}}" max="{{header.max.toString()}}" step="{{header.step.toString()}}" \n\t\t\t\t\tng-model="filters[header.field].value"></input>\n\t\t\t\t</div>\n\t\t\t</th>\t\t\n\t\t\t</tr>\t\t\t\t\n\t\t</thead>\n\t\t<tbody >\n\t\t\t<tr dir-paginate="row in vm.filteredResults | itemsPerPage: pagination.itemsPerPage as renderedData track by $index ">\n\t\t\t\t<td ng-repeat="header in headers" ng-class="{\'text-nowrap\': header.nowrap}">\t\t\t\t\t\n\t\t\t\t\t<a ng-if="header.link" href="{{header.link(row[header.field])}}" target="new">{{row[header.field]}}</a>\n\t\t\t\t\t<a ng-if="header.click" href="#" ng-click="header.click(row[header.field], row)">{{row[header.field]}}</a>\n\t\t\t\t\t<input type="checkbox" ng-if="header.check" ng-model="row.isChecked" ng-change="selectRow(header.field, row, header.check)">\t\n\t\t\t\t\t<span ng-if="!header.link && !header.click" >{{row[header.field] | mevTextOrNumber:5:header }}</span>\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t<tr ng-if="vm.filteredResults.length==0">\n\t\t\t\t<td colspan="{{headers.length}}">\n\t\t\t\t\tNo data to display.\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot >\n\t\t\t<tr ng-if="pagination || top">\n\t\t\t\t<td colspan="{{headers.length}}">\t\t\t\t\n\t\t\t\t\t<dir-pagination-controls ng-if="pagination && pagination.itemsPerPage"></dir-pagination-controls>\t\t\t\t\t\n\t\t\t\t\t<div ng-if="top"><ul class="pagination">\n\t\t\t\t\t\t\t<li><span>Top:</span></li>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<li ng-class="{active: limit===top.current}" ng-repeat="limit in top.options">\n\t\t\t\t\t\t\t\t<a id="mev-top-{{limit}}" ng-click="vm.updateTop(limit)" >{{limit}}</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</div>\n\t\t\t\t</td>\n\t\t\t</tr>\t\t\n\t\t</tfoot>\n\t</table>\n</ng-form>\n';
});
/*papaparse@4.3.7#papaparse*/
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('papaparse@4.3.7#papaparse', [], factory);
    } else if (typeof module === 'object' && typeof exports !== 'undefined') {
        module.exports = factory();
    } else {
        root.Papa = factory();
    }
}(this, function () {
    'use strict';
    var global = function () {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global !== 'undefined') {
            return global;
        }
        return {};
    }();
    var IS_WORKER = !global.document && !!global.postMessage, IS_PAPA_WORKER = IS_WORKER && /(\?|&)papaworker(=|&|$)/.test(global.location.search), LOADED_SYNC = false, AUTO_SCRIPT_PATH;
    var workers = {}, workerIdCounter = 0;
    var Papa = {};
    Papa.parse = CsvToJson;
    Papa.unparse = JsonToCsv;
    Papa.RECORD_SEP = String.fromCharCode(30);
    Papa.UNIT_SEP = String.fromCharCode(31);
    Papa.BYTE_ORDER_MARK = '\uFEFF';
    Papa.BAD_DELIMITERS = [
        '\r',
        '\n',
        '"',
        Papa.BYTE_ORDER_MARK
    ];
    Papa.WORKERS_SUPPORTED = !IS_WORKER && !!global.Worker;
    Papa.SCRIPT_PATH = null;
    Papa.LocalChunkSize = 1024 * 1024 * 10;
    Papa.RemoteChunkSize = 1024 * 1024 * 5;
    Papa.DefaultDelimiter = ',';
    Papa.Parser = Parser;
    Papa.ParserHandle = ParserHandle;
    Papa.NetworkStreamer = NetworkStreamer;
    Papa.FileStreamer = FileStreamer;
    Papa.StringStreamer = StringStreamer;
    Papa.ReadableStreamStreamer = ReadableStreamStreamer;
    if (global.jQuery) {
        var $ = global.jQuery;
        $.fn.parse = function (options) {
            var config = options.config || {};
            var queue = [];
            this.each(function (idx) {
                var supported = $(this).prop('tagName').toUpperCase() === 'INPUT' && $(this).attr('type').toLowerCase() === 'file' && global.FileReader;
                if (!supported || !this.files || this.files.length === 0)
                    return true;
                for (var i = 0; i < this.files.length; i++) {
                    queue.push({
                        file: this.files[i],
                        inputElem: this,
                        instanceConfig: $.extend({}, config)
                    });
                }
            });
            parseNextFile();
            return this;
            function parseNextFile() {
                if (queue.length === 0) {
                    if (isFunction(options.complete))
                        options.complete();
                    return;
                }
                var f = queue[0];
                if (isFunction(options.before)) {
                    var returned = options.before(f.file, f.inputElem);
                    if (typeof returned === 'object') {
                        if (returned.action === 'abort') {
                            error('AbortError', f.file, f.inputElem, returned.reason);
                            return;
                        } else if (returned.action === 'skip') {
                            fileComplete();
                            return;
                        } else if (typeof returned.config === 'object')
                            f.instanceConfig = $.extend(f.instanceConfig, returned.config);
                    } else if (returned === 'skip') {
                        fileComplete();
                        return;
                    }
                }
                var userCompleteFunc = f.instanceConfig.complete;
                f.instanceConfig.complete = function (results) {
                    if (isFunction(userCompleteFunc))
                        userCompleteFunc(results, f.file, f.inputElem);
                    fileComplete();
                };
                Papa.parse(f.file, f.instanceConfig);
            }
            function error(name, file, elem, reason) {
                if (isFunction(options.error))
                    options.error({ name: name }, file, elem, reason);
            }
            function fileComplete() {
                queue.splice(0, 1);
                parseNextFile();
            }
        };
    }
    if (IS_PAPA_WORKER) {
        global.onmessage = workerThreadReceivedMessage;
    } else if (Papa.WORKERS_SUPPORTED) {
        AUTO_SCRIPT_PATH = getScriptPath();
        if (!document.body) {
            LOADED_SYNC = true;
        } else {
            document.addEventListener('DOMContentLoaded', function () {
                LOADED_SYNC = true;
            }, true);
        }
    }
    function CsvToJson(_input, _config) {
        _config = _config || {};
        var dynamicTyping = _config.dynamicTyping || false;
        if (isFunction(dynamicTyping)) {
            _config.dynamicTypingFunction = dynamicTyping;
            dynamicTyping = {};
        }
        _config.dynamicTyping = dynamicTyping;
        if (_config.worker && Papa.WORKERS_SUPPORTED) {
            var w = newWorker();
            w.userStep = _config.step;
            w.userChunk = _config.chunk;
            w.userComplete = _config.complete;
            w.userError = _config.error;
            _config.step = isFunction(_config.step);
            _config.chunk = isFunction(_config.chunk);
            _config.complete = isFunction(_config.complete);
            _config.error = isFunction(_config.error);
            delete _config.worker;
            w.postMessage({
                input: _input,
                config: _config,
                workerId: w.id
            });
            return;
        }
        var streamer = null;
        if (typeof _input === 'string') {
            if (_config.download)
                streamer = new NetworkStreamer(_config);
            else
                streamer = new StringStreamer(_config);
        } else if (_input.readable === true && isFunction(_input.read) && isFunction(_input.on)) {
            streamer = new ReadableStreamStreamer(_config);
        } else if (global.File && _input instanceof File || _input instanceof Object)
            streamer = new FileStreamer(_config);
        return streamer.stream(_input);
    }
    function JsonToCsv(_input, _config) {
        var _output = '';
        var _fields = [];
        var _quotes = false;
        var _writeHeader = true;
        var _delimiter = ',';
        var _newline = '\r\n';
        var _quoteChar = '"';
        unpackConfig();
        var quoteCharRegex = new RegExp(_quoteChar, 'g');
        if (typeof _input === 'string')
            _input = JSON.parse(_input);
        if (_input instanceof Array) {
            if (!_input.length || _input[0] instanceof Array)
                return serialize(null, _input);
            else if (typeof _input[0] === 'object')
                return serialize(objectKeys(_input[0]), _input);
        } else if (typeof _input === 'object') {
            if (typeof _input.data === 'string')
                _input.data = JSON.parse(_input.data);
            if (_input.data instanceof Array) {
                if (!_input.fields)
                    _input.fields = _input.meta && _input.meta.fields;
                if (!_input.fields)
                    _input.fields = _input.data[0] instanceof Array ? _input.fields : objectKeys(_input.data[0]);
                if (!(_input.data[0] instanceof Array) && typeof _input.data[0] !== 'object')
                    _input.data = [_input.data];
            }
            return serialize(_input.fields || [], _input.data || []);
        }
        throw 'exception: Unable to serialize unrecognized input';
        function unpackConfig() {
            if (typeof _config !== 'object')
                return;
            if (typeof _config.delimiter === 'string' && _config.delimiter.length === 1 && Papa.BAD_DELIMITERS.indexOf(_config.delimiter) === -1) {
                _delimiter = _config.delimiter;
            }
            if (typeof _config.quotes === 'boolean' || _config.quotes instanceof Array)
                _quotes = _config.quotes;
            if (typeof _config.newline === 'string')
                _newline = _config.newline;
            if (typeof _config.quoteChar === 'string')
                _quoteChar = _config.quoteChar;
            if (typeof _config.header === 'boolean')
                _writeHeader = _config.header;
        }
        function objectKeys(obj) {
            if (typeof obj !== 'object')
                return [];
            var keys = [];
            for (var key in obj)
                keys.push(key);
            return keys;
        }
        function serialize(fields, data) {
            var csv = '';
            if (typeof fields === 'string')
                fields = JSON.parse(fields);
            if (typeof data === 'string')
                data = JSON.parse(data);
            var hasHeader = fields instanceof Array && fields.length > 0;
            var dataKeyedByField = !(data[0] instanceof Array);
            if (hasHeader && _writeHeader) {
                for (var i = 0; i < fields.length; i++) {
                    if (i > 0)
                        csv += _delimiter;
                    csv += safe(fields[i], i);
                }
                if (data.length > 0)
                    csv += _newline;
            }
            for (var row = 0; row < data.length; row++) {
                var maxCol = hasHeader ? fields.length : data[row].length;
                for (var col = 0; col < maxCol; col++) {
                    if (col > 0)
                        csv += _delimiter;
                    var colIdx = hasHeader && dataKeyedByField ? fields[col] : col;
                    csv += safe(data[row][colIdx], col);
                }
                if (row < data.length - 1)
                    csv += _newline;
            }
            return csv;
        }
        function safe(str, col) {
            if (typeof str === 'undefined' || str === null)
                return '';
            str = str.toString().replace(quoteCharRegex, _quoteChar + _quoteChar);
            var needsQuotes = typeof _quotes === 'boolean' && _quotes || _quotes instanceof Array && _quotes[col] || hasAny(str, Papa.BAD_DELIMITERS) || str.indexOf(_delimiter) > -1 || str.charAt(0) === ' ' || str.charAt(str.length - 1) === ' ';
            return needsQuotes ? _quoteChar + str + _quoteChar : str;
        }
        function hasAny(str, substrings) {
            for (var i = 0; i < substrings.length; i++)
                if (str.indexOf(substrings[i]) > -1)
                    return true;
            return false;
        }
    }
    function ChunkStreamer(config) {
        this._handle = null;
        this._paused = false;
        this._finished = false;
        this._input = null;
        this._baseIndex = 0;
        this._partialLine = '';
        this._rowCount = 0;
        this._start = 0;
        this._nextChunk = null;
        this.isFirstChunk = true;
        this._completeResults = {
            data: [],
            errors: [],
            meta: {}
        };
        replaceConfig.call(this, config);
        this.parseChunk = function (chunk) {
            if (this.isFirstChunk && isFunction(this._config.beforeFirstChunk)) {
                var modifiedChunk = this._config.beforeFirstChunk(chunk);
                if (modifiedChunk !== undefined)
                    chunk = modifiedChunk;
            }
            this.isFirstChunk = false;
            var aggregate = this._partialLine + chunk;
            this._partialLine = '';
            var results = this._handle.parse(aggregate, this._baseIndex, !this._finished);
            if (this._handle.paused() || this._handle.aborted())
                return;
            var lastIndex = results.meta.cursor;
            if (!this._finished) {
                this._partialLine = aggregate.substring(lastIndex - this._baseIndex);
                this._baseIndex = lastIndex;
            }
            if (results && results.data)
                this._rowCount += results.data.length;
            var finishedIncludingPreview = this._finished || this._config.preview && this._rowCount >= this._config.preview;
            if (IS_PAPA_WORKER) {
                global.postMessage({
                    results: results,
                    workerId: Papa.WORKER_ID,
                    finished: finishedIncludingPreview
                });
            } else if (isFunction(this._config.chunk)) {
                this._config.chunk(results, this._handle);
                if (this._paused)
                    return;
                results = undefined;
                this._completeResults = undefined;
            }
            if (!this._config.step && !this._config.chunk) {
                this._completeResults.data = this._completeResults.data.concat(results.data);
                this._completeResults.errors = this._completeResults.errors.concat(results.errors);
                this._completeResults.meta = results.meta;
            }
            if (finishedIncludingPreview && isFunction(this._config.complete) && (!results || !results.meta.aborted))
                this._config.complete(this._completeResults, this._input);
            if (!finishedIncludingPreview && (!results || !results.meta.paused))
                this._nextChunk();
            return results;
        };
        this._sendError = function (error) {
            if (isFunction(this._config.error))
                this._config.error(error);
            else if (IS_PAPA_WORKER && this._config.error) {
                global.postMessage({
                    workerId: Papa.WORKER_ID,
                    error: error,
                    finished: false
                });
            }
        };
        function replaceConfig(config) {
            var configCopy = copy(config);
            configCopy.chunkSize = parseInt(configCopy.chunkSize);
            if (!config.step && !config.chunk)
                configCopy.chunkSize = null;
            this._handle = new ParserHandle(configCopy);
            this._handle.streamer = this;
            this._config = configCopy;
        }
    }
    function NetworkStreamer(config) {
        config = config || {};
        if (!config.chunkSize)
            config.chunkSize = Papa.RemoteChunkSize;
        ChunkStreamer.call(this, config);
        var xhr;
        if (IS_WORKER) {
            this._nextChunk = function () {
                this._readChunk();
                this._chunkLoaded();
            };
        } else {
            this._nextChunk = function () {
                this._readChunk();
            };
        }
        this.stream = function (url) {
            this._input = url;
            this._nextChunk();
        };
        this._readChunk = function () {
            if (this._finished) {
                this._chunkLoaded();
                return;
            }
            xhr = new XMLHttpRequest();
            if (this._config.withCredentials) {
                xhr.withCredentials = this._config.withCredentials;
            }
            if (!IS_WORKER) {
                xhr.onload = bindFunction(this._chunkLoaded, this);
                xhr.onerror = bindFunction(this._chunkError, this);
            }
            xhr.open('GET', this._input, !IS_WORKER);
            if (this._config.downloadRequestHeaders) {
                var headers = this._config.downloadRequestHeaders;
                for (var headerName in headers) {
                    xhr.setRequestHeader(headerName, headers[headerName]);
                }
            }
            if (this._config.chunkSize) {
                var end = this._start + this._config.chunkSize - 1;
                xhr.setRequestHeader('Range', 'bytes=' + this._start + '-' + end);
                xhr.setRequestHeader('If-None-Match', 'webkit-no-cache');
            }
            try {
                xhr.send();
            } catch (err) {
                this._chunkError(err.message);
            }
            if (IS_WORKER && xhr.status === 0)
                this._chunkError();
            else
                this._start += this._config.chunkSize;
        };
        this._chunkLoaded = function () {
            if (xhr.readyState != 4)
                return;
            if (xhr.status < 200 || xhr.status >= 400) {
                this._chunkError();
                return;
            }
            this._finished = !this._config.chunkSize || this._start > getFileSize(xhr);
            this.parseChunk(xhr.responseText);
        };
        this._chunkError = function (errorMessage) {
            var errorText = xhr.statusText || errorMessage;
            this._sendError(errorText);
        };
        function getFileSize(xhr) {
            var contentRange = xhr.getResponseHeader('Content-Range');
            if (contentRange === null) {
                return -1;
            }
            return parseInt(contentRange.substr(contentRange.lastIndexOf('/') + 1));
        }
    }
    NetworkStreamer.prototype = Object.create(ChunkStreamer.prototype);
    NetworkStreamer.prototype.constructor = NetworkStreamer;
    function FileStreamer(config) {
        config = config || {};
        if (!config.chunkSize)
            config.chunkSize = Papa.LocalChunkSize;
        ChunkStreamer.call(this, config);
        var reader, slice;
        var usingAsyncReader = typeof FileReader !== 'undefined';
        this.stream = function (file) {
            this._input = file;
            slice = file.slice || file.webkitSlice || file.mozSlice;
            if (usingAsyncReader) {
                reader = new FileReader();
                reader.onload = bindFunction(this._chunkLoaded, this);
                reader.onerror = bindFunction(this._chunkError, this);
            } else
                reader = new FileReaderSync();
            this._nextChunk();
        };
        this._nextChunk = function () {
            if (!this._finished && (!this._config.preview || this._rowCount < this._config.preview))
                this._readChunk();
        };
        this._readChunk = function () {
            var input = this._input;
            if (this._config.chunkSize) {
                var end = Math.min(this._start + this._config.chunkSize, this._input.size);
                input = slice.call(input, this._start, end);
            }
            var txt = reader.readAsText(input, this._config.encoding);
            if (!usingAsyncReader)
                this._chunkLoaded({ target: { result: txt } });
        };
        this._chunkLoaded = function (event) {
            this._start += this._config.chunkSize;
            this._finished = !this._config.chunkSize || this._start >= this._input.size;
            this.parseChunk(event.target.result);
        };
        this._chunkError = function () {
            this._sendError(reader.error.message);
        };
    }
    FileStreamer.prototype = Object.create(ChunkStreamer.prototype);
    FileStreamer.prototype.constructor = FileStreamer;
    function StringStreamer(config) {
        config = config || {};
        ChunkStreamer.call(this, config);
        var string;
        var remaining;
        this.stream = function (s) {
            string = s;
            remaining = s;
            return this._nextChunk();
        };
        this._nextChunk = function () {
            if (this._finished)
                return;
            var size = this._config.chunkSize;
            var chunk = size ? remaining.substr(0, size) : remaining;
            remaining = size ? remaining.substr(size) : '';
            this._finished = !remaining;
            return this.parseChunk(chunk);
        };
    }
    StringStreamer.prototype = Object.create(StringStreamer.prototype);
    StringStreamer.prototype.constructor = StringStreamer;
    function ReadableStreamStreamer(config) {
        config = config || {};
        ChunkStreamer.call(this, config);
        var queue = [];
        var parseOnData = true;
        this.stream = function (stream) {
            this._input = stream;
            this._input.on('data', this._streamData);
            this._input.on('end', this._streamEnd);
            this._input.on('error', this._streamError);
        };
        this._nextChunk = function () {
            if (queue.length) {
                this.parseChunk(queue.shift());
            } else {
                parseOnData = true;
            }
        };
        this._streamData = bindFunction(function (chunk) {
            try {
                queue.push(typeof chunk === 'string' ? chunk : chunk.toString(this._config.encoding));
                if (parseOnData) {
                    parseOnData = false;
                    this.parseChunk(queue.shift());
                }
            } catch (error) {
                this._streamError(error);
            }
        }, this);
        this._streamError = bindFunction(function (error) {
            this._streamCleanUp();
            this._sendError(error.message);
        }, this);
        this._streamEnd = bindFunction(function () {
            this._streamCleanUp();
            this._finished = true;
            this._streamData('');
        }, this);
        this._streamCleanUp = bindFunction(function () {
            this._input.removeListener('data', this._streamData);
            this._input.removeListener('end', this._streamEnd);
            this._input.removeListener('error', this._streamError);
        }, this);
    }
    ReadableStreamStreamer.prototype = Object.create(ChunkStreamer.prototype);
    ReadableStreamStreamer.prototype.constructor = ReadableStreamStreamer;
    function ParserHandle(_config) {
        var FLOAT = /^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i;
        var self = this;
        var _stepCounter = 0;
        var _input;
        var _parser;
        var _paused = false;
        var _aborted = false;
        var _delimiterError;
        var _fields = [];
        var _results = {
            data: [],
            errors: [],
            meta: {}
        };
        if (isFunction(_config.step)) {
            var userStep = _config.step;
            _config.step = function (results) {
                _results = results;
                if (needsHeaderRow())
                    processResults();
                else {
                    processResults();
                    if (_results.data.length === 0)
                        return;
                    _stepCounter += results.data.length;
                    if (_config.preview && _stepCounter > _config.preview)
                        _parser.abort();
                    else
                        userStep(_results, self);
                }
            };
        }
        this.parse = function (input, baseIndex, ignoreLastRow) {
            if (!_config.newline)
                _config.newline = guessLineEndings(input);
            _delimiterError = false;
            if (!_config.delimiter) {
                var delimGuess = guessDelimiter(input, _config.newline, _config.skipEmptyLines);
                if (delimGuess.successful)
                    _config.delimiter = delimGuess.bestDelimiter;
                else {
                    _delimiterError = true;
                    _config.delimiter = Papa.DefaultDelimiter;
                }
                _results.meta.delimiter = _config.delimiter;
            } else if (isFunction(_config.delimiter)) {
                _config.delimiter = _config.delimiter(input);
                _results.meta.delimiter = _config.delimiter;
            }
            var parserConfig = copy(_config);
            if (_config.preview && _config.header)
                parserConfig.preview++;
            _input = input;
            _parser = new Parser(parserConfig);
            _results = _parser.parse(_input, baseIndex, ignoreLastRow);
            processResults();
            return _paused ? { meta: { paused: true } } : _results || { meta: { paused: false } };
        };
        this.paused = function () {
            return _paused;
        };
        this.pause = function () {
            _paused = true;
            _parser.abort();
            _input = _input.substr(_parser.getCharIndex());
        };
        this.resume = function () {
            _paused = false;
            self.streamer.parseChunk(_input);
        };
        this.aborted = function () {
            return _aborted;
        };
        this.abort = function () {
            _aborted = true;
            _parser.abort();
            _results.meta.aborted = true;
            if (isFunction(_config.complete))
                _config.complete(_results);
            _input = '';
        };
        function processResults() {
            if (_results && _delimiterError) {
                addError('Delimiter', 'UndetectableDelimiter', 'Unable to auto-detect delimiting character; defaulted to \'' + Papa.DefaultDelimiter + '\'');
                _delimiterError = false;
            }
            if (_config.skipEmptyLines) {
                for (var i = 0; i < _results.data.length; i++)
                    if (_results.data[i].length === 1 && _results.data[i][0] === '')
                        _results.data.splice(i--, 1);
            }
            if (needsHeaderRow())
                fillHeaderFields();
            return applyHeaderAndDynamicTyping();
        }
        function needsHeaderRow() {
            return _config.header && _fields.length === 0;
        }
        function fillHeaderFields() {
            if (!_results)
                return;
            for (var i = 0; needsHeaderRow() && i < _results.data.length; i++)
                for (var j = 0; j < _results.data[i].length; j++)
                    _fields.push(_results.data[i][j]);
            _results.data.splice(0, 1);
        }
        function shouldApplyDynamicTyping(field) {
            if (_config.dynamicTypingFunction && _config.dynamicTyping[field] === undefined) {
                _config.dynamicTyping[field] = _config.dynamicTypingFunction(field);
            }
            return (_config.dynamicTyping[field] || _config.dynamicTyping) === true;
        }
        function parseDynamic(field, value) {
            if (shouldApplyDynamicTyping(field)) {
                if (value === 'true' || value === 'TRUE')
                    return true;
                else if (value === 'false' || value === 'FALSE')
                    return false;
                else
                    return tryParseFloat(value);
            }
            return value;
        }
        function applyHeaderAndDynamicTyping() {
            if (!_results || !_config.header && !_config.dynamicTyping)
                return _results;
            for (var i = 0; i < _results.data.length; i++) {
                var row = _config.header ? {} : [];
                for (var j = 0; j < _results.data[i].length; j++) {
                    var field = j;
                    var value = _results.data[i][j];
                    if (_config.header)
                        field = j >= _fields.length ? '__parsed_extra' : _fields[j];
                    value = parseDynamic(field, value);
                    if (field === '__parsed_extra') {
                        row[field] = row[field] || [];
                        row[field].push(value);
                    } else
                        row[field] = value;
                }
                _results.data[i] = row;
                if (_config.header) {
                    if (j > _fields.length)
                        addError('FieldMismatch', 'TooManyFields', 'Too many fields: expected ' + _fields.length + ' fields but parsed ' + j, i);
                    else if (j < _fields.length)
                        addError('FieldMismatch', 'TooFewFields', 'Too few fields: expected ' + _fields.length + ' fields but parsed ' + j, i);
                }
            }
            if (_config.header && _results.meta)
                _results.meta.fields = _fields;
            return _results;
        }
        function guessDelimiter(input, newline, skipEmptyLines) {
            var delimChoices = [
                ',',
                '\t',
                '|',
                ';',
                Papa.RECORD_SEP,
                Papa.UNIT_SEP
            ];
            var bestDelim, bestDelta, fieldCountPrevRow;
            for (var i = 0; i < delimChoices.length; i++) {
                var delim = delimChoices[i];
                var delta = 0, avgFieldCount = 0, emptyLinesCount = 0;
                fieldCountPrevRow = undefined;
                var preview = new Parser({
                    delimiter: delim,
                    newline: newline,
                    preview: 10
                }).parse(input);
                for (var j = 0; j < preview.data.length; j++) {
                    if (skipEmptyLines && preview.data[j].length === 1 && preview.data[j][0].length === 0) {
                        emptyLinesCount++;
                        continue;
                    }
                    var fieldCount = preview.data[j].length;
                    avgFieldCount += fieldCount;
                    if (typeof fieldCountPrevRow === 'undefined') {
                        fieldCountPrevRow = fieldCount;
                        continue;
                    } else if (fieldCount > 1) {
                        delta += Math.abs(fieldCount - fieldCountPrevRow);
                        fieldCountPrevRow = fieldCount;
                    }
                }
                if (preview.data.length > 0)
                    avgFieldCount /= preview.data.length - emptyLinesCount;
                if ((typeof bestDelta === 'undefined' || delta < bestDelta) && avgFieldCount > 1.99) {
                    bestDelta = delta;
                    bestDelim = delim;
                }
            }
            _config.delimiter = bestDelim;
            return {
                successful: !!bestDelim,
                bestDelimiter: bestDelim
            };
        }
        function guessLineEndings(input) {
            input = input.substr(0, 1024 * 1024);
            var r = input.split('\r');
            var n = input.split('\n');
            var nAppearsFirst = n.length > 1 && n[0].length < r[0].length;
            if (r.length === 1 || nAppearsFirst)
                return '\n';
            var numWithN = 0;
            for (var i = 0; i < r.length; i++) {
                if (r[i][0] === '\n')
                    numWithN++;
            }
            return numWithN >= r.length / 2 ? '\r\n' : '\r';
        }
        function tryParseFloat(val) {
            var isNumber = FLOAT.test(val);
            return isNumber ? parseFloat(val) : val;
        }
        function addError(type, code, msg, row) {
            _results.errors.push({
                type: type,
                code: code,
                message: msg,
                row: row
            });
        }
    }
    function Parser(config) {
        config = config || {};
        var delim = config.delimiter;
        var newline = config.newline;
        var comments = config.comments;
        var step = config.step;
        var preview = config.preview;
        var fastMode = config.fastMode;
        if (config.quoteChar === undefined) {
            var quoteChar = '"';
        } else {
            var quoteChar = config.quoteChar;
        }
        if (typeof delim !== 'string' || Papa.BAD_DELIMITERS.indexOf(delim) > -1)
            delim = ',';
        if (comments === delim)
            throw 'Comment character same as delimiter';
        else if (comments === true)
            comments = '#';
        else if (typeof comments !== 'string' || Papa.BAD_DELIMITERS.indexOf(comments) > -1)
            comments = false;
        if (newline != '\n' && newline != '\r' && newline != '\r\n')
            newline = '\n';
        var cursor = 0;
        var aborted = false;
        this.parse = function (input, baseIndex, ignoreLastRow) {
            if (typeof input !== 'string')
                throw 'Input must be a string';
            var inputLen = input.length, delimLen = delim.length, newlineLen = newline.length, commentsLen = comments.length;
            var stepIsFunction = isFunction(step);
            cursor = 0;
            var data = [], errors = [], row = [], lastCursor = 0;
            if (!input)
                return returnable();
            if (fastMode || fastMode !== false && input.indexOf(quoteChar) === -1) {
                var rows = input.split(newline);
                for (var i = 0; i < rows.length; i++) {
                    var row = rows[i];
                    cursor += row.length;
                    if (i !== rows.length - 1)
                        cursor += newline.length;
                    else if (ignoreLastRow)
                        return returnable();
                    if (comments && row.substr(0, commentsLen) === comments)
                        continue;
                    if (stepIsFunction) {
                        data = [];
                        pushRow(row.split(delim));
                        doStep();
                        if (aborted)
                            return returnable();
                    } else
                        pushRow(row.split(delim));
                    if (preview && i >= preview) {
                        data = data.slice(0, preview);
                        return returnable(true);
                    }
                }
                return returnable();
            }
            var nextDelim = input.indexOf(delim, cursor);
            var nextNewline = input.indexOf(newline, cursor);
            var quoteCharRegex = new RegExp(quoteChar + quoteChar, 'g');
            for (;;) {
                if (input[cursor] === quoteChar) {
                    var quoteSearch = cursor;
                    cursor++;
                    for (;;) {
                        var quoteSearch = input.indexOf(quoteChar, quoteSearch + 1);
                        if (quoteSearch === -1) {
                            if (!ignoreLastRow) {
                                errors.push({
                                    type: 'Quotes',
                                    code: 'MissingQuotes',
                                    message: 'Quoted field unterminated',
                                    row: data.length,
                                    index: cursor
                                });
                            }
                            return finish();
                        }
                        if (quoteSearch === inputLen - 1) {
                            var value = input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar);
                            return finish(value);
                        }
                        if (input[quoteSearch + 1] === quoteChar) {
                            quoteSearch++;
                            continue;
                        }
                        var spacesBetweenQuoteAndDelimiter = extraSpaces(nextDelim);
                        if (input[quoteSearch + 1 + spacesBetweenQuoteAndDelimiter] === delim) {
                            row.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));
                            cursor = quoteSearch + 1 + spacesBetweenQuoteAndDelimiter + delimLen;
                            nextDelim = input.indexOf(delim, cursor);
                            nextNewline = input.indexOf(newline, cursor);
                            break;
                        }
                        var spacesBetweenQuoteAndNewLine = extraSpaces(nextNewline);
                        if (input.substr(quoteSearch + 1 + spacesBetweenQuoteAndNewLine, newlineLen) === newline) {
                            row.push(input.substring(cursor, quoteSearch).replace(quoteCharRegex, quoteChar));
                            saveRow(quoteSearch + 1 + spacesBetweenQuoteAndNewLine + newlineLen);
                            nextDelim = input.indexOf(delim, cursor);
                            if (stepIsFunction) {
                                doStep();
                                if (aborted)
                                    return returnable();
                            }
                            if (preview && data.length >= preview)
                                return returnable(true);
                            break;
                        }
                        errors.push({
                            type: 'Quotes',
                            code: 'InvalidQuotes',
                            message: 'Trailing quote on quoted field is malformed',
                            row: data.length,
                            index: cursor
                        });
                        quoteSearch++;
                        continue;
                    }
                    continue;
                }
                if (comments && row.length === 0 && input.substr(cursor, commentsLen) === comments) {
                    if (nextNewline === -1)
                        return returnable();
                    cursor = nextNewline + newlineLen;
                    nextNewline = input.indexOf(newline, cursor);
                    nextDelim = input.indexOf(delim, cursor);
                    continue;
                }
                if (nextDelim !== -1 && (nextDelim < nextNewline || nextNewline === -1)) {
                    row.push(input.substring(cursor, nextDelim));
                    cursor = nextDelim + delimLen;
                    nextDelim = input.indexOf(delim, cursor);
                    continue;
                }
                if (nextNewline !== -1) {
                    row.push(input.substring(cursor, nextNewline));
                    saveRow(nextNewline + newlineLen);
                    if (stepIsFunction) {
                        doStep();
                        if (aborted)
                            return returnable();
                    }
                    if (preview && data.length >= preview)
                        return returnable(true);
                    continue;
                }
                break;
            }
            return finish();
            function pushRow(row) {
                data.push(row);
                lastCursor = cursor;
            }
            function extraSpaces(index) {
                var spaceLength = 0;
                if (index !== -1) {
                    var textBetweenClosingQuoteAndIndex = input.substring(quoteSearch + 1, index);
                    if (textBetweenClosingQuoteAndIndex && textBetweenClosingQuoteAndIndex.trim() == '') {
                        spaceLength = textBetweenClosingQuoteAndIndex.length;
                    }
                }
                return spaceLength;
            }
            function finish(value) {
                if (ignoreLastRow)
                    return returnable();
                if (typeof value === 'undefined')
                    value = input.substr(cursor);
                row.push(value);
                cursor = inputLen;
                pushRow(row);
                if (stepIsFunction)
                    doStep();
                return returnable();
            }
            function saveRow(newCursor) {
                cursor = newCursor;
                pushRow(row);
                row = [];
                nextNewline = input.indexOf(newline, cursor);
            }
            function returnable(stopped) {
                return {
                    data: data,
                    errors: errors,
                    meta: {
                        delimiter: delim,
                        linebreak: newline,
                        aborted: aborted,
                        truncated: !!stopped,
                        cursor: lastCursor + (baseIndex || 0)
                    }
                };
            }
            function doStep() {
                step(returnable());
                data = [], errors = [];
            }
        };
        this.abort = function () {
            aborted = true;
        };
        this.getCharIndex = function () {
            return cursor;
        };
    }
    function getScriptPath() {
        var scripts = document.getElementsByTagName('script');
        return scripts.length ? scripts[scripts.length - 1].src : '';
    }
    function newWorker() {
        if (!Papa.WORKERS_SUPPORTED)
            return false;
        if (!LOADED_SYNC && Papa.SCRIPT_PATH === null)
            throw new Error('Script path cannot be determined automatically when Papa Parse is loaded asynchronously. ' + 'You need to set Papa.SCRIPT_PATH manually.');
        var workerUrl = Papa.SCRIPT_PATH || AUTO_SCRIPT_PATH;
        workerUrl += (workerUrl.indexOf('?') !== -1 ? '&' : '?') + 'papaworker';
        var w = new global.Worker(workerUrl);
        w.onmessage = mainThreadReceivedMessage;
        w.id = workerIdCounter++;
        workers[w.id] = w;
        return w;
    }
    function mainThreadReceivedMessage(e) {
        var msg = e.data;
        var worker = workers[msg.workerId];
        var aborted = false;
        if (msg.error)
            worker.userError(msg.error, msg.file);
        else if (msg.results && msg.results.data) {
            var abort = function () {
                aborted = true;
                completeWorker(msg.workerId, {
                    data: [],
                    errors: [],
                    meta: { aborted: true }
                });
            };
            var handle = {
                abort: abort,
                pause: notImplemented,
                resume: notImplemented
            };
            if (isFunction(worker.userStep)) {
                for (var i = 0; i < msg.results.data.length; i++) {
                    worker.userStep({
                        data: [msg.results.data[i]],
                        errors: msg.results.errors,
                        meta: msg.results.meta
                    }, handle);
                    if (aborted)
                        break;
                }
                delete msg.results;
            } else if (isFunction(worker.userChunk)) {
                worker.userChunk(msg.results, handle, msg.file);
                delete msg.results;
            }
        }
        if (msg.finished && !aborted)
            completeWorker(msg.workerId, msg.results);
    }
    function completeWorker(workerId, results) {
        var worker = workers[workerId];
        if (isFunction(worker.userComplete))
            worker.userComplete(results);
        worker.terminate();
        delete workers[workerId];
    }
    function notImplemented() {
        throw 'Not implemented.';
    }
    function workerThreadReceivedMessage(e) {
        var msg = e.data;
        if (typeof Papa.WORKER_ID === 'undefined' && msg)
            Papa.WORKER_ID = msg.workerId;
        if (typeof msg.input === 'string') {
            global.postMessage({
                workerId: Papa.WORKER_ID,
                results: Papa.parse(msg.input, msg.config),
                finished: true
            });
        } else if (global.File && msg.input instanceof File || msg.input instanceof Object) {
            var results = Papa.parse(msg.input, msg.config);
            if (results)
                global.postMessage({
                    workerId: Papa.WORKER_ID,
                    results: results,
                    finished: true
                });
        }
    }
    function copy(obj) {
        if (typeof obj !== 'object')
            return obj;
        var cpy = obj instanceof Array ? [] : {};
        for (var key in obj)
            cpy[key] = copy(obj[key]);
        return cpy;
    }
    function bindFunction(f, self) {
        return function () {
            f.apply(self, arguments);
        };
    }
    function isFunction(func) {
        return typeof func === 'function';
    }
    return Papa;
}));
/*mev-results-table@0.0.1#src/view/mevResultsTableDirective*/
define('mev-results-table@0.0.1#src/view/mevResultsTableDirective', [
    'mui',
    'lodash',
    './mevResultsTable.tpl.html',
    'papaparse'
], function (ng, _, template, papaparse) {
    'use strict';
    function mevResultsTableDirective(mevResultsTableDefaults, mevResultsTableFilter, $timeout) {
        return {
            restrict: 'E',
            scope: {
                id: '=',
                data: '=data',
                headers: '=headers',
                filters: '=?filters',
                ordering: '@',
                filterCallback: '&onFilter',
                onPaged: '&',
                onRowSelected: '&',
                selectedRows: '=?',
                top: '=mevTop',
                pagination: '=?mevPagination',
                saveAs: '=mevSaveAs',
                outFilteredResults: '=?mevOutFilteredResults'
            },
            template: template,
            controller: [
                '$scope',
                function (scope) {
                    if (!scope.top && !scope.pagination)
                        scope.pagination = { itemsPerPage: 20 };
                }
            ],
            link: function (scope, elem, attrs) {
                function getOpFromHeader(header) {
                    if (header.icon === 'search')
                        return '~=';
                    if (ng.isArray(header.icon))
                        return header.icon[0];
                    else
                        return header.icon;
                }
                function doFilter() {
                    console.debug('applyFilter', scope.filters, scope.filterForm);
                    Object.keys(scope.filters).map(function (key) {
                        var filter = scope.filters[key];
                        if (filter.max && !filter.value || filter.value > filter.max)
                            filter.value = filter.max;
                    });
                    scope.vm.filteredResults = mevResultsTableFilter(scope.data, scope.filters, scope.top);
                    scope.filterForm.$setPristine();
                    notifyResultChange();
                }
                function notifyResultChange() {
                    scope.$emit('ui:resultsTable:filteredResults', scope.vm.filteredResults);
                    if (scope.filterCallback)
                        scope.filterCallback({ filteredResults: scope.vm.filteredResults });
                    if (scope.outFilteredResults) {
                        scope.outFilteredResults.length = 0;
                        scope.vm.filteredResults.map(function (item) {
                            scope.outFilteredResults.push(item);
                        });
                    }
                }
                scope.$watch('renderedData', function (newval, oldval) {
                    if (newval) {
                        console.debug('resultsTable watchCollection', newval);
                        scope.$emit('ui:resultsTable:pageChanged', newval);
                        if (scope.onPaged)
                            scope.onPaged({ pageResults: newval });
                    }
                });
                if (!scope.filters) {
                    scope.filters = {};
                    scope.headers.map(function (header) {
                        if (header.icon && header.icon != 'none') {
                            scope.filters[header.field] = {
                                field: header.field,
                                value: header['default'],
                                op: header.op || getOpFromHeader(header),
                                max: header.max
                            };
                        }
                    });
                }
                scope.vm = {};
                doFilter();
                scope.vm.applyFilter = function ($event) {
                    if ($event.which === 13) {
                        doFilter();
                    }
                };
                scope.vm.updateTop = function (limit) {
                    scope.top.current = limit;
                    doFilter();
                };
                var ctr = -1;
                scope.tableOrdering = attrs.ordering || mevResultsTableDefaults.getOrdering();
                console.debug('ordering', attrs.ordering, mevResultsTableDefaults.getOrdering(), scope.tableOrdering);
                scope.reorderTable = function (header) {
                    ctr = ctr * -1;
                    if (ctr == 1) {
                        scope.tableOrdering = header.field;
                    } else {
                        scope.tableOrdering = '-' + header.field;
                    }
                    scope.vm.filteredResults.sort(function (a, b) {
                        if (a[header.field] > b[header.field]) {
                            return 1 * ctr;
                        }
                        if (a[header.field] < b[header.field]) {
                            return -1 * ctr;
                        }
                        return 0;
                    });
                    notifyResultChange();
                };
                scope.selectedRows = {};
                scope.selectRow = function (field, row, callback) {
                    var value = row[field];
                    if (row.isChecked)
                        scope.selectedRows[value] = row;
                    else
                        delete scope.selectedRows[value];
                    callback(value, row, row.isChecked);
                };
                scope.vm.save = function () {
                    var tsv = papaparse.unparse({
                        fields: scope.headers.map(function (header) {
                            return header.field;
                        }),
                        data: this.filteredResults
                    }, {
                        quotes: false,
                        delimiter: '\t',
                        newline: '\r\n'
                    });
                    console.debug('tsv', tsv);
                    var blob = new Blob([tsv], { type: 'text/tsv;charset=utf-8;' });
                    var exportFilename = (scope.saveAs ? scope.saveAs.name : undefined) || 'download.tsv';
                    if (!_.endsWith(exportFilename, '.tsv'))
                        exportFilename += '.tsv';
                    if (navigator.msSaveBlob) {
                        navigator.msSaveBlob(blob, exportFilename);
                    } else {
                        var link = document.createElement('a');
                        link.href = window.URL.createObjectURL(blob);
                        link.setAttribute('download', exportFilename);
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                }.bind(scope.vm);
            }
        };
    }
    mevResultsTableDirective.$inject = [
        'mevResultsTableDefaults',
        'mevResultsTableFilter',
        '$timeout'
    ];
    mevResultsTableDirective.$name = 'mevResultsTableDirective';
    return mevResultsTableDirective;
});
/*mev-results-table@0.0.1#src/view/mevResultsTableDefaults*/
'use strict';
define('mev-results-table@0.0.1#src/view/mevResultsTableDefaults', [], function () {
    function mevResultsTableDefaults() {
        var defaultOrdering;
        this.setOrdering = function (ordering) {
            console.debug('set ordering', ordering);
            defaultOrdering = ordering;
        };
        this.$get = function () {
            return {
                getOrdering: function () {
                    return defaultOrdering;
                }
            };
        };
    }
    mevResultsTableDefaults.$inject = [];
    mevResultsTableDefaults.$name = 'mevResultsTableDefaults';
    mevResultsTableDefaults.$provider = 'provider';
    return mevResultsTableDefaults;
});
/*mev-results-table@0.0.1#src/view/mevResultsTableFilter*/
define('mev-results-table@0.0.1#src/view/mevResultsTableFilter', [], function () {
    'use strict';
    function mevResultsTableFilter($filter, compare) {
        return function (array, filterOptions, top) {
            var filteredArray = array;
            if (!filterOptions)
                return array;
            var filteredColumn = Object.keys(filterOptions);
            for (var filteredColumnIndex in filteredColumn) {
                var key = filteredColumn[filteredColumnIndex];
                var comparator = compare().op(filterOptions[key]['op']).key(key).bound(filterOptions[key]['value']);
                if (filterOptions[key]['op'] == '>=' | filterOptions[key]['op'] == '<=') {
                    comparator.transformer(parseFloat);
                }
                if (filterOptions[key]['op'] == '~=') {
                    comparator.transformer(String.prototype.toLowerCase);
                }
                filteredArray = $filter('filter')(filteredArray, comparator);
            }
            if (top && top.current)
                filteredArray = $filter('limitTo')(filteredArray, top.current);
            return filteredArray;
        };
    }
    mevResultsTableFilter.$inject = [
        '$filter',
        'mevResultsTableCompare'
    ];
    mevResultsTableFilter.$name = 'mevResultsTable';
    mevResultsTableFilter.$provider = 'filter';
    return mevResultsTableFilter;
});
/*mev-results-table@0.0.1#src/view/mevResultsTableCompareFactory*/
define('mev-results-table@0.0.1#src/view/mevResultsTableCompareFactory', [], function () {
    function mevResultsTableCompareFactory() {
        return function (defaults) {
            var bound = defaults ? defaults.bound : undefined;
            var key = defaults ? defaults.key : undefined;
            var transformer = function (input) {
                return input;
            };
            var op = defaults ? defaults.op : undefined;
            var exports = function (actual) {
                if (key) {
                    if (op == '>=') {
                        return actual[key] && bound ? transformer(actual[key]) >= transformer(bound) : true;
                    } else if (op == '<=') {
                        return actual[key] && bound ? transformer(actual[key]) <= transformer(bound) : true;
                    } else if (op == '~=') {
                        return actual[key] && bound ? transformer.call(actual[key]).indexOf(transformer.call(bound)) > -1 : true;
                    }
                    return actual[key] && bound ? transformer(actual[key]) == transformer(bound) : true;
                }
                if (op == '>=') {
                    return actual && bound ? transformer(actual) >= transformer(bound) : true;
                } else if (op == '<=') {
                    return actual && bound ? transformer(actual) <= transformer(bound) : true;
                } else if (op == '~=') {
                    return actual && bound ? transformer(actual).indexOf(transformer(bound)) > -1 : true;
                }
                return actual && bound ? transformer(actual) == transformer(bound) : true;
            };
            exports.bound = function (arg) {
                var self = this;
                if (arguments.length > 0) {
                    bound = arg;
                    return self;
                }
                return bound;
            };
            exports.key = function (arg) {
                var self = this;
                if (arguments.length > 0) {
                    key = arg;
                    return self;
                }
                return key;
            };
            exports.op = function (arg) {
                var self = this;
                if (arguments.length > 0) {
                    op = arg;
                    return self;
                }
                return op;
            };
            exports.transformer = function (arg) {
                var self = this;
                if (arguments.length > 0) {
                    transformer = arg;
                    return self;
                }
                return transformer;
            };
            return exports;
        };
    }
    mevResultsTableCompareFactory.$inject = [];
    mevResultsTableCompareFactory.$name = 'mevResultsTableCompare';
    mevResultsTableCompareFactory.$provider = 'factory';
    return mevResultsTableCompareFactory;
});
/*mev-results-table@0.0.1#src/view/textOrNumberFilter*/
define('mev-results-table@0.0.1#src/view/textOrNumberFilter', [], function ($filter) {
    'use strict';
    function mevTextOrNumber($filter) {
        return function (input, fractionSize, header) {
            if (isNaN(input)) {
                return input;
            } else {
                if (header && header.datatype === 'integer')
                    fractionSize = 0;
                if (Math.abs(input) > 1000)
                    return Number.parseFloat(input).toExponential(fractionSize);
                else if (Math.abs(input) < 0.001 && input !== 0)
                    return Number.parseFloat(input).toExponential(fractionSize);
                else
                    return $filter('number')(input, fractionSize);
            }
        };
    }
    mevTextOrNumber.$inject = ['$filter'];
    mevTextOrNumber.$name = 'mevTextOrNumber';
    mevTextOrNumber.$provider = 'filter';
    return mevTextOrNumber;
});
/*mev-results-table@0.0.1#src/mev-results-table*/
define('mev-results-table@0.0.1#src/mev-results-table', [
    'mui',
    'angular-utils-pagination',
    'mev-glyph-alt',
    './style/mevResultsTable.less',
    './view/mevResultsTableDirective',
    './view/mevResultsTableDefaults',
    './view/mevResultsTableFilter',
    './view/mevResultsTableDefaults',
    './view/mevResultsTableCompareFactory',
    './view/textOrNumberFilter'
], function (ng) {
    return ng.module('mevResultsTableModule', arguments, arguments).filter('mevIsArray', function () {
        return function (input) {
            return ng.isArray(input);
        };
    });
});
/*mev-hbarchart@0.0.1#src/main/view/mevHBarchart.tpl.html!system-text@0.1.0#text*/
define('mev-hbarchart@0.0.1#src/main/view/mevHBarchart.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="chart">\t\n\t<div class="body">\n\t\t<nvd3 options=\'options\' data=\'data\' api=\'api\'></nvd3>\n\t</div>\n\t<div class="controls">\t\t\t\t\n\t\t<div mev-chart-color-legend="config.z" class="legend" id="zLegend"></div>\n\t</div>\t\n\t<div class="footer">\t\t\n\t</div>\n</div>';
});
/*mev-hbarchart@0.0.1#src/main/view/mevHBarchartDirective*/
define('mev-hbarchart@0.0.1#src/main/view/mevHBarchartDirective', [
    'lodash',
    './mevHBarchart.tpl.html'
], function (_, template) {
    'use strict';
    var directive = function mevEnrichmentBarchartDirective() {
        return {
            restrict: 'AEC',
            scope: { config: '=mevHbarchart' },
            template: template,
            controller: [
                '$scope',
                'mevBarchartNvd3Adaptor',
                'mevTooltipContent',
                'mevChartConfig',
                'mevChartDimConfig',
                'mevChartColorDimConfig',
                function (scope, mevBarchartNvd3Adaptor, mevTooltipContent, mevChartConfig, mevChartDimConfig, mevChartColorDimConfig) {
                    var input = scope.config.data;
                    scope.config.z.display = 'color';
                    mevChartConfig(scope.config, {
                        onUpdateColor: function () {
                            scope.api.refresh();
                        }
                    });
                    var xConfig = scope.config.x;
                    var yConfig = scope.config.y;
                    var zConfig = scope.config.z;
                    scope.data = mevBarchartNvd3Adaptor(scope.config, input);
                    scope.options = {
                        chart: {
                            type: 'multiBarHorizontalChart',
                            height: d3.max([
                                450,
                                input.length * 12
                            ]),
                            x: xConfig.get,
                            y: yConfig.get,
                            showControls: false,
                            showValues: true,
                            duration: 500,
                            xAxis: { showMaxMin: false },
                            valueFormat: function (d) {
                                return d3.format(',.' + yConfig.precision + 'f')(d);
                            },
                            yAxis: {
                                axisLabel: 'Counts',
                                tickFormat: function (d) {
                                    return d3.format(',.' + yConfig.precision + 'f')(d);
                                }
                            },
                            barColor: function (d) {
                                return zConfig.scale(zConfig.get(d));
                            },
                            margin: { 'left': 400 },
                            tooltip: { contentGenerator: mevTooltipContent.bind(null, scope.config) }
                        }
                    };
                }
            ],
            link: function (scope, elem, attr, ctrl) {
            }
        };
    };
    directive.$name = 'mevHbarchart';
    directive.$provider = 'directive';
    directive.$inject = [
        'mevBarchartNvd3Adaptor',
        'mevTooltipContent'
    ];
    return directive;
});
/*mev-hbarchart@0.0.1#src/main/services/mevBarchartNvd3Adaptor*/
define('mev-hbarchart@0.0.1#src/main/services/mevBarchartNvd3Adaptor', ['lodash'], function (_) {
    var service = function mevBarchartNvd3Adaptor() {
        return function (config, input) {
            var groups = [];
            var group = {
                'key': config.series,
                'color': '#1f77b4',
                'values': config.y.sort ? _.orderBy(input, function (item) {
                    return config.y.get(item);
                }, config.y.sort) : input
            };
            groups.push(group);
            return groups;
        };
    };
    service.$name = 'mevBarchartNvd3Adaptor';
    service.$provider = 'factory';
    service.$inject = [];
    return service;
});
/*mev-hbarchart@0.0.1#src/main/mev-hbarchart*/
define('mev-hbarchart@0.0.1#src/main/mev-hbarchart', [
    'mui',
    'jquery',
    'd3',
    'nvd3',
    'angular-nvd3',
    'lodash',
    'mev-chart-utils',
    './view/mevHBarchartDirective',
    './services/mevBarchartNvd3Adaptor',
    'nvd3/build/nv.d3.css',
    './style/mevHBarchart.less'
], function (ng) {
    return ng.module('mevHBarchart', arguments, arguments);
});
/*mev-analysis@0.0.1#src/params/model/text/TextParam*/
define('mev-analysis@0.0.1#src/params/model/text/TextParam', [
    'lodash',
    '../BaseParam'
], function (_, BaseParam) {
    function TextParam(spec) {
        _.assign(this, { type: 'text' }, spec);
    }
    TextParam.prototype = new BaseParam();
    return TextParam;
});
/*mev-analysis@0.0.1#src/params/model/integer/IntegerParam*/
define('mev-analysis@0.0.1#src/params/model/integer/IntegerParam', [
    'lodash',
    '../BaseParam'
], function (_, BaseParam) {
    function IntegerParam(spec) {
        _.assign(this, { type: 'integer' }, spec);
    }
    IntegerParam.prototype = new BaseParam();
    return IntegerParam;
});
/*mev-analysis@0.0.1#src/params/model/decimal/DecimalParam*/
define('mev-analysis@0.0.1#src/params/model/decimal/DecimalParam', [
    'lodash',
    '../BaseParam'
], function (_, BaseParam) {
    function DecimalParam(spec) {
        _.assign(this, { type: 'decimal' }, spec);
    }
    DecimalParam.prototype = new BaseParam();
    return DecimalParam;
});
/*mev-gsea@0.0.1#src/main/model/gseaAnalysisType*/
define('mev-gsea@0.0.1#src/main/model/gseaAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/text/TextParam',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/integer/IntegerParam',
    'mev-analysis/src/params/model/decimal/DecimalParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    'mev-analysis/src/params/model/parentAnalysis/ParentAnalysisParam',
    'mev-analysis/src/params/model/annotationField/AnnotationFieldParam'
], function (_, mevAnalsysType, AnalysisParamsFactory, TextParam, SelectParam, IntegerParam, DecimalParam, ParentAnalysisParam, AnnotationFieldParam) {
    'use strict';
    function gseaAnalysisType(MevAnalysisType, mevAnalysisParams, MevParentAnalysisParam, MevAnnotationFieldParam, mevAnnotationRepository, mevAnalysisLocator, $q) {
        var limmaParam = Object.create(new MevParentAnalysisParam({
            'id': 'limma',
            'type': 'LIMMA Differential Expression Analysis',
            'display': 'name',
            'required': true
        }), {
            value: {
                configurable: false,
                get: function () {
                    return this._value;
                },
                set: function (value) {
                    this._value = value;
                }
            }
        });
        var annotationFieldParam = new MevAnnotationFieldParam({
            'id': 'geneSymbolField',
            'dimension': 'row',
            'name': 'Gene Symbol Mapping',
            'value': 'Symbol'
        });
        var gseaType = new MevAnalysisType({
            id: 'gsea',
            name: 'GSEA',
            params: mevAnalysisParams([
                new MevParentAnalysisParam({
                    'id': 'parent',
                    'type': [
                        'LIMMA Differential Expression Analysis',
                        't-Test Analysis',
                        'ttest',
                        'voom',
                        'DESeq Differential Expression Analysis',
                        'edger'
                    ],
                    'display': 'name',
                    'required': true
                }),
                new MevAnnotationFieldParam({
                    'id': 'geneSymbolField',
                    'dimension': 'row',
                    'name': 'Gene Symbol Mapping'
                }),
                new SelectParam({
                    'id': 'pAdjustMethod',
                    'options': [
                        'holm',
                        'hochberg',
                        'hommel',
                        'bonferroni',
                        'BH',
                        'BY',
                        'fdr',
                        'none'
                    ],
                    'value': 'fdr'
                }),
                new DecimalParam({
                    'id': 'adjValueCutoff',
                    'displayName': 'adjValueCutoff',
                    'min': 0,
                    'max': 1,
                    'value': 0.05,
                    'precision': 3
                }),
                new IntegerParam({
                    'id': 'minGSSize',
                    'displayName': 'Min GS Size',
                    'min': 0,
                    'max': Infinity,
                    'value': 20
                })
            ])
        });
        function prepareParams(params) {
            var limma = mevAnalysisLocator.find({ name: params.parent.name });
            if (!limma)
                throw new Error('Could not find parent Limma analysis for: ' + JSON.stringify(params.parent));
            return prepareLimmaResult(limma.results, params.geneSymbolField).then(function (limmaResults) {
                return {
                    name: params.parent.name + '.' + params.name,
                    organism: limma.params.species,
                    pAdjustMethod: params.pAdjustMethod,
                    minGSSize: params.minGSSize,
                    adjValueCutoff: params.adjValueCutoff,
                    limma: limmaResults
                };
            });
        }
        function prepareLimmaResult(limmaResults, geneSymbolField) {
            var annotations = new mevAnnotationRepository('row');
            var geneMapping = geneSymbolField ? annotations.getMapping(geneSymbolField) : $q.when({});
            return geneMapping.then(function (geneMapping) {
                var idField = 'id';
                if (_.isFunction(limmaResults.getIdField)) {
                    idField = limmaResults.getIdField();
                }
                var logFoldChangeField = 'logFoldChange';
                if (_.isFunction(limmaResults.getLogFoldChangeField)) {
                    logFoldChangeField = limmaResults.getLogFoldChangeField();
                }
                return limmaResults.reduce(function (result, item, index, arr) {
                    var SYMBOL = geneMapping[item[idField]] ? geneMapping[item[idField]] : item[idField];
                    if (!SYMBOL) {
                        console.log('no gene mapping found for \'' + item[idField] + '\' in \'' + geneSymbolField + '\'');
                    } else {
                        var gseaItem = {
                            'SYMBOL': SYMBOL,
                            'logFC': item[logFoldChangeField],
                            'AveExpr': item.averageExpression,
                            't': item.t,
                            'P.Value': item.pValue,
                            'adj.P.Val': item.qValue
                        };
                        result.push(gseaItem);
                    }
                    return result;
                }, []);
                return result;
            });
        }
        gseaType.start = function () {
            var _self = this;
            var paramValues = this.params.getValues();
            console.debug('gsea params values', paramValues);
            prepareParams(paramValues).then(function (params) {
                console.debug('gsea out params', params);
                _self.parent.start.call(_self, _self, params);
            });
        };
        gseaType.modelDecorator = function (analysis) {
            var gseaRowModel = {
                getTotal: function () {
                    return this.setSize;
                },
                getMatched: function () {
                    return this.setSize;
                },
                getName: function () {
                    return this.Description;
                },
                getPValue: function () {
                    return this.pvalue;
                }
            };
            function formatResults(input) {
                return input.map(function (item) {
                    return _.extend(item, gseaRowModel);
                });
            }
            ;
            function isPeRow(item) {
                return _.every(_.functions(gseaRowModel), function (methodName) {
                    return _.hasIn(item, methodName);
                });
            }
            if (analysis && analysis.result && analysis.result.length > 0)
                if (!isPeRow(analysis.result[0]))
                    formatResults(analysis.result);
        };
        gseaType.info = { template: '<p>Gene Set Enrichment Analysis of Reactome Pathway (gsePathway).</p>' + '<p></p>Reference: <a href=\'https://bioconductor.org/packages/release/bioc/html/ReactomePA.html\'>' + 'https://bioconductor.org/packages/release/bioc/html/ReactomePA.html</a></p>' };
        return gseaType;
    }
    gseaAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevParentAnalysisParam',
        'mevAnnotationFieldParam',
        'mevAnnotationRepository',
        'mevAnalysisLocator',
        '$q'
    ];
    gseaAnalysisType.$name = 'mevGseaAnalysisType';
    gseaAnalysisType.$provider = 'factory';
    return gseaAnalysisType;
});
/*mev-gsea@0.0.1#src/main/state/GseaState.tpl.html!system-text@0.1.0#text*/
define('mev-gsea@0.0.1#src/main/state/GseaState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="column-wrapper">\n\t<ul class="nav nav-tabs column-header" id="analysisTabs">\n\t\t<li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self" >{{analysis.name}}</a></li>\n\t\t<li id="barchart_tab" ><a href="#barchart" data-toggle="tab" target="_self" ng-click="activateTab($event)">Bar chart</a></li>\n\t\t<div class="action-menu" mui-paste="action-menu"></div>\t\t\n\t</ul>\n\n\t<div class="tab-content column-body">\n\t\t<div class="tab-pane active results-wrapper" id="table" >\n\t\t\t<div class="results-header clearfix">\n\t\t     \t<div class="btn-toolbar" role="toolbar" >\n\t\t     \t\t<div class="btn-group">\n\t\t\t            <btn-create-selection mui-target="Top" mui-analysis="analysis" \n\t\t\t             \tmui-dataset="project.dataset" mui-items="selectedGenes" mui-dimension="row">\n\t\t\t            </btn-create-selection><btn-export-selection mui-target="Top" mui-analysis="analysis" \n\t\t\t             \tmui-dataset="project.dataset" mui-items="selectedGenes" mui-dimension="row">\n\t\t\t            </btn-export-selection>           \n\t\t            </div>\n\t\t      \t</div>\n\t\t\t</div>\n\t\t\t<div class="results-body">\n\t\t\t\t<mev-results-table data="analysis.result" headers="headers" ordering="pValue" selected-rows="selectedRows"\n\t\t\t\t\t\t\t\t   mev-save-as="{name: analysis.name}"></mev-results-table>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class="tab-pane results-wrapper" id="barchart" >\n\t\t\t<div class="results-header clearfix">\n\t\t\t\t<div class="btn-toolbar" role="toolbar" >\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="results-body">\n\t\t\t\t<div mev-hbarchart="barChartConfig"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n';
});
/*mev-gsea@0.0.1#src/main/state/GseaState*/
define('mev-gsea@0.0.1#src/main/state/GseaState', ['./GseaState.tpl.html'], function (template) {
    'use strict';
    function GseaState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.gsea', {
            parent: 'root.dataset.analysisType',
            url: 'gsea/{analysisId}',
            template: template,
            controller: 'GseaVM',
            controllerAs: 'GseaVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    GseaState.inject = ['$stateProvider'];
    GseaState.provider = 'config';
    return GseaState;
});
/*mev-gsea@0.0.1#src/main/state/GseaVM*/
define('mev-gsea@0.0.1#src/main/state/GseaVM', ['lodash'], function (_) {
    'use strict';
    function GseaVM(scope, project, analysis, mevAnalysisTypes, $timeout, $window) {
        scope.project = project;
        scope.analysis = analysis;
        scope.selectedRows = {};
        scope.selectedGenes = [];
        var analysisType = mevAnalysisTypes.get('gsea');
        if (analysisType && _.isFunction(analysisType.modelDecorator))
            analysisType.modelDecorator(analysis);
        scope.barChartConfig = {
            name: scope.analysis.name,
            data: scope.analysis.result,
            series: 'Score',
            x: {
                field: function (d) {
                    return d.Description;
                }
            },
            y: {
                field: 'enrichmentScore',
                precision: 4,
                sort: 'desc'
            },
            z: { field: 'p.adjust' }
        };
        scope.headers = [
            {
                'name': 'Description',
                'field': 'Description',
                'icon': 'search',
                'nowrap': true
            },
            {
                'name': 'P-Value',
                'field': 'pvalue',
                'icon': [
                    '<=',
                    '>='
                ],
                'default': '0.05'
            },
            {
                'name': 'P-Adjust',
                'field': 'p.adjust',
                'icon': [
                    '<=',
                    '>='
                ]
            },
            {
                'name': 'q-Value',
                'field': 'qvalue',
                'icon': [
                    '<=',
                    '>='
                ]
            },
            {
                'name': 'Set Size',
                'field': 'setSize',
                'icon': [
                    '<=',
                    '>='
                ],
                'datatype': 'integer'
            },
            {
                'name': 'enrichmentScore',
                'field': 'enrichmentScore',
                'icon': 'search'
            }
        ];
        scope.getSelection = function () {
            return scope.selectedGenes;
        };
        scope.viewGenes = function (filteredResults) {
            scope.filteredResults = filteredResults;
        };
        scope.$on('$viewContentLoaded', function (event) {
            console.log('$viewContentLoaded', arguments);
        });
        scope.activateTab = function ($event) {
            $timeout(function () {
                var evt = $window.document.createEvent('UIEvents');
                evt.initUIEvent('resize', true, false, $window, 0);
                $window.dispatchEvent(evt);
            });
        };
    }
    GseaVM.$inject = [
        '$scope',
        'project',
        'analysis',
        'mevAnalysisTypes',
        '$timeout',
        '$window'
    ];
    GseaVM.$name = 'GseaVM';
    GseaVM.$provider = 'controller';
    return GseaVM;
});
/*mev-gsea@0.0.1#src/main/mevGsea.module*/
define('mev-gsea@0.0.1#src/main/mevGsea.module', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-annotations',
    'mev-results-table',
    'mev-hbarchart',
    './model/gseaAnalysisType',
    './state/GseaState',
    './state/GseaVM'
], function (mui) {
    return mui.module('mevGsea', arguments, arguments);
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/generateScales*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/generateScales', ['d3'], function (d3) {
    return function (params, view) {
        var scales = Object.create(null);
        scales.cells = {
            xScale: d3.scale.ordinal().domain(view.labels.column.keys).rangeRoundBands([
                params.panel.side.width,
                params.panel.side.width + view.labels.column.keys.length * params.cell.width
            ], 0, 0),
            yScale: d3.scale.ordinal().domain(view.labels.row.keys).rangeRoundBands([
                params.panel.top.height + params.selections.column.height + params.labels.column.height,
                params.panel.top.height + params.selections.column.height + params.labels.column.height + view.labels.row.keys.length * params.cell.height
            ], 0, 0),
            colorScale: d3.scale.linear().domain([
                view.expression.min,
                view.expression.avg,
                view.expression.max
            ]).range([
                params.colors.low,
                params.colors.mid,
                params.colors.high
            ])
        };
        scales.panel = {
            top: {
                xScale: d3.scale.linear().domain([
                    0,
                    1
                ]).range([
                    params.panel.side.width,
                    params.panel.side.width + view.labels.column.keys.length * params.cell.width
                ]),
                yScale: d3.scale.linear().domain([
                    0,
                    1
                ]).range([
                    5,
                    params.panel.top.height
                ])
            },
            side: {
                xScale: d3.scale.linear().domain([
                    0,
                    1
                ]).range([
                    4,
                    params.panel.side.width
                ]),
                yScale: d3.scale.linear().domain([
                    0,
                    1
                ]).range([
                    params.panel.top.height + params.selections.column.height + params.labels.column.height,
                    params.panel.top.height + params.selections.column.height + params.labels.column.height + view.labels.row.keys.length * params.cell.height
                ])
            }
        };
        return scales;
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/cellFilter*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/cellFilter', [], function () {
    return function (labels, view) {
        var self = view;
        var indexes = labels.map(function (label) {
            return self.row.keys.indexOf(label);
        });
        indexes = indexes.filter(function (index) {
            return index > -1 ? true : false;
        });
        var cells = [];
        indexes.map(function (index) {
            var row = self.expression.values.slice(index * self.column.keys.length, self.column.keys.length * (1 + index));
            row.map(function (cell) {
                cells.push(cell);
            });
        });
        return cells;
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawCells*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawCells', [
    './cellFilter',
    'd3',
    'jquery',
    'save-svg-as-png'
], function (cellFilter, d3, $, saveSvgAsPng) {
    return function (labels, ds, repaintAll) {
        var self = this;
        var labelPairs = [];
        self.shownCells = [];
        labels.row.map(function (row) {
            return labels.column.map(function (col) {
                labelPairs.push([
                    row,
                    col
                ]);
                self.shownCells.push({
                    column: col,
                    row: row,
                    value: NaN
                });
            });
        });
        ds.expression.getSome(self.shownCells).then(function (shownCells) {
            var domCells = self.DOM.heatmapCells.selectAll('rect');
            var allCells = domCells.data(shownCells, function (k) {
                return k.row + ';' + k.column;
            });
            var newCells = allCells.enter();
            var newDom = newCells.append('rect').attr({
                x: function (d) {
                    return self.scales.cells.xScale(d.column);
                },
                y: function (d) {
                    return self.scales.cells.yScale(d.row);
                },
                height: self.params.cell.height - self.params.cell.padding,
                width: self.params.cell.width - self.params.cell.padding,
                fill: function (d) {
                    return self.scales.cells.colorScale(d.value);
                },
                'cell-value': function (d) {
                    return d.value;
                },
                'cell-column': function (d) {
                    return d.column;
                },
                'cell-row': function (d) {
                    return d.row;
                }
            });
            console.debug('swap:', newDom.size());
            if (repaintAll)
                domCells.attr({
                    fill: function (d) {
                        return self.scales.cells.colorScale(d.value);
                    }
                });
            var deleteCells = allCells.exit();
            deleteCells.remove();
        })['catch'](function (e) {
            throw e;
        });
        var rowLabels = self.DOM.labels.row.selectAll('text').data(labels.row, function (k) {
                return k;
            }), colLabels = self.DOM.labels.column.selectAll('text').data(labels.column, function (k) {
                return k;
            });
        rowLabels.enter().append('text').attr({
            x: self.params.panel.side.width + self.view.labels.column.keys.length * self.params.cell.width + self.params.selections.row.width,
            y: function (d) {
                return self.scales.cells.yScale(d) + self.params.cell.height;
            },
            'text-anchor': 'bottom'
        }).text(function (d) {
            return d;
        }).append('title').text(function (d) {
            return d;
        });
        colLabels.enter().append('text').attr('transform', 'rotate(-90)').attr({
            x: -(self.params.panel.top.height + self.params.labels.column.height),
            y: function (d) {
                return self.scales.cells.xScale(d) + 0.68 * self.params.cell.width;
            },
            'text-anchor': 'start'
        }).text(function (d) {
            return d.slice(0, 13);
        }).append('title').text(function (d) {
            return d;
        });
        rowLabels.exit().remove();
        colLabels.exit().remove();
        var rands = d3.range(0, 100);
        var legendYOffset = 10;
        var legendHeight = 220;
        var legendBottom = legendYOffset + legendHeight;
        var labelYScale = d3.scale.linear().domain([
            0,
            rands.length - 1
        ]).range([
            legendBottom,
            legendYOffset
        ]);
        var labelColorScale = d3.scale.linear().domain([
            0,
            rands.length - 1
        ]).range([
            self.view.expression.min,
            self.view.expression.max
        ]);
        self.DOM.legend.selectAll('rect').remove();
        self.DOM.legend.selectAll('text').remove();
        self.DOM.legend.selectAll('rect').data(rands).enter().append('rect').attr({
            x: function (d, i) {
                return 30;
            },
            y: function (d) {
                return labelYScale(d);
            },
            height: labelYScale(0) - labelYScale(1) + 1,
            width: 50,
            fill: function (d) {
                return self.scales.cells.colorScale(labelColorScale(d));
            }
        }).on('click', function (d, i) {
            $('#settingsModal-' + self.view.id).modal('show');
        });
        self.DOM.legend.selectAll('text').data(rands).enter().append('text').attr({
            x: 90,
            y: function (d, i) {
                return labelYScale(d) + 7;
            },
            'style': 'font-size:10',
            'text-anchor': 'start'
        }).text(function (j, i) {
            var d = labelColorScale(j);
            var returnstring = String(d).split('.');
            if (returnstring.length > 1) {
                returnstring = returnstring[0] + '.' + returnstring[1].slice(0, 3);
            } else {
                returnstring[0];
            }
            ticks = [
                0,
                Math.floor((rands.length - 1) * 0.25),
                Math.floor((rands.length - 1) * 0.5),
                Math.floor((rands.length - 1) * 0.75),
                rands.length - 1
            ];
            return ticks.indexOf(i) > -1 ? returnstring : '';
        }).append('title').text(function (d, i) {
            return labelColorScale(d);
        });
        var fo = self.DOM.legend.append('foreignObject').attr({
            x: 30,
            y: legendBottom + 5,
            height: 50,
            width: 50
        });
        var divSettings = fo.append('xhtml:div');
        divSettings.classed('tools', true);
        var linkSettings = divSettings.append('span').on('click', function (d, i) {
            $('#settingsModal-' + self.view.id).modal('show');
        }).append('a').html('<span class="glyphicon glyphicon-cog"></span>');
        var linkSettingsDom = linkSettings[0][0];
        if (linkSettingsDom.offsetParent && (linkSettingsDom.offsetWidth === 0 || linkSettingsDom.offsetHeight === 0))
            linkSettings.text('settings');
        var linkSave = divSettings.append('span').on('click', function (d, i) {
            saveSvgAsPng.saveSvgAsPng(self.DOM.svg[0][0], self.view.dataset.id + '-' + self.view.note + '.png', {
                selectorRemap: function (s) {
                    return s.replace('mev-heatmap ', '');
                }
            });
        }).append('a').html('<span class="glyphicon glyphicon-floppy-save"></span>');
        var linkSaveDom = linkSave[0][0];
        if (linkSettingsDom.offsetParent && (linkSaveDom.offsetWidth === 0 || linkSaveDom.offsetHeight === 0))
            linkSave.text('save');
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawSelections*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawSelections', ['d3'], function (d3) {
    return function (selections, dimension) {
        var self = this;
        self.DOM.selections[dimension].selectAll('*').remove();
        var groupScale = d3.scale.ordinal().domain(selections.map(function (group) {
            return group.name;
        }));
        if (dimension == 'column') {
            groupScale.rangeRoundBands([
                self.params.panel.top.height + self.params.labels.column.height,
                self.params.panel.top.height + self.params.labels.column.height + self.params.selections.column.height
            ], 0, 0);
        } else {
            groupScale.rangeRoundBands([
                self.params.panel.side.width + self.view.labels.column.keys.length * self.params.cell.width,
                self.params.panel.side.width + self.view.labels.column.keys.length * self.params.cell.width + self.params.selections.row.width
            ], 0, 0);
        }
        var cells = [];
        selections.map(function (selection) {
            selection.keys.map(function (key) {
                cells.push({
                    group: selection.name,
                    label: key,
                    color: selection.properties.selectionColor
                });
            });
        });
        var selectionsCells = self.DOM.selections[dimension].selectAll('rect').data(cells, function (d) {
            return [
                d.group,
                d.label
            ];
        });
        selectionsCells.enter().append('rect').attr({
            'x': function (d) {
                return dimension == 'column' ? self.scales.cells.xScale(d.label) : groupScale(d.group);
            },
            'y': function (d) {
                return dimension == 'column' ? groupScale(d.group) : self.scales.cells.yScale(d.label);
            },
            'fill': function (d) {
                return d.color;
            },
            'height': dimension == 'column' ? groupScale.rangeBand() : self.scales.cells.yScale.rangeBand(),
            'width': dimension == 'column' ? self.scales.cells.xScale.rangeBand() : groupScale.rangeBand()
        });
        selectionsCells.exit().remove();
        return null;
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawAnalysis*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawAnalysis', [], function () {
    return function (analysis) {
        var self = this;
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/updateCells*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/updateCells', [], function () {
    return function (position, dataset, options) {
        var self = this;
        var totalTop = this.params.labels.column.height + this.params.panel.top.height + this.params.selections.column.height;
        var heatmapCellHeight = this.params.cell.height;
        if (position.top < totalTop + 100 * heatmapCellHeight) {
            var numRows = Math.floor((position.top + position.height - totalTop) / heatmapCellHeight) + 30;
            var startRow = 0;
            var endRow = numRows;
        } else {
            var startRow = Math.floor((position.top - totalTop) / heatmapCellHeight) - 10;
            var numRows = position.height / heatmapCellHeight;
            var endRow = startRow + numRows + 30;
        }
        var totalLeft = this.params.panel.side.width + this.params.selections.row.width;
        if (position.left < totalLeft + 100 * heatmapCellHeight) {
            var numCols = Math.floor((position.left + position.width - totalLeft) / heatmapCellHeight) + 30;
            var startCol = 0;
            var endCol = numCols;
        } else {
            var startCol = Math.floor((position.left - totalLeft) / heatmapCellHeight) - 10;
            var numCols = position.left / heatmapCellHeight;
            var endCol = startCol + numCols + 30;
        }
        var labels = {
            row: self.view.labels.row.keys.slice(startRow, endRow),
            column: self.view.labels.column.keys.slice(startCol, endCol)
        };
        this.drawCells(labels, dataset, options && options.force);
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawTree*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawTree', ['d3'], function (d3) {
    var cluster = d3.layout.cluster().sort(null).separation(function (a, b) {
        return a.parent == b.parent ? 1 : 1;
    }).value(function (d) {
        return d.distance;
    }).children(function (d) {
        return d.children;
    });
    function nodeclick(d, canvas, type, self) {
        var dimension = type == 'horizontal' ? 'column' : 'row';
        var nColor = type == 'horizontal' ? 'blue' : 'red';
        var pColor = type == 'horizontal' ? 'blue' : 'red';
        var cir = canvas.selectAll('circle').filter(function (db) {
            return d === db ? 1 : 0;
        });
        var path = canvas.selectAll('path').filter(function (dp) {
            return d.x === dp.source.x && d.y === dp.source.y ? 1 : 0;
        });
        var isSelect = cir.style('fill') == '#00ff00' || cir.style('fill') == 'rgb(0, 255, 0)';
        if (isSelect) {
            cir.style('fill', nColor).transition().duration(500);
            path.transition().style('stroke', pColor).duration(500);
        } else {
            nColor = '#00ff00';
            pColor = '#00ff00';
            cir.style('fill', nColor).transition().duration(500);
            path.transition().style('stroke', pColor).duration(500);
        }
        if (d.children) {
            walk(d, nColor, pColor, canvas, type, self);
        } else {
            if (nColor == '#00ff00') {
                d.selected = true;
                if (self.view.selectionParams[dimension].labels.indexOf(d.name) == -1) {
                    self.view.selectionParams[dimension].labels.push(d.name);
                }
            } else {
                d.selected = false;
                var index = self.view.selectionParams[dimension].labels.indexOf(d.name);
                self.view.selectionParams[dimension].labels.splice(index, 1);
            }
        }
        d.selected = nColor == '#00ff00';
    }
    function horizontalPath(d, scales) {
        return 'M' + scales.top.xScale(d.target.x) + ',' + scales.top.yScale(d.target.y) + 'V' + scales.top.yScale(d.source.y) + 'H' + scales.top.xScale(d.source.x);
    }
    function verticalPath(d, scales) {
        return 'M' + scales.side.xScale(d.source.y) + ',' + scales.side.yScale(d.source.x) + 'V' + scales.side.yScale(d.target.x) + 'H' + scales.side.xScale(d.target.y);
    }
    var walk = function (d, nColor, pColor, canvas, type, self) {
        var dimension = type == 'horizontal' ? 'column' : 'row';
        d.children.forEach(function (dc) {
            canvas.selectAll('circle').filter(function (db) {
                return dc === db ? 1 : 0;
            }).transition().style('fill', nColor).duration(500).transition().duration(500);
            canvas.selectAll('path').filter(function (dp) {
                return dc.x === dp.source.x && dc.y === dp.source.y ? 1 : 0;
            }).transition().style('stroke', pColor).duration(500);
            if (dc.children) {
                walk(dc, nColor, pColor, canvas, type, self);
            } else {
                if (nColor == '#00ff00') {
                    d.selected = true;
                    if (self.view.selectionParams[dimension].labels.indexOf(dc.name) == -1) {
                        self.view.selectionParams[dimension].labels.push(dc.name);
                    }
                } else {
                    d.selected = false;
                    var index = self.view.selectionParams[dimension].labels.indexOf(dc.name);
                    self.view.selectionParams[dimension].labels.splice(index, 1);
                }
            }
        });
    };
    return function (canvas, tree, type, scope) {
        var self = this;
        canvas.selectAll('*').remove();
        var nodes = cluster.nodes(tree);
        var links = cluster.links(nodes);
        canvas.selectAll('path').data(links).enter().append('path').attr('d', function (d) {
            return type == 'horizontal' ? horizontalPath(d, self.scales.panel) : verticalPath(d, self.scales.panel);
        }).attr('stroke', function () {
            return type == 'horizontal' ? 'blue' : 'red';
        }).attr('fill', 'none');
        var fo = canvas.append('foreignObject').attr({
            width: 30,
            height: 10
        });
        var div = fo.append('xhtml:div').attr('class', 'd3tooltip').html('<a>save</a>').style('opacity', 0);
        div.select('a').on('click', function (d) {
            hideTooltip(true);
            $('div#' + (type == 'horizontal' ? 'column' : 'row') + 'SelectionsModal-' + self.view.id).modal();
        }).on('mouseout', function (d) {
            hideTooltip();
        });
        function showTooltip() {
            div.transition().duration(200).style('display', 'block').style('opacity', 0.9);
            fo.attr('x', d3.event.layerX - 40 + 'px').attr('y', d3.event.layerY - 22 + 'px');
        }
        function hideTooltip(fast) {
            if (fast)
                div.style('opacity', 0);
            else
                div.transition().duration(500).style('display', 'none');
        }
        canvas.selectAll('circle').data(nodes).enter().append('circle').attr('id', 'selectionCircle').attr('r', 4).attr('cx', function (d) {
            return type == 'horizontal' ? self.scales.panel.top.xScale(d.x) : self.scales.panel.side.xScale(d.y);
        }).attr('cy', function (d) {
            return type == 'horizontal' ? self.scales.panel.top.yScale(d.y, self.scales.panel) : self.scales.panel.side.yScale(d.x);
        }).attr('fill', function (d) {
            return type == 'horizontal' ? 'blue' : 'red';
        }).on('mousedown', function (d) {
            switch (d3.event.button) {
            case 0:
                nodeclick(d, canvas, type, self);
                if (d.selected) {
                    showTooltip();
                } else {
                    div.transition().duration(200).style('opacity', 0);
                }
            }
        }).on('mouseover', function (d) {
            console.debug('d.selected', d.selected);
            if (d.selected) {
                showTooltip();
            }
        });
        canvas.on('contextmenu', function () {
            d3.event.preventDefault();
            $('div#' + (type == 'horizontal' ? 'column' : 'row') + 'SelectionsModal-' + self.view.id).modal();
        });
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/colorBrewer*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/colorBrewer', [], function () {
    return {
        YlGn: {
            3: [
                '#f7fcb9',
                '#addd8e',
                '#31a354'
            ],
            4: [
                '#ffffcc',
                '#c2e699',
                '#78c679',
                '#238443'
            ],
            5: [
                '#ffffcc',
                '#c2e699',
                '#78c679',
                '#31a354',
                '#006837'
            ],
            6: [
                '#ffffcc',
                '#d9f0a3',
                '#addd8e',
                '#78c679',
                '#31a354',
                '#006837'
            ],
            7: [
                '#ffffcc',
                '#d9f0a3',
                '#addd8e',
                '#78c679',
                '#41ab5d',
                '#238443',
                '#005a32'
            ],
            8: [
                '#ffffe5',
                '#f7fcb9',
                '#d9f0a3',
                '#addd8e',
                '#78c679',
                '#41ab5d',
                '#238443',
                '#005a32'
            ],
            9: [
                '#ffffe5',
                '#f7fcb9',
                '#d9f0a3',
                '#addd8e',
                '#78c679',
                '#41ab5d',
                '#238443',
                '#006837',
                '#004529'
            ]
        },
        YlGnBu: {
            3: [
                '#edf8b1',
                '#7fcdbb',
                '#2c7fb8'
            ],
            4: [
                '#ffffcc',
                '#a1dab4',
                '#41b6c4',
                '#225ea8'
            ],
            5: [
                '#ffffcc',
                '#a1dab4',
                '#41b6c4',
                '#2c7fb8',
                '#253494'
            ],
            6: [
                '#ffffcc',
                '#c7e9b4',
                '#7fcdbb',
                '#41b6c4',
                '#2c7fb8',
                '#253494'
            ],
            7: [
                '#ffffcc',
                '#c7e9b4',
                '#7fcdbb',
                '#41b6c4',
                '#1d91c0',
                '#225ea8',
                '#0c2c84'
            ],
            8: [
                '#ffffd9',
                '#edf8b1',
                '#c7e9b4',
                '#7fcdbb',
                '#41b6c4',
                '#1d91c0',
                '#225ea8',
                '#0c2c84'
            ],
            9: [
                '#ffffd9',
                '#edf8b1',
                '#c7e9b4',
                '#7fcdbb',
                '#41b6c4',
                '#1d91c0',
                '#225ea8',
                '#253494',
                '#081d58'
            ]
        },
        GnBu: {
            3: [
                '#e0f3db',
                '#a8ddb5',
                '#43a2ca'
            ],
            4: [
                '#f0f9e8',
                '#bae4bc',
                '#7bccc4',
                '#2b8cbe'
            ],
            5: [
                '#f0f9e8',
                '#bae4bc',
                '#7bccc4',
                '#43a2ca',
                '#0868ac'
            ],
            6: [
                '#f0f9e8',
                '#ccebc5',
                '#a8ddb5',
                '#7bccc4',
                '#43a2ca',
                '#0868ac'
            ],
            7: [
                '#f0f9e8',
                '#ccebc5',
                '#a8ddb5',
                '#7bccc4',
                '#4eb3d3',
                '#2b8cbe',
                '#08589e'
            ],
            8: [
                '#f7fcf0',
                '#e0f3db',
                '#ccebc5',
                '#a8ddb5',
                '#7bccc4',
                '#4eb3d3',
                '#2b8cbe',
                '#08589e'
            ],
            9: [
                '#f7fcf0',
                '#e0f3db',
                '#ccebc5',
                '#a8ddb5',
                '#7bccc4',
                '#4eb3d3',
                '#2b8cbe',
                '#0868ac',
                '#084081'
            ]
        },
        BuGn: {
            3: [
                '#e5f5f9',
                '#99d8c9',
                '#2ca25f'
            ],
            4: [
                '#edf8fb',
                '#b2e2e2',
                '#66c2a4',
                '#238b45'
            ],
            5: [
                '#edf8fb',
                '#b2e2e2',
                '#66c2a4',
                '#2ca25f',
                '#006d2c'
            ],
            6: [
                '#edf8fb',
                '#ccece6',
                '#99d8c9',
                '#66c2a4',
                '#2ca25f',
                '#006d2c'
            ],
            7: [
                '#edf8fb',
                '#ccece6',
                '#99d8c9',
                '#66c2a4',
                '#41ae76',
                '#238b45',
                '#005824'
            ],
            8: [
                '#f7fcfd',
                '#e5f5f9',
                '#ccece6',
                '#99d8c9',
                '#66c2a4',
                '#41ae76',
                '#238b45',
                '#005824'
            ],
            9: [
                '#f7fcfd',
                '#e5f5f9',
                '#ccece6',
                '#99d8c9',
                '#66c2a4',
                '#41ae76',
                '#238b45',
                '#006d2c',
                '#00441b'
            ]
        },
        PuBuGn: {
            3: [
                '#ece2f0',
                '#a6bddb',
                '#1c9099'
            ],
            4: [
                '#f6eff7',
                '#bdc9e1',
                '#67a9cf',
                '#02818a'
            ],
            5: [
                '#f6eff7',
                '#bdc9e1',
                '#67a9cf',
                '#1c9099',
                '#016c59'
            ],
            6: [
                '#f6eff7',
                '#d0d1e6',
                '#a6bddb',
                '#67a9cf',
                '#1c9099',
                '#016c59'
            ],
            7: [
                '#f6eff7',
                '#d0d1e6',
                '#a6bddb',
                '#67a9cf',
                '#3690c0',
                '#02818a',
                '#016450'
            ],
            8: [
                '#fff7fb',
                '#ece2f0',
                '#d0d1e6',
                '#a6bddb',
                '#67a9cf',
                '#3690c0',
                '#02818a',
                '#016450'
            ],
            9: [
                '#fff7fb',
                '#ece2f0',
                '#d0d1e6',
                '#a6bddb',
                '#67a9cf',
                '#3690c0',
                '#02818a',
                '#016c59',
                '#014636'
            ]
        },
        PuBu: {
            3: [
                '#ece7f2',
                '#a6bddb',
                '#2b8cbe'
            ],
            4: [
                '#f1eef6',
                '#bdc9e1',
                '#74a9cf',
                '#0570b0'
            ],
            5: [
                '#f1eef6',
                '#bdc9e1',
                '#74a9cf',
                '#2b8cbe',
                '#045a8d'
            ],
            6: [
                '#f1eef6',
                '#d0d1e6',
                '#a6bddb',
                '#74a9cf',
                '#2b8cbe',
                '#045a8d'
            ],
            7: [
                '#f1eef6',
                '#d0d1e6',
                '#a6bddb',
                '#74a9cf',
                '#3690c0',
                '#0570b0',
                '#034e7b'
            ],
            8: [
                '#fff7fb',
                '#ece7f2',
                '#d0d1e6',
                '#a6bddb',
                '#74a9cf',
                '#3690c0',
                '#0570b0',
                '#034e7b'
            ],
            9: [
                '#fff7fb',
                '#ece7f2',
                '#d0d1e6',
                '#a6bddb',
                '#74a9cf',
                '#3690c0',
                '#0570b0',
                '#045a8d',
                '#023858'
            ]
        },
        BuPu: {
            3: [
                '#e0ecf4',
                '#9ebcda',
                '#8856a7'
            ],
            4: [
                '#edf8fb',
                '#b3cde3',
                '#8c96c6',
                '#88419d'
            ],
            5: [
                '#edf8fb',
                '#b3cde3',
                '#8c96c6',
                '#8856a7',
                '#810f7c'
            ],
            6: [
                '#edf8fb',
                '#bfd3e6',
                '#9ebcda',
                '#8c96c6',
                '#8856a7',
                '#810f7c'
            ],
            7: [
                '#edf8fb',
                '#bfd3e6',
                '#9ebcda',
                '#8c96c6',
                '#8c6bb1',
                '#88419d',
                '#6e016b'
            ],
            8: [
                '#f7fcfd',
                '#e0ecf4',
                '#bfd3e6',
                '#9ebcda',
                '#8c96c6',
                '#8c6bb1',
                '#88419d',
                '#6e016b'
            ],
            9: [
                '#f7fcfd',
                '#e0ecf4',
                '#bfd3e6',
                '#9ebcda',
                '#8c96c6',
                '#8c6bb1',
                '#88419d',
                '#810f7c',
                '#4d004b'
            ]
        },
        RdPu: {
            3: [
                '#fde0dd',
                '#fa9fb5',
                '#c51b8a'
            ],
            4: [
                '#feebe2',
                '#fbb4b9',
                '#f768a1',
                '#ae017e'
            ],
            5: [
                '#feebe2',
                '#fbb4b9',
                '#f768a1',
                '#c51b8a',
                '#7a0177'
            ],
            6: [
                '#feebe2',
                '#fcc5c0',
                '#fa9fb5',
                '#f768a1',
                '#c51b8a',
                '#7a0177'
            ],
            7: [
                '#feebe2',
                '#fcc5c0',
                '#fa9fb5',
                '#f768a1',
                '#dd3497',
                '#ae017e',
                '#7a0177'
            ],
            8: [
                '#fff7f3',
                '#fde0dd',
                '#fcc5c0',
                '#fa9fb5',
                '#f768a1',
                '#dd3497',
                '#ae017e',
                '#7a0177'
            ],
            9: [
                '#fff7f3',
                '#fde0dd',
                '#fcc5c0',
                '#fa9fb5',
                '#f768a1',
                '#dd3497',
                '#ae017e',
                '#7a0177',
                '#49006a'
            ]
        },
        PuRd: {
            3: [
                '#e7e1ef',
                '#c994c7',
                '#dd1c77'
            ],
            4: [
                '#f1eef6',
                '#d7b5d8',
                '#df65b0',
                '#ce1256'
            ],
            5: [
                '#f1eef6',
                '#d7b5d8',
                '#df65b0',
                '#dd1c77',
                '#980043'
            ],
            6: [
                '#f1eef6',
                '#d4b9da',
                '#c994c7',
                '#df65b0',
                '#dd1c77',
                '#980043'
            ],
            7: [
                '#f1eef6',
                '#d4b9da',
                '#c994c7',
                '#df65b0',
                '#e7298a',
                '#ce1256',
                '#91003f'
            ],
            8: [
                '#f7f4f9',
                '#e7e1ef',
                '#d4b9da',
                '#c994c7',
                '#df65b0',
                '#e7298a',
                '#ce1256',
                '#91003f'
            ],
            9: [
                '#f7f4f9',
                '#e7e1ef',
                '#d4b9da',
                '#c994c7',
                '#df65b0',
                '#e7298a',
                '#ce1256',
                '#980043',
                '#67001f'
            ]
        },
        OrRd: {
            3: [
                '#fee8c8',
                '#fdbb84',
                '#e34a33'
            ],
            4: [
                '#fef0d9',
                '#fdcc8a',
                '#fc8d59',
                '#d7301f'
            ],
            5: [
                '#fef0d9',
                '#fdcc8a',
                '#fc8d59',
                '#e34a33',
                '#b30000'
            ],
            6: [
                '#fef0d9',
                '#fdd49e',
                '#fdbb84',
                '#fc8d59',
                '#e34a33',
                '#b30000'
            ],
            7: [
                '#fef0d9',
                '#fdd49e',
                '#fdbb84',
                '#fc8d59',
                '#ef6548',
                '#d7301f',
                '#990000'
            ],
            8: [
                '#fff7ec',
                '#fee8c8',
                '#fdd49e',
                '#fdbb84',
                '#fc8d59',
                '#ef6548',
                '#d7301f',
                '#990000'
            ],
            9: [
                '#fff7ec',
                '#fee8c8',
                '#fdd49e',
                '#fdbb84',
                '#fc8d59',
                '#ef6548',
                '#d7301f',
                '#b30000',
                '#7f0000'
            ]
        },
        YlOrRd: {
            3: [
                '#ffeda0',
                '#feb24c',
                '#f03b20'
            ],
            4: [
                '#ffffb2',
                '#fecc5c',
                '#fd8d3c',
                '#e31a1c'
            ],
            5: [
                '#ffffb2',
                '#fecc5c',
                '#fd8d3c',
                '#f03b20',
                '#bd0026'
            ],
            6: [
                '#ffffb2',
                '#fed976',
                '#feb24c',
                '#fd8d3c',
                '#f03b20',
                '#bd0026'
            ],
            7: [
                '#ffffb2',
                '#fed976',
                '#feb24c',
                '#fd8d3c',
                '#fc4e2a',
                '#e31a1c',
                '#b10026'
            ],
            8: [
                '#ffffcc',
                '#ffeda0',
                '#fed976',
                '#feb24c',
                '#fd8d3c',
                '#fc4e2a',
                '#e31a1c',
                '#b10026'
            ],
            9: [
                '#ffffcc',
                '#ffeda0',
                '#fed976',
                '#feb24c',
                '#fd8d3c',
                '#fc4e2a',
                '#e31a1c',
                '#bd0026',
                '#800026'
            ]
        },
        YlOrBr: {
            3: [
                '#fff7bc',
                '#fec44f',
                '#d95f0e'
            ],
            4: [
                '#ffffd4',
                '#fed98e',
                '#fe9929',
                '#cc4c02'
            ],
            5: [
                '#ffffd4',
                '#fed98e',
                '#fe9929',
                '#d95f0e',
                '#993404'
            ],
            6: [
                '#ffffd4',
                '#fee391',
                '#fec44f',
                '#fe9929',
                '#d95f0e',
                '#993404'
            ],
            7: [
                '#ffffd4',
                '#fee391',
                '#fec44f',
                '#fe9929',
                '#ec7014',
                '#cc4c02',
                '#8c2d04'
            ],
            8: [
                '#ffffe5',
                '#fff7bc',
                '#fee391',
                '#fec44f',
                '#fe9929',
                '#ec7014',
                '#cc4c02',
                '#8c2d04'
            ],
            9: [
                '#ffffe5',
                '#fff7bc',
                '#fee391',
                '#fec44f',
                '#fe9929',
                '#ec7014',
                '#cc4c02',
                '#993404',
                '#662506'
            ]
        },
        Purples: {
            3: [
                '#efedf5',
                '#bcbddc',
                '#756bb1'
            ],
            4: [
                '#f2f0f7',
                '#cbc9e2',
                '#9e9ac8',
                '#6a51a3'
            ],
            5: [
                '#f2f0f7',
                '#cbc9e2',
                '#9e9ac8',
                '#756bb1',
                '#54278f'
            ],
            6: [
                '#f2f0f7',
                '#dadaeb',
                '#bcbddc',
                '#9e9ac8',
                '#756bb1',
                '#54278f'
            ],
            7: [
                '#f2f0f7',
                '#dadaeb',
                '#bcbddc',
                '#9e9ac8',
                '#807dba',
                '#6a51a3',
                '#4a1486'
            ],
            8: [
                '#fcfbfd',
                '#efedf5',
                '#dadaeb',
                '#bcbddc',
                '#9e9ac8',
                '#807dba',
                '#6a51a3',
                '#4a1486'
            ],
            9: [
                '#fcfbfd',
                '#efedf5',
                '#dadaeb',
                '#bcbddc',
                '#9e9ac8',
                '#807dba',
                '#6a51a3',
                '#54278f',
                '#3f007d'
            ]
        },
        Blues: {
            3: [
                '#deebf7',
                '#9ecae1',
                '#3182bd'
            ],
            4: [
                '#eff3ff',
                '#bdd7e7',
                '#6baed6',
                '#2171b5'
            ],
            5: [
                '#eff3ff',
                '#bdd7e7',
                '#6baed6',
                '#3182bd',
                '#08519c'
            ],
            6: [
                '#eff3ff',
                '#c6dbef',
                '#9ecae1',
                '#6baed6',
                '#3182bd',
                '#08519c'
            ],
            7: [
                '#eff3ff',
                '#c6dbef',
                '#9ecae1',
                '#6baed6',
                '#4292c6',
                '#2171b5',
                '#084594'
            ],
            8: [
                '#f7fbff',
                '#deebf7',
                '#c6dbef',
                '#9ecae1',
                '#6baed6',
                '#4292c6',
                '#2171b5',
                '#084594'
            ],
            9: [
                '#f7fbff',
                '#deebf7',
                '#c6dbef',
                '#9ecae1',
                '#6baed6',
                '#4292c6',
                '#2171b5',
                '#08519c',
                '#08306b'
            ]
        },
        Greens: {
            3: [
                '#e5f5e0',
                '#a1d99b',
                '#31a354'
            ],
            4: [
                '#edf8e9',
                '#bae4b3',
                '#74c476',
                '#238b45'
            ],
            5: [
                '#edf8e9',
                '#bae4b3',
                '#74c476',
                '#31a354',
                '#006d2c'
            ],
            6: [
                '#edf8e9',
                '#c7e9c0',
                '#a1d99b',
                '#74c476',
                '#31a354',
                '#006d2c'
            ],
            7: [
                '#edf8e9',
                '#c7e9c0',
                '#a1d99b',
                '#74c476',
                '#41ab5d',
                '#238b45',
                '#005a32'
            ],
            8: [
                '#f7fcf5',
                '#e5f5e0',
                '#c7e9c0',
                '#a1d99b',
                '#74c476',
                '#41ab5d',
                '#238b45',
                '#005a32'
            ],
            9: [
                '#f7fcf5',
                '#e5f5e0',
                '#c7e9c0',
                '#a1d99b',
                '#74c476',
                '#41ab5d',
                '#238b45',
                '#006d2c',
                '#00441b'
            ]
        },
        Oranges: {
            3: [
                '#fee6ce',
                '#fdae6b',
                '#e6550d'
            ],
            4: [
                '#feedde',
                '#fdbe85',
                '#fd8d3c',
                '#d94701'
            ],
            5: [
                '#feedde',
                '#fdbe85',
                '#fd8d3c',
                '#e6550d',
                '#a63603'
            ],
            6: [
                '#feedde',
                '#fdd0a2',
                '#fdae6b',
                '#fd8d3c',
                '#e6550d',
                '#a63603'
            ],
            7: [
                '#feedde',
                '#fdd0a2',
                '#fdae6b',
                '#fd8d3c',
                '#f16913',
                '#d94801',
                '#8c2d04'
            ],
            8: [
                '#fff5eb',
                '#fee6ce',
                '#fdd0a2',
                '#fdae6b',
                '#fd8d3c',
                '#f16913',
                '#d94801',
                '#8c2d04'
            ],
            9: [
                '#fff5eb',
                '#fee6ce',
                '#fdd0a2',
                '#fdae6b',
                '#fd8d3c',
                '#f16913',
                '#d94801',
                '#a63603',
                '#7f2704'
            ]
        },
        Reds: {
            3: [
                '#fee0d2',
                '#fc9272',
                '#de2d26'
            ],
            4: [
                '#fee5d9',
                '#fcae91',
                '#fb6a4a',
                '#cb181d'
            ],
            5: [
                '#fee5d9',
                '#fcae91',
                '#fb6a4a',
                '#de2d26',
                '#a50f15'
            ],
            6: [
                '#fee5d9',
                '#fcbba1',
                '#fc9272',
                '#fb6a4a',
                '#de2d26',
                '#a50f15'
            ],
            7: [
                '#fee5d9',
                '#fcbba1',
                '#fc9272',
                '#fb6a4a',
                '#ef3b2c',
                '#cb181d',
                '#99000d'
            ],
            8: [
                '#fff5f0',
                '#fee0d2',
                '#fcbba1',
                '#fc9272',
                '#fb6a4a',
                '#ef3b2c',
                '#cb181d',
                '#99000d'
            ],
            9: [
                '#fff5f0',
                '#fee0d2',
                '#fcbba1',
                '#fc9272',
                '#fb6a4a',
                '#ef3b2c',
                '#cb181d',
                '#a50f15',
                '#67000d'
            ]
        },
        Greys: {
            3: [
                '#f0f0f0',
                '#bdbdbd',
                '#636363'
            ],
            4: [
                '#f7f7f7',
                '#cccccc',
                '#969696',
                '#525252'
            ],
            5: [
                '#f7f7f7',
                '#cccccc',
                '#969696',
                '#636363',
                '#252525'
            ],
            6: [
                '#f7f7f7',
                '#d9d9d9',
                '#bdbdbd',
                '#969696',
                '#636363',
                '#252525'
            ],
            7: [
                '#f7f7f7',
                '#d9d9d9',
                '#bdbdbd',
                '#969696',
                '#737373',
                '#525252',
                '#252525'
            ],
            8: [
                '#ffffff',
                '#f0f0f0',
                '#d9d9d9',
                '#bdbdbd',
                '#969696',
                '#737373',
                '#525252',
                '#252525'
            ],
            9: [
                '#ffffff',
                '#f0f0f0',
                '#d9d9d9',
                '#bdbdbd',
                '#969696',
                '#737373',
                '#525252',
                '#252525',
                '#000000'
            ]
        },
        PuOr: {
            3: [
                '#f1a340',
                '#f7f7f7',
                '#998ec3'
            ],
            4: [
                '#e66101',
                '#fdb863',
                '#b2abd2',
                '#5e3c99'
            ],
            5: [
                '#e66101',
                '#fdb863',
                '#f7f7f7',
                '#b2abd2',
                '#5e3c99'
            ],
            6: [
                '#b35806',
                '#f1a340',
                '#fee0b6',
                '#d8daeb',
                '#998ec3',
                '#542788'
            ],
            7: [
                '#b35806',
                '#f1a340',
                '#fee0b6',
                '#f7f7f7',
                '#d8daeb',
                '#998ec3',
                '#542788'
            ],
            8: [
                '#b35806',
                '#e08214',
                '#fdb863',
                '#fee0b6',
                '#d8daeb',
                '#b2abd2',
                '#8073ac',
                '#542788'
            ],
            9: [
                '#b35806',
                '#e08214',
                '#fdb863',
                '#fee0b6',
                '#f7f7f7',
                '#d8daeb',
                '#b2abd2',
                '#8073ac',
                '#542788'
            ],
            10: [
                '#7f3b08',
                '#b35806',
                '#e08214',
                '#fdb863',
                '#fee0b6',
                '#d8daeb',
                '#b2abd2',
                '#8073ac',
                '#542788',
                '#2d004b'
            ],
            11: [
                '#7f3b08',
                '#b35806',
                '#e08214',
                '#fdb863',
                '#fee0b6',
                '#f7f7f7',
                '#d8daeb',
                '#b2abd2',
                '#8073ac',
                '#542788',
                '#2d004b'
            ]
        },
        BrBG: {
            3: [
                '#d8b365',
                '#f5f5f5',
                '#5ab4ac'
            ],
            4: [
                '#a6611a',
                '#dfc27d',
                '#80cdc1',
                '#018571'
            ],
            5: [
                '#a6611a',
                '#dfc27d',
                '#f5f5f5',
                '#80cdc1',
                '#018571'
            ],
            6: [
                '#8c510a',
                '#d8b365',
                '#f6e8c3',
                '#c7eae5',
                '#5ab4ac',
                '#01665e'
            ],
            7: [
                '#8c510a',
                '#d8b365',
                '#f6e8c3',
                '#f5f5f5',
                '#c7eae5',
                '#5ab4ac',
                '#01665e'
            ],
            8: [
                '#8c510a',
                '#bf812d',
                '#dfc27d',
                '#f6e8c3',
                '#c7eae5',
                '#80cdc1',
                '#35978f',
                '#01665e'
            ],
            9: [
                '#8c510a',
                '#bf812d',
                '#dfc27d',
                '#f6e8c3',
                '#f5f5f5',
                '#c7eae5',
                '#80cdc1',
                '#35978f',
                '#01665e'
            ],
            10: [
                '#543005',
                '#8c510a',
                '#bf812d',
                '#dfc27d',
                '#f6e8c3',
                '#c7eae5',
                '#80cdc1',
                '#35978f',
                '#01665e',
                '#003c30'
            ],
            11: [
                '#543005',
                '#8c510a',
                '#bf812d',
                '#dfc27d',
                '#f6e8c3',
                '#f5f5f5',
                '#c7eae5',
                '#80cdc1',
                '#35978f',
                '#01665e',
                '#003c30'
            ]
        },
        PRGn: {
            3: [
                '#af8dc3',
                '#f7f7f7',
                '#7fbf7b'
            ],
            4: [
                '#7b3294',
                '#c2a5cf',
                '#a6dba0',
                '#008837'
            ],
            5: [
                '#7b3294',
                '#c2a5cf',
                '#f7f7f7',
                '#a6dba0',
                '#008837'
            ],
            6: [
                '#762a83',
                '#af8dc3',
                '#e7d4e8',
                '#d9f0d3',
                '#7fbf7b',
                '#1b7837'
            ],
            7: [
                '#762a83',
                '#af8dc3',
                '#e7d4e8',
                '#f7f7f7',
                '#d9f0d3',
                '#7fbf7b',
                '#1b7837'
            ],
            8: [
                '#762a83',
                '#9970ab',
                '#c2a5cf',
                '#e7d4e8',
                '#d9f0d3',
                '#a6dba0',
                '#5aae61',
                '#1b7837'
            ],
            9: [
                '#762a83',
                '#9970ab',
                '#c2a5cf',
                '#e7d4e8',
                '#f7f7f7',
                '#d9f0d3',
                '#a6dba0',
                '#5aae61',
                '#1b7837'
            ],
            10: [
                '#40004b',
                '#762a83',
                '#9970ab',
                '#c2a5cf',
                '#e7d4e8',
                '#d9f0d3',
                '#a6dba0',
                '#5aae61',
                '#1b7837',
                '#00441b'
            ],
            11: [
                '#40004b',
                '#762a83',
                '#9970ab',
                '#c2a5cf',
                '#e7d4e8',
                '#f7f7f7',
                '#d9f0d3',
                '#a6dba0',
                '#5aae61',
                '#1b7837',
                '#00441b'
            ]
        },
        PiYG: {
            3: [
                '#e9a3c9',
                '#f7f7f7',
                '#a1d76a'
            ],
            4: [
                '#d01c8b',
                '#f1b6da',
                '#b8e186',
                '#4dac26'
            ],
            5: [
                '#d01c8b',
                '#f1b6da',
                '#f7f7f7',
                '#b8e186',
                '#4dac26'
            ],
            6: [
                '#c51b7d',
                '#e9a3c9',
                '#fde0ef',
                '#e6f5d0',
                '#a1d76a',
                '#4d9221'
            ],
            7: [
                '#c51b7d',
                '#e9a3c9',
                '#fde0ef',
                '#f7f7f7',
                '#e6f5d0',
                '#a1d76a',
                '#4d9221'
            ],
            8: [
                '#c51b7d',
                '#de77ae',
                '#f1b6da',
                '#fde0ef',
                '#e6f5d0',
                '#b8e186',
                '#7fbc41',
                '#4d9221'
            ],
            9: [
                '#c51b7d',
                '#de77ae',
                '#f1b6da',
                '#fde0ef',
                '#f7f7f7',
                '#e6f5d0',
                '#b8e186',
                '#7fbc41',
                '#4d9221'
            ],
            10: [
                '#8e0152',
                '#c51b7d',
                '#de77ae',
                '#f1b6da',
                '#fde0ef',
                '#e6f5d0',
                '#b8e186',
                '#7fbc41',
                '#4d9221',
                '#276419'
            ],
            11: [
                '#8e0152',
                '#c51b7d',
                '#de77ae',
                '#f1b6da',
                '#fde0ef',
                '#f7f7f7',
                '#e6f5d0',
                '#b8e186',
                '#7fbc41',
                '#4d9221',
                '#276419'
            ]
        },
        RdBu: {
            3: [
                '#ef8a62',
                '#f7f7f7',
                '#67a9cf'
            ],
            4: [
                '#ca0020',
                '#f4a582',
                '#92c5de',
                '#0571b0'
            ],
            5: [
                '#ca0020',
                '#f4a582',
                '#f7f7f7',
                '#92c5de',
                '#0571b0'
            ],
            6: [
                '#b2182b',
                '#ef8a62',
                '#fddbc7',
                '#d1e5f0',
                '#67a9cf',
                '#2166ac'
            ],
            7: [
                '#b2182b',
                '#ef8a62',
                '#fddbc7',
                '#f7f7f7',
                '#d1e5f0',
                '#67a9cf',
                '#2166ac'
            ],
            8: [
                '#b2182b',
                '#d6604d',
                '#f4a582',
                '#fddbc7',
                '#d1e5f0',
                '#92c5de',
                '#4393c3',
                '#2166ac'
            ],
            9: [
                '#b2182b',
                '#d6604d',
                '#f4a582',
                '#fddbc7',
                '#f7f7f7',
                '#d1e5f0',
                '#92c5de',
                '#4393c3',
                '#2166ac'
            ],
            10: [
                '#67001f',
                '#b2182b',
                '#d6604d',
                '#f4a582',
                '#fddbc7',
                '#d1e5f0',
                '#92c5de',
                '#4393c3',
                '#2166ac',
                '#053061'
            ],
            11: [
                '#67001f',
                '#b2182b',
                '#d6604d',
                '#f4a582',
                '#fddbc7',
                '#f7f7f7',
                '#d1e5f0',
                '#92c5de',
                '#4393c3',
                '#2166ac',
                '#053061'
            ]
        },
        RdGy: {
            3: [
                '#ef8a62',
                '#ffffff',
                '#999999'
            ],
            4: [
                '#ca0020',
                '#f4a582',
                '#bababa',
                '#404040'
            ],
            5: [
                '#ca0020',
                '#f4a582',
                '#ffffff',
                '#bababa',
                '#404040'
            ],
            6: [
                '#b2182b',
                '#ef8a62',
                '#fddbc7',
                '#e0e0e0',
                '#999999',
                '#4d4d4d'
            ],
            7: [
                '#b2182b',
                '#ef8a62',
                '#fddbc7',
                '#ffffff',
                '#e0e0e0',
                '#999999',
                '#4d4d4d'
            ],
            8: [
                '#b2182b',
                '#d6604d',
                '#f4a582',
                '#fddbc7',
                '#e0e0e0',
                '#bababa',
                '#878787',
                '#4d4d4d'
            ],
            9: [
                '#b2182b',
                '#d6604d',
                '#f4a582',
                '#fddbc7',
                '#ffffff',
                '#e0e0e0',
                '#bababa',
                '#878787',
                '#4d4d4d'
            ],
            10: [
                '#67001f',
                '#b2182b',
                '#d6604d',
                '#f4a582',
                '#fddbc7',
                '#e0e0e0',
                '#bababa',
                '#878787',
                '#4d4d4d',
                '#1a1a1a'
            ],
            11: [
                '#67001f',
                '#b2182b',
                '#d6604d',
                '#f4a582',
                '#fddbc7',
                '#ffffff',
                '#e0e0e0',
                '#bababa',
                '#878787',
                '#4d4d4d',
                '#1a1a1a'
            ]
        },
        RdYlBu: {
            3: [
                '#fc8d59',
                '#ffffbf',
                '#91bfdb'
            ],
            4: [
                '#d7191c',
                '#fdae61',
                '#abd9e9',
                '#2c7bb6'
            ],
            5: [
                '#d7191c',
                '#fdae61',
                '#ffffbf',
                '#abd9e9',
                '#2c7bb6'
            ],
            6: [
                '#d73027',
                '#fc8d59',
                '#fee090',
                '#e0f3f8',
                '#91bfdb',
                '#4575b4'
            ],
            7: [
                '#d73027',
                '#fc8d59',
                '#fee090',
                '#ffffbf',
                '#e0f3f8',
                '#91bfdb',
                '#4575b4'
            ],
            8: [
                '#d73027',
                '#f46d43',
                '#fdae61',
                '#fee090',
                '#e0f3f8',
                '#abd9e9',
                '#74add1',
                '#4575b4'
            ],
            9: [
                '#d73027',
                '#f46d43',
                '#fdae61',
                '#fee090',
                '#ffffbf',
                '#e0f3f8',
                '#abd9e9',
                '#74add1',
                '#4575b4'
            ],
            10: [
                '#a50026',
                '#d73027',
                '#f46d43',
                '#fdae61',
                '#fee090',
                '#e0f3f8',
                '#abd9e9',
                '#74add1',
                '#4575b4',
                '#313695'
            ],
            11: [
                '#a50026',
                '#d73027',
                '#f46d43',
                '#fdae61',
                '#fee090',
                '#ffffbf',
                '#e0f3f8',
                '#abd9e9',
                '#74add1',
                '#4575b4',
                '#313695'
            ]
        },
        Spectral: {
            3: [
                '#fc8d59',
                '#ffffbf',
                '#99d594'
            ],
            4: [
                '#d7191c',
                '#fdae61',
                '#abdda4',
                '#2b83ba'
            ],
            5: [
                '#d7191c',
                '#fdae61',
                '#ffffbf',
                '#abdda4',
                '#2b83ba'
            ],
            6: [
                '#d53e4f',
                '#fc8d59',
                '#fee08b',
                '#e6f598',
                '#99d594',
                '#3288bd'
            ],
            7: [
                '#d53e4f',
                '#fc8d59',
                '#fee08b',
                '#ffffbf',
                '#e6f598',
                '#99d594',
                '#3288bd'
            ],
            8: [
                '#d53e4f',
                '#f46d43',
                '#fdae61',
                '#fee08b',
                '#e6f598',
                '#abdda4',
                '#66c2a5',
                '#3288bd'
            ],
            9: [
                '#d53e4f',
                '#f46d43',
                '#fdae61',
                '#fee08b',
                '#ffffbf',
                '#e6f598',
                '#abdda4',
                '#66c2a5',
                '#3288bd'
            ],
            10: [
                '#9e0142',
                '#d53e4f',
                '#f46d43',
                '#fdae61',
                '#fee08b',
                '#e6f598',
                '#abdda4',
                '#66c2a5',
                '#3288bd',
                '#5e4fa2'
            ],
            11: [
                '#9e0142',
                '#d53e4f',
                '#f46d43',
                '#fdae61',
                '#fee08b',
                '#ffffbf',
                '#e6f598',
                '#abdda4',
                '#66c2a5',
                '#3288bd',
                '#5e4fa2'
            ]
        },
        RdYlGn: {
            3: [
                '#fc8d59',
                '#ffffbf',
                '#91cf60'
            ],
            4: [
                '#d7191c',
                '#fdae61',
                '#a6d96a',
                '#1a9641'
            ],
            5: [
                '#d7191c',
                '#fdae61',
                '#ffffbf',
                '#a6d96a',
                '#1a9641'
            ],
            6: [
                '#d73027',
                '#fc8d59',
                '#fee08b',
                '#d9ef8b',
                '#91cf60',
                '#1a9850'
            ],
            7: [
                '#d73027',
                '#fc8d59',
                '#fee08b',
                '#ffffbf',
                '#d9ef8b',
                '#91cf60',
                '#1a9850'
            ],
            8: [
                '#d73027',
                '#f46d43',
                '#fdae61',
                '#fee08b',
                '#d9ef8b',
                '#a6d96a',
                '#66bd63',
                '#1a9850'
            ],
            9: [
                '#d73027',
                '#f46d43',
                '#fdae61',
                '#fee08b',
                '#ffffbf',
                '#d9ef8b',
                '#a6d96a',
                '#66bd63',
                '#1a9850'
            ],
            10: [
                '#a50026',
                '#d73027',
                '#f46d43',
                '#fdae61',
                '#fee08b',
                '#d9ef8b',
                '#a6d96a',
                '#66bd63',
                '#1a9850',
                '#006837'
            ],
            11: [
                '#a50026',
                '#d73027',
                '#f46d43',
                '#fdae61',
                '#fee08b',
                '#ffffbf',
                '#d9ef8b',
                '#a6d96a',
                '#66bd63',
                '#1a9850',
                '#006837'
            ]
        },
        Accent: {
            3: [
                '#7fc97f',
                '#beaed4',
                '#fdc086'
            ],
            4: [
                '#7fc97f',
                '#beaed4',
                '#fdc086',
                '#ffff99'
            ],
            5: [
                '#7fc97f',
                '#beaed4',
                '#fdc086',
                '#ffff99',
                '#386cb0'
            ],
            6: [
                '#7fc97f',
                '#beaed4',
                '#fdc086',
                '#ffff99',
                '#386cb0',
                '#f0027f'
            ],
            7: [
                '#7fc97f',
                '#beaed4',
                '#fdc086',
                '#ffff99',
                '#386cb0',
                '#f0027f',
                '#bf5b17'
            ],
            8: [
                '#7fc97f',
                '#beaed4',
                '#fdc086',
                '#ffff99',
                '#386cb0',
                '#f0027f',
                '#bf5b17',
                '#666666'
            ]
        },
        Dark2: {
            3: [
                '#1b9e77',
                '#d95f02',
                '#7570b3'
            ],
            4: [
                '#1b9e77',
                '#d95f02',
                '#7570b3',
                '#e7298a'
            ],
            5: [
                '#1b9e77',
                '#d95f02',
                '#7570b3',
                '#e7298a',
                '#66a61e'
            ],
            6: [
                '#1b9e77',
                '#d95f02',
                '#7570b3',
                '#e7298a',
                '#66a61e',
                '#e6ab02'
            ],
            7: [
                '#1b9e77',
                '#d95f02',
                '#7570b3',
                '#e7298a',
                '#66a61e',
                '#e6ab02',
                '#a6761d'
            ],
            8: [
                '#1b9e77',
                '#d95f02',
                '#7570b3',
                '#e7298a',
                '#66a61e',
                '#e6ab02',
                '#a6761d',
                '#666666'
            ]
        },
        Paired: {
            3: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a'
            ],
            4: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c'
            ],
            5: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c',
                '#fb9a99'
            ],
            6: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c',
                '#fb9a99',
                '#e31a1c'
            ],
            7: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c',
                '#fb9a99',
                '#e31a1c',
                '#fdbf6f'
            ],
            8: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c',
                '#fb9a99',
                '#e31a1c',
                '#fdbf6f',
                '#ff7f00'
            ],
            9: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c',
                '#fb9a99',
                '#e31a1c',
                '#fdbf6f',
                '#ff7f00',
                '#cab2d6'
            ],
            10: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c',
                '#fb9a99',
                '#e31a1c',
                '#fdbf6f',
                '#ff7f00',
                '#cab2d6',
                '#6a3d9a'
            ],
            11: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c',
                '#fb9a99',
                '#e31a1c',
                '#fdbf6f',
                '#ff7f00',
                '#cab2d6',
                '#6a3d9a',
                '#ffff99'
            ],
            12: [
                '#a6cee3',
                '#1f78b4',
                '#b2df8a',
                '#33a02c',
                '#fb9a99',
                '#e31a1c',
                '#fdbf6f',
                '#ff7f00',
                '#cab2d6',
                '#6a3d9a',
                '#ffff99',
                '#b15928'
            ]
        },
        Pastel1: {
            3: [
                '#fbb4ae',
                '#b3cde3',
                '#ccebc5'
            ],
            4: [
                '#fbb4ae',
                '#b3cde3',
                '#ccebc5',
                '#decbe4'
            ],
            5: [
                '#fbb4ae',
                '#b3cde3',
                '#ccebc5',
                '#decbe4',
                '#fed9a6'
            ],
            6: [
                '#fbb4ae',
                '#b3cde3',
                '#ccebc5',
                '#decbe4',
                '#fed9a6',
                '#ffffcc'
            ],
            7: [
                '#fbb4ae',
                '#b3cde3',
                '#ccebc5',
                '#decbe4',
                '#fed9a6',
                '#ffffcc',
                '#e5d8bd'
            ],
            8: [
                '#fbb4ae',
                '#b3cde3',
                '#ccebc5',
                '#decbe4',
                '#fed9a6',
                '#ffffcc',
                '#e5d8bd',
                '#fddaec'
            ],
            9: [
                '#fbb4ae',
                '#b3cde3',
                '#ccebc5',
                '#decbe4',
                '#fed9a6',
                '#ffffcc',
                '#e5d8bd',
                '#fddaec',
                '#f2f2f2'
            ]
        },
        Pastel2: {
            3: [
                '#b3e2cd',
                '#fdcdac',
                '#cbd5e8'
            ],
            4: [
                '#b3e2cd',
                '#fdcdac',
                '#cbd5e8',
                '#f4cae4'
            ],
            5: [
                '#b3e2cd',
                '#fdcdac',
                '#cbd5e8',
                '#f4cae4',
                '#e6f5c9'
            ],
            6: [
                '#b3e2cd',
                '#fdcdac',
                '#cbd5e8',
                '#f4cae4',
                '#e6f5c9',
                '#fff2ae'
            ],
            7: [
                '#b3e2cd',
                '#fdcdac',
                '#cbd5e8',
                '#f4cae4',
                '#e6f5c9',
                '#fff2ae',
                '#f1e2cc'
            ],
            8: [
                '#b3e2cd',
                '#fdcdac',
                '#cbd5e8',
                '#f4cae4',
                '#e6f5c9',
                '#fff2ae',
                '#f1e2cc',
                '#cccccc'
            ]
        },
        Set1: {
            3: [
                '#e41a1c',
                '#377eb8',
                '#4daf4a'
            ],
            4: [
                '#e41a1c',
                '#377eb8',
                '#4daf4a',
                '#984ea3'
            ],
            5: [
                '#e41a1c',
                '#377eb8',
                '#4daf4a',
                '#984ea3',
                '#ff7f00'
            ],
            6: [
                '#e41a1c',
                '#377eb8',
                '#4daf4a',
                '#984ea3',
                '#ff7f00',
                '#ffff33'
            ],
            7: [
                '#e41a1c',
                '#377eb8',
                '#4daf4a',
                '#984ea3',
                '#ff7f00',
                '#ffff33',
                '#a65628'
            ],
            8: [
                '#e41a1c',
                '#377eb8',
                '#4daf4a',
                '#984ea3',
                '#ff7f00',
                '#ffff33',
                '#a65628',
                '#f781bf'
            ],
            9: [
                '#e41a1c',
                '#377eb8',
                '#4daf4a',
                '#984ea3',
                '#ff7f00',
                '#ffff33',
                '#a65628',
                '#f781bf',
                '#999999'
            ]
        },
        Set2: {
            3: [
                '#66c2a5',
                '#fc8d62',
                '#8da0cb'
            ],
            4: [
                '#66c2a5',
                '#fc8d62',
                '#8da0cb',
                '#e78ac3'
            ],
            5: [
                '#66c2a5',
                '#fc8d62',
                '#8da0cb',
                '#e78ac3',
                '#a6d854'
            ],
            6: [
                '#66c2a5',
                '#fc8d62',
                '#8da0cb',
                '#e78ac3',
                '#a6d854',
                '#ffd92f'
            ],
            7: [
                '#66c2a5',
                '#fc8d62',
                '#8da0cb',
                '#e78ac3',
                '#a6d854',
                '#ffd92f',
                '#e5c494'
            ],
            8: [
                '#66c2a5',
                '#fc8d62',
                '#8da0cb',
                '#e78ac3',
                '#a6d854',
                '#ffd92f',
                '#e5c494',
                '#b3b3b3'
            ]
        },
        Set3: {
            3: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada'
            ],
            4: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072'
            ],
            5: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072',
                '#80b1d3'
            ],
            6: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072',
                '#80b1d3',
                '#fdb462'
            ],
            7: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072',
                '#80b1d3',
                '#fdb462',
                '#b3de69'
            ],
            8: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072',
                '#80b1d3',
                '#fdb462',
                '#b3de69',
                '#fccde5'
            ],
            9: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072',
                '#80b1d3',
                '#fdb462',
                '#b3de69',
                '#fccde5',
                '#d9d9d9'
            ],
            10: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072',
                '#80b1d3',
                '#fdb462',
                '#b3de69',
                '#fccde5',
                '#d9d9d9',
                '#bc80bd'
            ],
            11: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072',
                '#80b1d3',
                '#fdb462',
                '#b3de69',
                '#fccde5',
                '#d9d9d9',
                '#bc80bd',
                '#ccebc5'
            ],
            12: [
                '#8dd3c7',
                '#ffffb3',
                '#bebada',
                '#fb8072',
                '#80b1d3',
                '#fdb462',
                '#b3de69',
                '#fccde5',
                '#d9d9d9',
                '#bc80bd',
                '#ccebc5',
                '#ffed6f'
            ]
        }
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawCluster*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawCluster', [
    'd3',
    './colorBrewer',
    'jquery'
], function (d3, d3colors) {
    return function (cluster, canvas) {
        var self = this;
        canvas.selectAll('*').remove();
        var colors = d3.scale.ordinal().domain(d3.range(cluster.clusters.length));
        if (cluster.clusters.length > 2) {
            colors.range(d3colors.Set1[cluster.clusters.length]);
        } else {
            colors.range([
                'blue',
                'yellow'
            ]);
        }
        if (cluster.dimension == 'column') {
            cluster.clusters.map(function (group, index) {
                canvas.selectAll('rect').data(group, function (d) {
                    return d;
                }).enter().append('rect').attr({
                    'x': function (d, i) {
                        return self.scales.cells.xScale(d);
                    },
                    'y': function (d, i) {
                        return self.scales.panel.top.yScale(0.5);
                    },
                    'width': function (d, i) {
                        return self.params.cell.width - self.params.cell.padding;
                    },
                    'height': function (d, i) {
                        return self.scales.panel.top.yScale(0.5) - self.scales.panel.top.yScale(0);
                    },
                    'fill': function (d, i) {
                        return colors(index);
                    }
                }).on('mousedown', function (d) {
                    switch (d3.event.button) {
                    case 0:
                        self.view.selectionParams[cluster.dimension].labels = group;
                        $('div#' + cluster.dimension + 'SelectionsModal').modal();
                        break;
                    }
                });
            });
        } else if (cluster.dimension == 'row') {
            cluster.clusters.map(function (group, index) {
                var fill = '#' + Math.floor(Math.random() * 16777215 << 0).toString(16);
                canvas.selectAll('rect').data(group, function (d) {
                    return d;
                }).enter().append('rect').attr({
                    'y': function (d, i) {
                        return self.scales.cells.yScale(d);
                    },
                    'x': function (d, i) {
                        return self.scales.panel.side.xScale(0.5) - 1;
                    },
                    'height': function (d, i) {
                        return self.params.cell.height - self.params.cell.padding;
                    },
                    'width': function (d, i) {
                        return self.scales.panel.side.xScale(0.5) - self.scales.panel.side.xScale(0);
                    },
                    'fill': function (d, i) {
                        return colors(index);
                    }
                }).on('mousedown', function (d) {
                    switch (d3.event.button) {
                    case 0:
                        self.view.selectionParams[cluster.dimension].labels = group;
                        $('div#' + cluster.dimension + 'SelectionsModal').modal();
                        break;
                    }
                });
            });
        }
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawTopPanel*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawTopPanel', [], function () {
    return function (newval) {
        var self = this;
        if (newval.type == 'Hierarchical Clustering') {
            self.drawTree(self.DOM.topPanel, newval.result.column, 'horizontal');
        } else if (newval.type == 'K-means Clustering') {
            self.drawCluster(newval, self.DOM.topPanel);
        }
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawSidePanel*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/drawSidePanel', [], function () {
    'use strict';
    return function (newval) {
        var self = this;
        if (newval.type == 'Hierarchical Clustering') {
            self.drawTree(self.DOM.sidePanel, newval.result.row, 'vertical');
        } else if (newval.type == 'K-means Clustering') {
            self.drawCluster(newval, self.DOM.sidePanel);
        }
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/HeatmapVisualizationClass*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/HeatmapVisualizationClass', [
    'd3',
    './generateScales',
    './drawCells',
    './drawSelections',
    './drawAnalysis',
    './updateCells',
    './drawTree',
    './drawCluster',
    './drawTopPanel',
    './drawSidePanel'
], function (d3, generateScales, drawCells, drawSelections, drawAnalysis, updateCells, drawTree, drawCluster, drawTopPanel, drawSidePanel) {
    return function (View, svg, params) {
        var self = this;
        this.DOM = { svg: svg };
        this.DOM.svg.selectAll('*').remove();
        svg.attr('height', params.panel.top.height + params.labels.column.height + params.selections.column.height + View.labels.row.keys.length * params.cell.height + 50);
        svg.attr('width', params.panel.side.width + params.labels.row.width + params.selections.row.width + View.labels.column.keys.length * params.cell.width + 50);
        this.DOM.heatmapCells = this.DOM.svg.append('g').attr('id', 'heatmap-Cells');
        this.DOM.sidePanel = this.DOM.svg.append('g').attr('id', 'side-Panel');
        this.DOM.topPanel = this.DOM.svg.append('g').attr('id', 'top-Panel');
        this.DOM.selections = {
            column: this.DOM.svg.append('g').attr('id', 'column-Selections'),
            row: this.DOM.svg.append('g').attr('id', 'row-Selections')
        };
        this.DOM.labels = {
            column: this.DOM.svg.append('g').attr('id', 'column-Labels'),
            row: this.DOM.svg.append('g').attr('id', 'row-Labels')
        };
        this.DOM.legend = this.DOM.svg.append('g').attr('id', 'heatmap-Legend');
        this.params = params;
        this.scales = generateScales(params, View);
        this.view = View;
        this.updateScales = function (view) {
            this.scales = generateScales(self.params, view || self.view);
        };
        this.drawCells = drawCells;
        this.drawSelections = drawSelections;
        this.drawAnalysis = drawAnalysis;
        this.drawTree = drawTree;
        this.drawCluster = drawCluster;
        this.drawTopPanel = drawTopPanel;
        this.drawSidePanel = drawSidePanel;
        this.updateCells = updateCells;
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/generateParams*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/lib/generateParams', [], function () {
    return function (params) {
        var self = this;
        this.cell = {
            height: 15,
            width: 15,
            padding: 0
        };
        this.panel = {
            side: { width: 150 },
            top: { height: 150 }
        };
        this.labels = {
            column: { height: 80 },
            row: { width: 50 }
        };
        this.selections = {
            column: { height: 80 },
            row: { width: 80 }
        };
        this.colors = {
            high: 'yellow',
            mid: 'black',
            low: 'blue',
            group: 'Blue,Black,Yellow'
        };
        if (params) {
            properties = Object.getOwnPropertyNames(params);
            properties.map(function (prop) {
                self[prop] = params[prop];
            });
        }
        ;
    };
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/directives/visHeatmap.tpl.html!system-text@0.1.0#text*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/directives/visHeatmap.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<!-- <mev-bs-modal bindid="pathwayEnrichmentModal" func="" header="Start Pathway Enrichment Analysis"> -->\n<mev-bs-modal bindid="columnSelectionsModal-{{heatmapView.id}}" func="" header="Add Column Selections">\n\t<form role="form">\n\n\t\t<div class="form-group">\n\t\t    <label for="columnSelectionName" class="control-label">Name:</label>\n\t\t        <input id="columnSelectionName" ng-model="visualization.view.selectionParams.column.name">\n\t\t</div>\n\t\t\n\t\t<a class="btn btn-default" ng-click="clearSelections(\'column\')">Clear Selections</a>\n\t\t<a class="btn btn-success" ng-click="addSelection(\'column\')" data-dismiss="modal" aria-hidden="true">Add Selections</a>\n\t\t\n\t\t\n\t</form>\n</mev-bs-modal> \n\n<mev-bs-modal bindid="rowSelectionsModal-{{heatmapView.id}}" func="" header="Add Row Selections">\n\t<form role="form">\n\n\t\t<div class="form-group">\n\t\t    <label for="rowSelectionName" class="control-label">Name:</label>\n\t\t        <input id="rowSelectionName" ng-model="visualization.view.selectionParams.row.name">\n\t\t</div>\n\t\t\n\t\t\n\t\t<a class="btn btn-default" ng-click="clearSelections(\'row\')">Clear Selections</a>\n\t\t<a class="btn btn-success" ng-click="addSelection(\'row\')" data-dismiss="modal" aria-hidden="true">Create Selections</a>\n\t\t\n\t\t\n\t</form>\n</mev-bs-modal> \n\n<mev-bs-modal bindid="settingsModal-{{heatmapView.id}}" header="Heatmap Visualization Settings">\n\t<mev-heatmap-settings mev-heatmap-view="heatmapView" current-colors="currentColors"\n\t\tavailable-color-groups="availableColorGroups"\n\t\tcolor-Edge="colorEdge"></mev-heatmap-settings>\n\t<a class="btn btn-info" ng-click="applyNewRanges()" data-dismiss="modal" aria-hidden="true">Apply New Ranges</a>\n\t<a class="btn btn-primary" ng-click="applyDefaultRanges()" data-dismiss="modal" aria-hidden="true" >Revert To Default</a>\n</mev-bs-modal>';
});
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/directives/heatmapSettingsModalBody.tpl.html!system-text@0.1.0#text*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/directives/heatmapSettingsModalBody.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="container-fluid">\n\t<form class="form-horizontal" role="form" >\n\t\n\t\t<div class="form-group">\n\t\t\t<label for="heatmapColoring" class="control-label">D3 Color Brewer Groups:</label>\n\t\t\t<select id="heatmapColoring" ng-model="currentColors.group" ng-options="selection for selection in availableColorGroups"></select>\n\t        </div>\n\t    \n\t</form>\n</div>\n\n<div class="container-fluid">\n\t<form class="form-horizontal" role="form" >\n\t\n\t\t<div class="form-group">\n\t\t\t<label for="heatmapColorMin" class="control-label">Color Ranges:</label>\n        </div>\n        \n        <div class="form-group">\n\t\t\t<label for="heatmapColorMax" class="control-label">Max:</label>\n\t\t\t<input id="heatmapColorMax" ng-model="colorEdge.max"/>\n        </div>\n        <div class="form-group">\n\t\t\t<label for="heatmapColorAvg" class="control-label">Avg:</label>\n\t\t\t<input id="heatmapColorAvg" ng-model="colorEdge.avg"/>\n        </div>\n\t\t<div class="form-group">\n\t\t\t<label for="heatmapColorMin" class="control-label">Min:</label>\n\t\t\t<input id="heatmapColorMin" ng-model="colorEdge.min"/>\n        </div>\n        \n        <div id="heatmapColorSlider-{{heatmapView.id}}"></div>\n\t\t     \n\t</form>\n\n</div>\n';
});
/*mev-heatmap@0.0.1#src/main/view/colorBrewer/mevColorBrewer*/
define('mev-heatmap@0.0.1#src/main/view/colorBrewer/mevColorBrewer', [
    'mui',
    'd3',
    'lodash'
], function (angular, d3, _) {
    'use strict';
    angular.module('mevColorBrewer', []).factory('mevD3colors', [
        '$rootScope',
        function ($rootScope) {
            var self = this;
            var ret = Object.create({
                current: function (val) {
                    if (val) {
                        if (this.$current !== val) {
                            this.$current = val;
                            $rootScope.$broadcast('ui:d3colors:change', val);
                        }
                        return {
                            group: this.$current,
                            low: this[this.$current][3][0],
                            mid: this[this.$current][3][1],
                            high: this[this.$current][3][2]
                        };
                    } else {
                        return this.$current || 'Blue,Black,Yellow';
                    }
                }
            }, {
                $current: {
                    writable: true,
                    value: 'Blue,Black,Yellow'
                },
                coloring: {
                    get: function () {
                        return {
                            group: this.$current,
                            low: this[this.$current][3][0],
                            mid: this[this.$current][3][1],
                            high: this[this.$current][3][2]
                        };
                    }
                }
            });
            _.extend(ret, {
                'Blue,Black,Yellow': {
                    3: [
                        'blue',
                        'black',
                        'yellow'
                    ]
                },
                'Red,Black,Green': {
                    3: [
                        'red',
                        'black',
                        'green'
                    ]
                },
                'Red,White,Blue': {
                    3: [
                        'red',
                        'white',
                        'blue'
                    ]
                }
            });
            ret.current.bind(ret);
            return ret;
        }
    ]);
});
/*mev-heatmap@0.0.1#src/main/view/alertService/mevHeatmapAlert*/
define('mev-heatmap@0.0.1#src/main/view/alertService/mevHeatmapAlert', [
    'mui',
    'jquery'
], function (ng, $) {
    function component() {
        return {
            success: function (message, header, callback, params) {
                $.notific8(message, {
                    heading: header,
                    theme: 'lime',
                    life: 5000
                });
            },
            error: function (message, header, callback, params) {
                $.notific8('Issue: \n' + message, {
                    heading: header,
                    theme: 'ruby',
                    life: 5000
                });
            },
            info: function (message, header, callback, params) {
                $.notific8(message, {
                    heading: header,
                    theme: 'ebony',
                    life: 5000
                });
            }
        };
    }
    component.$provider = 'factory';
    component.$inject = [];
    component.$name = 'mevHeatmapAlertService';
    return component;
});
/*jquery-ui-bundle@1.11.4#jquery-ui*/
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define('jquery-ui-bundle@1.11.4#jquery-ui', ['jquery'], factory);
    } else {
        factory(jQuery);
    }
}(function ($) {
    $.ui = $.ui || {};
    $.extend($.ui, {
        version: '1.11.4',
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });
    $.fn.extend({
        scrollParent: function (includeHidden) {
            var position = this.css('position'), excludeStaticParent = position === 'absolute', overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/, scrollParent = this.parents().filter(function () {
                    var parent = $(this);
                    if (excludeStaticParent && parent.css('position') === 'static') {
                        return false;
                    }
                    return overflowRegex.test(parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x'));
                }).eq(0);
            return position === 'fixed' || !scrollParent.length ? $(this[0].ownerDocument || document) : scrollParent;
        },
        uniqueId: function () {
            var uuid = 0;
            return function () {
                return this.each(function () {
                    if (!this.id) {
                        this.id = 'ui-id-' + ++uuid;
                    }
                });
            };
        }(),
        removeUniqueId: function () {
            return this.each(function () {
                if (/^ui-id-\d+$/.test(this.id)) {
                    $(this).removeAttr('id');
                }
            });
        }
    });
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img, nodeName = element.nodeName.toLowerCase();
        if ('area' === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== 'map') {
                return false;
            }
            img = $('img[usemap=\'#' + mapName + '\']')[0];
            return !!img && visible(img);
        }
        return (/^(input|select|textarea|button|object)$/.test(nodeName) ? !element.disabled : 'a' === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function () {
            return $.css(this, 'visibility') === 'hidden';
        }).length;
    }
    $.extend($.expr[':'], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function (dataName) {
            return function (elem) {
                return !!$.data(elem, dataName);
            };
        }) : function (elem, i, match) {
            return !!$.data(elem, match[3]);
        },
        focusable: function (element) {
            return focusable(element, !isNaN($.attr(element, 'tabindex')));
        },
        tabbable: function (element) {
            var tabIndex = $.attr(element, 'tabindex'), isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    });
    if (!$('<a>').outerWidth(1).jquery) {
        $.each([
            'Width',
            'Height'
        ], function (i, name) {
            var side = name === 'Width' ? [
                    'Left',
                    'Right'
                ] : [
                    'Top',
                    'Bottom'
                ], type = name.toLowerCase(), orig = {
                    innerWidth: $.fn.innerWidth,
                    innerHeight: $.fn.innerHeight,
                    outerWidth: $.fn.outerWidth,
                    outerHeight: $.fn.outerHeight
                };
            function reduce(elem, size, border, margin) {
                $.each(side, function () {
                    size -= parseFloat($.css(elem, 'padding' + this)) || 0;
                    if (border) {
                        size -= parseFloat($.css(elem, 'border' + this + 'Width')) || 0;
                    }
                    if (margin) {
                        size -= parseFloat($.css(elem, 'margin' + this)) || 0;
                    }
                });
                return size;
            }
            $.fn['inner' + name] = function (size) {
                if (size === undefined) {
                    return orig['inner' + name].call(this);
                }
                return this.each(function () {
                    $(this).css(type, reduce(this, size) + 'px');
                });
            };
            $.fn['outer' + name] = function (size, margin) {
                if (typeof size !== 'number') {
                    return orig['outer' + name].call(this, size);
                }
                return this.each(function () {
                    $(this).css(type, reduce(this, size, true, margin) + 'px');
                });
            };
        });
    }
    if (!$.fn.addBack) {
        $.fn.addBack = function (selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        };
    }
    if ($('<a>').data('a-b', 'a').removeData('a-b').data('a-b')) {
        $.fn.removeData = function (removeData) {
            return function (key) {
                if (arguments.length) {
                    return removeData.call(this, $.camelCase(key));
                } else {
                    return removeData.call(this);
                }
            };
        }($.fn.removeData);
    }
    $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    $.fn.extend({
        focus: function (orig) {
            return function (delay, fn) {
                return typeof delay === 'number' ? this.each(function () {
                    var elem = this;
                    setTimeout(function () {
                        $(elem).focus();
                        if (fn) {
                            fn.call(elem);
                        }
                    }, delay);
                }) : orig.apply(this, arguments);
            };
        }($.fn.focus),
        disableSelection: function () {
            var eventType = 'onselectstart' in document.createElement('div') ? 'selectstart' : 'mousedown';
            return function () {
                return this.bind(eventType + '.ui-disableSelection', function (event) {
                    event.preventDefault();
                });
            };
        }(),
        enableSelection: function () {
            return this.unbind('.ui-disableSelection');
        },
        zIndex: function (zIndex) {
            if (zIndex !== undefined) {
                return this.css('zIndex', zIndex);
            }
            if (this.length) {
                var elem = $(this[0]), position, value;
                while (elem.length && elem[0] !== document) {
                    position = elem.css('position');
                    if (position === 'absolute' || position === 'relative' || position === 'fixed') {
                        value = parseInt(elem.css('zIndex'), 10);
                        if (!isNaN(value) && value !== 0) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }
            return 0;
        }
    });
    $.ui.plugin = {
        add: function (module, option, set) {
            var i, proto = $.ui[module].prototype;
            for (i in set) {
                proto.plugins[i] = proto.plugins[i] || [];
                proto.plugins[i].push([
                    option,
                    set[i]
                ]);
            }
        },
        call: function (instance, name, args, allowDisconnected) {
            var i, set = instance.plugins[name];
            if (!set) {
                return;
            }
            if (!allowDisconnected && (!instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11)) {
                return;
            }
            for (i = 0; i < set.length; i++) {
                if (instance.options[set[i][0]]) {
                    set[i][1].apply(instance.element, args);
                }
            }
        }
    };
    var widget_uuid = 0, widget_slice = Array.prototype.slice;
    $.cleanData = function (orig) {
        return function (elems) {
            var events, elem, i;
            for (i = 0; (elem = elems[i]) != null; i++) {
                try {
                    events = $._data(elem, 'events');
                    if (events && events.remove) {
                        $(elem).triggerHandler('remove');
                    }
                } catch (e) {
                }
            }
            orig(elems);
        };
    }($.cleanData);
    $.widget = function (name, base, prototype) {
        var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split('.')[0];
        name = name.split('.')[1];
        fullName = namespace + '-' + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }
        $.expr[':'][fullName.toLowerCase()] = function (elem) {
            return !!$.data(elem, fullName);
        };
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function (options, element) {
            if (!this._createWidget) {
                return new constructor(options, element);
            }
            if (arguments.length) {
                this._createWidget(options, element);
            }
        };
        $.extend(constructor, existingConstructor, {
            version: prototype.version,
            _proto: $.extend({}, prototype),
            _childConstructors: []
        });
        basePrototype = new base();
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function (prop, value) {
            if (!$.isFunction(value)) {
                proxiedPrototype[prop] = value;
                return;
            }
            proxiedPrototype[prop] = function () {
                var _super = function () {
                        return base.prototype[prop].apply(this, arguments);
                    }, _superApply = function (args) {
                        return base.prototype[prop].apply(this, args);
                    };
                return function () {
                    var __super = this._super, __superApply = this._superApply, returnValue;
                    this._super = _super;
                    this._superApply = _superApply;
                    returnValue = value.apply(this, arguments);
                    this._super = __super;
                    this._superApply = __superApply;
                    return returnValue;
                };
            }();
        });
        constructor.prototype = $.widget.extend(basePrototype, { widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix || name : name }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function (i, child) {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + '.' + childPrototype.widgetName, constructor, child._proto);
            });
            delete existingConstructor._childConstructors;
        } else {
            base._childConstructors.push(constructor);
        }
        $.widget.bridge(name, constructor);
        return constructor;
    };
    $.widget.extend = function (target) {
        var input = widget_slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value;
        for (; inputIndex < inputLength; inputIndex++) {
            for (key in input[inputIndex]) {
                value = input[inputIndex][key];
                if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                    if ($.isPlainObject(value)) {
                        target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value);
                    } else {
                        target[key] = value;
                    }
                }
            }
        }
        return target;
    };
    $.widget.bridge = function (name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function (options) {
            var isMethodCall = typeof options === 'string', args = widget_slice.call(arguments, 1), returnValue = this;
            if (isMethodCall) {
                this.each(function () {
                    var methodValue, instance = $.data(this, fullName);
                    if (options === 'instance') {
                        returnValue = instance;
                        return false;
                    }
                    if (!instance) {
                        return $.error('cannot call methods on ' + name + ' prior to initialization; ' + 'attempted to call method \'' + options + '\'');
                    }
                    if (!$.isFunction(instance[options]) || options.charAt(0) === '_') {
                        return $.error('no such method \'' + options + '\' for ' + name + ' widget instance');
                    }
                    methodValue = instance[options].apply(instance, args);
                    if (methodValue !== instance && methodValue !== undefined) {
                        returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                        return false;
                    }
                });
            } else {
                if (args.length) {
                    options = $.widget.extend.apply(null, [options].concat(args));
                }
                this.each(function () {
                    var instance = $.data(this, fullName);
                    if (instance) {
                        instance.option(options || {});
                        if (instance._init) {
                            instance._init();
                        }
                    } else {
                        $.data(this, fullName, new object(options, this));
                    }
                });
            }
            return returnValue;
        };
    };
    $.Widget = function () {
    };
    $.Widget._childConstructors = [];
    $.Widget.prototype = {
        widgetName: 'widget',
        widgetEventPrefix: '',
        defaultElement: '<div>',
        options: {
            disabled: false,
            create: null
        },
        _createWidget: function (options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = widget_uuid++;
            this.eventNamespace = '.' + this.widgetName + this.uuid;
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(true, this.element, {
                    remove: function (event) {
                        if (event.target === element) {
                            this.destroy();
                        }
                    }
                });
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
            }
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
            this._create();
            this._trigger('create', null, this._getCreateEventData());
            this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
        destroy: function () {
            this._destroy();
            this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
            this.widget().unbind(this.eventNamespace).removeAttr('aria-disabled').removeClass(this.widgetFullName + '-disabled ' + 'ui-state-disabled');
            this.bindings.unbind(this.eventNamespace);
            this.hoverable.removeClass('ui-state-hover');
            this.focusable.removeClass('ui-state-focus');
        },
        _destroy: $.noop,
        widget: function () {
            return this.element;
        },
        option: function (key, value) {
            var options = key, parts, curOption, i;
            if (arguments.length === 0) {
                return $.widget.extend({}, this.options);
            }
            if (typeof key === 'string') {
                options = {};
                parts = key.split('.');
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]];
                    }
                    key = parts.pop();
                    if (arguments.length === 1) {
                        return curOption[key] === undefined ? null : curOption[key];
                    }
                    curOption[key] = value;
                } else {
                    if (arguments.length === 1) {
                        return this.options[key] === undefined ? null : this.options[key];
                    }
                    options[key] = value;
                }
            }
            this._setOptions(options);
            return this;
        },
        _setOptions: function (options) {
            var key;
            for (key in options) {
                this._setOption(key, options[key]);
            }
            return this;
        },
        _setOption: function (key, value) {
            this.options[key] = value;
            if (key === 'disabled') {
                this.widget().toggleClass(this.widgetFullName + '-disabled', !!value);
                if (value) {
                    this.hoverable.removeClass('ui-state-hover');
                    this.focusable.removeClass('ui-state-focus');
                }
            }
            return this;
        },
        enable: function () {
            return this._setOptions({ disabled: false });
        },
        disable: function () {
            return this._setOptions({ disabled: true });
        },
        _on: function (suppressDisabledCheck, element, handlers) {
            var delegateElement, instance = this;
            if (typeof suppressDisabledCheck !== 'boolean') {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }
            if (!handlers) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element);
            }
            $.each(handlers, function (event, handler) {
                function handlerProxy() {
                    if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass('ui-state-disabled'))) {
                        return;
                    }
                    return (typeof handler === 'string' ? instance[handler] : handler).apply(instance, arguments);
                }
                if (typeof handler !== 'string') {
                    handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                }
                var match = event.match(/^([\w:-]*)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
                if (selector) {
                    delegateElement.delegate(selector, eventName, handlerProxy);
                } else {
                    element.bind(eventName, handlerProxy);
                }
            });
        },
        _off: function (element, eventName) {
            eventName = (eventName || '').split(' ').join(this.eventNamespace + ' ') + this.eventNamespace;
            element.unbind(eventName).undelegate(eventName);
            this.bindings = $(this.bindings.not(element).get());
            this.focusable = $(this.focusable.not(element).get());
            this.hoverable = $(this.hoverable.not(element).get());
        },
        _delay: function (handler, delay) {
            function handlerProxy() {
                return (typeof handler === 'string' ? instance[handler] : handler).apply(instance, arguments);
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0);
        },
        _hoverable: function (element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                mouseenter: function (event) {
                    $(event.currentTarget).addClass('ui-state-hover');
                },
                mouseleave: function (event) {
                    $(event.currentTarget).removeClass('ui-state-hover');
                }
            });
        },
        _focusable: function (element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                focusin: function (event) {
                    $(event.currentTarget).addClass('ui-state-focus');
                },
                focusout: function (event) {
                    $(event.currentTarget).removeClass('ui-state-focus');
                }
            });
        },
        _trigger: function (type, event, data) {
            var prop, orig, callback = this.options[type];
            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            event.target = this.element[0];
            orig = event.originalEvent;
            if (orig) {
                for (prop in orig) {
                    if (!(prop in event)) {
                        event[prop] = orig[prop];
                    }
                }
            }
            this.element.trigger(event, data);
            return !($.isFunction(callback) && callback.apply(this.element[0], [event].concat(data)) === false || event.isDefaultPrevented());
        }
    };
    $.each({
        show: 'fadeIn',
        hide: 'fadeOut'
    }, function (method, defaultEffect) {
        $.Widget.prototype['_' + method] = function (element, options, callback) {
            if (typeof options === 'string') {
                options = { effect: options };
            }
            var hasOptions, effectName = !options ? method : options === true || typeof options === 'number' ? defaultEffect : options.effect || defaultEffect;
            options = options || {};
            if (typeof options === 'number') {
                options = { duration: options };
            }
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay) {
                element.delay(options.delay);
            }
            if (hasOptions && $.effects && $.effects.effect[effectName]) {
                element[method](options);
            } else if (effectName !== method && element[effectName]) {
                element[effectName](options.duration, options.easing, callback);
            } else {
                element.queue(function (next) {
                    $(this)[method]();
                    if (callback) {
                        callback.call(element[0]);
                    }
                    next();
                });
            }
        };
    });
    var widget = $.widget;
    var mouseHandled = false;
    $(document).mouseup(function () {
        mouseHandled = false;
    });
    var mouse = $.widget('ui.mouse', {
        version: '1.11.4',
        options: {
            cancel: 'input,textarea,button,select,option',
            distance: 1,
            delay: 0
        },
        _mouseInit: function () {
            var that = this;
            this.element.bind('mousedown.' + this.widgetName, function (event) {
                return that._mouseDown(event);
            }).bind('click.' + this.widgetName, function (event) {
                if (true === $.data(event.target, that.widgetName + '.preventClickEvent')) {
                    $.removeData(event.target, that.widgetName + '.preventClickEvent');
                    event.stopImmediatePropagation();
                    return false;
                }
            });
            this.started = false;
        },
        _mouseDestroy: function () {
            this.element.unbind('.' + this.widgetName);
            if (this._mouseMoveDelegate) {
                this.document.unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
            }
        },
        _mouseDown: function (event) {
            if (mouseHandled) {
                return;
            }
            this._mouseMoved = false;
            this._mouseStarted && this._mouseUp(event);
            this._mouseDownEvent = event;
            var that = this, btnIsLeft = event.which === 1, elIsCancel = typeof this.options.cancel === 'string' && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true;
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function () {
                    that.mouseDelayMet = true;
                }, this.options.delay);
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = this._mouseStart(event) !== false;
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }
            if (true === $.data(event.target, this.widgetName + '.preventClickEvent')) {
                $.removeData(event.target, this.widgetName + '.preventClickEvent');
            }
            this._mouseMoveDelegate = function (event) {
                return that._mouseMove(event);
            };
            this._mouseUpDelegate = function (event) {
                return that._mouseUp(event);
            };
            this.document.bind('mousemove.' + this.widgetName, this._mouseMoveDelegate).bind('mouseup.' + this.widgetName, this._mouseUpDelegate);
            event.preventDefault();
            mouseHandled = true;
            return true;
        },
        _mouseMove: function (event) {
            if (this._mouseMoved) {
                if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
                    return this._mouseUp(event);
                } else if (!event.which) {
                    return this._mouseUp(event);
                }
            }
            if (event.which || event.button) {
                this._mouseMoved = true;
            }
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
                this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
            }
            return !this._mouseStarted;
        },
        _mouseUp: function (event) {
            this.document.unbind('mousemove.' + this.widgetName, this._mouseMoveDelegate).unbind('mouseup.' + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                if (event.target === this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + '.preventClickEvent', true);
                }
                this._mouseStop(event);
            }
            mouseHandled = false;
            return false;
        },
        _mouseDistanceMet: function (event) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
        },
        _mouseDelayMet: function () {
            return this.mouseDelayMet;
        },
        _mouseStart: function () {
        },
        _mouseDrag: function () {
        },
        _mouseStop: function () {
        },
        _mouseCapture: function () {
            return true;
        }
    });
    (function () {
        $.ui = $.ui || {};
        var cachedScrollbarWidth, supportsOffsetFractions, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
        function getOffsets(offsets, width, height) {
            return [
                parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1),
                parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1)
            ];
        }
        function parseCss(element, property) {
            return parseInt($.css(element, property), 10) || 0;
        }
        function getDimensions(elem) {
            var raw = elem[0];
            if (raw.nodeType === 9) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: 0,
                        left: 0
                    }
                };
            }
            if ($.isWindow(raw)) {
                return {
                    width: elem.width(),
                    height: elem.height(),
                    offset: {
                        top: elem.scrollTop(),
                        left: elem.scrollLeft()
                    }
                };
            }
            if (raw.preventDefault) {
                return {
                    width: 0,
                    height: 0,
                    offset: {
                        top: raw.pageY,
                        left: raw.pageX
                    }
                };
            }
            return {
                width: elem.outerWidth(),
                height: elem.outerHeight(),
                offset: elem.offset()
            };
        }
        $.position = {
            scrollbarWidth: function () {
                if (cachedScrollbarWidth !== undefined) {
                    return cachedScrollbarWidth;
                }
                var w1, w2, div = $('<div style=\'display:block;position:absolute;width:50px;height:50px;overflow:hidden;\'><div style=\'height:100px;width:auto;\'></div></div>'), innerDiv = div.children()[0];
                $('body').append(div);
                w1 = innerDiv.offsetWidth;
                div.css('overflow', 'scroll');
                w2 = innerDiv.offsetWidth;
                if (w1 === w2) {
                    w2 = div[0].clientWidth;
                }
                div.remove();
                return cachedScrollbarWidth = w1 - w2;
            },
            getScrollInfo: function (within) {
                var overflowX = within.isWindow || within.isDocument ? '' : within.element.css('overflow-x'), overflowY = within.isWindow || within.isDocument ? '' : within.element.css('overflow-y'), hasOverflowX = overflowX === 'scroll' || overflowX === 'auto' && within.width < within.element[0].scrollWidth, hasOverflowY = overflowY === 'scroll' || overflowY === 'auto' && within.height < within.element[0].scrollHeight;
                return {
                    width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                    height: hasOverflowX ? $.position.scrollbarWidth() : 0
                };
            },
            getWithinInfo: function (element) {
                var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]), isDocument = !!withinElement[0] && withinElement[0].nodeType === 9;
                return {
                    element: withinElement,
                    isWindow: isWindow,
                    isDocument: isDocument,
                    offset: withinElement.offset() || {
                        left: 0,
                        top: 0
                    },
                    scrollLeft: withinElement.scrollLeft(),
                    scrollTop: withinElement.scrollTop(),
                    width: isWindow || isDocument ? withinElement.width() : withinElement.outerWidth(),
                    height: isWindow || isDocument ? withinElement.height() : withinElement.outerHeight()
                };
            }
        };
        $.fn.position = function (options) {
            if (!options || !options.of) {
                return _position.apply(this, arguments);
            }
            options = $.extend({}, options);
            var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || 'flip').split(' '), offsets = {};
            dimensions = getDimensions(target);
            if (target[0].preventDefault) {
                options.at = 'left top';
            }
            targetWidth = dimensions.width;
            targetHeight = dimensions.height;
            targetOffset = dimensions.offset;
            basePosition = $.extend({}, targetOffset);
            $.each([
                'my',
                'at'
            ], function () {
                var pos = (options[this] || '').split(' '), horizontalOffset, verticalOffset;
                if (pos.length === 1) {
                    pos = rhorizontal.test(pos[0]) ? pos.concat(['center']) : rvertical.test(pos[0]) ? ['center'].concat(pos) : [
                        'center',
                        'center'
                    ];
                }
                pos[0] = rhorizontal.test(pos[0]) ? pos[0] : 'center';
                pos[1] = rvertical.test(pos[1]) ? pos[1] : 'center';
                horizontalOffset = roffset.exec(pos[0]);
                verticalOffset = roffset.exec(pos[1]);
                offsets[this] = [
                    horizontalOffset ? horizontalOffset[0] : 0,
                    verticalOffset ? verticalOffset[0] : 0
                ];
                options[this] = [
                    rposition.exec(pos[0])[0],
                    rposition.exec(pos[1])[0]
                ];
            });
            if (collision.length === 1) {
                collision[1] = collision[0];
            }
            if (options.at[0] === 'right') {
                basePosition.left += targetWidth;
            } else if (options.at[0] === 'center') {
                basePosition.left += targetWidth / 2;
            }
            if (options.at[1] === 'bottom') {
                basePosition.top += targetHeight;
            } else if (options.at[1] === 'center') {
                basePosition.top += targetHeight / 2;
            }
            atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
            basePosition.left += atOffset[0];
            basePosition.top += atOffset[1];
            return this.each(function () {
                var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, 'marginLeft'), marginTop = parseCss(this, 'marginTop'), collisionWidth = elemWidth + marginLeft + parseCss(this, 'marginRight') + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, 'marginBottom') + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
                if (options.my[0] === 'right') {
                    position.left -= elemWidth;
                } else if (options.my[0] === 'center') {
                    position.left -= elemWidth / 2;
                }
                if (options.my[1] === 'bottom') {
                    position.top -= elemHeight;
                } else if (options.my[1] === 'center') {
                    position.top -= elemHeight / 2;
                }
                position.left += myOffset[0];
                position.top += myOffset[1];
                if (!supportsOffsetFractions) {
                    position.left = round(position.left);
                    position.top = round(position.top);
                }
                collisionPosition = {
                    marginLeft: marginLeft,
                    marginTop: marginTop
                };
                $.each([
                    'left',
                    'top'
                ], function (i, dir) {
                    if ($.ui.position[collision[i]]) {
                        $.ui.position[collision[i]][dir](position, {
                            targetWidth: targetWidth,
                            targetHeight: targetHeight,
                            elemWidth: elemWidth,
                            elemHeight: elemHeight,
                            collisionPosition: collisionPosition,
                            collisionWidth: collisionWidth,
                            collisionHeight: collisionHeight,
                            offset: [
                                atOffset[0] + myOffset[0],
                                atOffset[1] + myOffset[1]
                            ],
                            my: options.my,
                            at: options.at,
                            within: within,
                            elem: elem
                        });
                    }
                });
                if (options.using) {
                    using = function (props) {
                        var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = {
                                target: {
                                    element: target,
                                    left: targetOffset.left,
                                    top: targetOffset.top,
                                    width: targetWidth,
                                    height: targetHeight
                                },
                                element: {
                                    element: elem,
                                    left: position.left,
                                    top: position.top,
                                    width: elemWidth,
                                    height: elemHeight
                                },
                                horizontal: right < 0 ? 'left' : left > 0 ? 'right' : 'center',
                                vertical: bottom < 0 ? 'top' : top > 0 ? 'bottom' : 'middle'
                            };
                        if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                            feedback.horizontal = 'center';
                        }
                        if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                            feedback.vertical = 'middle';
                        }
                        if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                            feedback.important = 'horizontal';
                        } else {
                            feedback.important = 'vertical';
                        }
                        options.using.call(this, props, feedback);
                    };
                }
                elem.offset($.extend(position, { using: using }));
            });
        };
        $.ui.position = {
            fit: {
                left: function (position, data) {
                    var within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset, newOverRight;
                    if (data.collisionWidth > outerWidth) {
                        if (overLeft > 0 && overRight <= 0) {
                            newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                            position.left += overLeft - newOverRight;
                        } else if (overRight > 0 && overLeft <= 0) {
                            position.left = withinOffset;
                        } else {
                            if (overLeft > overRight) {
                                position.left = withinOffset + outerWidth - data.collisionWidth;
                            } else {
                                position.left = withinOffset;
                            }
                        }
                    } else if (overLeft > 0) {
                        position.left += overLeft;
                    } else if (overRight > 0) {
                        position.left -= overRight;
                    } else {
                        position.left = max(position.left - collisionPosLeft, position.left);
                    }
                },
                top: function (position, data) {
                    var within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset, newOverBottom;
                    if (data.collisionHeight > outerHeight) {
                        if (overTop > 0 && overBottom <= 0) {
                            newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                            position.top += overTop - newOverBottom;
                        } else if (overBottom > 0 && overTop <= 0) {
                            position.top = withinOffset;
                        } else {
                            if (overTop > overBottom) {
                                position.top = withinOffset + outerHeight - data.collisionHeight;
                            } else {
                                position.top = withinOffset;
                            }
                        }
                    } else if (overTop > 0) {
                        position.top += overTop;
                    } else if (overBottom > 0) {
                        position.top -= overBottom;
                    } else {
                        position.top = max(position.top - collisionPosTop, position.top);
                    }
                }
            },
            flip: {
                left: function (position, data) {
                    var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = data.my[0] === 'left' ? -data.elemWidth : data.my[0] === 'right' ? data.elemWidth : 0, atOffset = data.at[0] === 'left' ? data.targetWidth : data.at[0] === 'right' ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft;
                    if (overLeft < 0) {
                        newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                        if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                            position.left += myOffset + atOffset + offset;
                        }
                    } else if (overRight > 0) {
                        newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                        if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                            position.left += myOffset + atOffset + offset;
                        }
                    }
                },
                top: function (position, data) {
                    var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = data.my[1] === 'top', myOffset = top ? -data.elemHeight : data.my[1] === 'bottom' ? data.elemHeight : 0, atOffset = data.at[1] === 'top' ? data.targetHeight : data.at[1] === 'bottom' ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom;
                    if (overTop < 0) {
                        newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                        if (newOverBottom < 0 || newOverBottom < abs(overTop)) {
                            position.top += myOffset + atOffset + offset;
                        }
                    } else if (overBottom > 0) {
                        newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                        if (newOverTop > 0 || abs(newOverTop) < overBottom) {
                            position.top += myOffset + atOffset + offset;
                        }
                    }
                }
            },
            flipfit: {
                left: function () {
                    $.ui.position.flip.left.apply(this, arguments);
                    $.ui.position.fit.left.apply(this, arguments);
                },
                top: function () {
                    $.ui.position.flip.top.apply(this, arguments);
                    $.ui.position.fit.top.apply(this, arguments);
                }
            }
        };
        (function () {
            var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName('body')[0], div = document.createElement('div');
            testElement = document.createElement(body ? 'div' : 'body');
            testElementStyle = {
                visibility: 'hidden',
                width: 0,
                height: 0,
                border: 0,
                margin: 0,
                background: 'none'
            };
            if (body) {
                $.extend(testElementStyle, {
                    position: 'absolute',
                    left: '-1000px',
                    top: '-1000px'
                });
            }
            for (i in testElementStyle) {
                testElement.style[i] = testElementStyle[i];
            }
            testElement.appendChild(div);
            testElementParent = body || document.documentElement;
            testElementParent.insertBefore(testElement, testElementParent.firstChild);
            div.style.cssText = 'position: absolute; left: 10.7432222px;';
            offsetLeft = $(div).offset().left;
            supportsOffsetFractions = offsetLeft > 10 && offsetLeft < 11;
            testElement.innerHTML = '';
            testElementParent.removeChild(testElement);
        }());
    }());
    var position = $.ui.position;
    var accordion = $.widget('ui.accordion', {
        version: '1.11.4',
        options: {
            active: 0,
            animate: {},
            collapsible: false,
            event: 'click',
            header: '> li > :first-child,> :not(li):even',
            heightStyle: 'auto',
            icons: {
                activeHeader: 'ui-icon-triangle-1-s',
                header: 'ui-icon-triangle-1-e'
            },
            activate: null,
            beforeActivate: null
        },
        hideProps: {
            borderTopWidth: 'hide',
            borderBottomWidth: 'hide',
            paddingTop: 'hide',
            paddingBottom: 'hide',
            height: 'hide'
        },
        showProps: {
            borderTopWidth: 'show',
            borderBottomWidth: 'show',
            paddingTop: 'show',
            paddingBottom: 'show',
            height: 'show'
        },
        _create: function () {
            var options = this.options;
            this.prevShow = this.prevHide = $();
            this.element.addClass('ui-accordion ui-widget ui-helper-reset').attr('role', 'tablist');
            if (!options.collapsible && (options.active === false || options.active == null)) {
                options.active = 0;
            }
            this._processPanels();
            if (options.active < 0) {
                options.active += this.headers.length;
            }
            this._refresh();
        },
        _getCreateEventData: function () {
            return {
                header: this.active,
                panel: !this.active.length ? $() : this.active.next()
            };
        },
        _createIcons: function () {
            var icons = this.options.icons;
            if (icons) {
                $('<span>').addClass('ui-accordion-header-icon ui-icon ' + icons.header).prependTo(this.headers);
                this.active.children('.ui-accordion-header-icon').removeClass(icons.header).addClass(icons.activeHeader);
                this.headers.addClass('ui-accordion-icons');
            }
        },
        _destroyIcons: function () {
            this.headers.removeClass('ui-accordion-icons').children('.ui-accordion-header-icon').remove();
        },
        _destroy: function () {
            var contents;
            this.element.removeClass('ui-accordion ui-widget ui-helper-reset').removeAttr('role');
            this.headers.removeClass('ui-accordion-header ui-accordion-header-active ui-state-default ' + 'ui-corner-all ui-state-active ui-state-disabled ui-corner-top').removeAttr('role').removeAttr('aria-expanded').removeAttr('aria-selected').removeAttr('aria-controls').removeAttr('tabIndex').removeUniqueId();
            this._destroyIcons();
            contents = this.headers.next().removeClass('ui-helper-reset ui-widget-content ui-corner-bottom ' + 'ui-accordion-content ui-accordion-content-active ui-state-disabled').css('display', '').removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby').removeUniqueId();
            if (this.options.heightStyle !== 'content') {
                contents.css('height', '');
            }
        },
        _setOption: function (key, value) {
            if (key === 'active') {
                this._activate(value);
                return;
            }
            if (key === 'event') {
                if (this.options.event) {
                    this._off(this.headers, this.options.event);
                }
                this._setupEvents(value);
            }
            this._super(key, value);
            if (key === 'collapsible' && !value && this.options.active === false) {
                this._activate(0);
            }
            if (key === 'icons') {
                this._destroyIcons();
                if (value) {
                    this._createIcons();
                }
            }
            if (key === 'disabled') {
                this.element.toggleClass('ui-state-disabled', !!value).attr('aria-disabled', value);
                this.headers.add(this.headers.next()).toggleClass('ui-state-disabled', !!value);
            }
        },
        _keydown: function (event) {
            if (event.altKey || event.ctrlKey) {
                return;
            }
            var keyCode = $.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = false;
            switch (event.keyCode) {
            case keyCode.RIGHT:
            case keyCode.DOWN:
                toFocus = this.headers[(currentIndex + 1) % length];
                break;
            case keyCode.LEFT:
            case keyCode.UP:
                toFocus = this.headers[(currentIndex - 1 + length) % length];
                break;
            case keyCode.SPACE:
            case keyCode.ENTER:
                this._eventHandler(event);
                break;
            case keyCode.HOME:
                toFocus = this.headers[0];
                break;
            case keyCode.END:
                toFocus = this.headers[length - 1];
                break;
            }
            if (toFocus) {
                $(event.target).attr('tabIndex', -1);
                $(toFocus).attr('tabIndex', 0);
                toFocus.focus();
                event.preventDefault();
            }
        },
        _panelKeyDown: function (event) {
            if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {
                $(event.currentTarget).prev().focus();
            }
        },
        refresh: function () {
            var options = this.options;
            this._processPanels();
            if (options.active === false && options.collapsible === true || !this.headers.length) {
                options.active = false;
                this.active = $();
            } else if (options.active === false) {
                this._activate(0);
            } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {
                if (this.headers.length === this.headers.find('.ui-state-disabled').length) {
                    options.active = false;
                    this.active = $();
                } else {
                    this._activate(Math.max(0, options.active - 1));
                }
            } else {
                options.active = this.headers.index(this.active);
            }
            this._destroyIcons();
            this._refresh();
        },
        _processPanels: function () {
            var prevHeaders = this.headers, prevPanels = this.panels;
            this.headers = this.element.find(this.options.header).addClass('ui-accordion-header ui-state-default ui-corner-all');
            this.panels = this.headers.next().addClass('ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom').filter(':not(.ui-accordion-content-active)').hide();
            if (prevPanels) {
                this._off(prevHeaders.not(this.headers));
                this._off(prevPanels.not(this.panels));
            }
        },
        _refresh: function () {
            var maxHeight, options = this.options, heightStyle = options.heightStyle, parent = this.element.parent();
            this.active = this._findActive(options.active).addClass('ui-accordion-header-active ui-state-active ui-corner-top').removeClass('ui-corner-all');
            this.active.next().addClass('ui-accordion-content-active').show();
            this.headers.attr('role', 'tab').each(function () {
                var header = $(this), headerId = header.uniqueId().attr('id'), panel = header.next(), panelId = panel.uniqueId().attr('id');
                header.attr('aria-controls', panelId);
                panel.attr('aria-labelledby', headerId);
            }).next().attr('role', 'tabpanel');
            this.headers.not(this.active).attr({
                'aria-selected': 'false',
                'aria-expanded': 'false',
                tabIndex: -1
            }).next().attr({ 'aria-hidden': 'true' }).hide();
            if (!this.active.length) {
                this.headers.eq(0).attr('tabIndex', 0);
            } else {
                this.active.attr({
                    'aria-selected': 'true',
                    'aria-expanded': 'true',
                    tabIndex: 0
                }).next().attr({ 'aria-hidden': 'false' });
            }
            this._createIcons();
            this._setupEvents(options.event);
            if (heightStyle === 'fill') {
                maxHeight = parent.height();
                this.element.siblings(':visible').each(function () {
                    var elem = $(this), position = elem.css('position');
                    if (position === 'absolute' || position === 'fixed') {
                        return;
                    }
                    maxHeight -= elem.outerHeight(true);
                });
                this.headers.each(function () {
                    maxHeight -= $(this).outerHeight(true);
                });
                this.headers.next().each(function () {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                }).css('overflow', 'auto');
            } else if (heightStyle === 'auto') {
                maxHeight = 0;
                this.headers.next().each(function () {
                    maxHeight = Math.max(maxHeight, $(this).css('height', '').height());
                }).height(maxHeight);
            }
        },
        _activate: function (index) {
            var active = this._findActive(index)[0];
            if (active === this.active[0]) {
                return;
            }
            active = active || this.active[0];
            this._eventHandler({
                target: active,
                currentTarget: active,
                preventDefault: $.noop
            });
        },
        _findActive: function (selector) {
            return typeof selector === 'number' ? this.headers.eq(selector) : $();
        },
        _setupEvents: function (event) {
            var events = { keydown: '_keydown' };
            if (event) {
                $.each(event.split(' '), function (index, eventName) {
                    events[eventName] = '_eventHandler';
                });
            }
            this._off(this.headers.add(this.headers.next()));
            this._on(this.headers, events);
            this._on(this.headers.next(), { keydown: '_panelKeyDown' });
            this._hoverable(this.headers);
            this._focusable(this.headers);
        },
        _eventHandler: function (event) {
            var options = this.options, active = this.active, clicked = $(event.currentTarget), clickedIsActive = clicked[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : clicked.next(), toHide = active.next(), eventData = {
                    oldHeader: active,
                    oldPanel: toHide,
                    newHeader: collapsing ? $() : clicked,
                    newPanel: toShow
                };
            event.preventDefault();
            if (clickedIsActive && !options.collapsible || this._trigger('beforeActivate', event, eventData) === false) {
                return;
            }
            options.active = collapsing ? false : this.headers.index(clicked);
            this.active = clickedIsActive ? $() : clicked;
            this._toggle(eventData);
            active.removeClass('ui-accordion-header-active ui-state-active');
            if (options.icons) {
                active.children('.ui-accordion-header-icon').removeClass(options.icons.activeHeader).addClass(options.icons.header);
            }
            if (!clickedIsActive) {
                clicked.removeClass('ui-corner-all').addClass('ui-accordion-header-active ui-state-active ui-corner-top');
                if (options.icons) {
                    clicked.children('.ui-accordion-header-icon').removeClass(options.icons.header).addClass(options.icons.activeHeader);
                }
                clicked.next().addClass('ui-accordion-content-active');
            }
        },
        _toggle: function (data) {
            var toShow = data.newPanel, toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
            this.prevShow.add(this.prevHide).stop(true, true);
            this.prevShow = toShow;
            this.prevHide = toHide;
            if (this.options.animate) {
                this._animate(toShow, toHide, data);
            } else {
                toHide.hide();
                toShow.show();
                this._toggleComplete(data);
            }
            toHide.attr({ 'aria-hidden': 'true' });
            toHide.prev().attr({
                'aria-selected': 'false',
                'aria-expanded': 'false'
            });
            if (toShow.length && toHide.length) {
                toHide.prev().attr({
                    'tabIndex': -1,
                    'aria-expanded': 'false'
                });
            } else if (toShow.length) {
                this.headers.filter(function () {
                    return parseInt($(this).attr('tabIndex'), 10) === 0;
                }).attr('tabIndex', -1);
            }
            toShow.attr('aria-hidden', 'false').prev().attr({
                'aria-selected': 'true',
                'aria-expanded': 'true',
                tabIndex: 0
            });
        },
        _animate: function (toShow, toHide, data) {
            var total, easing, duration, that = this, adjust = 0, boxSizing = toShow.css('box-sizing'), down = toShow.length && (!toHide.length || toShow.index() < toHide.index()), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function () {
                    that._toggleComplete(data);
                };
            if (typeof options === 'number') {
                duration = options;
            }
            if (typeof options === 'string') {
                easing = options;
            }
            easing = easing || options.easing || animate.easing;
            duration = duration || options.duration || animate.duration;
            if (!toHide.length) {
                return toShow.animate(this.showProps, duration, easing, complete);
            }
            if (!toShow.length) {
                return toHide.animate(this.hideProps, duration, easing, complete);
            }
            total = toShow.show().outerHeight();
            toHide.animate(this.hideProps, {
                duration: duration,
                easing: easing,
                step: function (now, fx) {
                    fx.now = Math.round(now);
                }
            });
            toShow.hide().animate(this.showProps, {
                duration: duration,
                easing: easing,
                complete: complete,
                step: function (now, fx) {
                    fx.now = Math.round(now);
                    if (fx.prop !== 'height') {
                        if (boxSizing === 'content-box') {
                            adjust += fx.now;
                        }
                    } else if (that.options.heightStyle !== 'content') {
                        fx.now = Math.round(total - toHide.outerHeight() - adjust);
                        adjust = 0;
                    }
                }
            });
        },
        _toggleComplete: function (data) {
            var toHide = data.oldPanel;
            toHide.removeClass('ui-accordion-content-active').prev().removeClass('ui-corner-top').addClass('ui-corner-all');
            if (toHide.length) {
                toHide.parent()[0].className = toHide.parent()[0].className;
            }
            this._trigger('activate', null, data);
        }
    });
    var menu = $.widget('ui.menu', {
        version: '1.11.4',
        defaultElement: '<ul>',
        delay: 300,
        options: {
            icons: { submenu: 'ui-icon-carat-1-e' },
            items: '> *',
            menus: 'ul',
            position: {
                my: 'left-1 top',
                at: 'right top'
            },
            role: 'menu',
            blur: null,
            focus: null,
            select: null
        },
        _create: function () {
            this.activeMenu = this.element;
            this.mouseHandled = false;
            this.element.uniqueId().addClass('ui-menu ui-widget ui-widget-content').toggleClass('ui-menu-icons', !!this.element.find('.ui-icon').length).attr({
                role: this.options.role,
                tabIndex: 0
            });
            if (this.options.disabled) {
                this.element.addClass('ui-state-disabled').attr('aria-disabled', 'true');
            }
            this._on({
                'mousedown .ui-menu-item': function (event) {
                    event.preventDefault();
                },
                'click .ui-menu-item': function (event) {
                    var target = $(event.target);
                    if (!this.mouseHandled && target.not('.ui-state-disabled').length) {
                        this.select(event);
                        if (!event.isPropagationStopped()) {
                            this.mouseHandled = true;
                        }
                        if (target.has('.ui-menu').length) {
                            this.expand(event);
                        } else if (!this.element.is(':focus') && $(this.document[0].activeElement).closest('.ui-menu').length) {
                            this.element.trigger('focus', [true]);
                            if (this.active && this.active.parents('.ui-menu').length === 1) {
                                clearTimeout(this.timer);
                            }
                        }
                    }
                },
                'mouseenter .ui-menu-item': function (event) {
                    if (this.previousFilter) {
                        return;
                    }
                    var target = $(event.currentTarget);
                    target.siblings('.ui-state-active').removeClass('ui-state-active');
                    this.focus(event, target);
                },
                mouseleave: 'collapseAll',
                'mouseleave .ui-menu': 'collapseAll',
                focus: function (event, keepActiveItem) {
                    var item = this.active || this.element.find(this.options.items).eq(0);
                    if (!keepActiveItem) {
                        this.focus(event, item);
                    }
                },
                blur: function (event) {
                    this._delay(function () {
                        if (!$.contains(this.element[0], this.document[0].activeElement)) {
                            this.collapseAll(event);
                        }
                    });
                },
                keydown: '_keydown'
            });
            this.refresh();
            this._on(this.document, {
                click: function (event) {
                    if (this._closeOnDocumentClick(event)) {
                        this.collapseAll(event);
                    }
                    this.mouseHandled = false;
                }
            });
        },
        _destroy: function () {
            this.element.removeAttr('aria-activedescendant').find('.ui-menu').addBack().removeClass('ui-menu ui-widget ui-widget-content ui-menu-icons ui-front').removeAttr('role').removeAttr('tabIndex').removeAttr('aria-labelledby').removeAttr('aria-expanded').removeAttr('aria-hidden').removeAttr('aria-disabled').removeUniqueId().show();
            this.element.find('.ui-menu-item').removeClass('ui-menu-item').removeAttr('role').removeAttr('aria-disabled').removeUniqueId().removeClass('ui-state-hover').removeAttr('tabIndex').removeAttr('role').removeAttr('aria-haspopup').children().each(function () {
                var elem = $(this);
                if (elem.data('ui-menu-submenu-carat')) {
                    elem.remove();
                }
            });
            this.element.find('.ui-menu-divider').removeClass('ui-menu-divider ui-widget-content');
        },
        _keydown: function (event) {
            var match, prev, character, skip, preventDefault = true;
            switch (event.keyCode) {
            case $.ui.keyCode.PAGE_UP:
                this.previousPage(event);
                break;
            case $.ui.keyCode.PAGE_DOWN:
                this.nextPage(event);
                break;
            case $.ui.keyCode.HOME:
                this._move('first', 'first', event);
                break;
            case $.ui.keyCode.END:
                this._move('last', 'last', event);
                break;
            case $.ui.keyCode.UP:
                this.previous(event);
                break;
            case $.ui.keyCode.DOWN:
                this.next(event);
                break;
            case $.ui.keyCode.LEFT:
                this.collapse(event);
                break;
            case $.ui.keyCode.RIGHT:
                if (this.active && !this.active.is('.ui-state-disabled')) {
                    this.expand(event);
                }
                break;
            case $.ui.keyCode.ENTER:
            case $.ui.keyCode.SPACE:
                this._activate(event);
                break;
            case $.ui.keyCode.ESCAPE:
                this.collapse(event);
                break;
            default:
                preventDefault = false;
                prev = this.previousFilter || '';
                character = String.fromCharCode(event.keyCode);
                skip = false;
                clearTimeout(this.filterTimer);
                if (character === prev) {
                    skip = true;
                } else {
                    character = prev + character;
                }
                match = this._filterMenuItems(character);
                match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll('.ui-menu-item') : match;
                if (!match.length) {
                    character = String.fromCharCode(event.keyCode);
                    match = this._filterMenuItems(character);
                }
                if (match.length) {
                    this.focus(event, match);
                    this.previousFilter = character;
                    this.filterTimer = this._delay(function () {
                        delete this.previousFilter;
                    }, 1000);
                } else {
                    delete this.previousFilter;
                }
            }
            if (preventDefault) {
                event.preventDefault();
            }
        },
        _activate: function (event) {
            if (!this.active.is('.ui-state-disabled')) {
                if (this.active.is('[aria-haspopup=\'true\']')) {
                    this.expand(event);
                } else {
                    this.select(event);
                }
            }
        },
        refresh: function () {
            var menus, items, that = this, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
            this.element.toggleClass('ui-menu-icons', !!this.element.find('.ui-icon').length);
            submenus.filter(':not(.ui-menu)').addClass('ui-menu ui-widget ui-widget-content ui-front').hide().attr({
                role: this.options.role,
                'aria-hidden': 'true',
                'aria-expanded': 'false'
            }).each(function () {
                var menu = $(this), item = menu.parent(), submenuCarat = $('<span>').addClass('ui-menu-icon ui-icon ' + icon).data('ui-menu-submenu-carat', true);
                item.attr('aria-haspopup', 'true').prepend(submenuCarat);
                menu.attr('aria-labelledby', item.attr('id'));
            });
            menus = submenus.add(this.element);
            items = menus.find(this.options.items);
            items.not('.ui-menu-item').each(function () {
                var item = $(this);
                if (that._isDivider(item)) {
                    item.addClass('ui-widget-content ui-menu-divider');
                }
            });
            items.not('.ui-menu-item, .ui-menu-divider').addClass('ui-menu-item').uniqueId().attr({
                tabIndex: -1,
                role: this._itemRole()
            });
            items.filter('.ui-state-disabled').attr('aria-disabled', 'true');
            if (this.active && !$.contains(this.element[0], this.active[0])) {
                this.blur();
            }
        },
        _itemRole: function () {
            return {
                menu: 'menuitem',
                listbox: 'option'
            }[this.options.role];
        },
        _setOption: function (key, value) {
            if (key === 'icons') {
                this.element.find('.ui-menu-icon').removeClass(this.options.icons.submenu).addClass(value.submenu);
            }
            if (key === 'disabled') {
                this.element.toggleClass('ui-state-disabled', !!value).attr('aria-disabled', value);
            }
            this._super(key, value);
        },
        focus: function (event, item) {
            var nested, focused;
            this.blur(event, event && event.type === 'focus');
            this._scrollIntoView(item);
            this.active = item.first();
            focused = this.active.addClass('ui-state-focus').removeClass('ui-state-active');
            if (this.options.role) {
                this.element.attr('aria-activedescendant', focused.attr('id'));
            }
            this.active.parent().closest('.ui-menu-item').addClass('ui-state-active');
            if (event && event.type === 'keydown') {
                this._close();
            } else {
                this.timer = this._delay(function () {
                    this._close();
                }, this.delay);
            }
            nested = item.children('.ui-menu');
            if (nested.length && event && /^mouse/.test(event.type)) {
                this._startOpening(nested);
            }
            this.activeMenu = item.parent();
            this._trigger('focus', event, { item: item });
        },
        _scrollIntoView: function (item) {
            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
            if (this._hasScroll()) {
                borderTop = parseFloat($.css(this.activeMenu[0], 'borderTopWidth')) || 0;
                paddingTop = parseFloat($.css(this.activeMenu[0], 'paddingTop')) || 0;
                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                scroll = this.activeMenu.scrollTop();
                elementHeight = this.activeMenu.height();
                itemHeight = item.outerHeight();
                if (offset < 0) {
                    this.activeMenu.scrollTop(scroll + offset);
                } else if (offset + itemHeight > elementHeight) {
                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
                }
            }
        },
        blur: function (event, fromFocus) {
            if (!fromFocus) {
                clearTimeout(this.timer);
            }
            if (!this.active) {
                return;
            }
            this.active.removeClass('ui-state-focus');
            this.active = null;
            this._trigger('blur', event, { item: this.active });
        },
        _startOpening: function (submenu) {
            clearTimeout(this.timer);
            if (submenu.attr('aria-hidden') !== 'true') {
                return;
            }
            this.timer = this._delay(function () {
                this._close();
                this._open(submenu);
            }, this.delay);
        },
        _open: function (submenu) {
            var position = $.extend({ of: this.active }, this.options.position);
            clearTimeout(this.timer);
            this.element.find('.ui-menu').not(submenu.parents('.ui-menu')).hide().attr('aria-hidden', 'true');
            submenu.show().removeAttr('aria-hidden').attr('aria-expanded', 'true').position(position);
        },
        collapseAll: function (event, all) {
            clearTimeout(this.timer);
            this.timer = this._delay(function () {
                var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find('.ui-menu'));
                if (!currentMenu.length) {
                    currentMenu = this.element;
                }
                this._close(currentMenu);
                this.blur(event);
                this.activeMenu = currentMenu;
            }, this.delay);
        },
        _close: function (startMenu) {
            if (!startMenu) {
                startMenu = this.active ? this.active.parent() : this.element;
            }
            startMenu.find('.ui-menu').hide().attr('aria-hidden', 'true').attr('aria-expanded', 'false').end().find('.ui-state-active').not('.ui-state-focus').removeClass('ui-state-active');
        },
        _closeOnDocumentClick: function (event) {
            return !$(event.target).closest('.ui-menu').length;
        },
        _isDivider: function (item) {
            return !/[^\-\u2014\u2013\s]/.test(item.text());
        },
        collapse: function (event) {
            var newItem = this.active && this.active.parent().closest('.ui-menu-item', this.element);
            if (newItem && newItem.length) {
                this._close();
                this.focus(event, newItem);
            }
        },
        expand: function (event) {
            var newItem = this.active && this.active.children('.ui-menu ').find(this.options.items).first();
            if (newItem && newItem.length) {
                this._open(newItem.parent());
                this._delay(function () {
                    this.focus(event, newItem);
                });
            }
        },
        next: function (event) {
            this._move('next', 'first', event);
        },
        previous: function (event) {
            this._move('prev', 'last', event);
        },
        isFirstItem: function () {
            return this.active && !this.active.prevAll('.ui-menu-item').length;
        },
        isLastItem: function () {
            return this.active && !this.active.nextAll('.ui-menu-item').length;
        },
        _move: function (direction, filter, event) {
            var next;
            if (this.active) {
                if (direction === 'first' || direction === 'last') {
                    next = this.active[direction === 'first' ? 'prevAll' : 'nextAll']('.ui-menu-item').eq(-1);
                } else {
                    next = this.active[direction + 'All']('.ui-menu-item').eq(0);
                }
            }
            if (!next || !next.length || !this.active) {
                next = this.activeMenu.find(this.options.items)[filter]();
            }
            this.focus(event, next);
        },
        nextPage: function (event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return;
            }
            if (this.isLastItem()) {
                return;
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.nextAll('.ui-menu-item').each(function () {
                    item = $(this);
                    return item.offset().top - base - height < 0;
                });
                this.focus(event, item);
            } else {
                this.focus(event, this.activeMenu.find(this.options.items)[!this.active ? 'first' : 'last']());
            }
        },
        previousPage: function (event) {
            var item, base, height;
            if (!this.active) {
                this.next(event);
                return;
            }
            if (this.isFirstItem()) {
                return;
            }
            if (this._hasScroll()) {
                base = this.active.offset().top;
                height = this.element.height();
                this.active.prevAll('.ui-menu-item').each(function () {
                    item = $(this);
                    return item.offset().top - base + height > 0;
                });
                this.focus(event, item);
            } else {
                this.focus(event, this.activeMenu.find(this.options.items).first());
            }
        },
        _hasScroll: function () {
            return this.element.outerHeight() < this.element.prop('scrollHeight');
        },
        select: function (event) {
            this.active = this.active || $(event.target).closest('.ui-menu-item');
            var ui = { item: this.active };
            if (!this.active.has('.ui-menu').length) {
                this.collapseAll(event, true);
            }
            this._trigger('select', event, ui);
        },
        _filterMenuItems: function (character) {
            var escapedCharacter = character.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&'), regex = new RegExp('^' + escapedCharacter, 'i');
            return this.activeMenu.find(this.options.items).filter('.ui-menu-item').filter(function () {
                return regex.test($.trim($(this).text()));
            });
        }
    });
    $.widget('ui.autocomplete', {
        version: '1.11.4',
        defaultElement: '<input>',
        options: {
            appendTo: null,
            autoFocus: false,
            delay: 300,
            minLength: 1,
            position: {
                my: 'left top',
                at: 'left bottom',
                collision: 'none'
            },
            source: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            response: null,
            search: null,
            select: null
        },
        requestIndex: 0,
        pending: 0,
        _create: function () {
            var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = nodeName === 'textarea', isInput = nodeName === 'input';
            this.isMultiLine = isTextarea ? true : isInput ? false : this.element.prop('isContentEditable');
            this.valueMethod = this.element[isTextarea || isInput ? 'val' : 'text'];
            this.isNewMenu = true;
            this.element.addClass('ui-autocomplete-input').attr('autocomplete', 'off');
            this._on(this.element, {
                keydown: function (event) {
                    if (this.element.prop('readOnly')) {
                        suppressKeyPress = true;
                        suppressInput = true;
                        suppressKeyPressRepeat = true;
                        return;
                    }
                    suppressKeyPress = false;
                    suppressInput = false;
                    suppressKeyPressRepeat = false;
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                    case keyCode.PAGE_UP:
                        suppressKeyPress = true;
                        this._move('previousPage', event);
                        break;
                    case keyCode.PAGE_DOWN:
                        suppressKeyPress = true;
                        this._move('nextPage', event);
                        break;
                    case keyCode.UP:
                        suppressKeyPress = true;
                        this._keyEvent('previous', event);
                        break;
                    case keyCode.DOWN:
                        suppressKeyPress = true;
                        this._keyEvent('next', event);
                        break;
                    case keyCode.ENTER:
                        if (this.menu.active) {
                            suppressKeyPress = true;
                            event.preventDefault();
                            this.menu.select(event);
                        }
                        break;
                    case keyCode.TAB:
                        if (this.menu.active) {
                            this.menu.select(event);
                        }
                        break;
                    case keyCode.ESCAPE:
                        if (this.menu.element.is(':visible')) {
                            if (!this.isMultiLine) {
                                this._value(this.term);
                            }
                            this.close(event);
                            event.preventDefault();
                        }
                        break;
                    default:
                        suppressKeyPressRepeat = true;
                        this._searchTimeout(event);
                        break;
                    }
                },
                keypress: function (event) {
                    if (suppressKeyPress) {
                        suppressKeyPress = false;
                        if (!this.isMultiLine || this.menu.element.is(':visible')) {
                            event.preventDefault();
                        }
                        return;
                    }
                    if (suppressKeyPressRepeat) {
                        return;
                    }
                    var keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                    case keyCode.PAGE_UP:
                        this._move('previousPage', event);
                        break;
                    case keyCode.PAGE_DOWN:
                        this._move('nextPage', event);
                        break;
                    case keyCode.UP:
                        this._keyEvent('previous', event);
                        break;
                    case keyCode.DOWN:
                        this._keyEvent('next', event);
                        break;
                    }
                },
                input: function (event) {
                    if (suppressInput) {
                        suppressInput = false;
                        event.preventDefault();
                        return;
                    }
                    this._searchTimeout(event);
                },
                focus: function () {
                    this.selectedItem = null;
                    this.previous = this._value();
                },
                blur: function (event) {
                    if (this.cancelBlur) {
                        delete this.cancelBlur;
                        return;
                    }
                    clearTimeout(this.searching);
                    this.close(event);
                    this._change(event);
                }
            });
            this._initSource();
            this.menu = $('<ul>').addClass('ui-autocomplete ui-front').appendTo(this._appendTo()).menu({ role: null }).hide().menu('instance');
            this._on(this.menu.element, {
                mousedown: function (event) {
                    event.preventDefault();
                    this.cancelBlur = true;
                    this._delay(function () {
                        delete this.cancelBlur;
                    });
                    var menuElement = this.menu.element[0];
                    if (!$(event.target).closest('.ui-menu-item').length) {
                        this._delay(function () {
                            var that = this;
                            this.document.one('mousedown', function (event) {
                                if (event.target !== that.element[0] && event.target !== menuElement && !$.contains(menuElement, event.target)) {
                                    that.close();
                                }
                            });
                        });
                    }
                },
                menufocus: function (event, ui) {
                    var label, item;
                    if (this.isNewMenu) {
                        this.isNewMenu = false;
                        if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                            this.menu.blur();
                            this.document.one('mousemove', function () {
                                $(event.target).trigger(event.originalEvent);
                            });
                            return;
                        }
                    }
                    item = ui.item.data('ui-autocomplete-item');
                    if (false !== this._trigger('focus', event, { item: item })) {
                        if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                            this._value(item.value);
                        }
                    }
                    label = ui.item.attr('aria-label') || item.value;
                    if (label && $.trim(label).length) {
                        this.liveRegion.children().hide();
                        $('<div>').text(label).appendTo(this.liveRegion);
                    }
                },
                menuselect: function (event, ui) {
                    var item = ui.item.data('ui-autocomplete-item'), previous = this.previous;
                    if (this.element[0] !== this.document[0].activeElement) {
                        this.element.focus();
                        this.previous = previous;
                        this._delay(function () {
                            this.previous = previous;
                            this.selectedItem = item;
                        });
                    }
                    if (false !== this._trigger('select', event, { item: item })) {
                        this._value(item.value);
                    }
                    this.term = this._value();
                    this.close(event);
                    this.selectedItem = item;
                }
            });
            this.liveRegion = $('<span>', {
                role: 'status',
                'aria-live': 'assertive',
                'aria-relevant': 'additions'
            }).addClass('ui-helper-hidden-accessible').appendTo(this.document[0].body);
            this._on(this.window, {
                beforeunload: function () {
                    this.element.removeAttr('autocomplete');
                }
            });
        },
        _destroy: function () {
            clearTimeout(this.searching);
            this.element.removeClass('ui-autocomplete-input').removeAttr('autocomplete');
            this.menu.element.remove();
            this.liveRegion.remove();
        },
        _setOption: function (key, value) {
            this._super(key, value);
            if (key === 'source') {
                this._initSource();
            }
            if (key === 'appendTo') {
                this.menu.element.appendTo(this._appendTo());
            }
            if (key === 'disabled' && value && this.xhr) {
                this.xhr.abort();
            }
        },
        _appendTo: function () {
            var element = this.options.appendTo;
            if (element) {
                element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);
            }
            if (!element || !element[0]) {
                element = this.element.closest('.ui-front');
            }
            if (!element.length) {
                element = this.document[0].body;
            }
            return element;
        },
        _initSource: function () {
            var array, url, that = this;
            if ($.isArray(this.options.source)) {
                array = this.options.source;
                this.source = function (request, response) {
                    response($.ui.autocomplete.filter(array, request.term));
                };
            } else if (typeof this.options.source === 'string') {
                url = this.options.source;
                this.source = function (request, response) {
                    if (that.xhr) {
                        that.xhr.abort();
                    }
                    that.xhr = $.ajax({
                        url: url,
                        data: request,
                        dataType: 'json',
                        success: function (data) {
                            response(data);
                        },
                        error: function () {
                            response([]);
                        }
                    });
                };
            } else {
                this.source = this.options.source;
            }
        },
        _searchTimeout: function (event) {
            clearTimeout(this.searching);
            this.searching = this._delay(function () {
                var equalValues = this.term === this._value(), menuVisible = this.menu.element.is(':visible'), modifierKey = event.altKey || event.ctrlKey || event.metaKey || event.shiftKey;
                if (!equalValues || equalValues && !menuVisible && !modifierKey) {
                    this.selectedItem = null;
                    this.search(null, event);
                }
            }, this.options.delay);
        },
        search: function (value, event) {
            value = value != null ? value : this._value();
            this.term = this._value();
            if (value.length < this.options.minLength) {
                return this.close(event);
            }
            if (this._trigger('search', event) === false) {
                return;
            }
            return this._search(value);
        },
        _search: function (value) {
            this.pending++;
            this.element.addClass('ui-autocomplete-loading');
            this.cancelSearch = false;
            this.source({ term: value }, this._response());
        },
        _response: function () {
            var index = ++this.requestIndex;
            return $.proxy(function (content) {
                if (index === this.requestIndex) {
                    this.__response(content);
                }
                this.pending--;
                if (!this.pending) {
                    this.element.removeClass('ui-autocomplete-loading');
                }
            }, this);
        },
        __response: function (content) {
            if (content) {
                content = this._normalize(content);
            }
            this._trigger('response', null, { content: content });
            if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                this._suggest(content);
                this._trigger('open');
            } else {
                this._close();
            }
        },
        close: function (event) {
            this.cancelSearch = true;
            this._close(event);
        },
        _close: function (event) {
            if (this.menu.element.is(':visible')) {
                this.menu.element.hide();
                this.menu.blur();
                this.isNewMenu = true;
                this._trigger('close', event);
            }
        },
        _change: function (event) {
            if (this.previous !== this._value()) {
                this._trigger('change', event, { item: this.selectedItem });
            }
        },
        _normalize: function (items) {
            if (items.length && items[0].label && items[0].value) {
                return items;
            }
            return $.map(items, function (item) {
                if (typeof item === 'string') {
                    return {
                        label: item,
                        value: item
                    };
                }
                return $.extend({}, item, {
                    label: item.label || item.value,
                    value: item.value || item.label
                });
            });
        },
        _suggest: function (items) {
            var ul = this.menu.element.empty();
            this._renderMenu(ul, items);
            this.isNewMenu = true;
            this.menu.refresh();
            ul.show();
            this._resizeMenu();
            ul.position($.extend({ of: this.element }, this.options.position));
            if (this.options.autoFocus) {
                this.menu.next();
            }
        },
        _resizeMenu: function () {
            var ul = this.menu.element;
            ul.outerWidth(Math.max(ul.width('').outerWidth() + 1, this.element.outerWidth()));
        },
        _renderMenu: function (ul, items) {
            var that = this;
            $.each(items, function (index, item) {
                that._renderItemData(ul, item);
            });
        },
        _renderItemData: function (ul, item) {
            return this._renderItem(ul, item).data('ui-autocomplete-item', item);
        },
        _renderItem: function (ul, item) {
            return $('<li>').text(item.label).appendTo(ul);
        },
        _move: function (direction, event) {
            if (!this.menu.element.is(':visible')) {
                this.search(null, event);
                return;
            }
            if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
                if (!this.isMultiLine) {
                    this._value(this.term);
                }
                this.menu.blur();
                return;
            }
            this.menu[direction](event);
        },
        widget: function () {
            return this.menu.element;
        },
        _value: function () {
            return this.valueMethod.apply(this.element, arguments);
        },
        _keyEvent: function (keyEvent, event) {
            if (!this.isMultiLine || this.menu.element.is(':visible')) {
                this._move(keyEvent, event);
                event.preventDefault();
            }
        }
    });
    $.extend($.ui.autocomplete, {
        escapeRegex: function (value) {
            return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
        },
        filter: function (array, term) {
            var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), 'i');
            return $.grep(array, function (value) {
                return matcher.test(value.label || value.value || value);
            });
        }
    });
    $.widget('ui.autocomplete', $.ui.autocomplete, {
        options: {
            messages: {
                noResults: 'No search results.',
                results: function (amount) {
                    return amount + (amount > 1 ? ' results are' : ' result is') + ' available, use up and down arrow keys to navigate.';
                }
            }
        },
        __response: function (content) {
            var message;
            this._superApply(arguments);
            if (this.options.disabled || this.cancelSearch) {
                return;
            }
            if (content && content.length) {
                message = this.options.messages.results(content.length);
            } else {
                message = this.options.messages.noResults;
            }
            this.liveRegion.children().hide();
            $('<div>').text(message).appendTo(this.liveRegion);
        }
    });
    var autocomplete = $.ui.autocomplete;
    var lastActive, baseClasses = 'ui-button ui-widget ui-state-default ui-corner-all', typeClasses = 'ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only', formResetHandler = function () {
            var form = $(this);
            setTimeout(function () {
                form.find(':ui-button').button('refresh');
            }, 1);
        }, radioGroup = function (radio) {
            var name = radio.name, form = radio.form, radios = $([]);
            if (name) {
                name = name.replace(/'/g, '\\\'');
                if (form) {
                    radios = $(form).find('[name=\'' + name + '\'][type=radio]');
                } else {
                    radios = $('[name=\'' + name + '\'][type=radio]', radio.ownerDocument).filter(function () {
                        return !this.form;
                    });
                }
            }
            return radios;
        };
    $.widget('ui.button', {
        version: '1.11.4',
        defaultElement: '<button>',
        options: {
            disabled: null,
            text: true,
            label: null,
            icons: {
                primary: null,
                secondary: null
            }
        },
        _create: function () {
            this.element.closest('form').unbind('reset' + this.eventNamespace).bind('reset' + this.eventNamespace, formResetHandler);
            if (typeof this.options.disabled !== 'boolean') {
                this.options.disabled = !!this.element.prop('disabled');
            } else {
                this.element.prop('disabled', this.options.disabled);
            }
            this._determineButtonType();
            this.hasTitle = !!this.buttonElement.attr('title');
            var that = this, options = this.options, toggleButton = this.type === 'checkbox' || this.type === 'radio', activeClass = !toggleButton ? 'ui-state-active' : '';
            if (options.label === null) {
                options.label = this.type === 'input' ? this.buttonElement.val() : this.buttonElement.html();
            }
            this._hoverable(this.buttonElement);
            this.buttonElement.addClass(baseClasses).attr('role', 'button').bind('mouseenter' + this.eventNamespace, function () {
                if (options.disabled) {
                    return;
                }
                if (this === lastActive) {
                    $(this).addClass('ui-state-active');
                }
            }).bind('mouseleave' + this.eventNamespace, function () {
                if (options.disabled) {
                    return;
                }
                $(this).removeClass(activeClass);
            }).bind('click' + this.eventNamespace, function (event) {
                if (options.disabled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
            this._on({
                focus: function () {
                    this.buttonElement.addClass('ui-state-focus');
                },
                blur: function () {
                    this.buttonElement.removeClass('ui-state-focus');
                }
            });
            if (toggleButton) {
                this.element.bind('change' + this.eventNamespace, function () {
                    that.refresh();
                });
            }
            if (this.type === 'checkbox') {
                this.buttonElement.bind('click' + this.eventNamespace, function () {
                    if (options.disabled) {
                        return false;
                    }
                });
            } else if (this.type === 'radio') {
                this.buttonElement.bind('click' + this.eventNamespace, function () {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).addClass('ui-state-active');
                    that.buttonElement.attr('aria-pressed', 'true');
                    var radio = that.element[0];
                    radioGroup(radio).not(radio).map(function () {
                        return $(this).button('widget')[0];
                    }).removeClass('ui-state-active').attr('aria-pressed', 'false');
                });
            } else {
                this.buttonElement.bind('mousedown' + this.eventNamespace, function () {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).addClass('ui-state-active');
                    lastActive = this;
                    that.document.one('mouseup', function () {
                        lastActive = null;
                    });
                }).bind('mouseup' + this.eventNamespace, function () {
                    if (options.disabled) {
                        return false;
                    }
                    $(this).removeClass('ui-state-active');
                }).bind('keydown' + this.eventNamespace, function (event) {
                    if (options.disabled) {
                        return false;
                    }
                    if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {
                        $(this).addClass('ui-state-active');
                    }
                }).bind('keyup' + this.eventNamespace + ' blur' + this.eventNamespace, function () {
                    $(this).removeClass('ui-state-active');
                });
                if (this.buttonElement.is('a')) {
                    this.buttonElement.keyup(function (event) {
                        if (event.keyCode === $.ui.keyCode.SPACE) {
                            $(this).click();
                        }
                    });
                }
            }
            this._setOption('disabled', options.disabled);
            this._resetButton();
        },
        _determineButtonType: function () {
            var ancestor, labelSelector, checked;
            if (this.element.is('[type=checkbox]')) {
                this.type = 'checkbox';
            } else if (this.element.is('[type=radio]')) {
                this.type = 'radio';
            } else if (this.element.is('input')) {
                this.type = 'input';
            } else {
                this.type = 'button';
            }
            if (this.type === 'checkbox' || this.type === 'radio') {
                ancestor = this.element.parents().last();
                labelSelector = 'label[for=\'' + this.element.attr('id') + '\']';
                this.buttonElement = ancestor.find(labelSelector);
                if (!this.buttonElement.length) {
                    ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                    this.buttonElement = ancestor.filter(labelSelector);
                    if (!this.buttonElement.length) {
                        this.buttonElement = ancestor.find(labelSelector);
                    }
                }
                this.element.addClass('ui-helper-hidden-accessible');
                checked = this.element.is(':checked');
                if (checked) {
                    this.buttonElement.addClass('ui-state-active');
                }
                this.buttonElement.prop('aria-pressed', checked);
            } else {
                this.buttonElement = this.element;
            }
        },
        widget: function () {
            return this.buttonElement;
        },
        _destroy: function () {
            this.element.removeClass('ui-helper-hidden-accessible');
            this.buttonElement.removeClass(baseClasses + ' ui-state-active ' + typeClasses).removeAttr('role').removeAttr('aria-pressed').html(this.buttonElement.find('.ui-button-text').html());
            if (!this.hasTitle) {
                this.buttonElement.removeAttr('title');
            }
        },
        _setOption: function (key, value) {
            this._super(key, value);
            if (key === 'disabled') {
                this.widget().toggleClass('ui-state-disabled', !!value);
                this.element.prop('disabled', !!value);
                if (value) {
                    if (this.type === 'checkbox' || this.type === 'radio') {
                        this.buttonElement.removeClass('ui-state-focus');
                    } else {
                        this.buttonElement.removeClass('ui-state-focus ui-state-active');
                    }
                }
                return;
            }
            this._resetButton();
        },
        refresh: function () {
            var isDisabled = this.element.is('input, button') ? this.element.is(':disabled') : this.element.hasClass('ui-button-disabled');
            if (isDisabled !== this.options.disabled) {
                this._setOption('disabled', isDisabled);
            }
            if (this.type === 'radio') {
                radioGroup(this.element[0]).each(function () {
                    if ($(this).is(':checked')) {
                        $(this).button('widget').addClass('ui-state-active').attr('aria-pressed', 'true');
                    } else {
                        $(this).button('widget').removeClass('ui-state-active').attr('aria-pressed', 'false');
                    }
                });
            } else if (this.type === 'checkbox') {
                if (this.element.is(':checked')) {
                    this.buttonElement.addClass('ui-state-active').attr('aria-pressed', 'true');
                } else {
                    this.buttonElement.removeClass('ui-state-active').attr('aria-pressed', 'false');
                }
            }
        },
        _resetButton: function () {
            if (this.type === 'input') {
                if (this.options.label) {
                    this.element.val(this.options.label);
                }
                return;
            }
            var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $('<span></span>', this.document[0]).addClass('ui-button-text').html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
            if (icons.primary || icons.secondary) {
                if (this.options.text) {
                    buttonClasses.push('ui-button-text-icon' + (multipleIcons ? 's' : icons.primary ? '-primary' : '-secondary'));
                }
                if (icons.primary) {
                    buttonElement.prepend('<span class=\'ui-button-icon-primary ui-icon ' + icons.primary + '\'></span>');
                }
                if (icons.secondary) {
                    buttonElement.append('<span class=\'ui-button-icon-secondary ui-icon ' + icons.secondary + '\'></span>');
                }
                if (!this.options.text) {
                    buttonClasses.push(multipleIcons ? 'ui-button-icons-only' : 'ui-button-icon-only');
                    if (!this.hasTitle) {
                        buttonElement.attr('title', $.trim(buttonText));
                    }
                }
            } else {
                buttonClasses.push('ui-button-text-only');
            }
            buttonElement.addClass(buttonClasses.join(' '));
        }
    });
    $.widget('ui.buttonset', {
        version: '1.11.4',
        options: { items: 'button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)' },
        _create: function () {
            this.element.addClass('ui-buttonset');
        },
        _init: function () {
            this.refresh();
        },
        _setOption: function (key, value) {
            if (key === 'disabled') {
                this.buttons.button('option', key, value);
            }
            this._super(key, value);
        },
        refresh: function () {
            var rtl = this.element.css('direction') === 'rtl', allButtons = this.element.find(this.options.items), existingButtons = allButtons.filter(':ui-button');
            allButtons.not(':ui-button').button();
            existingButtons.button('refresh');
            this.buttons = allButtons.map(function () {
                return $(this).button('widget')[0];
            }).removeClass('ui-corner-all ui-corner-left ui-corner-right').filter(':first').addClass(rtl ? 'ui-corner-right' : 'ui-corner-left').end().filter(':last').addClass(rtl ? 'ui-corner-left' : 'ui-corner-right').end().end();
        },
        _destroy: function () {
            this.element.removeClass('ui-buttonset');
            this.buttons.map(function () {
                return $(this).button('widget')[0];
            }).removeClass('ui-corner-left ui-corner-right').end().button('destroy');
        }
    });
    var button = $.ui.button;
    $.extend($.ui, { datepicker: { version: '1.11.4' } });
    var datepicker_instActive;
    function datepicker_getZindex(elem) {
        var position, value;
        while (elem.length && elem[0] !== document) {
            position = elem.css('position');
            if (position === 'absolute' || position === 'relative' || position === 'fixed') {
                value = parseInt(elem.css('zIndex'), 10);
                if (!isNaN(value) && value !== 0) {
                    return value;
                }
            }
            elem = elem.parent();
        }
        return 0;
    }
    function Datepicker() {
        this._curInst = null;
        this._keyEvent = false;
        this._disabledInputs = [];
        this._datepickerShowing = false;
        this._inDialog = false;
        this._mainDivId = 'ui-datepicker-div';
        this._inlineClass = 'ui-datepicker-inline';
        this._appendClass = 'ui-datepicker-append';
        this._triggerClass = 'ui-datepicker-trigger';
        this._dialogClass = 'ui-datepicker-dialog';
        this._disableClass = 'ui-datepicker-disabled';
        this._unselectableClass = 'ui-datepicker-unselectable';
        this._currentClass = 'ui-datepicker-current-day';
        this._dayOverClass = 'ui-datepicker-days-cell-over';
        this.regional = [];
        this.regional[''] = {
            closeText: 'Done',
            prevText: 'Prev',
            nextText: 'Next',
            currentText: 'Today',
            monthNames: [
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December'
            ],
            monthNamesShort: [
                'Jan',
                'Feb',
                'Mar',
                'Apr',
                'May',
                'Jun',
                'Jul',
                'Aug',
                'Sep',
                'Oct',
                'Nov',
                'Dec'
            ],
            dayNames: [
                'Sunday',
                'Monday',
                'Tuesday',
                'Wednesday',
                'Thursday',
                'Friday',
                'Saturday'
            ],
            dayNamesShort: [
                'Sun',
                'Mon',
                'Tue',
                'Wed',
                'Thu',
                'Fri',
                'Sat'
            ],
            dayNamesMin: [
                'Su',
                'Mo',
                'Tu',
                'We',
                'Th',
                'Fr',
                'Sa'
            ],
            weekHeader: 'Wk',
            dateFormat: 'mm/dd/yy',
            firstDay: 0,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ''
        };
        this._defaults = {
            showOn: 'focus',
            showAnim: 'fadeIn',
            showOptions: {},
            defaultDate: null,
            appendText: '',
            buttonText: '...',
            buttonImage: '',
            buttonImageOnly: false,
            hideIfNoPrevNext: false,
            navigationAsDateFormat: false,
            gotoCurrent: false,
            changeMonth: false,
            changeYear: false,
            yearRange: 'c-10:c+10',
            showOtherMonths: false,
            selectOtherMonths: false,
            showWeek: false,
            calculateWeek: this.iso8601Week,
            shortYearCutoff: '+10',
            minDate: null,
            maxDate: null,
            duration: 'fast',
            beforeShowDay: null,
            beforeShow: null,
            onSelect: null,
            onChangeMonthYear: null,
            onClose: null,
            numberOfMonths: 1,
            showCurrentAtPos: 0,
            stepMonths: 1,
            stepBigMonths: 12,
            altField: '',
            altFormat: '',
            constrainInput: true,
            showButtonPanel: false,
            autoSize: false,
            disabled: false
        };
        $.extend(this._defaults, this.regional['']);
        this.regional.en = $.extend(true, {}, this.regional['']);
        this.regional['en-US'] = $.extend(true, {}, this.regional.en);
        this.dpDiv = datepicker_bindHover($('<div id=\'' + this._mainDivId + '\' class=\'ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all\'></div>'));
    }
    $.extend(Datepicker.prototype, {
        markerClassName: 'hasDatepicker',
        maxRows: 4,
        _widgetDatepicker: function () {
            return this.dpDiv;
        },
        setDefaults: function (settings) {
            datepicker_extendRemove(this._defaults, settings || {});
            return this;
        },
        _attachDatepicker: function (target, settings) {
            var nodeName, inline, inst;
            nodeName = target.nodeName.toLowerCase();
            inline = nodeName === 'div' || nodeName === 'span';
            if (!target.id) {
                this.uuid += 1;
                target.id = 'dp' + this.uuid;
            }
            inst = this._newInst($(target), inline);
            inst.settings = $.extend({}, settings || {});
            if (nodeName === 'input') {
                this._connectDatepicker(target, inst);
            } else if (inline) {
                this._inlineDatepicker(target, inst);
            }
        },
        _newInst: function (target, inline) {
            var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, '\\\\$1');
            return {
                id: id,
                input: target,
                selectedDay: 0,
                selectedMonth: 0,
                selectedYear: 0,
                drawMonth: 0,
                drawYear: 0,
                inline: inline,
                dpDiv: !inline ? this.dpDiv : datepicker_bindHover($('<div class=\'' + this._inlineClass + ' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all\'></div>'))
            };
        },
        _connectDatepicker: function (target, inst) {
            var input = $(target);
            inst.append = $([]);
            inst.trigger = $([]);
            if (input.hasClass(this.markerClassName)) {
                return;
            }
            this._attachments(input, inst);
            input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);
            this._autoSize(inst);
            $.data(target, 'datepicker', inst);
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
        },
        _attachments: function (input, inst) {
            var showOn, buttonText, buttonImage, appendText = this._get(inst, 'appendText'), isRTL = this._get(inst, 'isRTL');
            if (inst.append) {
                inst.append.remove();
            }
            if (appendText) {
                inst.append = $('<span class=\'' + this._appendClass + '\'>' + appendText + '</span>');
                input[isRTL ? 'before' : 'after'](inst.append);
            }
            input.unbind('focus', this._showDatepicker);
            if (inst.trigger) {
                inst.trigger.remove();
            }
            showOn = this._get(inst, 'showOn');
            if (showOn === 'focus' || showOn === 'both') {
                input.focus(this._showDatepicker);
            }
            if (showOn === 'button' || showOn === 'both') {
                buttonText = this._get(inst, 'buttonText');
                buttonImage = this._get(inst, 'buttonImage');
                inst.trigger = $(this._get(inst, 'buttonImageOnly') ? $('<img/>').addClass(this._triggerClass).attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                }) : $('<button type=\'button\'></button>').addClass(this._triggerClass).html(!buttonImage ? buttonText : $('<img/>').attr({
                    src: buttonImage,
                    alt: buttonText,
                    title: buttonText
                })));
                input[isRTL ? 'before' : 'after'](inst.trigger);
                inst.trigger.click(function () {
                    if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                        $.datepicker._hideDatepicker();
                    } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                        $.datepicker._hideDatepicker();
                        $.datepicker._showDatepicker(input[0]);
                    } else {
                        $.datepicker._showDatepicker(input[0]);
                    }
                    return false;
                });
            }
        },
        _autoSize: function (inst) {
            if (this._get(inst, 'autoSize') && !inst.inline) {
                var findMax, max, maxI, i, date = new Date(2009, 12 - 1, 20), dateFormat = this._get(inst, 'dateFormat');
                if (dateFormat.match(/[DM]/)) {
                    findMax = function (names) {
                        max = 0;
                        maxI = 0;
                        for (i = 0; i < names.length; i++) {
                            if (names[i].length > max) {
                                max = names[i].length;
                                maxI = i;
                            }
                        }
                        return maxI;
                    };
                    date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? 'monthNames' : 'monthNamesShort')));
                    date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? 'dayNames' : 'dayNamesShort')) + 20 - date.getDay());
                }
                inst.input.attr('size', this._formatDate(inst, date).length);
            }
        },
        _inlineDatepicker: function (target, inst) {
            var divSpan = $(target);
            if (divSpan.hasClass(this.markerClassName)) {
                return;
            }
            divSpan.addClass(this.markerClassName).append(inst.dpDiv);
            $.data(target, 'datepicker', inst);
            this._setDate(inst, this._getDefaultDate(inst), true);
            this._updateDatepicker(inst);
            this._updateAlternate(inst);
            if (inst.settings.disabled) {
                this._disableDatepicker(target);
            }
            inst.dpDiv.css('display', 'block');
        },
        _dialogDatepicker: function (input, date, onSelect, settings, pos) {
            var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
            if (!inst) {
                this.uuid += 1;
                id = 'dp' + this.uuid;
                this._dialogInput = $('<input type=\'text\' id=\'' + id + '\' style=\'position: absolute; top: -100px; width: 0px;\'/>');
                this._dialogInput.keydown(this._doKeyDown);
                $('body').append(this._dialogInput);
                inst = this._dialogInst = this._newInst(this._dialogInput, false);
                inst.settings = {};
                $.data(this._dialogInput[0], 'datepicker', inst);
            }
            datepicker_extendRemove(inst.settings, settings || {});
            date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
            this._dialogInput.val(date);
            this._pos = pos ? pos.length ? pos : [
                pos.pageX,
                pos.pageY
            ] : null;
            if (!this._pos) {
                browserWidth = document.documentElement.clientWidth;
                browserHeight = document.documentElement.clientHeight;
                scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                this._pos = [
                    browserWidth / 2 - 100 + scrollX,
                    browserHeight / 2 - 150 + scrollY
                ];
            }
            this._dialogInput.css('left', this._pos[0] + 20 + 'px').css('top', this._pos[1] + 'px');
            inst.settings.onSelect = onSelect;
            this._inDialog = true;
            this.dpDiv.addClass(this._dialogClass);
            this._showDatepicker(this._dialogInput[0]);
            if ($.blockUI) {
                $.blockUI(this.dpDiv);
            }
            $.data(this._dialogInput[0], 'datepicker', inst);
            return this;
        },
        _destroyDatepicker: function (target) {
            var nodeName, $target = $(target), inst = $.data(target, 'datepicker');
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            nodeName = target.nodeName.toLowerCase();
            $.removeData(target, 'datepicker');
            if (nodeName === 'input') {
                inst.append.remove();
                inst.trigger.remove();
                $target.removeClass(this.markerClassName).unbind('focus', this._showDatepicker).unbind('keydown', this._doKeyDown).unbind('keypress', this._doKeyPress).unbind('keyup', this._doKeyUp);
            } else if (nodeName === 'div' || nodeName === 'span') {
                $target.removeClass(this.markerClassName).empty();
            }
            if (datepicker_instActive === inst) {
                datepicker_instActive = null;
            }
        },
        _enableDatepicker: function (target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, 'datepicker');
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            nodeName = target.nodeName.toLowerCase();
            if (nodeName === 'input') {
                target.disabled = false;
                inst.trigger.filter('button').each(function () {
                    this.disabled = false;
                }).end().filter('img').css({
                    opacity: '1.0',
                    cursor: ''
                });
            } else if (nodeName === 'div' || nodeName === 'span') {
                inline = $target.children('.' + this._inlineClass);
                inline.children().removeClass('ui-state-disabled');
                inline.find('select.ui-datepicker-month, select.ui-datepicker-year').prop('disabled', false);
            }
            this._disabledInputs = $.map(this._disabledInputs, function (value) {
                return value === target ? null : value;
            });
        },
        _disableDatepicker: function (target) {
            var nodeName, inline, $target = $(target), inst = $.data(target, 'datepicker');
            if (!$target.hasClass(this.markerClassName)) {
                return;
            }
            nodeName = target.nodeName.toLowerCase();
            if (nodeName === 'input') {
                target.disabled = true;
                inst.trigger.filter('button').each(function () {
                    this.disabled = true;
                }).end().filter('img').css({
                    opacity: '0.5',
                    cursor: 'default'
                });
            } else if (nodeName === 'div' || nodeName === 'span') {
                inline = $target.children('.' + this._inlineClass);
                inline.children().addClass('ui-state-disabled');
                inline.find('select.ui-datepicker-month, select.ui-datepicker-year').prop('disabled', true);
            }
            this._disabledInputs = $.map(this._disabledInputs, function (value) {
                return value === target ? null : value;
            });
            this._disabledInputs[this._disabledInputs.length] = target;
        },
        _isDisabledDatepicker: function (target) {
            if (!target) {
                return false;
            }
            for (var i = 0; i < this._disabledInputs.length; i++) {
                if (this._disabledInputs[i] === target) {
                    return true;
                }
            }
            return false;
        },
        _getInst: function (target) {
            try {
                return $.data(target, 'datepicker');
            } catch (err) {
                throw 'Missing instance data for this datepicker';
            }
        },
        _optionDatepicker: function (target, name, value) {
            var settings, date, minDate, maxDate, inst = this._getInst(target);
            if (arguments.length === 2 && typeof name === 'string') {
                return name === 'defaults' ? $.extend({}, $.datepicker._defaults) : inst ? name === 'all' ? $.extend({}, inst.settings) : this._get(inst, name) : null;
            }
            settings = name || {};
            if (typeof name === 'string') {
                settings = {};
                settings[name] = value;
            }
            if (inst) {
                if (this._curInst === inst) {
                    this._hideDatepicker();
                }
                date = this._getDateDatepicker(target, true);
                minDate = this._getMinMaxDate(inst, 'min');
                maxDate = this._getMinMaxDate(inst, 'max');
                datepicker_extendRemove(inst.settings, settings);
                if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                    inst.settings.minDate = this._formatDate(inst, minDate);
                }
                if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                    inst.settings.maxDate = this._formatDate(inst, maxDate);
                }
                if ('disabled' in settings) {
                    if (settings.disabled) {
                        this._disableDatepicker(target);
                    } else {
                        this._enableDatepicker(target);
                    }
                }
                this._attachments($(target), inst);
                this._autoSize(inst);
                this._setDate(inst, date);
                this._updateAlternate(inst);
                this._updateDatepicker(inst);
            }
        },
        _changeDatepicker: function (target, name, value) {
            this._optionDatepicker(target, name, value);
        },
        _refreshDatepicker: function (target) {
            var inst = this._getInst(target);
            if (inst) {
                this._updateDatepicker(inst);
            }
        },
        _setDateDatepicker: function (target, date) {
            var inst = this._getInst(target);
            if (inst) {
                this._setDate(inst, date);
                this._updateDatepicker(inst);
                this._updateAlternate(inst);
            }
        },
        _getDateDatepicker: function (target, noDefault) {
            var inst = this._getInst(target);
            if (inst && !inst.inline) {
                this._setDateFromField(inst, noDefault);
            }
            return inst ? this._getDate(inst) : null;
        },
        _doKeyDown: function (event) {
            var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target), handled = true, isRTL = inst.dpDiv.is('.ui-datepicker-rtl');
            inst._keyEvent = true;
            if ($.datepicker._datepickerShowing) {
                switch (event.keyCode) {
                case 9:
                    $.datepicker._hideDatepicker();
                    handled = false;
                    break;
                case 13:
                    sel = $('td.' + $.datepicker._dayOverClass + ':not(.' + $.datepicker._currentClass + ')', inst.dpDiv);
                    if (sel[0]) {
                        $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                    }
                    onSelect = $.datepicker._get(inst, 'onSelect');
                    if (onSelect) {
                        dateStr = $.datepicker._formatDate(inst);
                        onSelect.apply(inst.input ? inst.input[0] : null, [
                            dateStr,
                            inst
                        ]);
                    } else {
                        $.datepicker._hideDatepicker();
                    }
                    return false;
                case 27:
                    $.datepicker._hideDatepicker();
                    break;
                case 33:
                    $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, 'stepBigMonths') : -$.datepicker._get(inst, 'stepMonths'), 'M');
                    break;
                case 34:
                    $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, 'stepBigMonths') : +$.datepicker._get(inst, 'stepMonths'), 'M');
                    break;
                case 35:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._clearDate(event.target);
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 36:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._gotoToday(event.target);
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 37:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, 'D');
                    }
                    handled = event.ctrlKey || event.metaKey;
                    if (event.originalEvent.altKey) {
                        $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, 'stepBigMonths') : -$.datepicker._get(inst, 'stepMonths'), 'M');
                    }
                    break;
                case 38:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, -7, 'D');
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                case 39:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, 'D');
                    }
                    handled = event.ctrlKey || event.metaKey;
                    if (event.originalEvent.altKey) {
                        $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, 'stepBigMonths') : +$.datepicker._get(inst, 'stepMonths'), 'M');
                    }
                    break;
                case 40:
                    if (event.ctrlKey || event.metaKey) {
                        $.datepicker._adjustDate(event.target, +7, 'D');
                    }
                    handled = event.ctrlKey || event.metaKey;
                    break;
                default:
                    handled = false;
                }
            } else if (event.keyCode === 36 && event.ctrlKey) {
                $.datepicker._showDatepicker(this);
            } else {
                handled = false;
            }
            if (handled) {
                event.preventDefault();
                event.stopPropagation();
            }
        },
        _doKeyPress: function (event) {
            var chars, chr, inst = $.datepicker._getInst(event.target);
            if ($.datepicker._get(inst, 'constrainInput')) {
                chars = $.datepicker._possibleChars($.datepicker._get(inst, 'dateFormat'));
                chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                return event.ctrlKey || event.metaKey || (chr < ' ' || !chars || chars.indexOf(chr) > -1);
            }
        },
        _doKeyUp: function (event) {
            var date, inst = $.datepicker._getInst(event.target);
            if (inst.input.val() !== inst.lastVal) {
                try {
                    date = $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));
                    if (date) {
                        $.datepicker._setDateFromField(inst);
                        $.datepicker._updateAlternate(inst);
                        $.datepicker._updateDatepicker(inst);
                    }
                } catch (err) {
                }
            }
            return true;
        },
        _showDatepicker: function (input) {
            input = input.target || input;
            if (input.nodeName.toLowerCase() !== 'input') {
                input = $('input', input.parentNode)[0];
            }
            if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {
                return;
            }
            var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;
            inst = $.datepicker._getInst(input);
            if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                $.datepicker._curInst.dpDiv.stop(true, true);
                if (inst && $.datepicker._datepickerShowing) {
                    $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
                }
            }
            beforeShow = $.datepicker._get(inst, 'beforeShow');
            beforeShowSettings = beforeShow ? beforeShow.apply(input, [
                input,
                inst
            ]) : {};
            if (beforeShowSettings === false) {
                return;
            }
            datepicker_extendRemove(inst.settings, beforeShowSettings);
            inst.lastVal = null;
            $.datepicker._lastInput = input;
            $.datepicker._setDateFromField(inst);
            if ($.datepicker._inDialog) {
                input.value = '';
            }
            if (!$.datepicker._pos) {
                $.datepicker._pos = $.datepicker._findPos(input);
                $.datepicker._pos[1] += input.offsetHeight;
            }
            isFixed = false;
            $(input).parents().each(function () {
                isFixed |= $(this).css('position') === 'fixed';
                return !isFixed;
            });
            offset = {
                left: $.datepicker._pos[0],
                top: $.datepicker._pos[1]
            };
            $.datepicker._pos = null;
            inst.dpDiv.empty();
            inst.dpDiv.css({
                position: 'absolute',
                display: 'block',
                top: '-1000px'
            });
            $.datepicker._updateDatepicker(inst);
            offset = $.datepicker._checkOffset(inst, offset, isFixed);
            inst.dpDiv.css({
                position: $.datepicker._inDialog && $.blockUI ? 'static' : isFixed ? 'fixed' : 'absolute',
                display: 'none',
                left: offset.left + 'px',
                top: offset.top + 'px'
            });
            if (!inst.inline) {
                showAnim = $.datepicker._get(inst, 'showAnim');
                duration = $.datepicker._get(inst, 'duration');
                inst.dpDiv.css('z-index', datepicker_getZindex($(input)) + 1);
                $.datepicker._datepickerShowing = true;
                if ($.effects && $.effects.effect[showAnim]) {
                    inst.dpDiv.show(showAnim, $.datepicker._get(inst, 'showOptions'), duration);
                } else {
                    inst.dpDiv[showAnim || 'show'](showAnim ? duration : null);
                }
                if ($.datepicker._shouldFocusInput(inst)) {
                    inst.input.focus();
                }
                $.datepicker._curInst = inst;
            }
        },
        _updateDatepicker: function (inst) {
            this.maxRows = 4;
            datepicker_instActive = inst;
            inst.dpDiv.empty().append(this._generateHTML(inst));
            this._attachHandlers(inst);
            var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17, activeCell = inst.dpDiv.find('.' + this._dayOverClass + ' a');
            if (activeCell.length > 0) {
                datepicker_handleMouseover.apply(activeCell.get(0));
            }
            inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
            if (cols > 1) {
                inst.dpDiv.addClass('ui-datepicker-multi-' + cols).css('width', width * cols + 'em');
            }
            inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? 'add' : 'remove') + 'Class']('ui-datepicker-multi');
            inst.dpDiv[(this._get(inst, 'isRTL') ? 'add' : 'remove') + 'Class']('ui-datepicker-rtl');
            if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && $.datepicker._shouldFocusInput(inst)) {
                inst.input.focus();
            }
            if (inst.yearshtml) {
                origyearshtml = inst.yearshtml;
                setTimeout(function () {
                    if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                        inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
                    }
                    origyearshtml = inst.yearshtml = null;
                }, 0);
            }
        },
        _shouldFocusInput: function (inst) {
            return inst.input && inst.input.is(':visible') && !inst.input.is(':disabled') && !inst.input.is(':focus');
        },
        _checkOffset: function (inst, offset, isFixed) {
            var dpWidth = inst.dpDiv.outerWidth(), dpHeight = inst.dpDiv.outerHeight(), inputWidth = inst.input ? inst.input.outerWidth() : 0, inputHeight = inst.input ? inst.input.outerHeight() : 0, viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()), viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
            offset.left -= this._get(inst, 'isRTL') ? dpWidth - inputWidth : 0;
            offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;
            offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;
            offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
            offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);
            return offset;
        },
        _findPos: function (obj) {
            var position, inst = this._getInst(obj), isRTL = this._get(inst, 'isRTL');
            while (obj && (obj.type === 'hidden' || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
                obj = obj[isRTL ? 'previousSibling' : 'nextSibling'];
            }
            position = $(obj).offset();
            return [
                position.left,
                position.top
            ];
        },
        _hideDatepicker: function (input) {
            var showAnim, duration, postProcess, onClose, inst = this._curInst;
            if (!inst || input && inst !== $.data(input, 'datepicker')) {
                return;
            }
            if (this._datepickerShowing) {
                showAnim = this._get(inst, 'showAnim');
                duration = this._get(inst, 'duration');
                postProcess = function () {
                    $.datepicker._tidyDialog(inst);
                };
                if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
                    inst.dpDiv.hide(showAnim, $.datepicker._get(inst, 'showOptions'), duration, postProcess);
                } else {
                    inst.dpDiv[showAnim === 'slideDown' ? 'slideUp' : showAnim === 'fadeIn' ? 'fadeOut' : 'hide'](showAnim ? duration : null, postProcess);
                }
                if (!showAnim) {
                    postProcess();
                }
                this._datepickerShowing = false;
                onClose = this._get(inst, 'onClose');
                if (onClose) {
                    onClose.apply(inst.input ? inst.input[0] : null, [
                        inst.input ? inst.input.val() : '',
                        inst
                    ]);
                }
                this._lastInput = null;
                if (this._inDialog) {
                    this._dialogInput.css({
                        position: 'absolute',
                        left: '0',
                        top: '-100px'
                    });
                    if ($.blockUI) {
                        $.unblockUI();
                        $('body').append(this.dpDiv);
                    }
                }
                this._inDialog = false;
            }
        },
        _tidyDialog: function (inst) {
            inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
        },
        _checkExternalClick: function (event) {
            if (!$.datepicker._curInst) {
                return;
            }
            var $target = $(event.target), inst = $.datepicker._getInst($target[0]);
            if ($target[0].id !== $.datepicker._mainDivId && $target.parents('#' + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest('.' + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {
                $.datepicker._hideDatepicker();
            }
        },
        _adjustDate: function (id, offset, period) {
            var target = $(id), inst = this._getInst(target[0]);
            if (this._isDisabledDatepicker(target[0])) {
                return;
            }
            this._adjustInstDate(inst, offset + (period === 'M' ? this._get(inst, 'showCurrentAtPos') : 0), period);
            this._updateDatepicker(inst);
        },
        _gotoToday: function (id) {
            var date, target = $(id), inst = this._getInst(target[0]);
            if (this._get(inst, 'gotoCurrent') && inst.currentDay) {
                inst.selectedDay = inst.currentDay;
                inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                inst.drawYear = inst.selectedYear = inst.currentYear;
            } else {
                date = new Date();
                inst.selectedDay = date.getDate();
                inst.drawMonth = inst.selectedMonth = date.getMonth();
                inst.drawYear = inst.selectedYear = date.getFullYear();
            }
            this._notifyChange(inst);
            this._adjustDate(target);
        },
        _selectMonthYear: function (id, select, period) {
            var target = $(id), inst = this._getInst(target[0]);
            inst['selected' + (period === 'M' ? 'Month' : 'Year')] = inst['draw' + (period === 'M' ? 'Month' : 'Year')] = parseInt(select.options[select.selectedIndex].value, 10);
            this._notifyChange(inst);
            this._adjustDate(target);
        },
        _selectDay: function (id, month, year, td) {
            var inst, target = $(id);
            if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                return;
            }
            inst = this._getInst(target[0]);
            inst.selectedDay = inst.currentDay = $('a', td).html();
            inst.selectedMonth = inst.currentMonth = month;
            inst.selectedYear = inst.currentYear = year;
            this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
        },
        _clearDate: function (id) {
            var target = $(id);
            this._selectDate(target, '');
        },
        _selectDate: function (id, dateStr) {
            var onSelect, target = $(id), inst = this._getInst(target[0]);
            dateStr = dateStr != null ? dateStr : this._formatDate(inst);
            if (inst.input) {
                inst.input.val(dateStr);
            }
            this._updateAlternate(inst);
            onSelect = this._get(inst, 'onSelect');
            if (onSelect) {
                onSelect.apply(inst.input ? inst.input[0] : null, [
                    dateStr,
                    inst
                ]);
            } else if (inst.input) {
                inst.input.trigger('change');
            }
            if (inst.inline) {
                this._updateDatepicker(inst);
            } else {
                this._hideDatepicker();
                this._lastInput = inst.input[0];
                if (typeof inst.input[0] !== 'object') {
                    inst.input.focus();
                }
                this._lastInput = null;
            }
        },
        _updateAlternate: function (inst) {
            var altFormat, date, dateStr, altField = this._get(inst, 'altField');
            if (altField) {
                altFormat = this._get(inst, 'altFormat') || this._get(inst, 'dateFormat');
                date = this._getDate(inst);
                dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                $(altField).each(function () {
                    $(this).val(dateStr);
                });
            }
        },
        noWeekends: function (date) {
            var day = date.getDay();
            return [
                day > 0 && day < 6,
                ''
            ];
        },
        iso8601Week: function (date) {
            var time, checkDate = new Date(date.getTime());
            checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
            time = checkDate.getTime();
            checkDate.setMonth(0);
            checkDate.setDate(1);
            return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
        },
        parseDate: function (format, value, settings) {
            if (format == null || value == null) {
                throw 'Invalid arguments';
            }
            value = typeof value === 'object' ? value.toString() : value + '';
            if (value === '') {
                return null;
            }
            var iFormat, dim, extra, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = typeof shortYearCutoffTemp !== 'string' ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = false, date, lookAhead = function (match) {
                    var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                }, getNumber = function (match) {
                    var isDoubled = lookAhead(match), size = match === '@' ? 14 : match === '!' ? 20 : match === 'y' && isDoubled ? 4 : match === 'o' ? 3 : 2, minSize = match === 'y' ? size : 1, digits = new RegExp('^\\d{' + minSize + ',' + size + '}'), num = value.substring(iValue).match(digits);
                    if (!num) {
                        throw 'Missing number at position ' + iValue;
                    }
                    iValue += num[0].length;
                    return parseInt(num[0], 10);
                }, getName = function (match, shortNames, longNames) {
                    var index = -1, names = $.map(lookAhead(match) ? longNames : shortNames, function (v, k) {
                            return [[
                                    k,
                                    v
                                ]];
                        }).sort(function (a, b) {
                            return -(a[1].length - b[1].length);
                        });
                    $.each(names, function (i, pair) {
                        var name = pair[1];
                        if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                            index = pair[0];
                            iValue += name.length;
                            return false;
                        }
                    });
                    if (index !== -1) {
                        return index + 1;
                    } else {
                        throw 'Unknown name at position ' + iValue;
                    }
                }, checkLiteral = function () {
                    if (value.charAt(iValue) !== format.charAt(iFormat)) {
                        throw 'Unexpected literal at position ' + iValue;
                    }
                    iValue++;
                };
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === '\'' && !lookAhead('\'')) {
                        literal = false;
                    } else {
                        checkLiteral();
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                    case 'd':
                        day = getNumber('d');
                        break;
                    case 'D':
                        getName('D', dayNamesShort, dayNames);
                        break;
                    case 'o':
                        doy = getNumber('o');
                        break;
                    case 'm':
                        month = getNumber('m');
                        break;
                    case 'M':
                        month = getName('M', monthNamesShort, monthNames);
                        break;
                    case 'y':
                        year = getNumber('y');
                        break;
                    case '@':
                        date = new Date(getNumber('@'));
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case '!':
                        date = new Date((getNumber('!') - this._ticksTo1970) / 10000);
                        year = date.getFullYear();
                        month = date.getMonth() + 1;
                        day = date.getDate();
                        break;
                    case '\'':
                        if (lookAhead('\'')) {
                            checkLiteral();
                        } else {
                            literal = true;
                        }
                        break;
                    default:
                        checkLiteral();
                    }
                }
            }
            if (iValue < value.length) {
                extra = value.substr(iValue);
                if (!/^\s+/.test(extra)) {
                    throw 'Extra/unparsed characters found in date: ' + extra;
                }
            }
            if (year === -1) {
                year = new Date().getFullYear();
            } else if (year < 100) {
                year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);
            }
            if (doy > -1) {
                month = 1;
                day = doy;
                do {
                    dim = this._getDaysInMonth(year, month - 1);
                    if (day <= dim) {
                        break;
                    }
                    month++;
                    day -= dim;
                } while (true);
            }
            date = this._daylightSavingAdjust(new Date(year, month - 1, day));
            if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                throw 'Invalid date';
            }
            return date;
        },
        ATOM: 'yy-mm-dd',
        COOKIE: 'D, dd M yy',
        ISO_8601: 'yy-mm-dd',
        RFC_822: 'D, d M y',
        RFC_850: 'DD, dd-M-y',
        RFC_1036: 'D, d M y',
        RFC_1123: 'D, d M yy',
        RFC_2822: 'D, d M yy',
        RSS: 'D, d M y',
        TICKS: '!',
        TIMESTAMP: '@',
        W3C: 'yy-mm-dd',
        _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000,
        formatDate: function (format, date, settings) {
            if (!date) {
                return '';
            }
            var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, lookAhead = function (match) {
                    var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                }, formatNumber = function (match, value, len) {
                    var num = '' + value;
                    if (lookAhead(match)) {
                        while (num.length < len) {
                            num = '0' + num;
                        }
                    }
                    return num;
                }, formatName = function (match, value, shortNames, longNames) {
                    return lookAhead(match) ? longNames[value] : shortNames[value];
                }, output = '', literal = false;
            if (date) {
                for (iFormat = 0; iFormat < format.length; iFormat++) {
                    if (literal) {
                        if (format.charAt(iFormat) === '\'' && !lookAhead('\'')) {
                            literal = false;
                        } else {
                            output += format.charAt(iFormat);
                        }
                    } else {
                        switch (format.charAt(iFormat)) {
                        case 'd':
                            output += formatNumber('d', date.getDate(), 2);
                            break;
                        case 'D':
                            output += formatName('D', date.getDay(), dayNamesShort, dayNames);
                            break;
                        case 'o':
                            output += formatNumber('o', Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 86400000), 3);
                            break;
                        case 'm':
                            output += formatNumber('m', date.getMonth() + 1, 2);
                            break;
                        case 'M':
                            output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
                            break;
                        case 'y':
                            output += lookAhead('y') ? date.getFullYear() : (date.getYear() % 100 < 10 ? '0' : '') + date.getYear() % 100;
                            break;
                        case '@':
                            output += date.getTime();
                            break;
                        case '!':
                            output += date.getTime() * 10000 + this._ticksTo1970;
                            break;
                        case '\'':
                            if (lookAhead('\'')) {
                                output += '\'';
                            } else {
                                literal = true;
                            }
                            break;
                        default:
                            output += format.charAt(iFormat);
                        }
                    }
                }
            }
            return output;
        },
        _possibleChars: function (format) {
            var iFormat, chars = '', literal = false, lookAhead = function (match) {
                    var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                    if (matches) {
                        iFormat++;
                    }
                    return matches;
                };
            for (iFormat = 0; iFormat < format.length; iFormat++) {
                if (literal) {
                    if (format.charAt(iFormat) === '\'' && !lookAhead('\'')) {
                        literal = false;
                    } else {
                        chars += format.charAt(iFormat);
                    }
                } else {
                    switch (format.charAt(iFormat)) {
                    case 'd':
                    case 'm':
                    case 'y':
                    case '@':
                        chars += '0123456789';
                        break;
                    case 'D':
                    case 'M':
                        return null;
                    case '\'':
                        if (lookAhead('\'')) {
                            chars += '\'';
                        } else {
                            literal = true;
                        }
                        break;
                    default:
                        chars += format.charAt(iFormat);
                    }
                }
            }
            return chars;
        },
        _get: function (inst, name) {
            return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
        },
        _setDateFromField: function (inst, noDefault) {
            if (inst.input.val() === inst.lastVal) {
                return;
            }
            var dateFormat = this._get(inst, 'dateFormat'), dates = inst.lastVal = inst.input ? inst.input.val() : null, defaultDate = this._getDefaultDate(inst), date = defaultDate, settings = this._getFormatConfig(inst);
            try {
                date = this.parseDate(dateFormat, dates, settings) || defaultDate;
            } catch (event) {
                dates = noDefault ? '' : dates;
            }
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            inst.currentDay = dates ? date.getDate() : 0;
            inst.currentMonth = dates ? date.getMonth() : 0;
            inst.currentYear = dates ? date.getFullYear() : 0;
            this._adjustInstDate(inst);
        },
        _getDefaultDate: function (inst) {
            return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, 'defaultDate'), new Date()));
        },
        _determineDate: function (inst, date, defaultDate) {
            var offsetNumeric = function (offset) {
                    var date = new Date();
                    date.setDate(date.getDate() + offset);
                    return date;
                }, offsetString = function (offset) {
                    try {
                        return $.datepicker.parseDate($.datepicker._get(inst, 'dateFormat'), offset, $.datepicker._getFormatConfig(inst));
                    } catch (e) {
                    }
                    var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(), year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, matches = pattern.exec(offset);
                    while (matches) {
                        switch (matches[2] || 'd') {
                        case 'd':
                        case 'D':
                            day += parseInt(matches[1], 10);
                            break;
                        case 'w':
                        case 'W':
                            day += parseInt(matches[1], 10) * 7;
                            break;
                        case 'm':
                        case 'M':
                            month += parseInt(matches[1], 10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                        case 'y':
                        case 'Y':
                            year += parseInt(matches[1], 10);
                            day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                            break;
                        }
                        matches = pattern.exec(offset);
                    }
                    return new Date(year, month, day);
                }, newDate = date == null || date === '' ? defaultDate : typeof date === 'string' ? offsetString(date) : typeof date === 'number' ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());
            newDate = newDate && newDate.toString() === 'Invalid Date' ? defaultDate : newDate;
            if (newDate) {
                newDate.setHours(0);
                newDate.setMinutes(0);
                newDate.setSeconds(0);
                newDate.setMilliseconds(0);
            }
            return this._daylightSavingAdjust(newDate);
        },
        _daylightSavingAdjust: function (date) {
            if (!date) {
                return null;
            }
            date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
            return date;
        },
        _setDate: function (inst, date, noChange) {
            var clear = !date, origMonth = inst.selectedMonth, origYear = inst.selectedYear, newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
            inst.selectedDay = inst.currentDay = newDate.getDate();
            inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
            inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
            if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                this._notifyChange(inst);
            }
            this._adjustInstDate(inst);
            if (inst.input) {
                inst.input.val(clear ? '' : this._formatDate(inst));
            }
        },
        _getDate: function (inst) {
            var startDate = !inst.currentYear || inst.input && inst.input.val() === '' ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
            return startDate;
        },
        _attachHandlers: function (inst) {
            var stepMonths = this._get(inst, 'stepMonths'), id = '#' + inst.id.replace(/\\\\/g, '\\');
            inst.dpDiv.find('[data-handler]').map(function () {
                var handler = {
                    prev: function () {
                        $.datepicker._adjustDate(id, -stepMonths, 'M');
                    },
                    next: function () {
                        $.datepicker._adjustDate(id, +stepMonths, 'M');
                    },
                    hide: function () {
                        $.datepicker._hideDatepicker();
                    },
                    today: function () {
                        $.datepicker._gotoToday(id);
                    },
                    selectDay: function () {
                        $.datepicker._selectDay(id, +this.getAttribute('data-month'), +this.getAttribute('data-year'), this);
                        return false;
                    },
                    selectMonth: function () {
                        $.datepicker._selectMonthYear(id, this, 'M');
                        return false;
                    },
                    selectYear: function () {
                        $.datepicker._selectMonthYear(id, this, 'Y');
                        return false;
                    }
                };
                $(this).bind(this.getAttribute('data-event'), handler[this.getAttribute('data-handler')]);
            });
        },
        _generateHTML: function (inst) {
            var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date(), today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), isRTL = this._get(inst, 'isRTL'), showButtonPanel = this._get(inst, 'showButtonPanel'), hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext'), navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat'), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, 'showCurrentAtPos'), stepMonths = this._get(inst, 'stepMonths'), isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1, currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)), minDate = this._getMinMaxDate(inst, 'min'), maxDate = this._getMinMaxDate(inst, 'max'), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear;
            if (drawMonth < 0) {
                drawMonth += 12;
                drawYear--;
            }
            if (maxDate) {
                maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
                maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
                while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                    drawMonth--;
                    if (drawMonth < 0) {
                        drawMonth = 11;
                        drawYear--;
                    }
                }
            }
            inst.drawMonth = drawMonth;
            inst.drawYear = drawYear;
            prevText = this._get(inst, 'prevText');
            prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));
            prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? '<a class=\'ui-datepicker-prev ui-corner-all\' data-handler=\'prev\' data-event=\'click\'' + ' title=\'' + prevText + '\'><span class=\'ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '\'>' + prevText + '</span></a>' : hideIfNoPrevNext ? '' : '<a class=\'ui-datepicker-prev ui-corner-all ui-state-disabled\' title=\'' + prevText + '\'><span class=\'ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '\'>' + prevText + '</span></a>';
            nextText = this._get(inst, 'nextText');
            nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));
            next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? '<a class=\'ui-datepicker-next ui-corner-all\' data-handler=\'next\' data-event=\'click\'' + ' title=\'' + nextText + '\'><span class=\'ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '\'>' + nextText + '</span></a>' : hideIfNoPrevNext ? '' : '<a class=\'ui-datepicker-next ui-corner-all ui-state-disabled\' title=\'' + nextText + '\'><span class=\'ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '\'>' + nextText + '</span></a>';
            currentText = this._get(inst, 'currentText');
            gotoDate = this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today;
            currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));
            controls = !inst.inline ? '<button type=\'button\' class=\'ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all\' data-handler=\'hide\' data-event=\'click\'>' + this._get(inst, 'closeText') + '</button>' : '';
            buttonPanel = showButtonPanel ? '<div class=\'ui-datepicker-buttonpane ui-widget-content\'>' + (isRTL ? controls : '') + (this._isInRange(inst, gotoDate) ? '<button type=\'button\' class=\'ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all\' data-handler=\'today\' data-event=\'click\'' + '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';
            firstDay = parseInt(this._get(inst, 'firstDay'), 10);
            firstDay = isNaN(firstDay) ? 0 : firstDay;
            showWeek = this._get(inst, 'showWeek');
            dayNames = this._get(inst, 'dayNames');
            dayNamesMin = this._get(inst, 'dayNamesMin');
            monthNames = this._get(inst, 'monthNames');
            monthNamesShort = this._get(inst, 'monthNamesShort');
            beforeShowDay = this._get(inst, 'beforeShowDay');
            showOtherMonths = this._get(inst, 'showOtherMonths');
            selectOtherMonths = this._get(inst, 'selectOtherMonths');
            defaultDate = this._getDefaultDate(inst);
            html = '';
            dow;
            for (row = 0; row < numMonths[0]; row++) {
                group = '';
                this.maxRows = 4;
                for (col = 0; col < numMonths[1]; col++) {
                    selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                    cornerClass = ' ui-corner-all';
                    calender = '';
                    if (isMultiMonth) {
                        calender += '<div class=\'ui-datepicker-group';
                        if (numMonths[1] > 1) {
                            switch (col) {
                            case 0:
                                calender += ' ui-datepicker-group-first';
                                cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left');
                                break;
                            case numMonths[1] - 1:
                                calender += ' ui-datepicker-group-last';
                                cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right');
                                break;
                            default:
                                calender += ' ui-datepicker-group-middle';
                                cornerClass = '';
                                break;
                            }
                        }
                        calender += '\'>';
                    }
                    calender += '<div class=\'ui-datepicker-header ui-widget-header ui-helper-clearfix' + cornerClass + '\'>' + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : '') + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : '') + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + '</div><table class=\'ui-datepicker-calendar\'><thead>' + '<tr>';
                    thead = showWeek ? '<th class=\'ui-datepicker-week-col\'>' + this._get(inst, 'weekHeader') + '</th>' : '';
                    for (dow = 0; dow < 7; dow++) {
                        day = (dow + firstDay) % 7;
                        thead += '<th scope=\'col\'' + ((dow + firstDay + 6) % 7 >= 5 ? ' class=\'ui-datepicker-week-end\'' : '') + '>' + '<span title=\'' + dayNames[day] + '\'>' + dayNamesMin[day] + '</span></th>';
                    }
                    calender += thead + '</tr></thead><tbody>';
                    daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                    if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                        inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                    }
                    leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                    curRows = Math.ceil((leadDays + daysInMonth) / 7);
                    numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;
                    this.maxRows = numRows;
                    printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                    for (dRow = 0; dRow < numRows; dRow++) {
                        calender += '<tr>';
                        tbody = !showWeek ? '' : '<td class=\'ui-datepicker-week-col\'>' + this._get(inst, 'calculateWeek')(printDate) + '</td>';
                        for (dow = 0; dow < 7; dow++) {
                            daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [
                                true,
                                ''
                            ];
                            otherMonth = printDate.getMonth() !== drawMonth;
                            unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;
                            tbody += '<td class=\'' + ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + (otherMonth ? ' ui-datepicker-other-month' : '') + (printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? ' ' + this._dayOverClass : '') + (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') + (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + (printDate.getTime() === currentDate.getTime() ? ' ' + this._currentClass : '') + (printDate.getTime() === today.getTime() ? ' ui-datepicker-today' : '')) + '\'' + ((!otherMonth || showOtherMonths) && daySettings[2] ? ' title=\'' + daySettings[2].replace(/'/g, '&#39;') + '\'' : '') + (unselectable ? '' : ' data-handler=\'selectDay\' data-event=\'click\' data-month=\'' + printDate.getMonth() + '\' data-year=\'' + printDate.getFullYear() + '\'') + '>' + (otherMonth && !showOtherMonths ? '&#xa0;' : unselectable ? '<span class=\'ui-state-default\'>' + printDate.getDate() + '</span>' : '<a class=\'ui-state-default' + (printDate.getTime() === today.getTime() ? ' ui-state-highlight' : '') + (printDate.getTime() === currentDate.getTime() ? ' ui-state-active' : '') + (otherMonth ? ' ui-priority-secondary' : '') + '\' href=\'#\'>' + printDate.getDate() + '</a>') + '</td>';
                            printDate.setDate(printDate.getDate() + 1);
                            printDate = this._daylightSavingAdjust(printDate);
                        }
                        calender += tbody + '</tr>';
                    }
                    drawMonth++;
                    if (drawMonth > 11) {
                        drawMonth = 0;
                        drawYear++;
                    }
                    calender += '</tbody></table>' + (isMultiMonth ? '</div>' + (numMonths[0] > 0 && col === numMonths[1] - 1 ? '<div class=\'ui-datepicker-row-break\'></div>' : '') : '');
                    group += calender;
                }
                html += group;
            }
            html += buttonPanel;
            inst._keyEvent = false;
            return html;
        },
        _generateMonthYearHeader: function (inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
            var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, 'changeMonth'), changeYear = this._get(inst, 'changeYear'), showMonthAfterYear = this._get(inst, 'showMonthAfterYear'), html = '<div class=\'ui-datepicker-title\'>', monthHtml = '';
            if (secondary || !changeMonth) {
                monthHtml += '<span class=\'ui-datepicker-month\'>' + monthNames[drawMonth] + '</span>';
            } else {
                inMinYear = minDate && minDate.getFullYear() === drawYear;
                inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
                monthHtml += '<select class=\'ui-datepicker-month\' data-handler=\'selectMonth\' data-event=\'change\'>';
                for (month = 0; month < 12; month++) {
                    if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                        monthHtml += '<option value=\'' + month + '\'' + (month === drawMonth ? ' selected=\'selected\'' : '') + '>' + monthNamesShort[month] + '</option>';
                    }
                }
                monthHtml += '</select>';
            }
            if (!showMonthAfterYear) {
                html += monthHtml + (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '');
            }
            if (!inst.yearshtml) {
                inst.yearshtml = '';
                if (secondary || !changeYear) {
                    html += '<span class=\'ui-datepicker-year\'>' + drawYear + '</span>';
                } else {
                    years = this._get(inst, 'yearRange').split(':');
                    thisYear = new Date().getFullYear();
                    determineYear = function (value) {
                        var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
                        return isNaN(year) ? thisYear : year;
                    };
                    year = determineYear(years[0]);
                    endYear = Math.max(year, determineYear(years[1] || ''));
                    year = minDate ? Math.max(year, minDate.getFullYear()) : year;
                    endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
                    inst.yearshtml += '<select class=\'ui-datepicker-year\' data-handler=\'selectYear\' data-event=\'change\'>';
                    for (; year <= endYear; year++) {
                        inst.yearshtml += '<option value=\'' + year + '\'' + (year === drawYear ? ' selected=\'selected\'' : '') + '>' + year + '</option>';
                    }
                    inst.yearshtml += '</select>';
                    html += inst.yearshtml;
                    inst.yearshtml = null;
                }
            }
            html += this._get(inst, 'yearSuffix');
            if (showMonthAfterYear) {
                html += (secondary || !(changeMonth && changeYear) ? '&#xa0;' : '') + monthHtml;
            }
            html += '</div>';
            return html;
        },
        _adjustInstDate: function (inst, offset, period) {
            var year = inst.drawYear + (period === 'Y' ? offset : 0), month = inst.drawMonth + (period === 'M' ? offset : 0), day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === 'D' ? offset : 0), date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
            inst.selectedDay = date.getDate();
            inst.drawMonth = inst.selectedMonth = date.getMonth();
            inst.drawYear = inst.selectedYear = date.getFullYear();
            if (period === 'M' || period === 'Y') {
                this._notifyChange(inst);
            }
        },
        _restrictMinMax: function (inst, date) {
            var minDate = this._getMinMaxDate(inst, 'min'), maxDate = this._getMinMaxDate(inst, 'max'), newDate = minDate && date < minDate ? minDate : date;
            return maxDate && newDate > maxDate ? maxDate : newDate;
        },
        _notifyChange: function (inst) {
            var onChange = this._get(inst, 'onChangeMonthYear');
            if (onChange) {
                onChange.apply(inst.input ? inst.input[0] : null, [
                    inst.selectedYear,
                    inst.selectedMonth + 1,
                    inst
                ]);
            }
        },
        _getNumberOfMonths: function (inst) {
            var numMonths = this._get(inst, 'numberOfMonths');
            return numMonths == null ? [
                1,
                1
            ] : typeof numMonths === 'number' ? [
                1,
                numMonths
            ] : numMonths;
        },
        _getMinMaxDate: function (inst, minMax) {
            return this._determineDate(inst, this._get(inst, minMax + 'Date'), null);
        },
        _getDaysInMonth: function (year, month) {
            return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
        },
        _getFirstDayOfMonth: function (year, month) {
            return new Date(year, month, 1).getDay();
        },
        _canAdjustMonth: function (inst, offset, curYear, curMonth) {
            var numMonths = this._getNumberOfMonths(inst), date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
            if (offset < 0) {
                date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
            }
            return this._isInRange(inst, date);
        },
        _isInRange: function (inst, date) {
            var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, 'min'), maxDate = this._getMinMaxDate(inst, 'max'), minYear = null, maxYear = null, years = this._get(inst, 'yearRange');
            if (years) {
                yearSplit = years.split(':');
                currentYear = new Date().getFullYear();
                minYear = parseInt(yearSplit[0], 10);
                maxYear = parseInt(yearSplit[1], 10);
                if (yearSplit[0].match(/[+\-].*/)) {
                    minYear += currentYear;
                }
                if (yearSplit[1].match(/[+\-].*/)) {
                    maxYear += currentYear;
                }
            }
            return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
        },
        _getFormatConfig: function (inst) {
            var shortYearCutoff = this._get(inst, 'shortYearCutoff');
            shortYearCutoff = typeof shortYearCutoff !== 'string' ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);
            return {
                shortYearCutoff: shortYearCutoff,
                dayNamesShort: this._get(inst, 'dayNamesShort'),
                dayNames: this._get(inst, 'dayNames'),
                monthNamesShort: this._get(inst, 'monthNamesShort'),
                monthNames: this._get(inst, 'monthNames')
            };
        },
        _formatDate: function (inst, day, month, year) {
            if (!day) {
                inst.currentDay = inst.selectedDay;
                inst.currentMonth = inst.selectedMonth;
                inst.currentYear = inst.selectedYear;
            }
            var date = day ? typeof day === 'object' ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
            return this.formatDate(this._get(inst, 'dateFormat'), date, this._getFormatConfig(inst));
        }
    });
    function datepicker_bindHover(dpDiv) {
        var selector = 'button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
        return dpDiv.delegate(selector, 'mouseout', function () {
            $(this).removeClass('ui-state-hover');
            if (this.className.indexOf('ui-datepicker-prev') !== -1) {
                $(this).removeClass('ui-datepicker-prev-hover');
            }
            if (this.className.indexOf('ui-datepicker-next') !== -1) {
                $(this).removeClass('ui-datepicker-next-hover');
            }
        }).delegate(selector, 'mouseover', datepicker_handleMouseover);
    }
    function datepicker_handleMouseover() {
        if (!$.datepicker._isDisabledDatepicker(datepicker_instActive.inline ? datepicker_instActive.dpDiv.parent()[0] : datepicker_instActive.input[0])) {
            $(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
            $(this).addClass('ui-state-hover');
            if (this.className.indexOf('ui-datepicker-prev') !== -1) {
                $(this).addClass('ui-datepicker-prev-hover');
            }
            if (this.className.indexOf('ui-datepicker-next') !== -1) {
                $(this).addClass('ui-datepicker-next-hover');
            }
        }
    }
    function datepicker_extendRemove(target, props) {
        $.extend(target, props);
        for (var name in props) {
            if (props[name] == null) {
                target[name] = props[name];
            }
        }
        return target;
    }
    $.fn.datepicker = function (options) {
        if (!this.length) {
            return this;
        }
        if (!$.datepicker.initialized) {
            $(document).mousedown($.datepicker._checkExternalClick);
            $.datepicker.initialized = true;
        }
        if ($('#' + $.datepicker._mainDivId).length === 0) {
            $('body').append($.datepicker.dpDiv);
        }
        var otherArgs = Array.prototype.slice.call(arguments, 1);
        if (typeof options === 'string' && (options === 'isDisabled' || options === 'getDate' || options === 'widget')) {
            return $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this[0]].concat(otherArgs));
        }
        if (options === 'option' && arguments.length === 2 && typeof arguments[1] === 'string') {
            return $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this[0]].concat(otherArgs));
        }
        return this.each(function () {
            typeof options === 'string' ? $.datepicker['_' + options + 'Datepicker'].apply($.datepicker, [this].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
        });
    };
    $.datepicker = new Datepicker();
    $.datepicker.initialized = false;
    $.datepicker.uuid = new Date().getTime();
    $.datepicker.version = '1.11.4';
    var datepicker = $.datepicker;
    $.widget('ui.draggable', $.ui.mouse, {
        version: '1.11.4',
        widgetEventPrefix: 'drag',
        options: {
            addClasses: true,
            appendTo: 'parent',
            axis: false,
            connectToSortable: false,
            containment: false,
            cursor: 'auto',
            cursorAt: false,
            grid: false,
            handle: false,
            helper: 'original',
            iframeFix: false,
            opacity: false,
            refreshPositions: false,
            revert: false,
            revertDuration: 500,
            scope: 'default',
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            snap: false,
            snapMode: 'both',
            snapTolerance: 20,
            stack: false,
            zIndex: false,
            drag: null,
            start: null,
            stop: null
        },
        _create: function () {
            if (this.options.helper === 'original') {
                this._setPositionRelative();
            }
            if (this.options.addClasses) {
                this.element.addClass('ui-draggable');
            }
            if (this.options.disabled) {
                this.element.addClass('ui-draggable-disabled');
            }
            this._setHandleClassName();
            this._mouseInit();
        },
        _setOption: function (key, value) {
            this._super(key, value);
            if (key === 'handle') {
                this._removeHandleClassName();
                this._setHandleClassName();
            }
        },
        _destroy: function () {
            if ((this.helper || this.element).is('.ui-draggable-dragging')) {
                this.destroyOnClear = true;
                return;
            }
            this.element.removeClass('ui-draggable ui-draggable-dragging ui-draggable-disabled');
            this._removeHandleClassName();
            this._mouseDestroy();
        },
        _mouseCapture: function (event) {
            var o = this.options;
            this._blurActiveElement(event);
            if (this.helper || o.disabled || $(event.target).closest('.ui-resizable-handle').length > 0) {
                return false;
            }
            this.handle = this._getHandle(event);
            if (!this.handle) {
                return false;
            }
            this._blockFrames(o.iframeFix === true ? 'iframe' : o.iframeFix);
            return true;
        },
        _blockFrames: function (selector) {
            this.iframeBlocks = this.document.find(selector).map(function () {
                var iframe = $(this);
                return $('<div>').css('position', 'absolute').appendTo(iframe.parent()).outerWidth(iframe.outerWidth()).outerHeight(iframe.outerHeight()).offset(iframe.offset())[0];
            });
        },
        _unblockFrames: function () {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks;
            }
        },
        _blurActiveElement: function (event) {
            var document = this.document[0];
            if (!this.handleElement.is(event.target)) {
                return;
            }
            try {
                if (document.activeElement && document.activeElement.nodeName.toLowerCase() !== 'body') {
                    $(document.activeElement).blur();
                }
            } catch (error) {
            }
        },
        _mouseStart: function (event) {
            var o = this.options;
            this.helper = this._createHelper(event);
            this.helper.addClass('ui-draggable-dragging');
            this._cacheHelperProportions();
            if ($.ui.ddmanager) {
                $.ui.ddmanager.current = this;
            }
            this._cacheMargins();
            this.cssPosition = this.helper.css('position');
            this.scrollParent = this.helper.scrollParent(true);
            this.offsetParent = this.helper.offsetParent();
            this.hasFixedAncestor = this.helper.parents().filter(function () {
                return $(this).css('position') === 'fixed';
            }).length > 0;
            this.positionAbs = this.element.offset();
            this._refreshOffsets(event);
            this.originalPosition = this.position = this._generatePosition(event, false);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this._setContainment();
            if (this._trigger('start', event) === false) {
                this._clear();
                return false;
            }
            this._cacheHelperProportions();
            if ($.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(this, event);
            }
            this._normalizeRightBottom();
            this._mouseDrag(event, true);
            if ($.ui.ddmanager) {
                $.ui.ddmanager.dragStart(this, event);
            }
            return true;
        },
        _refreshOffsets: function (event) {
            this.offset = {
                top: this.positionAbs.top - this.margins.top,
                left: this.positionAbs.left - this.margins.left,
                scroll: false,
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            };
            this.offset.click = {
                left: event.pageX - this.offset.left,
                top: event.pageY - this.offset.top
            };
        },
        _mouseDrag: function (event, noPropagation) {
            if (this.hasFixedAncestor) {
                this.offset.parent = this._getParentOffset();
            }
            this.position = this._generatePosition(event, true);
            this.positionAbs = this._convertPositionTo('absolute');
            if (!noPropagation) {
                var ui = this._uiHash();
                if (this._trigger('drag', event, ui) === false) {
                    this._mouseUp({});
                    return false;
                }
                this.position = ui.position;
            }
            this.helper[0].style.left = this.position.left + 'px';
            this.helper[0].style.top = this.position.top + 'px';
            if ($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event);
            }
            return false;
        },
        _mouseStop: function (event) {
            var that = this, dropped = false;
            if ($.ui.ddmanager && !this.options.dropBehaviour) {
                dropped = $.ui.ddmanager.drop(this, event);
            }
            if (this.dropped) {
                dropped = this.dropped;
                this.dropped = false;
            }
            if (this.options.revert === 'invalid' && !dropped || this.options.revert === 'valid' && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {
                $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
                    if (that._trigger('stop', event) !== false) {
                        that._clear();
                    }
                });
            } else {
                if (this._trigger('stop', event) !== false) {
                    this._clear();
                }
            }
            return false;
        },
        _mouseUp: function (event) {
            this._unblockFrames();
            if ($.ui.ddmanager) {
                $.ui.ddmanager.dragStop(this, event);
            }
            if (this.handleElement.is(event.target)) {
                this.element.focus();
            }
            return $.ui.mouse.prototype._mouseUp.call(this, event);
        },
        cancel: function () {
            if (this.helper.is('.ui-draggable-dragging')) {
                this._mouseUp({});
            } else {
                this._clear();
            }
            return this;
        },
        _getHandle: function (event) {
            return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;
        },
        _setHandleClassName: function () {
            this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
            this.handleElement.addClass('ui-draggable-handle');
        },
        _removeHandleClassName: function () {
            this.handleElement.removeClass('ui-draggable-handle');
        },
        _createHelper: function (event) {
            var o = this.options, helperIsFunction = $.isFunction(o.helper), helper = helperIsFunction ? $(o.helper.apply(this.element[0], [event])) : o.helper === 'clone' ? this.element.clone().removeAttr('id') : this.element;
            if (!helper.parents('body').length) {
                helper.appendTo(o.appendTo === 'parent' ? this.element[0].parentNode : o.appendTo);
            }
            if (helperIsFunction && helper[0] === this.element[0]) {
                this._setPositionRelative();
            }
            if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css('position'))) {
                helper.css('position', 'absolute');
            }
            return helper;
        },
        _setPositionRelative: function () {
            if (!/^(?:r|a|f)/.test(this.element.css('position'))) {
                this.element[0].style.position = 'relative';
            }
        },
        _adjustOffsetFromHelper: function (obj) {
            if (typeof obj === 'string') {
                obj = obj.split(' ');
            }
            if ($.isArray(obj)) {
                obj = {
                    left: +obj[0],
                    top: +obj[1] || 0
                };
            }
            if ('left' in obj) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ('right' in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ('top' in obj) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ('bottom' in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },
        _isRootNode: function (element) {
            return /(html|body)/i.test(element.tagName) || element === this.document[0];
        },
        _getParentOffset: function () {
            var po = this.offsetParent.offset(), document = this.document[0];
            if (this.cssPosition === 'absolute' && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            if (this._isRootNode(this.offsetParent[0])) {
                po = {
                    top: 0,
                    left: 0
                };
            }
            return {
                top: po.top + (parseInt(this.offsetParent.css('borderTopWidth'), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css('borderLeftWidth'), 10) || 0)
            };
        },
        _getRelativeOffset: function () {
            if (this.cssPosition !== 'relative') {
                return {
                    top: 0,
                    left: 0
                };
            }
            var p = this.element.position(), scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: p.top - (parseInt(this.helper.css('top'), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollTop() : 0),
                left: p.left - (parseInt(this.helper.css('left'), 10) || 0) + (!scrollIsRootNode ? this.scrollParent.scrollLeft() : 0)
            };
        },
        _cacheMargins: function () {
            this.margins = {
                left: parseInt(this.element.css('marginLeft'), 10) || 0,
                top: parseInt(this.element.css('marginTop'), 10) || 0,
                right: parseInt(this.element.css('marginRight'), 10) || 0,
                bottom: parseInt(this.element.css('marginBottom'), 10) || 0
            };
        },
        _cacheHelperProportions: function () {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function () {
            var isUserScrollable, c, ce, o = this.options, document = this.document[0];
            this.relativeContainer = null;
            if (!o.containment) {
                this.containment = null;
                return;
            }
            if (o.containment === 'window') {
                this.containment = [
                    $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left,
                    $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top,
                    $(window).scrollLeft() + $(window).width() - this.helperProportions.width - this.margins.left,
                    $(window).scrollTop() + ($(window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
                ];
                return;
            }
            if (o.containment === 'document') {
                this.containment = [
                    0,
                    0,
                    $(document).width() - this.helperProportions.width - this.margins.left,
                    ($(document).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
                ];
                return;
            }
            if (o.containment.constructor === Array) {
                this.containment = o.containment;
                return;
            }
            if (o.containment === 'parent') {
                o.containment = this.helper[0].parentNode;
            }
            c = $(o.containment);
            ce = c[0];
            if (!ce) {
                return;
            }
            isUserScrollable = /(scroll|auto)/.test(c.css('overflow'));
            this.containment = [
                (parseInt(c.css('borderLeftWidth'), 10) || 0) + (parseInt(c.css('paddingLeft'), 10) || 0),
                (parseInt(c.css('borderTopWidth'), 10) || 0) + (parseInt(c.css('paddingTop'), 10) || 0),
                (isUserScrollable ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt(c.css('borderRightWidth'), 10) || 0) - (parseInt(c.css('paddingRight'), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right,
                (isUserScrollable ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt(c.css('borderBottomWidth'), 10) || 0) - (parseInt(c.css('paddingBottom'), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom
            ];
            this.relativeContainer = c;
        },
        _convertPositionTo: function (d, pos) {
            if (!pos) {
                pos = this.position;
            }
            var mod = d === 'absolute' ? 1 : -1, scrollIsRootNode = this._isRootNode(this.scrollParent[0]);
            return {
                top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - (this.cssPosition === 'fixed' ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top) * mod,
                left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - (this.cssPosition === 'fixed' ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left) * mod
            };
        },
        _generatePosition: function (event, constrainPosition) {
            var containment, co, top, left, o = this.options, scrollIsRootNode = this._isRootNode(this.scrollParent[0]), pageX = event.pageX, pageY = event.pageY;
            if (!scrollIsRootNode || !this.offset.scroll) {
                this.offset.scroll = {
                    top: this.scrollParent.scrollTop(),
                    left: this.scrollParent.scrollLeft()
                };
            }
            if (constrainPosition) {
                if (this.containment) {
                    if (this.relativeContainer) {
                        co = this.relativeContainer.offset();
                        containment = [
                            this.containment[0] + co.left,
                            this.containment[1] + co.top,
                            this.containment[2] + co.left,
                            this.containment[3] + co.top
                        ];
                    } else {
                        containment = this.containment;
                    }
                    if (event.pageX - this.offset.click.left < containment[0]) {
                        pageX = containment[0] + this.offset.click.left;
                    }
                    if (event.pageY - this.offset.click.top < containment[1]) {
                        pageY = containment[1] + this.offset.click.top;
                    }
                    if (event.pageX - this.offset.click.left > containment[2]) {
                        pageX = containment[2] + this.offset.click.left;
                    }
                    if (event.pageY - this.offset.click.top > containment[3]) {
                        pageY = containment[3] + this.offset.click.top;
                    }
                }
                if (o.grid) {
                    top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                    pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                    pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                }
                if (o.axis === 'y') {
                    pageX = this.originalPageX;
                }
                if (o.axis === 'x') {
                    pageY = this.originalPageY;
                }
            }
            return {
                top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition === 'fixed' ? -this.offset.scroll.top : scrollIsRootNode ? 0 : this.offset.scroll.top),
                left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition === 'fixed' ? -this.offset.scroll.left : scrollIsRootNode ? 0 : this.offset.scroll.left)
            };
        },
        _clear: function () {
            this.helper.removeClass('ui-draggable-dragging');
            if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
                this.helper.remove();
            }
            this.helper = null;
            this.cancelHelperRemoval = false;
            if (this.destroyOnClear) {
                this.destroy();
            }
        },
        _normalizeRightBottom: function () {
            if (this.options.axis !== 'y' && this.helper.css('right') !== 'auto') {
                this.helper.width(this.helper.width());
                this.helper.css('right', 'auto');
            }
            if (this.options.axis !== 'x' && this.helper.css('bottom') !== 'auto') {
                this.helper.height(this.helper.height());
                this.helper.css('bottom', 'auto');
            }
        },
        _trigger: function (type, event, ui) {
            ui = ui || this._uiHash();
            $.ui.plugin.call(this, type, [
                event,
                ui,
                this
            ], true);
            if (/^(drag|start|stop)/.test(type)) {
                this.positionAbs = this._convertPositionTo('absolute');
                ui.offset = this.positionAbs;
            }
            return $.Widget.prototype._trigger.call(this, type, event, ui);
        },
        plugins: {},
        _uiHash: function () {
            return {
                helper: this.helper,
                position: this.position,
                originalPosition: this.originalPosition,
                offset: this.positionAbs
            };
        }
    });
    $.ui.plugin.add('draggable', 'connectToSortable', {
        start: function (event, ui, draggable) {
            var uiSortable = $.extend({}, ui, { item: draggable.element });
            draggable.sortables = [];
            $(draggable.options.connectToSortable).each(function () {
                var sortable = $(this).sortable('instance');
                if (sortable && !sortable.options.disabled) {
                    draggable.sortables.push(sortable);
                    sortable.refreshPositions();
                    sortable._trigger('activate', event, uiSortable);
                }
            });
        },
        stop: function (event, ui, draggable) {
            var uiSortable = $.extend({}, ui, { item: draggable.element });
            draggable.cancelHelperRemoval = false;
            $.each(draggable.sortables, function () {
                var sortable = this;
                if (sortable.isOver) {
                    sortable.isOver = 0;
                    draggable.cancelHelperRemoval = true;
                    sortable.cancelHelperRemoval = false;
                    sortable._storedCSS = {
                        position: sortable.placeholder.css('position'),
                        top: sortable.placeholder.css('top'),
                        left: sortable.placeholder.css('left')
                    };
                    sortable._mouseStop(event);
                    sortable.options.helper = sortable.options._helper;
                } else {
                    sortable.cancelHelperRemoval = true;
                    sortable._trigger('deactivate', event, uiSortable);
                }
            });
        },
        drag: function (event, ui, draggable) {
            $.each(draggable.sortables, function () {
                var innermostIntersecting = false, sortable = this;
                sortable.positionAbs = draggable.positionAbs;
                sortable.helperProportions = draggable.helperProportions;
                sortable.offset.click = draggable.offset.click;
                if (sortable._intersectsWith(sortable.containerCache)) {
                    innermostIntersecting = true;
                    $.each(draggable.sortables, function () {
                        this.positionAbs = draggable.positionAbs;
                        this.helperProportions = draggable.helperProportions;
                        this.offset.click = draggable.offset.click;
                        if (this !== sortable && this._intersectsWith(this.containerCache) && $.contains(sortable.element[0], this.element[0])) {
                            innermostIntersecting = false;
                        }
                        return innermostIntersecting;
                    });
                }
                if (innermostIntersecting) {
                    if (!sortable.isOver) {
                        sortable.isOver = 1;
                        draggable._parent = ui.helper.parent();
                        sortable.currentItem = ui.helper.appendTo(sortable.element).data('ui-sortable-item', true);
                        sortable.options._helper = sortable.options.helper;
                        sortable.options.helper = function () {
                            return ui.helper[0];
                        };
                        event.target = sortable.currentItem[0];
                        sortable._mouseCapture(event, true);
                        sortable._mouseStart(event, true, true);
                        sortable.offset.click.top = draggable.offset.click.top;
                        sortable.offset.click.left = draggable.offset.click.left;
                        sortable.offset.parent.left -= draggable.offset.parent.left - sortable.offset.parent.left;
                        sortable.offset.parent.top -= draggable.offset.parent.top - sortable.offset.parent.top;
                        draggable._trigger('toSortable', event);
                        draggable.dropped = sortable.element;
                        $.each(draggable.sortables, function () {
                            this.refreshPositions();
                        });
                        draggable.currentItem = draggable.element;
                        sortable.fromOutside = draggable;
                    }
                    if (sortable.currentItem) {
                        sortable._mouseDrag(event);
                        ui.position = sortable.position;
                    }
                } else {
                    if (sortable.isOver) {
                        sortable.isOver = 0;
                        sortable.cancelHelperRemoval = true;
                        sortable.options._revert = sortable.options.revert;
                        sortable.options.revert = false;
                        sortable._trigger('out', event, sortable._uiHash(sortable));
                        sortable._mouseStop(event, true);
                        sortable.options.revert = sortable.options._revert;
                        sortable.options.helper = sortable.options._helper;
                        if (sortable.placeholder) {
                            sortable.placeholder.remove();
                        }
                        ui.helper.appendTo(draggable._parent);
                        draggable._refreshOffsets(event);
                        ui.position = draggable._generatePosition(event, true);
                        draggable._trigger('fromSortable', event);
                        draggable.dropped = false;
                        $.each(draggable.sortables, function () {
                            this.refreshPositions();
                        });
                    }
                }
            });
        }
    });
    $.ui.plugin.add('draggable', 'cursor', {
        start: function (event, ui, instance) {
            var t = $('body'), o = instance.options;
            if (t.css('cursor')) {
                o._cursor = t.css('cursor');
            }
            t.css('cursor', o.cursor);
        },
        stop: function (event, ui, instance) {
            var o = instance.options;
            if (o._cursor) {
                $('body').css('cursor', o._cursor);
            }
        }
    });
    $.ui.plugin.add('draggable', 'opacity', {
        start: function (event, ui, instance) {
            var t = $(ui.helper), o = instance.options;
            if (t.css('opacity')) {
                o._opacity = t.css('opacity');
            }
            t.css('opacity', o.opacity);
        },
        stop: function (event, ui, instance) {
            var o = instance.options;
            if (o._opacity) {
                $(ui.helper).css('opacity', o._opacity);
            }
        }
    });
    $.ui.plugin.add('draggable', 'scroll', {
        start: function (event, ui, i) {
            if (!i.scrollParentNotHidden) {
                i.scrollParentNotHidden = i.helper.scrollParent(false);
            }
            if (i.scrollParentNotHidden[0] !== i.document[0] && i.scrollParentNotHidden[0].tagName !== 'HTML') {
                i.overflowOffset = i.scrollParentNotHidden.offset();
            }
        },
        drag: function (event, ui, i) {
            var o = i.options, scrolled = false, scrollParent = i.scrollParentNotHidden[0], document = i.document[0];
            if (scrollParent !== document && scrollParent.tagName !== 'HTML') {
                if (!o.axis || o.axis !== 'x') {
                    if (i.overflowOffset.top + scrollParent.offsetHeight - event.pageY < o.scrollSensitivity) {
                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop + o.scrollSpeed;
                    } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
                        scrollParent.scrollTop = scrolled = scrollParent.scrollTop - o.scrollSpeed;
                    }
                }
                if (!o.axis || o.axis !== 'y') {
                    if (i.overflowOffset.left + scrollParent.offsetWidth - event.pageX < o.scrollSensitivity) {
                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft + o.scrollSpeed;
                    } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
                        scrollParent.scrollLeft = scrolled = scrollParent.scrollLeft - o.scrollSpeed;
                    }
                }
            } else {
                if (!o.axis || o.axis !== 'x') {
                    if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                    } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
                        scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                    }
                }
                if (!o.axis || o.axis !== 'y') {
                    if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                    } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
                        scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                    }
                }
            }
            if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(i, event);
            }
        }
    });
    $.ui.plugin.add('draggable', 'snap', {
        start: function (event, ui, i) {
            var o = i.options;
            i.snapElements = [];
            $(o.snap.constructor !== String ? o.snap.items || ':data(ui-draggable)' : o.snap).each(function () {
                var $t = $(this), $o = $t.offset();
                if (this !== i.element[0]) {
                    i.snapElements.push({
                        item: this,
                        width: $t.outerWidth(),
                        height: $t.outerHeight(),
                        top: $o.top,
                        left: $o.left
                    });
                }
            });
        },
        drag: function (event, ui, inst) {
            var ts, bs, ls, rs, l, r, t, b, i, first, o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
            for (i = inst.snapElements.length - 1; i >= 0; i--) {
                l = inst.snapElements[i].left - inst.margins.left;
                r = l + inst.snapElements[i].width;
                t = inst.snapElements[i].top - inst.margins.top;
                b = t + inst.snapElements[i].height;
                if (x2 < l - d || x1 > r + d || y2 < t - d || y1 > b + d || !$.contains(inst.snapElements[i].item.ownerDocument, inst.snapElements[i].item)) {
                    if (inst.snapElements[i].snapping) {
                        inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }));
                    }
                    inst.snapElements[i].snapping = false;
                    continue;
                }
                if (o.snapMode !== 'inner') {
                    ts = Math.abs(t - y2) <= d;
                    bs = Math.abs(b - y1) <= d;
                    ls = Math.abs(l - x2) <= d;
                    rs = Math.abs(r - x1) <= d;
                    if (ts) {
                        ui.position.top = inst._convertPositionTo('relative', {
                            top: t - inst.helperProportions.height,
                            left: 0
                        }).top;
                    }
                    if (bs) {
                        ui.position.top = inst._convertPositionTo('relative', {
                            top: b,
                            left: 0
                        }).top;
                    }
                    if (ls) {
                        ui.position.left = inst._convertPositionTo('relative', {
                            top: 0,
                            left: l - inst.helperProportions.width
                        }).left;
                    }
                    if (rs) {
                        ui.position.left = inst._convertPositionTo('relative', {
                            top: 0,
                            left: r
                        }).left;
                    }
                }
                first = ts || bs || ls || rs;
                if (o.snapMode !== 'outer') {
                    ts = Math.abs(t - y1) <= d;
                    bs = Math.abs(b - y2) <= d;
                    ls = Math.abs(l - x1) <= d;
                    rs = Math.abs(r - x2) <= d;
                    if (ts) {
                        ui.position.top = inst._convertPositionTo('relative', {
                            top: t,
                            left: 0
                        }).top;
                    }
                    if (bs) {
                        ui.position.top = inst._convertPositionTo('relative', {
                            top: b - inst.helperProportions.height,
                            left: 0
                        }).top;
                    }
                    if (ls) {
                        ui.position.left = inst._convertPositionTo('relative', {
                            top: 0,
                            left: l
                        }).left;
                    }
                    if (rs) {
                        ui.position.left = inst._convertPositionTo('relative', {
                            top: 0,
                            left: r - inst.helperProportions.width
                        }).left;
                    }
                }
                if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
                    inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), { snapItem: inst.snapElements[i].item }));
                }
                inst.snapElements[i].snapping = ts || bs || ls || rs || first;
            }
        }
    });
    $.ui.plugin.add('draggable', 'stack', {
        start: function (event, ui, instance) {
            var min, o = instance.options, group = $.makeArray($(o.stack)).sort(function (a, b) {
                    return (parseInt($(a).css('zIndex'), 10) || 0) - (parseInt($(b).css('zIndex'), 10) || 0);
                });
            if (!group.length) {
                return;
            }
            min = parseInt($(group[0]).css('zIndex'), 10) || 0;
            $(group).each(function (i) {
                $(this).css('zIndex', min + i);
            });
            this.css('zIndex', min + group.length);
        }
    });
    $.ui.plugin.add('draggable', 'zIndex', {
        start: function (event, ui, instance) {
            var t = $(ui.helper), o = instance.options;
            if (t.css('zIndex')) {
                o._zIndex = t.css('zIndex');
            }
            t.css('zIndex', o.zIndex);
        },
        stop: function (event, ui, instance) {
            var o = instance.options;
            if (o._zIndex) {
                $(ui.helper).css('zIndex', o._zIndex);
            }
        }
    });
    var draggable = $.ui.draggable;
    $.widget('ui.resizable', $.ui.mouse, {
        version: '1.11.4',
        widgetEventPrefix: 'resize',
        options: {
            alsoResize: false,
            animate: false,
            animateDuration: 'slow',
            animateEasing: 'swing',
            aspectRatio: false,
            autoHide: false,
            containment: false,
            ghost: false,
            grid: false,
            handles: 'e,s,se',
            helper: false,
            maxHeight: null,
            maxWidth: null,
            minHeight: 10,
            minWidth: 10,
            zIndex: 90,
            resize: null,
            start: null,
            stop: null
        },
        _num: function (value) {
            return parseInt(value, 10) || 0;
        },
        _isNumber: function (value) {
            return !isNaN(parseInt(value, 10));
        },
        _hasScroll: function (el, a) {
            if ($(el).css('overflow') === 'hidden') {
                return false;
            }
            var scroll = a && a === 'left' ? 'scrollLeft' : 'scrollTop', has = false;
            if (el[scroll] > 0) {
                return true;
            }
            el[scroll] = 1;
            has = el[scroll] > 0;
            el[scroll] = 0;
            return has;
        },
        _create: function () {
            var n, i, handle, axis, hname, that = this, o = this.options;
            this.element.addClass('ui-resizable');
            $.extend(this, {
                _aspectRatio: !!o.aspectRatio,
                aspectRatio: o.aspectRatio,
                originalElement: this.element,
                _proportionallyResizeElements: [],
                _helper: o.helper || o.ghost || o.animate ? o.helper || 'ui-resizable-helper' : null
            });
            if (this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i)) {
                this.element.wrap($('<div class=\'ui-wrapper\' style=\'overflow: hidden;\'></div>').css({
                    position: this.element.css('position'),
                    width: this.element.outerWidth(),
                    height: this.element.outerHeight(),
                    top: this.element.css('top'),
                    left: this.element.css('left')
                }));
                this.element = this.element.parent().data('ui-resizable', this.element.resizable('instance'));
                this.elementIsWrapper = true;
                this.element.css({
                    marginLeft: this.originalElement.css('marginLeft'),
                    marginTop: this.originalElement.css('marginTop'),
                    marginRight: this.originalElement.css('marginRight'),
                    marginBottom: this.originalElement.css('marginBottom')
                });
                this.originalElement.css({
                    marginLeft: 0,
                    marginTop: 0,
                    marginRight: 0,
                    marginBottom: 0
                });
                this.originalResizeStyle = this.originalElement.css('resize');
                this.originalElement.css('resize', 'none');
                this._proportionallyResizeElements.push(this.originalElement.css({
                    position: 'static',
                    zoom: 1,
                    display: 'block'
                }));
                this.originalElement.css({ margin: this.originalElement.css('margin') });
                this._proportionallyResize();
            }
            this.handles = o.handles || (!$('.ui-resizable-handle', this.element).length ? 'e,s,se' : {
                n: '.ui-resizable-n',
                e: '.ui-resizable-e',
                s: '.ui-resizable-s',
                w: '.ui-resizable-w',
                se: '.ui-resizable-se',
                sw: '.ui-resizable-sw',
                ne: '.ui-resizable-ne',
                nw: '.ui-resizable-nw'
            });
            this._handles = $();
            if (this.handles.constructor === String) {
                if (this.handles === 'all') {
                    this.handles = 'n,e,s,w,se,sw,ne,nw';
                }
                n = this.handles.split(',');
                this.handles = {};
                for (i = 0; i < n.length; i++) {
                    handle = $.trim(n[i]);
                    hname = 'ui-resizable-' + handle;
                    axis = $('<div class=\'ui-resizable-handle ' + hname + '\'></div>');
                    axis.css({ zIndex: o.zIndex });
                    if ('se' === handle) {
                        axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
                    }
                    this.handles[handle] = '.ui-resizable-' + handle;
                    this.element.append(axis);
                }
            }
            this._renderAxis = function (target) {
                var i, axis, padPos, padWrapper;
                target = target || this.element;
                for (i in this.handles) {
                    if (this.handles[i].constructor === String) {
                        this.handles[i] = this.element.children(this.handles[i]).first().show();
                    } else if (this.handles[i].jquery || this.handles[i].nodeType) {
                        this.handles[i] = $(this.handles[i]);
                        this._on(this.handles[i], { 'mousedown': that._mouseDown });
                    }
                    if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i)) {
                        axis = $(this.handles[i], this.element);
                        padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                        padPos = [
                            'padding',
                            /ne|nw|n/.test(i) ? 'Top' : /se|sw|s/.test(i) ? 'Bottom' : /^e$/.test(i) ? 'Right' : 'Left'
                        ].join('');
                        target.css(padPos, padWrapper);
                        this._proportionallyResize();
                    }
                    this._handles = this._handles.add(this.handles[i]);
                }
            };
            this._renderAxis(this.element);
            this._handles = this._handles.add(this.element.find('.ui-resizable-handle'));
            this._handles.disableSelection();
            this._handles.mouseover(function () {
                if (!that.resizing) {
                    if (this.className) {
                        axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                    }
                    that.axis = axis && axis[1] ? axis[1] : 'se';
                }
            });
            if (o.autoHide) {
                this._handles.hide();
                $(this.element).addClass('ui-resizable-autohide').mouseenter(function () {
                    if (o.disabled) {
                        return;
                    }
                    $(this).removeClass('ui-resizable-autohide');
                    that._handles.show();
                }).mouseleave(function () {
                    if (o.disabled) {
                        return;
                    }
                    if (!that.resizing) {
                        $(this).addClass('ui-resizable-autohide');
                        that._handles.hide();
                    }
                });
            }
            this._mouseInit();
        },
        _destroy: function () {
            this._mouseDestroy();
            var wrapper, _destroy = function (exp) {
                    $(exp).removeClass('ui-resizable ui-resizable-disabled ui-resizable-resizing').removeData('resizable').removeData('ui-resizable').unbind('.resizable').find('.ui-resizable-handle').remove();
                };
            if (this.elementIsWrapper) {
                _destroy(this.element);
                wrapper = this.element;
                this.originalElement.css({
                    position: wrapper.css('position'),
                    width: wrapper.outerWidth(),
                    height: wrapper.outerHeight(),
                    top: wrapper.css('top'),
                    left: wrapper.css('left')
                }).insertAfter(wrapper);
                wrapper.remove();
            }
            this.originalElement.css('resize', this.originalResizeStyle);
            _destroy(this.originalElement);
            return this;
        },
        _mouseCapture: function (event) {
            var i, handle, capture = false;
            for (i in this.handles) {
                handle = $(this.handles[i])[0];
                if (handle === event.target || $.contains(handle, event.target)) {
                    capture = true;
                }
            }
            return !this.options.disabled && capture;
        },
        _mouseStart: function (event) {
            var curleft, curtop, cursor, o = this.options, el = this.element;
            this.resizing = true;
            this._renderProxy();
            curleft = this._num(this.helper.css('left'));
            curtop = this._num(this.helper.css('top'));
            if (o.containment) {
                curleft += $(o.containment).scrollLeft() || 0;
                curtop += $(o.containment).scrollTop() || 0;
            }
            this.offset = this.helper.offset();
            this.position = {
                left: curleft,
                top: curtop
            };
            this.size = this._helper ? {
                width: this.helper.width(),
                height: this.helper.height()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.originalSize = this._helper ? {
                width: el.outerWidth(),
                height: el.outerHeight()
            } : {
                width: el.width(),
                height: el.height()
            };
            this.sizeDiff = {
                width: el.outerWidth() - el.width(),
                height: el.outerHeight() - el.height()
            };
            this.originalPosition = {
                left: curleft,
                top: curtop
            };
            this.originalMousePosition = {
                left: event.pageX,
                top: event.pageY
            };
            this.aspectRatio = typeof o.aspectRatio === 'number' ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
            cursor = $('.ui-resizable-' + this.axis).css('cursor');
            $('body').css('cursor', cursor === 'auto' ? this.axis + '-resize' : cursor);
            el.addClass('ui-resizable-resizing');
            this._propagate('start', event);
            return true;
        },
        _mouseDrag: function (event) {
            var data, props, smp = this.originalMousePosition, a = this.axis, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
            this._updatePrevProperties();
            if (!trigger) {
                return false;
            }
            data = trigger.apply(this, [
                event,
                dx,
                dy
            ]);
            this._updateVirtualBoundaries(event.shiftKey);
            if (this._aspectRatio || event.shiftKey) {
                data = this._updateRatio(data, event);
            }
            data = this._respectSize(data, event);
            this._updateCache(data);
            this._propagate('resize', event);
            props = this._applyChanges();
            if (!this._helper && this._proportionallyResizeElements.length) {
                this._proportionallyResize();
            }
            if (!$.isEmptyObject(props)) {
                this._updatePrevProperties();
                this._trigger('resize', event, this.ui());
                this._applyChanges();
            }
            return false;
        },
        _mouseStop: function (event) {
            this.resizing = false;
            var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this;
            if (this._helper) {
                pr = this._proportionallyResizeElements;
                ista = pr.length && /textarea/i.test(pr[0].nodeName);
                soffseth = ista && this._hasScroll(pr[0], 'left') ? 0 : that.sizeDiff.height;
                soffsetw = ista ? 0 : that.sizeDiff.width;
                s = {
                    width: that.helper.width() - soffsetw,
                    height: that.helper.height() - soffseth
                };
                left = parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left) || null;
                top = parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top) || null;
                if (!o.animate) {
                    this.element.css($.extend(s, {
                        top: top,
                        left: left
                    }));
                }
                that.helper.height(that.size.height);
                that.helper.width(that.size.width);
                if (this._helper && !o.animate) {
                    this._proportionallyResize();
                }
            }
            $('body').css('cursor', 'auto');
            this.element.removeClass('ui-resizable-resizing');
            this._propagate('stop', event);
            if (this._helper) {
                this.helper.remove();
            }
            return false;
        },
        _updatePrevProperties: function () {
            this.prevPosition = {
                top: this.position.top,
                left: this.position.left
            };
            this.prevSize = {
                width: this.size.width,
                height: this.size.height
            };
        },
        _applyChanges: function () {
            var props = {};
            if (this.position.top !== this.prevPosition.top) {
                props.top = this.position.top + 'px';
            }
            if (this.position.left !== this.prevPosition.left) {
                props.left = this.position.left + 'px';
            }
            if (this.size.width !== this.prevSize.width) {
                props.width = this.size.width + 'px';
            }
            if (this.size.height !== this.prevSize.height) {
                props.height = this.size.height + 'px';
            }
            this.helper.css(props);
            return props;
        },
        _updateVirtualBoundaries: function (forceAspectRatio) {
            var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
            b = {
                minWidth: this._isNumber(o.minWidth) ? o.minWidth : 0,
                maxWidth: this._isNumber(o.maxWidth) ? o.maxWidth : Infinity,
                minHeight: this._isNumber(o.minHeight) ? o.minHeight : 0,
                maxHeight: this._isNumber(o.maxHeight) ? o.maxHeight : Infinity
            };
            if (this._aspectRatio || forceAspectRatio) {
                pMinWidth = b.minHeight * this.aspectRatio;
                pMinHeight = b.minWidth / this.aspectRatio;
                pMaxWidth = b.maxHeight * this.aspectRatio;
                pMaxHeight = b.maxWidth / this.aspectRatio;
                if (pMinWidth > b.minWidth) {
                    b.minWidth = pMinWidth;
                }
                if (pMinHeight > b.minHeight) {
                    b.minHeight = pMinHeight;
                }
                if (pMaxWidth < b.maxWidth) {
                    b.maxWidth = pMaxWidth;
                }
                if (pMaxHeight < b.maxHeight) {
                    b.maxHeight = pMaxHeight;
                }
            }
            this._vBoundaries = b;
        },
        _updateCache: function (data) {
            this.offset = this.helper.offset();
            if (this._isNumber(data.left)) {
                this.position.left = data.left;
            }
            if (this._isNumber(data.top)) {
                this.position.top = data.top;
            }
            if (this._isNumber(data.height)) {
                this.size.height = data.height;
            }
            if (this._isNumber(data.width)) {
                this.size.width = data.width;
            }
        },
        _updateRatio: function (data) {
            var cpos = this.position, csize = this.size, a = this.axis;
            if (this._isNumber(data.height)) {
                data.width = data.height * this.aspectRatio;
            } else if (this._isNumber(data.width)) {
                data.height = data.width / this.aspectRatio;
            }
            if (a === 'sw') {
                data.left = cpos.left + (csize.width - data.width);
                data.top = null;
            }
            if (a === 'nw') {
                data.top = cpos.top + (csize.height - data.height);
                data.left = cpos.left + (csize.width - data.width);
            }
            return data;
        },
        _respectSize: function (data) {
            var o = this._vBoundaries, a = this.axis, ismaxw = this._isNumber(data.width) && o.maxWidth && o.maxWidth < data.width, ismaxh = this._isNumber(data.height) && o.maxHeight && o.maxHeight < data.height, isminw = this._isNumber(data.width) && o.minWidth && o.minWidth > data.width, isminh = this._isNumber(data.height) && o.minHeight && o.minHeight > data.height, dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
            if (isminw) {
                data.width = o.minWidth;
            }
            if (isminh) {
                data.height = o.minHeight;
            }
            if (ismaxw) {
                data.width = o.maxWidth;
            }
            if (ismaxh) {
                data.height = o.maxHeight;
            }
            if (isminw && cw) {
                data.left = dw - o.minWidth;
            }
            if (ismaxw && cw) {
                data.left = dw - o.maxWidth;
            }
            if (isminh && ch) {
                data.top = dh - o.minHeight;
            }
            if (ismaxh && ch) {
                data.top = dh - o.maxHeight;
            }
            if (!data.width && !data.height && !data.left && data.top) {
                data.top = null;
            } else if (!data.width && !data.height && !data.top && data.left) {
                data.left = null;
            }
            return data;
        },
        _getPaddingPlusBorderDimensions: function (element) {
            var i = 0, widths = [], borders = [
                    element.css('borderTopWidth'),
                    element.css('borderRightWidth'),
                    element.css('borderBottomWidth'),
                    element.css('borderLeftWidth')
                ], paddings = [
                    element.css('paddingTop'),
                    element.css('paddingRight'),
                    element.css('paddingBottom'),
                    element.css('paddingLeft')
                ];
            for (; i < 4; i++) {
                widths[i] = parseInt(borders[i], 10) || 0;
                widths[i] += parseInt(paddings[i], 10) || 0;
            }
            return {
                height: widths[0] + widths[2],
                width: widths[1] + widths[3]
            };
        },
        _proportionallyResize: function () {
            if (!this._proportionallyResizeElements.length) {
                return;
            }
            var prel, i = 0, element = this.helper || this.element;
            for (; i < this._proportionallyResizeElements.length; i++) {
                prel = this._proportionallyResizeElements[i];
                if (!this.outerDimensions) {
                    this.outerDimensions = this._getPaddingPlusBorderDimensions(prel);
                }
                prel.css({
                    height: element.height() - this.outerDimensions.height || 0,
                    width: element.width() - this.outerDimensions.width || 0
                });
            }
        },
        _renderProxy: function () {
            var el = this.element, o = this.options;
            this.elementOffset = el.offset();
            if (this._helper) {
                this.helper = this.helper || $('<div style=\'overflow:hidden;\'></div>');
                this.helper.addClass(this._helper).css({
                    width: this.element.outerWidth() - 1,
                    height: this.element.outerHeight() - 1,
                    position: 'absolute',
                    left: this.elementOffset.left + 'px',
                    top: this.elementOffset.top + 'px',
                    zIndex: ++o.zIndex
                });
                this.helper.appendTo('body').disableSelection();
            } else {
                this.helper = this.element;
            }
        },
        _change: {
            e: function (event, dx) {
                return { width: this.originalSize.width + dx };
            },
            w: function (event, dx) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    left: sp.left + dx,
                    width: cs.width - dx
                };
            },
            n: function (event, dx, dy) {
                var cs = this.originalSize, sp = this.originalPosition;
                return {
                    top: sp.top + dy,
                    height: cs.height - dy
                };
            },
            s: function (event, dx, dy) {
                return { height: this.originalSize.height + dy };
            },
            se: function (event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [
                    event,
                    dx,
                    dy
                ]));
            },
            sw: function (event, dx, dy) {
                return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [
                    event,
                    dx,
                    dy
                ]));
            },
            ne: function (event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [
                    event,
                    dx,
                    dy
                ]));
            },
            nw: function (event, dx, dy) {
                return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [
                    event,
                    dx,
                    dy
                ]));
            }
        },
        _propagate: function (n, event) {
            $.ui.plugin.call(this, n, [
                event,
                this.ui()
            ]);
            n !== 'resize' && this._trigger(n, event, this.ui());
        },
        plugins: {},
        ui: function () {
            return {
                originalElement: this.originalElement,
                element: this.element,
                helper: this.helper,
                position: this.position,
                size: this.size,
                originalSize: this.originalSize,
                originalPosition: this.originalPosition
            };
        }
    });
    $.ui.plugin.add('resizable', 'animate', {
        stop: function (event) {
            var that = $(this).resizable('instance'), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), soffseth = ista && that._hasScroll(pr[0], 'left') ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = {
                    width: that.size.width - soffsetw,
                    height: that.size.height - soffseth
                }, left = parseInt(that.element.css('left'), 10) + (that.position.left - that.originalPosition.left) || null, top = parseInt(that.element.css('top'), 10) + (that.position.top - that.originalPosition.top) || null;
            that.element.animate($.extend(style, top && left ? {
                top: top,
                left: left
            } : {}), {
                duration: o.animateDuration,
                easing: o.animateEasing,
                step: function () {
                    var data = {
                        width: parseInt(that.element.css('width'), 10),
                        height: parseInt(that.element.css('height'), 10),
                        top: parseInt(that.element.css('top'), 10),
                        left: parseInt(that.element.css('left'), 10)
                    };
                    if (pr && pr.length) {
                        $(pr[0]).css({
                            width: data.width,
                            height: data.height
                        });
                    }
                    that._updateCache(data);
                    that._propagate('resize', event);
                }
            });
        }
    });
    $.ui.plugin.add('resizable', 'containment', {
        start: function () {
            var element, p, co, ch, cw, width, height, that = $(this).resizable('instance'), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
            if (!ce) {
                return;
            }
            that.containerElement = $(ce);
            if (/document/.test(oc) || oc === document) {
                that.containerOffset = {
                    left: 0,
                    top: 0
                };
                that.containerPosition = {
                    left: 0,
                    top: 0
                };
                that.parentData = {
                    element: $(document),
                    left: 0,
                    top: 0,
                    width: $(document).width(),
                    height: $(document).height() || document.body.parentNode.scrollHeight
                };
            } else {
                element = $(ce);
                p = [];
                $([
                    'Top',
                    'Right',
                    'Left',
                    'Bottom'
                ]).each(function (i, name) {
                    p[i] = that._num(element.css('padding' + name));
                });
                that.containerOffset = element.offset();
                that.containerPosition = element.position();
                that.containerSize = {
                    height: element.innerHeight() - p[3],
                    width: element.innerWidth() - p[1]
                };
                co = that.containerOffset;
                ch = that.containerSize.height;
                cw = that.containerSize.width;
                width = that._hasScroll(ce, 'left') ? ce.scrollWidth : cw;
                height = that._hasScroll(ce) ? ce.scrollHeight : ch;
                that.parentData = {
                    element: ce,
                    left: co.left,
                    top: co.top,
                    width: width,
                    height: height
                };
            }
        },
        resize: function (event) {
            var woset, hoset, isParent, isOffsetRelative, that = $(this).resizable('instance'), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
                    top: 0,
                    left: 0
                }, ce = that.containerElement, continueResize = true;
            if (ce[0] !== document && /static/.test(ce.css('position'))) {
                cop = co;
            }
            if (cp.left < (that._helper ? co.left : 0)) {
                that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
                if (pRatio) {
                    that.size.height = that.size.width / that.aspectRatio;
                    continueResize = false;
                }
                that.position.left = o.helper ? co.left : 0;
            }
            if (cp.top < (that._helper ? co.top : 0)) {
                that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
                if (pRatio) {
                    that.size.width = that.size.height * that.aspectRatio;
                    continueResize = false;
                }
                that.position.top = that._helper ? co.top : 0;
            }
            isParent = that.containerElement.get(0) === that.element.parent().get(0);
            isOffsetRelative = /relative|absolute/.test(that.containerElement.css('position'));
            if (isParent && isOffsetRelative) {
                that.offset.left = that.parentData.left + that.position.left;
                that.offset.top = that.parentData.top + that.position.top;
            } else {
                that.offset.left = that.element.offset().left;
                that.offset.top = that.element.offset().top;
            }
            woset = Math.abs(that.sizeDiff.width + (that._helper ? that.offset.left - cop.left : that.offset.left - co.left));
            hoset = Math.abs(that.sizeDiff.height + (that._helper ? that.offset.top - cop.top : that.offset.top - co.top));
            if (woset + that.size.width >= that.parentData.width) {
                that.size.width = that.parentData.width - woset;
                if (pRatio) {
                    that.size.height = that.size.width / that.aspectRatio;
                    continueResize = false;
                }
            }
            if (hoset + that.size.height >= that.parentData.height) {
                that.size.height = that.parentData.height - hoset;
                if (pRatio) {
                    that.size.width = that.size.height * that.aspectRatio;
                    continueResize = false;
                }
            }
            if (!continueResize) {
                that.position.left = that.prevPosition.left;
                that.position.top = that.prevPosition.top;
                that.size.width = that.prevSize.width;
                that.size.height = that.prevSize.height;
            }
        },
        stop: function () {
            var that = $(this).resizable('instance'), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
            if (that._helper && !o.animate && /relative/.test(ce.css('position'))) {
                $(this).css({
                    left: ho.left - cop.left - co.left,
                    width: w,
                    height: h
                });
            }
            if (that._helper && !o.animate && /static/.test(ce.css('position'))) {
                $(this).css({
                    left: ho.left - cop.left - co.left,
                    width: w,
                    height: h
                });
            }
        }
    });
    $.ui.plugin.add('resizable', 'alsoResize', {
        start: function () {
            var that = $(this).resizable('instance'), o = that.options;
            $(o.alsoResize).each(function () {
                var el = $(this);
                el.data('ui-resizable-alsoresize', {
                    width: parseInt(el.width(), 10),
                    height: parseInt(el.height(), 10),
                    left: parseInt(el.css('left'), 10),
                    top: parseInt(el.css('top'), 10)
                });
            });
        },
        resize: function (event, ui) {
            var that = $(this).resizable('instance'), o = that.options, os = that.originalSize, op = that.originalPosition, delta = {
                    height: that.size.height - os.height || 0,
                    width: that.size.width - os.width || 0,
                    top: that.position.top - op.top || 0,
                    left: that.position.left - op.left || 0
                };
            $(o.alsoResize).each(function () {
                var el = $(this), start = $(this).data('ui-resizable-alsoresize'), style = {}, css = el.parents(ui.originalElement[0]).length ? [
                        'width',
                        'height'
                    ] : [
                        'width',
                        'height',
                        'top',
                        'left'
                    ];
                $.each(css, function (i, prop) {
                    var sum = (start[prop] || 0) + (delta[prop] || 0);
                    if (sum && sum >= 0) {
                        style[prop] = sum || null;
                    }
                });
                el.css(style);
            });
        },
        stop: function () {
            $(this).removeData('resizable-alsoresize');
        }
    });
    $.ui.plugin.add('resizable', 'ghost', {
        start: function () {
            var that = $(this).resizable('instance'), o = that.options, cs = that.size;
            that.ghost = that.originalElement.clone();
            that.ghost.css({
                opacity: 0.25,
                display: 'block',
                position: 'relative',
                height: cs.height,
                width: cs.width,
                margin: 0,
                left: 0,
                top: 0
            }).addClass('ui-resizable-ghost').addClass(typeof o.ghost === 'string' ? o.ghost : '');
            that.ghost.appendTo(that.helper);
        },
        resize: function () {
            var that = $(this).resizable('instance');
            if (that.ghost) {
                that.ghost.css({
                    position: 'relative',
                    height: that.size.height,
                    width: that.size.width
                });
            }
        },
        stop: function () {
            var that = $(this).resizable('instance');
            if (that.ghost && that.helper) {
                that.helper.get(0).removeChild(that.ghost.get(0));
            }
        }
    });
    $.ui.plugin.add('resizable', 'grid', {
        resize: function () {
            var outerDimensions, that = $(this).resizable('instance'), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = typeof o.grid === 'number' ? [
                    o.grid,
                    o.grid
                ] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
            o.grid = grid;
            if (isMinWidth) {
                newWidth += gridX;
            }
            if (isMinHeight) {
                newHeight += gridY;
            }
            if (isMaxWidth) {
                newWidth -= gridX;
            }
            if (isMaxHeight) {
                newHeight -= gridY;
            }
            if (/^(se|s|e)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
            } else if (/^(ne)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.top = op.top - oy;
            } else if (/^(sw)$/.test(a)) {
                that.size.width = newWidth;
                that.size.height = newHeight;
                that.position.left = op.left - ox;
            } else {
                if (newHeight - gridY <= 0 || newWidth - gridX <= 0) {
                    outerDimensions = that._getPaddingPlusBorderDimensions(this);
                }
                if (newHeight - gridY > 0) {
                    that.size.height = newHeight;
                    that.position.top = op.top - oy;
                } else {
                    newHeight = gridY - outerDimensions.height;
                    that.size.height = newHeight;
                    that.position.top = op.top + os.height - newHeight;
                }
                if (newWidth - gridX > 0) {
                    that.size.width = newWidth;
                    that.position.left = op.left - ox;
                } else {
                    newWidth = gridX - outerDimensions.width;
                    that.size.width = newWidth;
                    that.position.left = op.left + os.width - newWidth;
                }
            }
        }
    });
    var resizable = $.ui.resizable;
    var dialog = $.widget('ui.dialog', {
        version: '1.11.4',
        options: {
            appendTo: 'body',
            autoOpen: true,
            buttons: [],
            closeOnEscape: true,
            closeText: 'Close',
            dialogClass: '',
            draggable: true,
            hide: null,
            height: 'auto',
            maxHeight: null,
            maxWidth: null,
            minHeight: 150,
            minWidth: 150,
            modal: false,
            position: {
                my: 'center',
                at: 'center',
                of: window,
                collision: 'fit',
                using: function (pos) {
                    var topOffset = $(this).css(pos).offset().top;
                    if (topOffset < 0) {
                        $(this).css('top', pos.top - topOffset);
                    }
                }
            },
            resizable: true,
            show: null,
            title: null,
            width: 300,
            beforeClose: null,
            close: null,
            drag: null,
            dragStart: null,
            dragStop: null,
            focus: null,
            open: null,
            resize: null,
            resizeStart: null,
            resizeStop: null
        },
        sizeRelatedOptions: {
            buttons: true,
            height: true,
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true,
            width: true
        },
        resizableRelatedOptions: {
            maxHeight: true,
            maxWidth: true,
            minHeight: true,
            minWidth: true
        },
        _create: function () {
            this.originalCss = {
                display: this.element[0].style.display,
                width: this.element[0].style.width,
                minHeight: this.element[0].style.minHeight,
                maxHeight: this.element[0].style.maxHeight,
                height: this.element[0].style.height
            };
            this.originalPosition = {
                parent: this.element.parent(),
                index: this.element.parent().children().index(this.element)
            };
            this.originalTitle = this.element.attr('title');
            this.options.title = this.options.title || this.originalTitle;
            this._createWrapper();
            this.element.show().removeAttr('title').addClass('ui-dialog-content ui-widget-content').appendTo(this.uiDialog);
            this._createTitlebar();
            this._createButtonPane();
            if (this.options.draggable && $.fn.draggable) {
                this._makeDraggable();
            }
            if (this.options.resizable && $.fn.resizable) {
                this._makeResizable();
            }
            this._isOpen = false;
            this._trackFocus();
        },
        _init: function () {
            if (this.options.autoOpen) {
                this.open();
            }
        },
        _appendTo: function () {
            var element = this.options.appendTo;
            if (element && (element.jquery || element.nodeType)) {
                return $(element);
            }
            return this.document.find(element || 'body').eq(0);
        },
        _destroy: function () {
            var next, originalPosition = this.originalPosition;
            this._untrackInstance();
            this._destroyOverlay();
            this.element.removeUniqueId().removeClass('ui-dialog-content ui-widget-content').css(this.originalCss).detach();
            this.uiDialog.stop(true, true).remove();
            if (this.originalTitle) {
                this.element.attr('title', this.originalTitle);
            }
            next = originalPosition.parent.children().eq(originalPosition.index);
            if (next.length && next[0] !== this.element[0]) {
                next.before(this.element);
            } else {
                originalPosition.parent.append(this.element);
            }
        },
        widget: function () {
            return this.uiDialog;
        },
        disable: $.noop,
        enable: $.noop,
        close: function (event) {
            var activeElement, that = this;
            if (!this._isOpen || this._trigger('beforeClose', event) === false) {
                return;
            }
            this._isOpen = false;
            this._focusedElement = null;
            this._destroyOverlay();
            this._untrackInstance();
            if (!this.opener.filter(':focusable').focus().length) {
                try {
                    activeElement = this.document[0].activeElement;
                    if (activeElement && activeElement.nodeName.toLowerCase() !== 'body') {
                        $(activeElement).blur();
                    }
                } catch (error) {
                }
            }
            this._hide(this.uiDialog, this.options.hide, function () {
                that._trigger('close', event);
            });
        },
        isOpen: function () {
            return this._isOpen;
        },
        moveToTop: function () {
            this._moveToTop();
        },
        _moveToTop: function (event, silent) {
            var moved = false, zIndices = this.uiDialog.siblings('.ui-front:visible').map(function () {
                    return +$(this).css('z-index');
                }).get(), zIndexMax = Math.max.apply(null, zIndices);
            if (zIndexMax >= +this.uiDialog.css('z-index')) {
                this.uiDialog.css('z-index', zIndexMax + 1);
                moved = true;
            }
            if (moved && !silent) {
                this._trigger('focus', event);
            }
            return moved;
        },
        open: function () {
            var that = this;
            if (this._isOpen) {
                if (this._moveToTop()) {
                    this._focusTabbable();
                }
                return;
            }
            this._isOpen = true;
            this.opener = $(this.document[0].activeElement);
            this._size();
            this._position();
            this._createOverlay();
            this._moveToTop(null, true);
            if (this.overlay) {
                this.overlay.css('z-index', this.uiDialog.css('z-index') - 1);
            }
            this._show(this.uiDialog, this.options.show, function () {
                that._focusTabbable();
                that._trigger('focus');
            });
            this._makeFocusTarget();
            this._trigger('open');
        },
        _focusTabbable: function () {
            var hasFocus = this._focusedElement;
            if (!hasFocus) {
                hasFocus = this.element.find('[autofocus]');
            }
            if (!hasFocus.length) {
                hasFocus = this.element.find(':tabbable');
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialogButtonPane.find(':tabbable');
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialogTitlebarClose.filter(':tabbable');
            }
            if (!hasFocus.length) {
                hasFocus = this.uiDialog;
            }
            hasFocus.eq(0).focus();
        },
        _keepFocus: function (event) {
            function checkFocus() {
                var activeElement = this.document[0].activeElement, isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                if (!isActive) {
                    this._focusTabbable();
                }
            }
            event.preventDefault();
            checkFocus.call(this);
            this._delay(checkFocus);
        },
        _createWrapper: function () {
            this.uiDialog = $('<div>').addClass('ui-dialog ui-widget ui-widget-content ui-corner-all ui-front ' + this.options.dialogClass).hide().attr({
                tabIndex: -1,
                role: 'dialog'
            }).appendTo(this._appendTo());
            this._on(this.uiDialog, {
                keydown: function (event) {
                    if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                        event.preventDefault();
                        this.close(event);
                        return;
                    }
                    if (event.keyCode !== $.ui.keyCode.TAB || event.isDefaultPrevented()) {
                        return;
                    }
                    var tabbables = this.uiDialog.find(':tabbable'), first = tabbables.filter(':first'), last = tabbables.filter(':last');
                    if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
                        this._delay(function () {
                            first.focus();
                        });
                        event.preventDefault();
                    } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                        this._delay(function () {
                            last.focus();
                        });
                        event.preventDefault();
                    }
                },
                mousedown: function (event) {
                    if (this._moveToTop(event)) {
                        this._focusTabbable();
                    }
                }
            });
            if (!this.element.find('[aria-describedby]').length) {
                this.uiDialog.attr({ 'aria-describedby': this.element.uniqueId().attr('id') });
            }
        },
        _createTitlebar: function () {
            var uiDialogTitle;
            this.uiDialogTitlebar = $('<div>').addClass('ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix').prependTo(this.uiDialog);
            this._on(this.uiDialogTitlebar, {
                mousedown: function (event) {
                    if (!$(event.target).closest('.ui-dialog-titlebar-close')) {
                        this.uiDialog.focus();
                    }
                }
            });
            this.uiDialogTitlebarClose = $('<button type=\'button\'></button>').button({
                label: this.options.closeText,
                icons: { primary: 'ui-icon-closethick' },
                text: false
            }).addClass('ui-dialog-titlebar-close').appendTo(this.uiDialogTitlebar);
            this._on(this.uiDialogTitlebarClose, {
                click: function (event) {
                    event.preventDefault();
                    this.close(event);
                }
            });
            uiDialogTitle = $('<span>').uniqueId().addClass('ui-dialog-title').prependTo(this.uiDialogTitlebar);
            this._title(uiDialogTitle);
            this.uiDialog.attr({ 'aria-labelledby': uiDialogTitle.attr('id') });
        },
        _title: function (title) {
            if (!this.options.title) {
                title.html('&#160;');
            }
            title.text(this.options.title);
        },
        _createButtonPane: function () {
            this.uiDialogButtonPane = $('<div>').addClass('ui-dialog-buttonpane ui-widget-content ui-helper-clearfix');
            this.uiButtonSet = $('<div>').addClass('ui-dialog-buttonset').appendTo(this.uiDialogButtonPane);
            this._createButtons();
        },
        _createButtons: function () {
            var that = this, buttons = this.options.buttons;
            this.uiDialogButtonPane.remove();
            this.uiButtonSet.empty();
            if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {
                this.uiDialog.removeClass('ui-dialog-buttons');
                return;
            }
            $.each(buttons, function (name, props) {
                var click, buttonOptions;
                props = $.isFunction(props) ? {
                    click: props,
                    text: name
                } : props;
                props = $.extend({ type: 'button' }, props);
                click = props.click;
                props.click = function () {
                    click.apply(that.element[0], arguments);
                };
                buttonOptions = {
                    icons: props.icons,
                    text: props.showText
                };
                delete props.icons;
                delete props.showText;
                $('<button></button>', props).button(buttonOptions).appendTo(that.uiButtonSet);
            });
            this.uiDialog.addClass('ui-dialog-buttons');
            this.uiDialogButtonPane.appendTo(this.uiDialog);
        },
        _makeDraggable: function () {
            var that = this, options = this.options;
            function filteredUi(ui) {
                return {
                    position: ui.position,
                    offset: ui.offset
                };
            }
            this.uiDialog.draggable({
                cancel: '.ui-dialog-content, .ui-dialog-titlebar-close',
                handle: '.ui-dialog-titlebar',
                containment: 'document',
                start: function (event, ui) {
                    $(this).addClass('ui-dialog-dragging');
                    that._blockFrames();
                    that._trigger('dragStart', event, filteredUi(ui));
                },
                drag: function (event, ui) {
                    that._trigger('drag', event, filteredUi(ui));
                },
                stop: function (event, ui) {
                    var left = ui.offset.left - that.document.scrollLeft(), top = ui.offset.top - that.document.scrollTop();
                    options.position = {
                        my: 'left top',
                        at: 'left' + (left >= 0 ? '+' : '') + left + ' ' + 'top' + (top >= 0 ? '+' : '') + top,
                        of: that.window
                    };
                    $(this).removeClass('ui-dialog-dragging');
                    that._unblockFrames();
                    that._trigger('dragStop', event, filteredUi(ui));
                }
            });
        },
        _makeResizable: function () {
            var that = this, options = this.options, handles = options.resizable, position = this.uiDialog.css('position'), resizeHandles = typeof handles === 'string' ? handles : 'n,e,s,w,se,sw,ne,nw';
            function filteredUi(ui) {
                return {
                    originalPosition: ui.originalPosition,
                    originalSize: ui.originalSize,
                    position: ui.position,
                    size: ui.size
                };
            }
            this.uiDialog.resizable({
                cancel: '.ui-dialog-content',
                containment: 'document',
                alsoResize: this.element,
                maxWidth: options.maxWidth,
                maxHeight: options.maxHeight,
                minWidth: options.minWidth,
                minHeight: this._minHeight(),
                handles: resizeHandles,
                start: function (event, ui) {
                    $(this).addClass('ui-dialog-resizing');
                    that._blockFrames();
                    that._trigger('resizeStart', event, filteredUi(ui));
                },
                resize: function (event, ui) {
                    that._trigger('resize', event, filteredUi(ui));
                },
                stop: function (event, ui) {
                    var offset = that.uiDialog.offset(), left = offset.left - that.document.scrollLeft(), top = offset.top - that.document.scrollTop();
                    options.height = that.uiDialog.height();
                    options.width = that.uiDialog.width();
                    options.position = {
                        my: 'left top',
                        at: 'left' + (left >= 0 ? '+' : '') + left + ' ' + 'top' + (top >= 0 ? '+' : '') + top,
                        of: that.window
                    };
                    $(this).removeClass('ui-dialog-resizing');
                    that._unblockFrames();
                    that._trigger('resizeStop', event, filteredUi(ui));
                }
            }).css('position', position);
        },
        _trackFocus: function () {
            this._on(this.widget(), {
                focusin: function (event) {
                    this._makeFocusTarget();
                    this._focusedElement = $(event.target);
                }
            });
        },
        _makeFocusTarget: function () {
            this._untrackInstance();
            this._trackingInstances().unshift(this);
        },
        _untrackInstance: function () {
            var instances = this._trackingInstances(), exists = $.inArray(this, instances);
            if (exists !== -1) {
                instances.splice(exists, 1);
            }
        },
        _trackingInstances: function () {
            var instances = this.document.data('ui-dialog-instances');
            if (!instances) {
                instances = [];
                this.document.data('ui-dialog-instances', instances);
            }
            return instances;
        },
        _minHeight: function () {
            var options = this.options;
            return options.height === 'auto' ? options.minHeight : Math.min(options.minHeight, options.height);
        },
        _position: function () {
            var isVisible = this.uiDialog.is(':visible');
            if (!isVisible) {
                this.uiDialog.show();
            }
            this.uiDialog.position(this.options.position);
            if (!isVisible) {
                this.uiDialog.hide();
            }
        },
        _setOptions: function (options) {
            var that = this, resize = false, resizableOptions = {};
            $.each(options, function (key, value) {
                that._setOption(key, value);
                if (key in that.sizeRelatedOptions) {
                    resize = true;
                }
                if (key in that.resizableRelatedOptions) {
                    resizableOptions[key] = value;
                }
            });
            if (resize) {
                this._size();
                this._position();
            }
            if (this.uiDialog.is(':data(ui-resizable)')) {
                this.uiDialog.resizable('option', resizableOptions);
            }
        },
        _setOption: function (key, value) {
            var isDraggable, isResizable, uiDialog = this.uiDialog;
            if (key === 'dialogClass') {
                uiDialog.removeClass(this.options.dialogClass).addClass(value);
            }
            if (key === 'disabled') {
                return;
            }
            this._super(key, value);
            if (key === 'appendTo') {
                this.uiDialog.appendTo(this._appendTo());
            }
            if (key === 'buttons') {
                this._createButtons();
            }
            if (key === 'closeText') {
                this.uiDialogTitlebarClose.button({ label: '' + value });
            }
            if (key === 'draggable') {
                isDraggable = uiDialog.is(':data(ui-draggable)');
                if (isDraggable && !value) {
                    uiDialog.draggable('destroy');
                }
                if (!isDraggable && value) {
                    this._makeDraggable();
                }
            }
            if (key === 'position') {
                this._position();
            }
            if (key === 'resizable') {
                isResizable = uiDialog.is(':data(ui-resizable)');
                if (isResizable && !value) {
                    uiDialog.resizable('destroy');
                }
                if (isResizable && typeof value === 'string') {
                    uiDialog.resizable('option', 'handles', value);
                }
                if (!isResizable && value !== false) {
                    this._makeResizable();
                }
            }
            if (key === 'title') {
                this._title(this.uiDialogTitlebar.find('.ui-dialog-title'));
            }
        },
        _size: function () {
            var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
            this.element.show().css({
                width: 'auto',
                minHeight: 0,
                maxHeight: 'none',
                height: 0
            });
            if (options.minWidth > options.width) {
                options.width = options.minWidth;
            }
            nonContentHeight = this.uiDialog.css({
                height: 'auto',
                width: options.width
            }).outerHeight();
            minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
            maxContentHeight = typeof options.maxHeight === 'number' ? Math.max(0, options.maxHeight - nonContentHeight) : 'none';
            if (options.height === 'auto') {
                this.element.css({
                    minHeight: minContentHeight,
                    maxHeight: maxContentHeight,
                    height: 'auto'
                });
            } else {
                this.element.height(Math.max(0, options.height - nonContentHeight));
            }
            if (this.uiDialog.is(':data(ui-resizable)')) {
                this.uiDialog.resizable('option', 'minHeight', this._minHeight());
            }
        },
        _blockFrames: function () {
            this.iframeBlocks = this.document.find('iframe').map(function () {
                var iframe = $(this);
                return $('<div>').css({
                    position: 'absolute',
                    width: iframe.outerWidth(),
                    height: iframe.outerHeight()
                }).appendTo(iframe.parent()).offset(iframe.offset())[0];
            });
        },
        _unblockFrames: function () {
            if (this.iframeBlocks) {
                this.iframeBlocks.remove();
                delete this.iframeBlocks;
            }
        },
        _allowInteraction: function (event) {
            if ($(event.target).closest('.ui-dialog').length) {
                return true;
            }
            return !!$(event.target).closest('.ui-datepicker').length;
        },
        _createOverlay: function () {
            if (!this.options.modal) {
                return;
            }
            var isOpening = true;
            this._delay(function () {
                isOpening = false;
            });
            if (!this.document.data('ui-dialog-overlays')) {
                this._on(this.document, {
                    focusin: function (event) {
                        if (isOpening) {
                            return;
                        }
                        if (!this._allowInteraction(event)) {
                            event.preventDefault();
                            this._trackingInstances()[0]._focusTabbable();
                        }
                    }
                });
            }
            this.overlay = $('<div>').addClass('ui-widget-overlay ui-front').appendTo(this._appendTo());
            this._on(this.overlay, { mousedown: '_keepFocus' });
            this.document.data('ui-dialog-overlays', (this.document.data('ui-dialog-overlays') || 0) + 1);
        },
        _destroyOverlay: function () {
            if (!this.options.modal) {
                return;
            }
            if (this.overlay) {
                var overlays = this.document.data('ui-dialog-overlays') - 1;
                if (!overlays) {
                    this.document.unbind('focusin').removeData('ui-dialog-overlays');
                } else {
                    this.document.data('ui-dialog-overlays', overlays);
                }
                this.overlay.remove();
                this.overlay = null;
            }
        }
    });
    $.widget('ui.droppable', {
        version: '1.11.4',
        widgetEventPrefix: 'drop',
        options: {
            accept: '*',
            activeClass: false,
            addClasses: true,
            greedy: false,
            hoverClass: false,
            scope: 'default',
            tolerance: 'intersect',
            activate: null,
            deactivate: null,
            drop: null,
            out: null,
            over: null
        },
        _create: function () {
            var proportions, o = this.options, accept = o.accept;
            this.isover = false;
            this.isout = true;
            this.accept = $.isFunction(accept) ? accept : function (d) {
                return d.is(accept);
            };
            this.proportions = function () {
                if (arguments.length) {
                    proportions = arguments[0];
                } else {
                    return proportions ? proportions : proportions = {
                        width: this.element[0].offsetWidth,
                        height: this.element[0].offsetHeight
                    };
                }
            };
            this._addToManager(o.scope);
            o.addClasses && this.element.addClass('ui-droppable');
        },
        _addToManager: function (scope) {
            $.ui.ddmanager.droppables[scope] = $.ui.ddmanager.droppables[scope] || [];
            $.ui.ddmanager.droppables[scope].push(this);
        },
        _splice: function (drop) {
            var i = 0;
            for (; i < drop.length; i++) {
                if (drop[i] === this) {
                    drop.splice(i, 1);
                }
            }
        },
        _destroy: function () {
            var drop = $.ui.ddmanager.droppables[this.options.scope];
            this._splice(drop);
            this.element.removeClass('ui-droppable ui-droppable-disabled');
        },
        _setOption: function (key, value) {
            if (key === 'accept') {
                this.accept = $.isFunction(value) ? value : function (d) {
                    return d.is(value);
                };
            } else if (key === 'scope') {
                var drop = $.ui.ddmanager.droppables[this.options.scope];
                this._splice(drop);
                this._addToManager(value);
            }
            this._super(key, value);
        },
        _activate: function (event) {
            var draggable = $.ui.ddmanager.current;
            if (this.options.activeClass) {
                this.element.addClass(this.options.activeClass);
            }
            if (draggable) {
                this._trigger('activate', event, this.ui(draggable));
            }
        },
        _deactivate: function (event) {
            var draggable = $.ui.ddmanager.current;
            if (this.options.activeClass) {
                this.element.removeClass(this.options.activeClass);
            }
            if (draggable) {
                this._trigger('deactivate', event, this.ui(draggable));
            }
        },
        _over: function (event) {
            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return;
            }
            if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                if (this.options.hoverClass) {
                    this.element.addClass(this.options.hoverClass);
                }
                this._trigger('over', event, this.ui(draggable));
            }
        },
        _out: function (event) {
            var draggable = $.ui.ddmanager.current;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return;
            }
            if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                if (this.options.hoverClass) {
                    this.element.removeClass(this.options.hoverClass);
                }
                this._trigger('out', event, this.ui(draggable));
            }
        },
        _drop: function (event, custom) {
            var draggable = custom || $.ui.ddmanager.current, childrenIntersection = false;
            if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                return false;
            }
            this.element.find(':data(ui-droppable)').not('.ui-draggable-dragging').each(function () {
                var inst = $(this).droppable('instance');
                if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, { offset: inst.element.offset() }), inst.options.tolerance, event)) {
                    childrenIntersection = true;
                    return false;
                }
            });
            if (childrenIntersection) {
                return false;
            }
            if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                if (this.options.activeClass) {
                    this.element.removeClass(this.options.activeClass);
                }
                if (this.options.hoverClass) {
                    this.element.removeClass(this.options.hoverClass);
                }
                this._trigger('drop', event, this.ui(draggable));
                return this.element;
            }
            return false;
        },
        ui: function (c) {
            return {
                draggable: c.currentItem || c.element,
                helper: c.helper,
                position: c.position,
                offset: c.positionAbs
            };
        }
    });
    $.ui.intersect = function () {
        function isOverAxis(x, reference, size) {
            return x >= reference && x < reference + size;
        }
        return function (draggable, droppable, toleranceMode, event) {
            if (!droppable.offset) {
                return false;
            }
            var x1 = (draggable.positionAbs || draggable.position.absolute).left + draggable.margins.left, y1 = (draggable.positionAbs || draggable.position.absolute).top + draggable.margins.top, x2 = x1 + draggable.helperProportions.width, y2 = y1 + draggable.helperProportions.height, l = droppable.offset.left, t = droppable.offset.top, r = l + droppable.proportions().width, b = t + droppable.proportions().height;
            switch (toleranceMode) {
            case 'fit':
                return l <= x1 && x2 <= r && t <= y1 && y2 <= b;
            case 'intersect':
                return l < x1 + draggable.helperProportions.width / 2 && x2 - draggable.helperProportions.width / 2 < r && t < y1 + draggable.helperProportions.height / 2 && y2 - draggable.helperProportions.height / 2 < b;
            case 'pointer':
                return isOverAxis(event.pageY, t, droppable.proportions().height) && isOverAxis(event.pageX, l, droppable.proportions().width);
            case 'touch':
                return (y1 >= t && y1 <= b || y2 >= t && y2 <= b || y1 < t && y2 > b) && (x1 >= l && x1 <= r || x2 >= l && x2 <= r || x1 < l && x2 > r);
            default:
                return false;
            }
        };
    }();
    $.ui.ddmanager = {
        current: null,
        droppables: { 'default': [] },
        prepareOffsets: function (t, event) {
            var i, j, m = $.ui.ddmanager.droppables[t.options.scope] || [], type = event ? event.type : null, list = (t.currentItem || t.element).find(':data(ui-droppable)').addBack();
            droppablesLoop:
                for (i = 0; i < m.length; i++) {
                    if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {
                        continue;
                    }
                    for (j = 0; j < list.length; j++) {
                        if (list[j] === m[i].element[0]) {
                            m[i].proportions().height = 0;
                            continue droppablesLoop;
                        }
                    }
                    m[i].visible = m[i].element.css('display') !== 'none';
                    if (!m[i].visible) {
                        continue;
                    }
                    if (type === 'mousedown') {
                        m[i]._activate.call(m[i], event);
                    }
                    m[i].offset = m[i].element.offset();
                    m[i].proportions({
                        width: m[i].element[0].offsetWidth,
                        height: m[i].element[0].offsetHeight
                    });
                }
        },
        drop: function (draggable, event) {
            var dropped = false;
            $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function () {
                if (!this.options) {
                    return;
                }
                if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance, event)) {
                    dropped = this._drop.call(this, event) || dropped;
                }
                if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                    this.isout = true;
                    this.isover = false;
                    this._deactivate.call(this, event);
                }
            });
            return dropped;
        },
        dragStart: function (draggable, event) {
            draggable.element.parentsUntil('body').bind('scroll.droppable', function () {
                if (!draggable.options.refreshPositions) {
                    $.ui.ddmanager.prepareOffsets(draggable, event);
                }
            });
        },
        drag: function (draggable, event) {
            if (draggable.options.refreshPositions) {
                $.ui.ddmanager.prepareOffsets(draggable, event);
            }
            $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function () {
                if (this.options.disabled || this.greedyChild || !this.visible) {
                    return;
                }
                var parentInstance, scope, parent, intersects = $.ui.intersect(draggable, this, this.options.tolerance, event), c = !intersects && this.isover ? 'isout' : intersects && !this.isover ? 'isover' : null;
                if (!c) {
                    return;
                }
                if (this.options.greedy) {
                    scope = this.options.scope;
                    parent = this.element.parents(':data(ui-droppable)').filter(function () {
                        return $(this).droppable('instance').options.scope === scope;
                    });
                    if (parent.length) {
                        parentInstance = $(parent[0]).droppable('instance');
                        parentInstance.greedyChild = c === 'isover';
                    }
                }
                if (parentInstance && c === 'isover') {
                    parentInstance.isover = false;
                    parentInstance.isout = true;
                    parentInstance._out.call(parentInstance, event);
                }
                this[c] = true;
                this[c === 'isout' ? 'isover' : 'isout'] = false;
                this[c === 'isover' ? '_over' : '_out'].call(this, event);
                if (parentInstance && c === 'isout') {
                    parentInstance.isout = false;
                    parentInstance.isover = true;
                    parentInstance._over.call(parentInstance, event);
                }
            });
        },
        dragStop: function (draggable, event) {
            draggable.element.parentsUntil('body').unbind('scroll.droppable');
            if (!draggable.options.refreshPositions) {
                $.ui.ddmanager.prepareOffsets(draggable, event);
            }
        }
    };
    var droppable = $.ui.droppable;
    var dataSpace = 'ui-effects-', jQuery = $;
    $.effects = { effect: {} };
    (function (jQuery, undefined) {
        var stepHooks = 'backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor', rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, stringParsers = [
                {
                    re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                    parse: function (execResult) {
                        return [
                            execResult[1],
                            execResult[2],
                            execResult[3],
                            execResult[4]
                        ];
                    }
                },
                {
                    re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                    parse: function (execResult) {
                        return [
                            execResult[1] * 2.55,
                            execResult[2] * 2.55,
                            execResult[3] * 2.55,
                            execResult[4]
                        ];
                    }
                },
                {
                    re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                    parse: function (execResult) {
                        return [
                            parseInt(execResult[1], 16),
                            parseInt(execResult[2], 16),
                            parseInt(execResult[3], 16)
                        ];
                    }
                },
                {
                    re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                    parse: function (execResult) {
                        return [
                            parseInt(execResult[1] + execResult[1], 16),
                            parseInt(execResult[2] + execResult[2], 16),
                            parseInt(execResult[3] + execResult[3], 16)
                        ];
                    }
                },
                {
                    re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                    space: 'hsla',
                    parse: function (execResult) {
                        return [
                            execResult[1],
                            execResult[2] / 100,
                            execResult[3] / 100,
                            execResult[4]
                        ];
                    }
                }
            ], color = jQuery.Color = function (color, green, blue, alpha) {
                return new jQuery.Color.fn.parse(color, green, blue, alpha);
            }, spaces = {
                rgba: {
                    props: {
                        red: {
                            idx: 0,
                            type: 'byte'
                        },
                        green: {
                            idx: 1,
                            type: 'byte'
                        },
                        blue: {
                            idx: 2,
                            type: 'byte'
                        }
                    }
                },
                hsla: {
                    props: {
                        hue: {
                            idx: 0,
                            type: 'degrees'
                        },
                        saturation: {
                            idx: 1,
                            type: 'percent'
                        },
                        lightness: {
                            idx: 2,
                            type: 'percent'
                        }
                    }
                }
            }, propTypes = {
                'byte': {
                    floor: true,
                    max: 255
                },
                'percent': { max: 1 },
                'degrees': {
                    mod: 360,
                    floor: true
                }
            }, support = color.support = {}, supportElem = jQuery('<p>')[0], colors, each = jQuery.each;
        supportElem.style.cssText = 'background-color:rgba(1,1,1,.5)';
        support.rgba = supportElem.style.backgroundColor.indexOf('rgba') > -1;
        each(spaces, function (spaceName, space) {
            space.cache = '_' + spaceName;
            space.props.alpha = {
                idx: 3,
                type: 'percent',
                def: 1
            };
        });
        function clamp(value, prop, allowEmpty) {
            var type = propTypes[prop.type] || {};
            if (value == null) {
                return allowEmpty || !prop.def ? null : prop.def;
            }
            value = type.floor ? ~~value : parseFloat(value);
            if (isNaN(value)) {
                return prop.def;
            }
            if (type.mod) {
                return (value + type.mod) % type.mod;
            }
            return 0 > value ? 0 : type.max < value ? type.max : value;
        }
        function stringParse(string) {
            var inst = color(), rgba = inst._rgba = [];
            string = string.toLowerCase();
            each(stringParsers, function (i, parser) {
                var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || 'rgba';
                if (values) {
                    parsed = inst[spaceName](values);
                    inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                    rgba = inst._rgba = parsed._rgba;
                    return false;
                }
            });
            if (rgba.length) {
                if (rgba.join() === '0,0,0,0') {
                    jQuery.extend(rgba, colors.transparent);
                }
                return inst;
            }
            return colors[string];
        }
        color.fn = jQuery.extend(color.prototype, {
            parse: function (red, green, blue, alpha) {
                if (red === undefined) {
                    this._rgba = [
                        null,
                        null,
                        null,
                        null
                    ];
                    return this;
                }
                if (red.jquery || red.nodeType) {
                    red = jQuery(red).css(green);
                    green = undefined;
                }
                var inst = this, type = jQuery.type(red), rgba = this._rgba = [];
                if (green !== undefined) {
                    red = [
                        red,
                        green,
                        blue,
                        alpha
                    ];
                    type = 'array';
                }
                if (type === 'string') {
                    return this.parse(stringParse(red) || colors._default);
                }
                if (type === 'array') {
                    each(spaces.rgba.props, function (key, prop) {
                        rgba[prop.idx] = clamp(red[prop.idx], prop);
                    });
                    return this;
                }
                if (type === 'object') {
                    if (red instanceof color) {
                        each(spaces, function (spaceName, space) {
                            if (red[space.cache]) {
                                inst[space.cache] = red[space.cache].slice();
                            }
                        });
                    } else {
                        each(spaces, function (spaceName, space) {
                            var cache = space.cache;
                            each(space.props, function (key, prop) {
                                if (!inst[cache] && space.to) {
                                    if (key === 'alpha' || red[key] == null) {
                                        return;
                                    }
                                    inst[cache] = space.to(inst._rgba);
                                }
                                inst[cache][prop.idx] = clamp(red[key], prop, true);
                            });
                            if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                                inst[cache][3] = 1;
                                if (space.from) {
                                    inst._rgba = space.from(inst[cache]);
                                }
                            }
                        });
                    }
                    return this;
                }
            },
            is: function (compare) {
                var is = color(compare), same = true, inst = this;
                each(spaces, function (_, space) {
                    var localCache, isCache = is[space.cache];
                    if (isCache) {
                        localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                        each(space.props, function (_, prop) {
                            if (isCache[prop.idx] != null) {
                                same = isCache[prop.idx] === localCache[prop.idx];
                                return same;
                            }
                        });
                    }
                    return same;
                });
                return same;
            },
            _space: function () {
                var used = [], inst = this;
                each(spaces, function (spaceName, space) {
                    if (inst[space.cache]) {
                        used.push(spaceName);
                    }
                });
                return used.pop();
            },
            transition: function (other, distance) {
                var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = this.alpha() === 0 ? color('transparent') : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice();
                end = end[space.cache];
                each(space.props, function (key, prop) {
                    var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {};
                    if (endValue === null) {
                        return;
                    }
                    if (startValue === null) {
                        result[index] = endValue;
                    } else {
                        if (type.mod) {
                            if (endValue - startValue > type.mod / 2) {
                                startValue += type.mod;
                            } else if (startValue - endValue > type.mod / 2) {
                                startValue -= type.mod;
                            }
                        }
                        result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                    }
                });
                return this[spaceName](result);
            },
            blend: function (opaque) {
                if (this._rgba[3] === 1) {
                    return this;
                }
                var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
                return color(jQuery.map(rgb, function (v, i) {
                    return (1 - a) * blend[i] + a * v;
                }));
            },
            toRgbaString: function () {
                var prefix = 'rgba(', rgba = jQuery.map(this._rgba, function (v, i) {
                        return v == null ? i > 2 ? 1 : 0 : v;
                    });
                if (rgba[3] === 1) {
                    rgba.pop();
                    prefix = 'rgb(';
                }
                return prefix + rgba.join() + ')';
            },
            toHslaString: function () {
                var prefix = 'hsla(', hsla = jQuery.map(this.hsla(), function (v, i) {
                        if (v == null) {
                            v = i > 2 ? 1 : 0;
                        }
                        if (i && i < 3) {
                            v = Math.round(v * 100) + '%';
                        }
                        return v;
                    });
                if (hsla[3] === 1) {
                    hsla.pop();
                    prefix = 'hsl(';
                }
                return prefix + hsla.join() + ')';
            },
            toHexString: function (includeAlpha) {
                var rgba = this._rgba.slice(), alpha = rgba.pop();
                if (includeAlpha) {
                    rgba.push(~~(alpha * 255));
                }
                return '#' + jQuery.map(rgba, function (v) {
                    v = (v || 0).toString(16);
                    return v.length === 1 ? '0' + v : v;
                }).join('');
            },
            toString: function () {
                return this._rgba[3] === 0 ? 'transparent' : this.toRgbaString();
            }
        });
        color.fn.parse.prototype = color.fn;
        function hue2rgb(p, q, h) {
            h = (h + 1) % 1;
            if (h * 6 < 1) {
                return p + (q - p) * h * 6;
            }
            if (h * 2 < 1) {
                return q;
            }
            if (h * 3 < 2) {
                return p + (q - p) * (2 / 3 - h) * 6;
            }
            return p;
        }
        spaces.hsla.to = function (rgba) {
            if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {
                return [
                    null,
                    null,
                    null,
                    rgba[3]
                ];
            }
            var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = add * 0.5, h, s;
            if (min === max) {
                h = 0;
            } else if (r === max) {
                h = 60 * (g - b) / diff + 360;
            } else if (g === max) {
                h = 60 * (b - r) / diff + 120;
            } else {
                h = 60 * (r - g) / diff + 240;
            }
            if (diff === 0) {
                s = 0;
            } else if (l <= 0.5) {
                s = diff / add;
            } else {
                s = diff / (2 - add);
            }
            return [
                Math.round(h) % 360,
                s,
                l,
                a == null ? 1 : a
            ];
        };
        spaces.hsla.from = function (hsla) {
            if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {
                return [
                    null,
                    null,
                    null,
                    hsla[3]
                ];
            }
            var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = l <= 0.5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
            return [
                Math.round(hue2rgb(p, q, h + 1 / 3) * 255),
                Math.round(hue2rgb(p, q, h) * 255),
                Math.round(hue2rgb(p, q, h - 1 / 3) * 255),
                a
            ];
        };
        each(spaces, function (spaceName, space) {
            var props = space.props, cache = space.cache, to = space.to, from = space.from;
            color.fn[spaceName] = function (value) {
                if (to && !this[cache]) {
                    this[cache] = to(this._rgba);
                }
                if (value === undefined) {
                    return this[cache].slice();
                }
                var ret, type = jQuery.type(value), arr = type === 'array' || type === 'object' ? value : arguments, local = this[cache].slice();
                each(props, function (key, prop) {
                    var val = arr[type === 'object' ? key : prop.idx];
                    if (val == null) {
                        val = local[prop.idx];
                    }
                    local[prop.idx] = clamp(val, prop);
                });
                if (from) {
                    ret = color(from(local));
                    ret[cache] = local;
                    return ret;
                } else {
                    return color(local);
                }
            };
            each(props, function (key, prop) {
                if (color.fn[key]) {
                    return;
                }
                color.fn[key] = function (value) {
                    var vtype = jQuery.type(value), fn = key === 'alpha' ? this._hsla ? 'hsla' : 'rgba' : spaceName, local = this[fn](), cur = local[prop.idx], match;
                    if (vtype === 'undefined') {
                        return cur;
                    }
                    if (vtype === 'function') {
                        value = value.call(this, cur);
                        vtype = jQuery.type(value);
                    }
                    if (value == null && prop.empty) {
                        return this;
                    }
                    if (vtype === 'string') {
                        match = rplusequals.exec(value);
                        if (match) {
                            value = cur + parseFloat(match[2]) * (match[1] === '+' ? 1 : -1);
                        }
                    }
                    local[prop.idx] = value;
                    return this[fn](local);
                };
            });
        });
        color.hook = function (hook) {
            var hooks = hook.split(' ');
            each(hooks, function (i, hook) {
                jQuery.cssHooks[hook] = {
                    set: function (elem, value) {
                        var parsed, curElem, backgroundColor = '';
                        if (value !== 'transparent' && (jQuery.type(value) !== 'string' || (parsed = stringParse(value)))) {
                            value = color(parsed || value);
                            if (!support.rgba && value._rgba[3] !== 1) {
                                curElem = hook === 'backgroundColor' ? elem.parentNode : elem;
                                while ((backgroundColor === '' || backgroundColor === 'transparent') && curElem && curElem.style) {
                                    try {
                                        backgroundColor = jQuery.css(curElem, 'backgroundColor');
                                        curElem = curElem.parentNode;
                                    } catch (e) {
                                    }
                                }
                                value = value.blend(backgroundColor && backgroundColor !== 'transparent' ? backgroundColor : '_default');
                            }
                            value = value.toRgbaString();
                        }
                        try {
                            elem.style[hook] = value;
                        } catch (e) {
                        }
                    }
                };
                jQuery.fx.step[hook] = function (fx) {
                    if (!fx.colorInit) {
                        fx.start = color(fx.elem, hook);
                        fx.end = color(fx.end);
                        fx.colorInit = true;
                    }
                    jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                };
            });
        };
        color.hook(stepHooks);
        jQuery.cssHooks.borderColor = {
            expand: function (value) {
                var expanded = {};
                each([
                    'Top',
                    'Right',
                    'Bottom',
                    'Left'
                ], function (i, part) {
                    expanded['border' + part + 'Color'] = value;
                });
                return expanded;
            }
        };
        colors = jQuery.Color.names = {
            aqua: '#00ffff',
            black: '#000000',
            blue: '#0000ff',
            fuchsia: '#ff00ff',
            gray: '#808080',
            green: '#008000',
            lime: '#00ff00',
            maroon: '#800000',
            navy: '#000080',
            olive: '#808000',
            purple: '#800080',
            red: '#ff0000',
            silver: '#c0c0c0',
            teal: '#008080',
            white: '#ffffff',
            yellow: '#ffff00',
            transparent: [
                null,
                null,
                null,
                0
            ],
            _default: '#ffffff'
        };
    }(jQuery));
    (function () {
        var classAnimationActions = [
                'add',
                'remove',
                'toggle'
            ], shorthandStyles = {
                border: 1,
                borderBottom: 1,
                borderColor: 1,
                borderLeft: 1,
                borderRight: 1,
                borderTop: 1,
                borderWidth: 1,
                margin: 1,
                padding: 1
            };
        $.each([
            'borderLeftStyle',
            'borderRightStyle',
            'borderBottomStyle',
            'borderTopStyle'
        ], function (_, prop) {
            $.fx.step[prop] = function (fx) {
                if (fx.end !== 'none' && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {
                    jQuery.style(fx.elem, prop, fx.end);
                    fx.setAttr = true;
                }
            };
        });
        function getElementStyles(elem) {
            var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
            if (style && style.length && style[0] && style[style[0]]) {
                len = style.length;
                while (len--) {
                    key = style[len];
                    if (typeof style[key] === 'string') {
                        styles[$.camelCase(key)] = style[key];
                    }
                }
            } else {
                for (key in style) {
                    if (typeof style[key] === 'string') {
                        styles[key] = style[key];
                    }
                }
            }
            return styles;
        }
        function styleDifference(oldStyle, newStyle) {
            var diff = {}, name, value;
            for (name in newStyle) {
                value = newStyle[name];
                if (oldStyle[name] !== value) {
                    if (!shorthandStyles[name]) {
                        if ($.fx.step[name] || !isNaN(parseFloat(value))) {
                            diff[name] = value;
                        }
                    }
                }
            }
            return diff;
        }
        if (!$.fn.addBack) {
            $.fn.addBack = function (selector) {
                return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
            };
        }
        $.effects.animateClass = function (value, duration, easing, callback) {
            var o = $.speed(duration, easing, callback);
            return this.queue(function () {
                var animated = $(this), baseClass = animated.attr('class') || '', applyClassChange, allAnimations = o.children ? animated.find('*').addBack() : animated;
                allAnimations = allAnimations.map(function () {
                    var el = $(this);
                    return {
                        el: el,
                        start: getElementStyles(this)
                    };
                });
                applyClassChange = function () {
                    $.each(classAnimationActions, function (i, action) {
                        if (value[action]) {
                            animated[action + 'Class'](value[action]);
                        }
                    });
                };
                applyClassChange();
                allAnimations = allAnimations.map(function () {
                    this.end = getElementStyles(this.el[0]);
                    this.diff = styleDifference(this.start, this.end);
                    return this;
                });
                animated.attr('class', baseClass);
                allAnimations = allAnimations.map(function () {
                    var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, {
                            queue: false,
                            complete: function () {
                                dfd.resolve(styleInfo);
                            }
                        });
                    this.el.animate(this.diff, opts);
                    return dfd.promise();
                });
                $.when.apply($, allAnimations.get()).done(function () {
                    applyClassChange();
                    $.each(arguments, function () {
                        var el = this.el;
                        $.each(this.diff, function (key) {
                            el.css(key, '');
                        });
                    });
                    o.complete.call(animated[0]);
                });
            });
        };
        $.fn.extend({
            addClass: function (orig) {
                return function (classNames, speed, easing, callback) {
                    return speed ? $.effects.animateClass.call(this, { add: classNames }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.addClass),
            removeClass: function (orig) {
                return function (classNames, speed, easing, callback) {
                    return arguments.length > 1 ? $.effects.animateClass.call(this, { remove: classNames }, speed, easing, callback) : orig.apply(this, arguments);
                };
            }($.fn.removeClass),
            toggleClass: function (orig) {
                return function (classNames, force, speed, easing, callback) {
                    if (typeof force === 'boolean' || force === undefined) {
                        if (!speed) {
                            return orig.apply(this, arguments);
                        } else {
                            return $.effects.animateClass.call(this, force ? { add: classNames } : { remove: classNames }, speed, easing, callback);
                        }
                    } else {
                        return $.effects.animateClass.call(this, { toggle: classNames }, force, speed, easing);
                    }
                };
            }($.fn.toggleClass),
            switchClass: function (remove, add, speed, easing, callback) {
                return $.effects.animateClass.call(this, {
                    add: add,
                    remove: remove
                }, speed, easing, callback);
            }
        });
    }());
    (function () {
        $.extend($.effects, {
            version: '1.11.4',
            save: function (element, set) {
                for (var i = 0; i < set.length; i++) {
                    if (set[i] !== null) {
                        element.data(dataSpace + set[i], element[0].style[set[i]]);
                    }
                }
            },
            restore: function (element, set) {
                var val, i;
                for (i = 0; i < set.length; i++) {
                    if (set[i] !== null) {
                        val = element.data(dataSpace + set[i]);
                        if (val === undefined) {
                            val = '';
                        }
                        element.css(set[i], val);
                    }
                }
            },
            setMode: function (el, mode) {
                if (mode === 'toggle') {
                    mode = el.is(':hidden') ? 'show' : 'hide';
                }
                return mode;
            },
            getBaseline: function (origin, original) {
                var y, x;
                switch (origin[0]) {
                case 'top':
                    y = 0;
                    break;
                case 'middle':
                    y = 0.5;
                    break;
                case 'bottom':
                    y = 1;
                    break;
                default:
                    y = origin[0] / original.height;
                }
                switch (origin[1]) {
                case 'left':
                    x = 0;
                    break;
                case 'center':
                    x = 0.5;
                    break;
                case 'right':
                    x = 1;
                    break;
                default:
                    x = origin[1] / original.width;
                }
                return {
                    x: x,
                    y: y
                };
            },
            createWrapper: function (element) {
                if (element.parent().is('.ui-effects-wrapper')) {
                    return element.parent();
                }
                var props = {
                        width: element.outerWidth(true),
                        height: element.outerHeight(true),
                        'float': element.css('float')
                    }, wrapper = $('<div></div>').addClass('ui-effects-wrapper').css({
                        fontSize: '100%',
                        background: 'transparent',
                        border: 'none',
                        margin: 0,
                        padding: 0
                    }), size = {
                        width: element.width(),
                        height: element.height()
                    }, active = document.activeElement;
                try {
                    active.id;
                } catch (e) {
                    active = document.body;
                }
                element.wrap(wrapper);
                if (element[0] === active || $.contains(element[0], active)) {
                    $(active).focus();
                }
                wrapper = element.parent();
                if (element.css('position') === 'static') {
                    wrapper.css({ position: 'relative' });
                    element.css({ position: 'relative' });
                } else {
                    $.extend(props, {
                        position: element.css('position'),
                        zIndex: element.css('z-index')
                    });
                    $.each([
                        'top',
                        'left',
                        'bottom',
                        'right'
                    ], function (i, pos) {
                        props[pos] = element.css(pos);
                        if (isNaN(parseInt(props[pos], 10))) {
                            props[pos] = 'auto';
                        }
                    });
                    element.css({
                        position: 'relative',
                        top: 0,
                        left: 0,
                        right: 'auto',
                        bottom: 'auto'
                    });
                }
                element.css(size);
                return wrapper.css(props).show();
            },
            removeWrapper: function (element) {
                var active = document.activeElement;
                if (element.parent().is('.ui-effects-wrapper')) {
                    element.parent().replaceWith(element);
                    if (element[0] === active || $.contains(element[0], active)) {
                        $(active).focus();
                    }
                }
                return element;
            },
            setTransition: function (element, list, factor, value) {
                value = value || {};
                $.each(list, function (i, x) {
                    var unit = element.cssUnit(x);
                    if (unit[0] > 0) {
                        value[x] = unit[0] * factor + unit[1];
                    }
                });
                return value;
            }
        });
        function _normalizeArguments(effect, options, speed, callback) {
            if ($.isPlainObject(effect)) {
                options = effect;
                effect = effect.effect;
            }
            effect = { effect: effect };
            if (options == null) {
                options = {};
            }
            if ($.isFunction(options)) {
                callback = options;
                speed = null;
                options = {};
            }
            if (typeof options === 'number' || $.fx.speeds[options]) {
                callback = speed;
                speed = options;
                options = {};
            }
            if ($.isFunction(speed)) {
                callback = speed;
                speed = null;
            }
            if (options) {
                $.extend(effect, options);
            }
            speed = speed || options.duration;
            effect.duration = $.fx.off ? 0 : typeof speed === 'number' ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
            effect.complete = callback || options.complete;
            return effect;
        }
        function standardAnimationOption(option) {
            if (!option || typeof option === 'number' || $.fx.speeds[option]) {
                return true;
            }
            if (typeof option === 'string' && !$.effects.effect[option]) {
                return true;
            }
            if ($.isFunction(option)) {
                return true;
            }
            if (typeof option === 'object' && !option.effect) {
                return true;
            }
            return false;
        }
        $.fn.extend({
            effect: function () {
                var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.effects.effect[args.effect];
                if ($.fx.off || !effectMethod) {
                    if (mode) {
                        return this[mode](args.duration, args.complete);
                    } else {
                        return this.each(function () {
                            if (args.complete) {
                                args.complete.call(this);
                            }
                        });
                    }
                }
                function run(next) {
                    var elem = $(this), complete = args.complete, mode = args.mode;
                    function done() {
                        if ($.isFunction(complete)) {
                            complete.call(elem[0]);
                        }
                        if ($.isFunction(next)) {
                            next();
                        }
                    }
                    if (elem.is(':hidden') ? mode === 'hide' : mode === 'show') {
                        elem[mode]();
                        done();
                    } else {
                        effectMethod.call(elem[0], args, done);
                    }
                }
                return queue === false ? this.each(run) : this.queue(queue || 'fx', run);
            },
            show: function (orig) {
                return function (option) {
                    if (standardAnimationOption(option)) {
                        return orig.apply(this, arguments);
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = 'show';
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.show),
            hide: function (orig) {
                return function (option) {
                    if (standardAnimationOption(option)) {
                        return orig.apply(this, arguments);
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = 'hide';
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.hide),
            toggle: function (orig) {
                return function (option) {
                    if (standardAnimationOption(option) || typeof option === 'boolean') {
                        return orig.apply(this, arguments);
                    } else {
                        var args = _normalizeArguments.apply(this, arguments);
                        args.mode = 'toggle';
                        return this.effect.call(this, args);
                    }
                };
            }($.fn.toggle),
            cssUnit: function (key) {
                var style = this.css(key), val = [];
                $.each([
                    'em',
                    'px',
                    '%',
                    'pt'
                ], function (i, unit) {
                    if (style.indexOf(unit) > 0) {
                        val = [
                            parseFloat(style),
                            unit
                        ];
                    }
                });
                return val;
            }
        });
    }());
    (function () {
        var baseEasings = {};
        $.each([
            'Quad',
            'Cubic',
            'Quart',
            'Quint',
            'Expo'
        ], function (i, name) {
            baseEasings[name] = function (p) {
                return Math.pow(p, i + 2);
            };
        });
        $.extend(baseEasings, {
            Sine: function (p) {
                return 1 - Math.cos(p * Math.PI / 2);
            },
            Circ: function (p) {
                return 1 - Math.sqrt(1 - p * p);
            },
            Elastic: function (p) {
                return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);
            },
            Back: function (p) {
                return p * p * (3 * p - 2);
            },
            Bounce: function (p) {
                var pow2, bounce = 4;
                while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {
                }
                return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);
            }
        });
        $.each(baseEasings, function (name, easeIn) {
            $.easing['easeIn' + name] = easeIn;
            $.easing['easeOut' + name] = function (p) {
                return 1 - easeIn(1 - p);
            };
            $.easing['easeInOut' + name] = function (p) {
                return p < 0.5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;
            };
        });
    }());
    var effect = $.effects;
    var effectBlind = $.effects.effect.blind = function (o, done) {
        var el = $(this), rvertical = /up|down|vertical/, rpositivemotion = /up|left|vertical|horizontal/, props = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'height',
                'width'
            ], mode = $.effects.setMode(el, o.mode || 'hide'), direction = o.direction || 'up', vertical = rvertical.test(direction), ref = vertical ? 'height' : 'width', ref2 = vertical ? 'top' : 'left', motion = rpositivemotion.test(direction), animation = {}, show = mode === 'show', wrapper, distance, margin;
        if (el.parent().is('.ui-effects-wrapper')) {
            $.effects.save(el.parent(), props);
        } else {
            $.effects.save(el, props);
        }
        el.show();
        wrapper = $.effects.createWrapper(el).css({ overflow: 'hidden' });
        distance = wrapper[ref]();
        margin = parseFloat(wrapper.css(ref2)) || 0;
        animation[ref] = show ? distance : 0;
        if (!motion) {
            el.css(vertical ? 'bottom' : 'right', 0).css(vertical ? 'top' : 'left', 'auto').css({ position: 'absolute' });
            animation[ref2] = show ? margin : distance + margin;
        }
        if (show) {
            wrapper.css(ref, 0);
            if (!motion) {
                wrapper.css(ref2, margin + distance);
            }
        }
        wrapper.animate(animation, {
            duration: o.duration,
            easing: o.easing,
            queue: false,
            complete: function () {
                if (mode === 'hide') {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            }
        });
    };
    var effectBounce = $.effects.effect.bounce = function (o, done) {
        var el = $(this), props = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'height',
                'width'
            ], mode = $.effects.setMode(el, o.mode || 'effect'), hide = mode === 'hide', show = mode === 'show', direction = o.direction || 'up', distance = o.distance, times = o.times || 5, anims = times * 2 + (show || hide ? 1 : 0), speed = o.duration / anims, easing = o.easing, ref = direction === 'up' || direction === 'down' ? 'top' : 'left', motion = direction === 'up' || direction === 'left', i, upAnim, downAnim, queue = el.queue(), queuelen = queue.length;
        if (show || hide) {
            props.push('opacity');
        }
        $.effects.save(el, props);
        el.show();
        $.effects.createWrapper(el);
        if (!distance) {
            distance = el[ref === 'top' ? 'outerHeight' : 'outerWidth']() / 3;
        }
        if (show) {
            downAnim = { opacity: 1 };
            downAnim[ref] = 0;
            el.css('opacity', 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);
        }
        if (hide) {
            distance = distance / Math.pow(2, times - 1);
        }
        downAnim = {};
        downAnim[ref] = 0;
        for (i = 0; i < times; i++) {
            upAnim = {};
            upAnim[ref] = (motion ? '-=' : '+=') + distance;
            el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
            distance = hide ? distance * 2 : distance / 2;
        }
        if (hide) {
            upAnim = { opacity: 0 };
            upAnim[ref] = (motion ? '-=' : '+=') + distance;
            el.animate(upAnim, speed, easing);
        }
        el.queue(function () {
            if (hide) {
                el.hide();
            }
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        });
        if (queuelen > 1) {
            queue.splice.apply(queue, [
                1,
                0
            ].concat(queue.splice(queuelen, anims + 1)));
        }
        el.dequeue();
    };
    var effectClip = $.effects.effect.clip = function (o, done) {
        var el = $(this), props = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'height',
                'width'
            ], mode = $.effects.setMode(el, o.mode || 'hide'), show = mode === 'show', direction = o.direction || 'vertical', vert = direction === 'vertical', size = vert ? 'height' : 'width', position = vert ? 'top' : 'left', animation = {}, wrapper, animate, distance;
        $.effects.save(el, props);
        el.show();
        wrapper = $.effects.createWrapper(el).css({ overflow: 'hidden' });
        animate = el[0].tagName === 'IMG' ? wrapper : el;
        distance = animate[size]();
        if (show) {
            animate.css(size, 0);
            animate.css(position, distance / 2);
        }
        animation[size] = show ? distance : 0;
        animation[position] = show ? 0 : distance / 2;
        animate.animate(animation, {
            queue: false,
            duration: o.duration,
            easing: o.easing,
            complete: function () {
                if (!show) {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            }
        });
    };
    var effectDrop = $.effects.effect.drop = function (o, done) {
        var el = $(this), props = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'opacity',
                'height',
                'width'
            ], mode = $.effects.setMode(el, o.mode || 'hide'), show = mode === 'show', direction = o.direction || 'left', ref = direction === 'up' || direction === 'down' ? 'top' : 'left', motion = direction === 'up' || direction === 'left' ? 'pos' : 'neg', animation = { opacity: show ? 1 : 0 }, distance;
        $.effects.save(el, props);
        el.show();
        $.effects.createWrapper(el);
        distance = o.distance || el[ref === 'top' ? 'outerHeight' : 'outerWidth'](true) / 2;
        if (show) {
            el.css('opacity', 0).css(ref, motion === 'pos' ? -distance : distance);
        }
        animation[ref] = (show ? motion === 'pos' ? '+=' : '-=' : motion === 'pos' ? '-=' : '+=') + distance;
        el.animate(animation, {
            queue: false,
            duration: o.duration,
            easing: o.easing,
            complete: function () {
                if (mode === 'hide') {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            }
        });
    };
    var effectExplode = $.effects.effect.explode = function (o, done) {
        var rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3, cells = rows, el = $(this), mode = $.effects.setMode(el, o.mode || 'hide'), show = mode === 'show', offset = el.show().css('visibility', 'hidden').offset(), width = Math.ceil(el.outerWidth() / cells), height = Math.ceil(el.outerHeight() / rows), pieces = [], i, j, left, top, mx, my;
        function childComplete() {
            pieces.push(this);
            if (pieces.length === rows * cells) {
                animComplete();
            }
        }
        for (i = 0; i < rows; i++) {
            top = offset.top + i * height;
            my = i - (rows - 1) / 2;
            for (j = 0; j < cells; j++) {
                left = offset.left + j * width;
                mx = j - (cells - 1) / 2;
                el.clone().appendTo('body').wrap('<div></div>').css({
                    position: 'absolute',
                    visibility: 'visible',
                    left: -j * width,
                    top: -i * height
                }).parent().addClass('ui-effects-explode').css({
                    position: 'absolute',
                    overflow: 'hidden',
                    width: width,
                    height: height,
                    left: left + (show ? mx * width : 0),
                    top: top + (show ? my * height : 0),
                    opacity: show ? 0 : 1
                }).animate({
                    left: left + (show ? 0 : mx * width),
                    top: top + (show ? 0 : my * height),
                    opacity: show ? 1 : 0
                }, o.duration || 500, o.easing, childComplete);
            }
        }
        function animComplete() {
            el.css({ visibility: 'visible' });
            $(pieces).remove();
            if (!show) {
                el.hide();
            }
            done();
        }
    };
    var effectFade = $.effects.effect.fade = function (o, done) {
        var el = $(this), mode = $.effects.setMode(el, o.mode || 'toggle');
        el.animate({ opacity: mode }, {
            queue: false,
            duration: o.duration,
            easing: o.easing,
            complete: done
        });
    };
    var effectFold = $.effects.effect.fold = function (o, done) {
        var el = $(this), props = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'height',
                'width'
            ], mode = $.effects.setMode(el, o.mode || 'hide'), show = mode === 'show', hide = mode === 'hide', size = o.size || 15, percent = /([0-9]+)%/.exec(size), horizFirst = !!o.horizFirst, widthFirst = show !== horizFirst, ref = widthFirst ? [
                'width',
                'height'
            ] : [
                'height',
                'width'
            ], duration = o.duration / 2, wrapper, distance, animation1 = {}, animation2 = {};
        $.effects.save(el, props);
        el.show();
        wrapper = $.effects.createWrapper(el).css({ overflow: 'hidden' });
        distance = widthFirst ? [
            wrapper.width(),
            wrapper.height()
        ] : [
            wrapper.height(),
            wrapper.width()
        ];
        if (percent) {
            size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];
        }
        if (show) {
            wrapper.css(horizFirst ? {
                height: 0,
                width: size
            } : {
                height: size,
                width: 0
            });
        }
        animation1[ref[0]] = show ? distance[0] : size;
        animation2[ref[1]] = show ? distance[1] : 0;
        wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function () {
            if (hide) {
                el.hide();
            }
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        });
    };
    var effectHighlight = $.effects.effect.highlight = function (o, done) {
        var elem = $(this), props = [
                'backgroundImage',
                'backgroundColor',
                'opacity'
            ], mode = $.effects.setMode(elem, o.mode || 'show'), animation = { backgroundColor: elem.css('backgroundColor') };
        if (mode === 'hide') {
            animation.opacity = 0;
        }
        $.effects.save(elem, props);
        elem.show().css({
            backgroundImage: 'none',
            backgroundColor: o.color || '#ffff99'
        }).animate(animation, {
            queue: false,
            duration: o.duration,
            easing: o.easing,
            complete: function () {
                if (mode === 'hide') {
                    elem.hide();
                }
                $.effects.restore(elem, props);
                done();
            }
        });
    };
    var effectSize = $.effects.effect.size = function (o, done) {
        var original, baseline, factor, el = $(this), props0 = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'width',
                'height',
                'overflow',
                'opacity'
            ], props1 = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'overflow',
                'opacity'
            ], props2 = [
                'width',
                'height',
                'overflow'
            ], cProps = ['fontSize'], vProps = [
                'borderTopWidth',
                'borderBottomWidth',
                'paddingTop',
                'paddingBottom'
            ], hProps = [
                'borderLeftWidth',
                'borderRightWidth',
                'paddingLeft',
                'paddingRight'
            ], mode = $.effects.setMode(el, o.mode || 'effect'), restore = o.restore || mode !== 'effect', scale = o.scale || 'both', origin = o.origin || [
                'middle',
                'center'
            ], position = el.css('position'), props = restore ? props0 : props1, zero = {
                height: 0,
                width: 0,
                outerHeight: 0,
                outerWidth: 0
            };
        if (mode === 'show') {
            el.show();
        }
        original = {
            height: el.height(),
            width: el.width(),
            outerHeight: el.outerHeight(),
            outerWidth: el.outerWidth()
        };
        if (o.mode === 'toggle' && mode === 'show') {
            el.from = o.to || zero;
            el.to = o.from || original;
        } else {
            el.from = o.from || (mode === 'show' ? zero : original);
            el.to = o.to || (mode === 'hide' ? zero : original);
        }
        factor = {
            from: {
                y: el.from.height / original.height,
                x: el.from.width / original.width
            },
            to: {
                y: el.to.height / original.height,
                x: el.to.width / original.width
            }
        };
        if (scale === 'box' || scale === 'both') {
            if (factor.from.y !== factor.to.y) {
                props = props.concat(vProps);
                el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);
                el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);
            }
            if (factor.from.x !== factor.to.x) {
                props = props.concat(hProps);
                el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);
                el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);
            }
        }
        if (scale === 'content' || scale === 'both') {
            if (factor.from.y !== factor.to.y) {
                props = props.concat(cProps).concat(props2);
                el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);
                el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);
            }
        }
        $.effects.save(el, props);
        el.show();
        $.effects.createWrapper(el);
        el.css('overflow', 'hidden').css(el.from);
        if (origin) {
            baseline = $.effects.getBaseline(origin, original);
            el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;
            el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;
            el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;
            el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;
        }
        el.css(el.from);
        if (scale === 'content' || scale === 'both') {
            vProps = vProps.concat([
                'marginTop',
                'marginBottom'
            ]).concat(cProps);
            hProps = hProps.concat([
                'marginLeft',
                'marginRight'
            ]);
            props2 = props0.concat(vProps).concat(hProps);
            el.find('*[width]').each(function () {
                var child = $(this), c_original = {
                        height: child.height(),
                        width: child.width(),
                        outerHeight: child.outerHeight(),
                        outerWidth: child.outerWidth()
                    };
                if (restore) {
                    $.effects.save(child, props2);
                }
                child.from = {
                    height: c_original.height * factor.from.y,
                    width: c_original.width * factor.from.x,
                    outerHeight: c_original.outerHeight * factor.from.y,
                    outerWidth: c_original.outerWidth * factor.from.x
                };
                child.to = {
                    height: c_original.height * factor.to.y,
                    width: c_original.width * factor.to.x,
                    outerHeight: c_original.height * factor.to.y,
                    outerWidth: c_original.width * factor.to.x
                };
                if (factor.from.y !== factor.to.y) {
                    child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);
                    child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);
                }
                if (factor.from.x !== factor.to.x) {
                    child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);
                    child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);
                }
                child.css(child.from);
                child.animate(child.to, o.duration, o.easing, function () {
                    if (restore) {
                        $.effects.restore(child, props2);
                    }
                });
            });
        }
        el.animate(el.to, {
            queue: false,
            duration: o.duration,
            easing: o.easing,
            complete: function () {
                if (el.to.opacity === 0) {
                    el.css('opacity', el.from.opacity);
                }
                if (mode === 'hide') {
                    el.hide();
                }
                $.effects.restore(el, props);
                if (!restore) {
                    if (position === 'static') {
                        el.css({
                            position: 'relative',
                            top: el.to.top,
                            left: el.to.left
                        });
                    } else {
                        $.each([
                            'top',
                            'left'
                        ], function (idx, pos) {
                            el.css(pos, function (_, str) {
                                var val = parseInt(str, 10), toRef = idx ? el.to.left : el.to.top;
                                if (str === 'auto') {
                                    return toRef + 'px';
                                }
                                return val + toRef + 'px';
                            });
                        });
                    }
                }
                $.effects.removeWrapper(el);
                done();
            }
        });
    };
    var effectScale = $.effects.effect.scale = function (o, done) {
        var el = $(this), options = $.extend(true, {}, o), mode = $.effects.setMode(el, o.mode || 'effect'), percent = parseInt(o.percent, 10) || (parseInt(o.percent, 10) === 0 ? 0 : mode === 'hide' ? 0 : 100), direction = o.direction || 'both', origin = o.origin, original = {
                height: el.height(),
                width: el.width(),
                outerHeight: el.outerHeight(),
                outerWidth: el.outerWidth()
            }, factor = {
                y: direction !== 'horizontal' ? percent / 100 : 1,
                x: direction !== 'vertical' ? percent / 100 : 1
            };
        options.effect = 'size';
        options.queue = false;
        options.complete = done;
        if (mode !== 'effect') {
            options.origin = origin || [
                'middle',
                'center'
            ];
            options.restore = true;
        }
        options.from = o.from || (mode === 'show' ? {
            height: 0,
            width: 0,
            outerHeight: 0,
            outerWidth: 0
        } : original);
        options.to = {
            height: original.height * factor.y,
            width: original.width * factor.x,
            outerHeight: original.outerHeight * factor.y,
            outerWidth: original.outerWidth * factor.x
        };
        if (options.fade) {
            if (mode === 'show') {
                options.from.opacity = 0;
                options.to.opacity = 1;
            }
            if (mode === 'hide') {
                options.from.opacity = 1;
                options.to.opacity = 0;
            }
        }
        el.effect(options);
    };
    var effectPuff = $.effects.effect.puff = function (o, done) {
        var elem = $(this), mode = $.effects.setMode(elem, o.mode || 'hide'), hide = mode === 'hide', percent = parseInt(o.percent, 10) || 150, factor = percent / 100, original = {
                height: elem.height(),
                width: elem.width(),
                outerHeight: elem.outerHeight(),
                outerWidth: elem.outerWidth()
            };
        $.extend(o, {
            effect: 'scale',
            queue: false,
            fade: true,
            mode: mode,
            complete: done,
            percent: hide ? percent : 100,
            from: hide ? original : {
                height: original.height * factor,
                width: original.width * factor,
                outerHeight: original.outerHeight * factor,
                outerWidth: original.outerWidth * factor
            }
        });
        elem.effect(o);
    };
    var effectPulsate = $.effects.effect.pulsate = function (o, done) {
        var elem = $(this), mode = $.effects.setMode(elem, o.mode || 'show'), show = mode === 'show', hide = mode === 'hide', showhide = show || mode === 'hide', anims = (o.times || 5) * 2 + (showhide ? 1 : 0), duration = o.duration / anims, animateTo = 0, queue = elem.queue(), queuelen = queue.length, i;
        if (show || !elem.is(':visible')) {
            elem.css('opacity', 0).show();
            animateTo = 1;
        }
        for (i = 1; i < anims; i++) {
            elem.animate({ opacity: animateTo }, duration, o.easing);
            animateTo = 1 - animateTo;
        }
        elem.animate({ opacity: animateTo }, duration, o.easing);
        elem.queue(function () {
            if (hide) {
                elem.hide();
            }
            done();
        });
        if (queuelen > 1) {
            queue.splice.apply(queue, [
                1,
                0
            ].concat(queue.splice(queuelen, anims + 1)));
        }
        elem.dequeue();
    };
    var effectShake = $.effects.effect.shake = function (o, done) {
        var el = $(this), props = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'height',
                'width'
            ], mode = $.effects.setMode(el, o.mode || 'effect'), direction = o.direction || 'left', distance = o.distance || 20, times = o.times || 3, anims = times * 2 + 1, speed = Math.round(o.duration / anims), ref = direction === 'up' || direction === 'down' ? 'top' : 'left', positiveMotion = direction === 'up' || direction === 'left', animation = {}, animation1 = {}, animation2 = {}, i, queue = el.queue(), queuelen = queue.length;
        $.effects.save(el, props);
        el.show();
        $.effects.createWrapper(el);
        animation[ref] = (positiveMotion ? '-=' : '+=') + distance;
        animation1[ref] = (positiveMotion ? '+=' : '-=') + distance * 2;
        animation2[ref] = (positiveMotion ? '-=' : '+=') + distance * 2;
        el.animate(animation, speed, o.easing);
        for (i = 1; i < times; i++) {
            el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);
        }
        el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function () {
            if (mode === 'hide') {
                el.hide();
            }
            $.effects.restore(el, props);
            $.effects.removeWrapper(el);
            done();
        });
        if (queuelen > 1) {
            queue.splice.apply(queue, [
                1,
                0
            ].concat(queue.splice(queuelen, anims + 1)));
        }
        el.dequeue();
    };
    var effectSlide = $.effects.effect.slide = function (o, done) {
        var el = $(this), props = [
                'position',
                'top',
                'bottom',
                'left',
                'right',
                'width',
                'height'
            ], mode = $.effects.setMode(el, o.mode || 'show'), show = mode === 'show', direction = o.direction || 'left', ref = direction === 'up' || direction === 'down' ? 'top' : 'left', positiveMotion = direction === 'up' || direction === 'left', distance, animation = {};
        $.effects.save(el, props);
        el.show();
        distance = o.distance || el[ref === 'top' ? 'outerHeight' : 'outerWidth'](true);
        $.effects.createWrapper(el).css({ overflow: 'hidden' });
        if (show) {
            el.css(ref, positiveMotion ? isNaN(distance) ? '-' + distance : -distance : distance);
        }
        animation[ref] = (show ? positiveMotion ? '+=' : '-=' : positiveMotion ? '-=' : '+=') + distance;
        el.animate(animation, {
            queue: false,
            duration: o.duration,
            easing: o.easing,
            complete: function () {
                if (mode === 'hide') {
                    el.hide();
                }
                $.effects.restore(el, props);
                $.effects.removeWrapper(el);
                done();
            }
        });
    };
    var effectTransfer = $.effects.effect.transfer = function (o, done) {
        var elem = $(this), target = $(o.to), targetFixed = target.css('position') === 'fixed', body = $('body'), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = {
                top: endPosition.top - fixTop,
                left: endPosition.left - fixLeft,
                height: target.innerHeight(),
                width: target.innerWidth()
            }, startPosition = elem.offset(), transfer = $('<div class=\'ui-effects-transfer\'></div>').appendTo(document.body).addClass(o.className).css({
                top: startPosition.top - fixTop,
                left: startPosition.left - fixLeft,
                height: elem.innerHeight(),
                width: elem.innerWidth(),
                position: targetFixed ? 'fixed' : 'absolute'
            }).animate(animation, o.duration, o.easing, function () {
                transfer.remove();
                done();
            });
    };
    var progressbar = $.widget('ui.progressbar', {
        version: '1.11.4',
        options: {
            max: 100,
            value: 0,
            change: null,
            complete: null
        },
        min: 0,
        _create: function () {
            this.oldValue = this.options.value = this._constrainedValue();
            this.element.addClass('ui-progressbar ui-widget ui-widget-content ui-corner-all').attr({
                role: 'progressbar',
                'aria-valuemin': this.min
            });
            this.valueDiv = $('<div class=\'ui-progressbar-value ui-widget-header ui-corner-left\'></div>').appendTo(this.element);
            this._refreshValue();
        },
        _destroy: function () {
            this.element.removeClass('ui-progressbar ui-widget ui-widget-content ui-corner-all').removeAttr('role').removeAttr('aria-valuemin').removeAttr('aria-valuemax').removeAttr('aria-valuenow');
            this.valueDiv.remove();
        },
        value: function (newValue) {
            if (newValue === undefined) {
                return this.options.value;
            }
            this.options.value = this._constrainedValue(newValue);
            this._refreshValue();
        },
        _constrainedValue: function (newValue) {
            if (newValue === undefined) {
                newValue = this.options.value;
            }
            this.indeterminate = newValue === false;
            if (typeof newValue !== 'number') {
                newValue = 0;
            }
            return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));
        },
        _setOptions: function (options) {
            var value = options.value;
            delete options.value;
            this._super(options);
            this.options.value = this._constrainedValue(value);
            this._refreshValue();
        },
        _setOption: function (key, value) {
            if (key === 'max') {
                value = Math.max(this.min, value);
            }
            if (key === 'disabled') {
                this.element.toggleClass('ui-state-disabled', !!value).attr('aria-disabled', value);
            }
            this._super(key, value);
        },
        _percentage: function () {
            return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
        },
        _refreshValue: function () {
            var value = this.options.value, percentage = this._percentage();
            this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass('ui-corner-right', value === this.options.max).width(percentage.toFixed(0) + '%');
            this.element.toggleClass('ui-progressbar-indeterminate', this.indeterminate);
            if (this.indeterminate) {
                this.element.removeAttr('aria-valuenow');
                if (!this.overlayDiv) {
                    this.overlayDiv = $('<div class=\'ui-progressbar-overlay\'></div>').appendTo(this.valueDiv);
                }
            } else {
                this.element.attr({
                    'aria-valuemax': this.options.max,
                    'aria-valuenow': value
                });
                if (this.overlayDiv) {
                    this.overlayDiv.remove();
                    this.overlayDiv = null;
                }
            }
            if (this.oldValue !== value) {
                this.oldValue = value;
                this._trigger('change');
            }
            if (value === this.options.max) {
                this._trigger('complete');
            }
        }
    });
    var selectable = $.widget('ui.selectable', $.ui.mouse, {
        version: '1.11.4',
        options: {
            appendTo: 'body',
            autoRefresh: true,
            distance: 0,
            filter: '*',
            tolerance: 'touch',
            selected: null,
            selecting: null,
            start: null,
            stop: null,
            unselected: null,
            unselecting: null
        },
        _create: function () {
            var selectees, that = this;
            this.element.addClass('ui-selectable');
            this.dragged = false;
            this.refresh = function () {
                selectees = $(that.options.filter, that.element[0]);
                selectees.addClass('ui-selectee');
                selectees.each(function () {
                    var $this = $(this), pos = $this.offset();
                    $.data(this, 'selectable-item', {
                        element: this,
                        $element: $this,
                        left: pos.left,
                        top: pos.top,
                        right: pos.left + $this.outerWidth(),
                        bottom: pos.top + $this.outerHeight(),
                        startselected: false,
                        selected: $this.hasClass('ui-selected'),
                        selecting: $this.hasClass('ui-selecting'),
                        unselecting: $this.hasClass('ui-unselecting')
                    });
                });
            };
            this.refresh();
            this.selectees = selectees.addClass('ui-selectee');
            this._mouseInit();
            this.helper = $('<div class=\'ui-selectable-helper\'></div>');
        },
        _destroy: function () {
            this.selectees.removeClass('ui-selectee').removeData('selectable-item');
            this.element.removeClass('ui-selectable ui-selectable-disabled');
            this._mouseDestroy();
        },
        _mouseStart: function (event) {
            var that = this, options = this.options;
            this.opos = [
                event.pageX,
                event.pageY
            ];
            if (this.options.disabled) {
                return;
            }
            this.selectees = $(options.filter, this.element[0]);
            this._trigger('start', event);
            $(options.appendTo).append(this.helper);
            this.helper.css({
                'left': event.pageX,
                'top': event.pageY,
                'width': 0,
                'height': 0
            });
            if (options.autoRefresh) {
                this.refresh();
            }
            this.selectees.filter('.ui-selected').each(function () {
                var selectee = $.data(this, 'selectable-item');
                selectee.startselected = true;
                if (!event.metaKey && !event.ctrlKey) {
                    selectee.$element.removeClass('ui-selected');
                    selectee.selected = false;
                    selectee.$element.addClass('ui-unselecting');
                    selectee.unselecting = true;
                    that._trigger('unselecting', event, { unselecting: selectee.element });
                }
            });
            $(event.target).parents().addBack().each(function () {
                var doSelect, selectee = $.data(this, 'selectable-item');
                if (selectee) {
                    doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass('ui-selected');
                    selectee.$element.removeClass(doSelect ? 'ui-unselecting' : 'ui-selected').addClass(doSelect ? 'ui-selecting' : 'ui-unselecting');
                    selectee.unselecting = !doSelect;
                    selectee.selecting = doSelect;
                    selectee.selected = doSelect;
                    if (doSelect) {
                        that._trigger('selecting', event, { selecting: selectee.element });
                    } else {
                        that._trigger('unselecting', event, { unselecting: selectee.element });
                    }
                    return false;
                }
            });
        },
        _mouseDrag: function (event) {
            this.dragged = true;
            if (this.options.disabled) {
                return;
            }
            var tmp, that = this, options = this.options, x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
            if (x1 > x2) {
                tmp = x2;
                x2 = x1;
                x1 = tmp;
            }
            if (y1 > y2) {
                tmp = y2;
                y2 = y1;
                y1 = tmp;
            }
            this.helper.css({
                left: x1,
                top: y1,
                width: x2 - x1,
                height: y2 - y1
            });
            this.selectees.each(function () {
                var selectee = $.data(this, 'selectable-item'), hit = false;
                if (!selectee || selectee.element === that.element[0]) {
                    return;
                }
                if (options.tolerance === 'touch') {
                    hit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1);
                } else if (options.tolerance === 'fit') {
                    hit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2;
                }
                if (hit) {
                    if (selectee.selected) {
                        selectee.$element.removeClass('ui-selected');
                        selectee.selected = false;
                    }
                    if (selectee.unselecting) {
                        selectee.$element.removeClass('ui-unselecting');
                        selectee.unselecting = false;
                    }
                    if (!selectee.selecting) {
                        selectee.$element.addClass('ui-selecting');
                        selectee.selecting = true;
                        that._trigger('selecting', event, { selecting: selectee.element });
                    }
                } else {
                    if (selectee.selecting) {
                        if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                            selectee.$element.removeClass('ui-selecting');
                            selectee.selecting = false;
                            selectee.$element.addClass('ui-selected');
                            selectee.selected = true;
                        } else {
                            selectee.$element.removeClass('ui-selecting');
                            selectee.selecting = false;
                            if (selectee.startselected) {
                                selectee.$element.addClass('ui-unselecting');
                                selectee.unselecting = true;
                            }
                            that._trigger('unselecting', event, { unselecting: selectee.element });
                        }
                    }
                    if (selectee.selected) {
                        if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                            selectee.$element.removeClass('ui-selected');
                            selectee.selected = false;
                            selectee.$element.addClass('ui-unselecting');
                            selectee.unselecting = true;
                            that._trigger('unselecting', event, { unselecting: selectee.element });
                        }
                    }
                }
            });
            return false;
        },
        _mouseStop: function (event) {
            var that = this;
            this.dragged = false;
            $('.ui-unselecting', this.element[0]).each(function () {
                var selectee = $.data(this, 'selectable-item');
                selectee.$element.removeClass('ui-unselecting');
                selectee.unselecting = false;
                selectee.startselected = false;
                that._trigger('unselected', event, { unselected: selectee.element });
            });
            $('.ui-selecting', this.element[0]).each(function () {
                var selectee = $.data(this, 'selectable-item');
                selectee.$element.removeClass('ui-selecting').addClass('ui-selected');
                selectee.selecting = false;
                selectee.selected = true;
                selectee.startselected = true;
                that._trigger('selected', event, { selected: selectee.element });
            });
            this._trigger('stop', event);
            this.helper.remove();
            return false;
        }
    });
    var selectmenu = $.widget('ui.selectmenu', {
        version: '1.11.4',
        defaultElement: '<select>',
        options: {
            appendTo: null,
            disabled: null,
            icons: { button: 'ui-icon-triangle-1-s' },
            position: {
                my: 'left top',
                at: 'left bottom',
                collision: 'none'
            },
            width: null,
            change: null,
            close: null,
            focus: null,
            open: null,
            select: null
        },
        _create: function () {
            var selectmenuId = this.element.uniqueId().attr('id');
            this.ids = {
                element: selectmenuId,
                button: selectmenuId + '-button',
                menu: selectmenuId + '-menu'
            };
            this._drawButton();
            this._drawMenu();
            if (this.options.disabled) {
                this.disable();
            }
        },
        _drawButton: function () {
            var that = this;
            this.label = $('label[for=\'' + this.ids.element + '\']').attr('for', this.ids.button);
            this._on(this.label, {
                click: function (event) {
                    this.button.focus();
                    event.preventDefault();
                }
            });
            this.element.hide();
            this.button = $('<span>', {
                'class': 'ui-selectmenu-button ui-widget ui-state-default ui-corner-all',
                tabindex: this.options.disabled ? -1 : 0,
                id: this.ids.button,
                role: 'combobox',
                'aria-expanded': 'false',
                'aria-autocomplete': 'list',
                'aria-owns': this.ids.menu,
                'aria-haspopup': 'true'
            }).insertAfter(this.element);
            $('<span>', { 'class': 'ui-icon ' + this.options.icons.button }).prependTo(this.button);
            this.buttonText = $('<span>', { 'class': 'ui-selectmenu-text' }).appendTo(this.button);
            this._setText(this.buttonText, this.element.find('option:selected').text());
            this._resizeButton();
            this._on(this.button, this._buttonEvents);
            this.button.one('focusin', function () {
                if (!that.menuItems) {
                    that._refreshMenu();
                }
            });
            this._hoverable(this.button);
            this._focusable(this.button);
        },
        _drawMenu: function () {
            var that = this;
            this.menu = $('<ul>', {
                'aria-hidden': 'true',
                'aria-labelledby': this.ids.button,
                id: this.ids.menu
            });
            this.menuWrap = $('<div>', { 'class': 'ui-selectmenu-menu ui-front' }).append(this.menu).appendTo(this._appendTo());
            this.menuInstance = this.menu.menu({
                role: 'listbox',
                select: function (event, ui) {
                    event.preventDefault();
                    that._setSelection();
                    that._select(ui.item.data('ui-selectmenu-item'), event);
                },
                focus: function (event, ui) {
                    var item = ui.item.data('ui-selectmenu-item');
                    if (that.focusIndex != null && item.index !== that.focusIndex) {
                        that._trigger('focus', event, { item: item });
                        if (!that.isOpen) {
                            that._select(item, event);
                        }
                    }
                    that.focusIndex = item.index;
                    that.button.attr('aria-activedescendant', that.menuItems.eq(item.index).attr('id'));
                }
            }).menu('instance');
            this.menu.addClass('ui-corner-bottom').removeClass('ui-corner-all');
            this.menuInstance._off(this.menu, 'mouseleave');
            this.menuInstance._closeOnDocumentClick = function () {
                return false;
            };
            this.menuInstance._isDivider = function () {
                return false;
            };
        },
        refresh: function () {
            this._refreshMenu();
            this._setText(this.buttonText, this._getSelectedItem().text());
            if (!this.options.width) {
                this._resizeButton();
            }
        },
        _refreshMenu: function () {
            this.menu.empty();
            var item, options = this.element.find('option');
            if (!options.length) {
                return;
            }
            this._parseOptions(options);
            this._renderMenu(this.menu, this.items);
            this.menuInstance.refresh();
            this.menuItems = this.menu.find('li').not('.ui-selectmenu-optgroup');
            item = this._getSelectedItem();
            this.menuInstance.focus(null, item);
            this._setAria(item.data('ui-selectmenu-item'));
            this._setOption('disabled', this.element.prop('disabled'));
        },
        open: function (event) {
            if (this.options.disabled) {
                return;
            }
            if (!this.menuItems) {
                this._refreshMenu();
            } else {
                this.menu.find('.ui-state-focus').removeClass('ui-state-focus');
                this.menuInstance.focus(null, this._getSelectedItem());
            }
            this.isOpen = true;
            this._toggleAttr();
            this._resizeMenu();
            this._position();
            this._on(this.document, this._documentClick);
            this._trigger('open', event);
        },
        _position: function () {
            this.menuWrap.position($.extend({ of: this.button }, this.options.position));
        },
        close: function (event) {
            if (!this.isOpen) {
                return;
            }
            this.isOpen = false;
            this._toggleAttr();
            this.range = null;
            this._off(this.document);
            this._trigger('close', event);
        },
        widget: function () {
            return this.button;
        },
        menuWidget: function () {
            return this.menu;
        },
        _renderMenu: function (ul, items) {
            var that = this, currentOptgroup = '';
            $.each(items, function (index, item) {
                if (item.optgroup !== currentOptgroup) {
                    $('<li>', {
                        'class': 'ui-selectmenu-optgroup ui-menu-divider' + (item.element.parent('optgroup').prop('disabled') ? ' ui-state-disabled' : ''),
                        text: item.optgroup
                    }).appendTo(ul);
                    currentOptgroup = item.optgroup;
                }
                that._renderItemData(ul, item);
            });
        },
        _renderItemData: function (ul, item) {
            return this._renderItem(ul, item).data('ui-selectmenu-item', item);
        },
        _renderItem: function (ul, item) {
            var li = $('<li>');
            if (item.disabled) {
                li.addClass('ui-state-disabled');
            }
            this._setText(li, item.label);
            return li.appendTo(ul);
        },
        _setText: function (element, value) {
            if (value) {
                element.text(value);
            } else {
                element.html('&#160;');
            }
        },
        _move: function (direction, event) {
            var item, next, filter = '.ui-menu-item';
            if (this.isOpen) {
                item = this.menuItems.eq(this.focusIndex);
            } else {
                item = this.menuItems.eq(this.element[0].selectedIndex);
                filter += ':not(.ui-state-disabled)';
            }
            if (direction === 'first' || direction === 'last') {
                next = item[direction === 'first' ? 'prevAll' : 'nextAll'](filter).eq(-1);
            } else {
                next = item[direction + 'All'](filter).eq(0);
            }
            if (next.length) {
                this.menuInstance.focus(event, next);
            }
        },
        _getSelectedItem: function () {
            return this.menuItems.eq(this.element[0].selectedIndex);
        },
        _toggle: function (event) {
            this[this.isOpen ? 'close' : 'open'](event);
        },
        _setSelection: function () {
            var selection;
            if (!this.range) {
                return;
            }
            if (window.getSelection) {
                selection = window.getSelection();
                selection.removeAllRanges();
                selection.addRange(this.range);
            } else {
                this.range.select();
            }
            this.button.focus();
        },
        _documentClick: {
            mousedown: function (event) {
                if (!this.isOpen) {
                    return;
                }
                if (!$(event.target).closest('.ui-selectmenu-menu, #' + this.ids.button).length) {
                    this.close(event);
                }
            }
        },
        _buttonEvents: {
            mousedown: function () {
                var selection;
                if (window.getSelection) {
                    selection = window.getSelection();
                    if (selection.rangeCount) {
                        this.range = selection.getRangeAt(0);
                    }
                } else {
                    this.range = document.selection.createRange();
                }
            },
            click: function (event) {
                this._setSelection();
                this._toggle(event);
            },
            keydown: function (event) {
                var preventDefault = true;
                switch (event.keyCode) {
                case $.ui.keyCode.TAB:
                case $.ui.keyCode.ESCAPE:
                    this.close(event);
                    preventDefault = false;
                    break;
                case $.ui.keyCode.ENTER:
                    if (this.isOpen) {
                        this._selectFocusedItem(event);
                    }
                    break;
                case $.ui.keyCode.UP:
                    if (event.altKey) {
                        this._toggle(event);
                    } else {
                        this._move('prev', event);
                    }
                    break;
                case $.ui.keyCode.DOWN:
                    if (event.altKey) {
                        this._toggle(event);
                    } else {
                        this._move('next', event);
                    }
                    break;
                case $.ui.keyCode.SPACE:
                    if (this.isOpen) {
                        this._selectFocusedItem(event);
                    } else {
                        this._toggle(event);
                    }
                    break;
                case $.ui.keyCode.LEFT:
                    this._move('prev', event);
                    break;
                case $.ui.keyCode.RIGHT:
                    this._move('next', event);
                    break;
                case $.ui.keyCode.HOME:
                case $.ui.keyCode.PAGE_UP:
                    this._move('first', event);
                    break;
                case $.ui.keyCode.END:
                case $.ui.keyCode.PAGE_DOWN:
                    this._move('last', event);
                    break;
                default:
                    this.menu.trigger(event);
                    preventDefault = false;
                }
                if (preventDefault) {
                    event.preventDefault();
                }
            }
        },
        _selectFocusedItem: function (event) {
            var item = this.menuItems.eq(this.focusIndex);
            if (!item.hasClass('ui-state-disabled')) {
                this._select(item.data('ui-selectmenu-item'), event);
            }
        },
        _select: function (item, event) {
            var oldIndex = this.element[0].selectedIndex;
            this.element[0].selectedIndex = item.index;
            this._setText(this.buttonText, item.label);
            this._setAria(item);
            this._trigger('select', event, { item: item });
            if (item.index !== oldIndex) {
                this._trigger('change', event, { item: item });
            }
            this.close(event);
        },
        _setAria: function (item) {
            var id = this.menuItems.eq(item.index).attr('id');
            this.button.attr({
                'aria-labelledby': id,
                'aria-activedescendant': id
            });
            this.menu.attr('aria-activedescendant', id);
        },
        _setOption: function (key, value) {
            if (key === 'icons') {
                this.button.find('span.ui-icon').removeClass(this.options.icons.button).addClass(value.button);
            }
            this._super(key, value);
            if (key === 'appendTo') {
                this.menuWrap.appendTo(this._appendTo());
            }
            if (key === 'disabled') {
                this.menuInstance.option('disabled', value);
                this.button.toggleClass('ui-state-disabled', value).attr('aria-disabled', value);
                this.element.prop('disabled', value);
                if (value) {
                    this.button.attr('tabindex', -1);
                    this.close();
                } else {
                    this.button.attr('tabindex', 0);
                }
            }
            if (key === 'width') {
                this._resizeButton();
            }
        },
        _appendTo: function () {
            var element = this.options.appendTo;
            if (element) {
                element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);
            }
            if (!element || !element[0]) {
                element = this.element.closest('.ui-front');
            }
            if (!element.length) {
                element = this.document[0].body;
            }
            return element;
        },
        _toggleAttr: function () {
            this.button.toggleClass('ui-corner-top', this.isOpen).toggleClass('ui-corner-all', !this.isOpen).attr('aria-expanded', this.isOpen);
            this.menuWrap.toggleClass('ui-selectmenu-open', this.isOpen);
            this.menu.attr('aria-hidden', !this.isOpen);
        },
        _resizeButton: function () {
            var width = this.options.width;
            if (!width) {
                width = this.element.show().outerWidth();
                this.element.hide();
            }
            this.button.outerWidth(width);
        },
        _resizeMenu: function () {
            this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width('').outerWidth() + 1));
        },
        _getCreateOptions: function () {
            return { disabled: this.element.prop('disabled') };
        },
        _parseOptions: function (options) {
            var data = [];
            options.each(function (index, item) {
                var option = $(item), optgroup = option.parent('optgroup');
                data.push({
                    element: option,
                    index: index,
                    value: option.val(),
                    label: option.text(),
                    optgroup: optgroup.attr('label') || '',
                    disabled: optgroup.prop('disabled') || option.prop('disabled')
                });
            });
            this.items = data;
        },
        _destroy: function () {
            this.menuWrap.remove();
            this.button.remove();
            this.element.show();
            this.element.removeUniqueId();
            this.label.attr('for', this.ids.element);
        }
    });
    var slider = $.widget('ui.slider', $.ui.mouse, {
        version: '1.11.4',
        widgetEventPrefix: 'slide',
        options: {
            animate: false,
            distance: 0,
            max: 100,
            min: 0,
            orientation: 'horizontal',
            range: false,
            step: 1,
            value: 0,
            values: null,
            change: null,
            slide: null,
            start: null,
            stop: null
        },
        numPages: 5,
        _create: function () {
            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this._calculateNewMax();
            this.element.addClass('ui-slider' + ' ui-slider-' + this.orientation + ' ui-widget' + ' ui-widget-content' + ' ui-corner-all');
            this._refresh();
            this._setOption('disabled', this.options.disabled);
            this._animateOff = false;
        },
        _refresh: function () {
            this._createRange();
            this._createHandles();
            this._setupEvents();
            this._refreshValue();
        },
        _createHandles: function () {
            var i, handleCount, options = this.options, existingHandles = this.element.find('.ui-slider-handle').addClass('ui-state-default ui-corner-all'), handle = '<span class=\'ui-slider-handle ui-state-default ui-corner-all\' tabindex=\'0\'></span>', handles = [];
            handleCount = options.values && options.values.length || 1;
            if (existingHandles.length > handleCount) {
                existingHandles.slice(handleCount).remove();
                existingHandles = existingHandles.slice(0, handleCount);
            }
            for (i = existingHandles.length; i < handleCount; i++) {
                handles.push(handle);
            }
            this.handles = existingHandles.add($(handles.join('')).appendTo(this.element));
            this.handle = this.handles.eq(0);
            this.handles.each(function (i) {
                $(this).data('ui-slider-handle-index', i);
            });
        },
        _createRange: function () {
            var options = this.options, classes = '';
            if (options.range) {
                if (options.range === true) {
                    if (!options.values) {
                        options.values = [
                            this._valueMin(),
                            this._valueMin()
                        ];
                    } else if (options.values.length && options.values.length !== 2) {
                        options.values = [
                            options.values[0],
                            options.values[0]
                        ];
                    } else if ($.isArray(options.values)) {
                        options.values = options.values.slice(0);
                    }
                }
                if (!this.range || !this.range.length) {
                    this.range = $('<div></div>').appendTo(this.element);
                    classes = 'ui-slider-range' + ' ui-widget-header ui-corner-all';
                } else {
                    this.range.removeClass('ui-slider-range-min ui-slider-range-max').css({
                        'left': '',
                        'bottom': ''
                    });
                }
                this.range.addClass(classes + (options.range === 'min' || options.range === 'max' ? ' ui-slider-range-' + options.range : ''));
            } else {
                if (this.range) {
                    this.range.remove();
                }
                this.range = null;
            }
        },
        _setupEvents: function () {
            this._off(this.handles);
            this._on(this.handles, this._handleEvents);
            this._hoverable(this.handles);
            this._focusable(this.handles);
        },
        _destroy: function () {
            this.handles.remove();
            if (this.range) {
                this.range.remove();
            }
            this.element.removeClass('ui-slider' + ' ui-slider-horizontal' + ' ui-slider-vertical' + ' ui-widget' + ' ui-widget-content' + ' ui-corner-all');
            this._mouseDestroy();
        },
        _mouseCapture: function (event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options;
            if (o.disabled) {
                return false;
            }
            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();
            position = {
                x: event.pageX,
                y: event.pageY
            };
            normValue = this._normValueFromMouse(position);
            distance = this._valueMax() - this._valueMin() + 1;
            this.handles.each(function (i) {
                var thisDistance = Math.abs(normValue - that.values(i));
                if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
                    distance = thisDistance;
                    closestHandle = $(this);
                    index = i;
                }
            });
            allowed = this._start(event, index);
            if (allowed === false) {
                return false;
            }
            this._mouseSliding = true;
            this._handleIndex = index;
            closestHandle.addClass('ui-state-active').focus();
            offset = closestHandle.offset();
            mouseOverHandle = !$(event.target).parents().addBack().is('.ui-slider-handle');
            this._clickOffset = mouseOverHandle ? {
                left: 0,
                top: 0
            } : {
                left: event.pageX - offset.left - closestHandle.width() / 2,
                top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css('borderTopWidth'), 10) || 0) - (parseInt(closestHandle.css('borderBottomWidth'), 10) || 0) + (parseInt(closestHandle.css('marginTop'), 10) || 0)
            };
            if (!this.handles.hasClass('ui-state-hover')) {
                this._slide(event, index, normValue);
            }
            this._animateOff = true;
            return true;
        },
        _mouseStart: function () {
            return true;
        },
        _mouseDrag: function (event) {
            var position = {
                    x: event.pageX,
                    y: event.pageY
                }, normValue = this._normValueFromMouse(position);
            this._slide(event, this._handleIndex, normValue);
            return false;
        },
        _mouseStop: function (event) {
            this.handles.removeClass('ui-state-active');
            this._mouseSliding = false;
            this._stop(event, this._handleIndex);
            this._change(event, this._handleIndex);
            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;
            return false;
        },
        _detectOrientation: function () {
            this.orientation = this.options.orientation === 'vertical' ? 'vertical' : 'horizontal';
        },
        _normValueFromMouse: function (position) {
            var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
            if (this.orientation === 'horizontal') {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
            }
            percentMouse = pixelMouse / pixelTotal;
            if (percentMouse > 1) {
                percentMouse = 1;
            }
            if (percentMouse < 0) {
                percentMouse = 0;
            }
            if (this.orientation === 'vertical') {
                percentMouse = 1 - percentMouse;
            }
            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;
            return this._trimAlignValue(valueMouse);
        },
        _start: function (event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            return this._trigger('start', event, uiHash);
        },
        _slide: function (event, index, newVal) {
            var otherVal, newValues, allowed;
            if (this.options.values && this.options.values.length) {
                otherVal = this.values(index ? 0 : 1);
                if (this.options.values.length === 2 && this.options.range === true && (index === 0 && newVal > otherVal || index === 1 && newVal < otherVal)) {
                    newVal = otherVal;
                }
                if (newVal !== this.values(index)) {
                    newValues = this.values();
                    newValues[index] = newVal;
                    allowed = this._trigger('slide', event, {
                        handle: this.handles[index],
                        value: newVal,
                        values: newValues
                    });
                    otherVal = this.values(index ? 0 : 1);
                    if (allowed !== false) {
                        this.values(index, newVal);
                    }
                }
            } else {
                if (newVal !== this.value()) {
                    allowed = this._trigger('slide', event, {
                        handle: this.handles[index],
                        value: newVal
                    });
                    if (allowed !== false) {
                        this.value(newVal);
                    }
                }
            }
        },
        _stop: function (event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            this._trigger('stop', event, uiHash);
        },
        _change: function (event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                var uiHash = {
                    handle: this.handles[index],
                    value: this.value()
                };
                if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);
                    uiHash.values = this.values();
                }
                this._lastChangedValue = index;
                this._trigger('change', event, uiHash);
            }
        },
        value: function (newValue) {
            if (arguments.length) {
                this.options.value = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, 0);
                return;
            }
            return this._value();
        },
        values: function (index, newValue) {
            var vals, newValues, i;
            if (arguments.length > 1) {
                this.options.values[index] = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, index);
                return;
            }
            if (arguments.length) {
                if ($.isArray(arguments[0])) {
                    vals = this.options.values;
                    newValues = arguments[0];
                    for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(newValues[i]);
                        this._change(null, i);
                    }
                    this._refreshValue();
                } else {
                    if (this.options.values && this.options.values.length) {
                        return this._values(index);
                    } else {
                        return this.value();
                    }
                }
            } else {
                return this._values();
            }
        },
        _setOption: function (key, value) {
            var i, valsLength = 0;
            if (key === 'range' && this.options.range === true) {
                if (value === 'min') {
                    this.options.value = this._values(0);
                    this.options.values = null;
                } else if (value === 'max') {
                    this.options.value = this._values(this.options.values.length - 1);
                    this.options.values = null;
                }
            }
            if ($.isArray(this.options.values)) {
                valsLength = this.options.values.length;
            }
            if (key === 'disabled') {
                this.element.toggleClass('ui-state-disabled', !!value);
            }
            this._super(key, value);
            switch (key) {
            case 'orientation':
                this._detectOrientation();
                this.element.removeClass('ui-slider-horizontal ui-slider-vertical').addClass('ui-slider-' + this.orientation);
                this._refreshValue();
                this.handles.css(value === 'horizontal' ? 'bottom' : 'left', '');
                break;
            case 'value':
                this._animateOff = true;
                this._refreshValue();
                this._change(null, 0);
                this._animateOff = false;
                break;
            case 'values':
                this._animateOff = true;
                this._refreshValue();
                for (i = 0; i < valsLength; i += 1) {
                    this._change(null, i);
                }
                this._animateOff = false;
                break;
            case 'step':
            case 'min':
            case 'max':
                this._animateOff = true;
                this._calculateNewMax();
                this._refreshValue();
                this._animateOff = false;
                break;
            case 'range':
                this._animateOff = true;
                this._refresh();
                this._animateOff = false;
                break;
            }
        },
        _value: function () {
            var val = this.options.value;
            val = this._trimAlignValue(val);
            return val;
        },
        _values: function (index) {
            var val, vals, i;
            if (arguments.length) {
                val = this.options.values[index];
                val = this._trimAlignValue(val);
                return val;
            } else if (this.options.values && this.options.values.length) {
                vals = this.options.values.slice();
                for (i = 0; i < vals.length; i += 1) {
                    vals[i] = this._trimAlignValue(vals[i]);
                }
                return vals;
            } else {
                return [];
            }
        },
        _trimAlignValue: function (val) {
            if (val <= this._valueMin()) {
                return this._valueMin();
            }
            if (val >= this._valueMax()) {
                return this._valueMax();
            }
            var step = this.options.step > 0 ? this.options.step : 1, valModStep = (val - this._valueMin()) % step, alignValue = val - valModStep;
            if (Math.abs(valModStep) * 2 >= step) {
                alignValue += valModStep > 0 ? step : -step;
            }
            return parseFloat(alignValue.toFixed(5));
        },
        _calculateNewMax: function () {
            var max = this.options.max, min = this._valueMin(), step = this.options.step, aboveMin = Math.floor(+(max - min).toFixed(this._precision()) / step) * step;
            max = aboveMin + min;
            this.max = parseFloat(max.toFixed(this._precision()));
        },
        _precision: function () {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min));
            }
            return precision;
        },
        _precisionOf: function (num) {
            var str = num.toString(), decimal = str.indexOf('.');
            return decimal === -1 ? 0 : str.length - decimal - 1;
        },
        _valueMin: function () {
            return this.options.min;
        },
        _valueMax: function () {
            return this.max;
        },
        _refreshValue: function () {
            var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = !this._animateOff ? o.animate : false, _set = {};
            if (this.options.values && this.options.values.length) {
                this.handles.each(function (i) {
                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                    _set[that.orientation === 'horizontal' ? 'left' : 'bottom'] = valPercent + '%';
                    $(this).stop(1, 1)[animate ? 'animate' : 'css'](_set, o.animate);
                    if (that.options.range === true) {
                        if (that.orientation === 'horizontal') {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? 'animate' : 'css']({ left: valPercent + '%' }, o.animate);
                            }
                            if (i === 1) {
                                that.range[animate ? 'animate' : 'css']({ width: valPercent - lastValPercent + '%' }, {
                                    queue: false,
                                    duration: o.animate
                                });
                            }
                        } else {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? 'animate' : 'css']({ bottom: valPercent + '%' }, o.animate);
                            }
                            if (i === 1) {
                                that.range[animate ? 'animate' : 'css']({ height: valPercent - lastValPercent + '%' }, {
                                    queue: false,
                                    duration: o.animate
                                });
                            }
                        }
                    }
                    lastValPercent = valPercent;
                });
            } else {
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
                _set[this.orientation === 'horizontal' ? 'left' : 'bottom'] = valPercent + '%';
                this.handle.stop(1, 1)[animate ? 'animate' : 'css'](_set, o.animate);
                if (oRange === 'min' && this.orientation === 'horizontal') {
                    this.range.stop(1, 1)[animate ? 'animate' : 'css']({ width: valPercent + '%' }, o.animate);
                }
                if (oRange === 'max' && this.orientation === 'horizontal') {
                    this.range[animate ? 'animate' : 'css']({ width: 100 - valPercent + '%' }, {
                        queue: false,
                        duration: o.animate
                    });
                }
                if (oRange === 'min' && this.orientation === 'vertical') {
                    this.range.stop(1, 1)[animate ? 'animate' : 'css']({ height: valPercent + '%' }, o.animate);
                }
                if (oRange === 'max' && this.orientation === 'vertical') {
                    this.range[animate ? 'animate' : 'css']({ height: 100 - valPercent + '%' }, {
                        queue: false,
                        duration: o.animate
                    });
                }
            }
        },
        _handleEvents: {
            keydown: function (event) {
                var allowed, curVal, newVal, step, index = $(event.target).data('ui-slider-handle-index');
                switch (event.keyCode) {
                case $.ui.keyCode.HOME:
                case $.ui.keyCode.END:
                case $.ui.keyCode.PAGE_UP:
                case $.ui.keyCode.PAGE_DOWN:
                case $.ui.keyCode.UP:
                case $.ui.keyCode.RIGHT:
                case $.ui.keyCode.DOWN:
                case $.ui.keyCode.LEFT:
                    event.preventDefault();
                    if (!this._keySliding) {
                        this._keySliding = true;
                        $(event.target).addClass('ui-state-active');
                        allowed = this._start(event, index);
                        if (allowed === false) {
                            return;
                        }
                    }
                    break;
                }
                step = this.options.step;
                if (this.options.values && this.options.values.length) {
                    curVal = newVal = this.values(index);
                } else {
                    curVal = newVal = this.value();
                }
                switch (event.keyCode) {
                case $.ui.keyCode.HOME:
                    newVal = this._valueMin();
                    break;
                case $.ui.keyCode.END:
                    newVal = this._valueMax();
                    break;
                case $.ui.keyCode.PAGE_UP:
                    newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / this.numPages);
                    break;
                case $.ui.keyCode.PAGE_DOWN:
                    newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / this.numPages);
                    break;
                case $.ui.keyCode.UP:
                case $.ui.keyCode.RIGHT:
                    if (curVal === this._valueMax()) {
                        return;
                    }
                    newVal = this._trimAlignValue(curVal + step);
                    break;
                case $.ui.keyCode.DOWN:
                case $.ui.keyCode.LEFT:
                    if (curVal === this._valueMin()) {
                        return;
                    }
                    newVal = this._trimAlignValue(curVal - step);
                    break;
                }
                this._slide(event, index, newVal);
            },
            keyup: function (event) {
                var index = $(event.target).data('ui-slider-handle-index');
                if (this._keySliding) {
                    this._keySliding = false;
                    this._stop(event, index);
                    this._change(event, index);
                    $(event.target).removeClass('ui-state-active');
                }
            }
        }
    });
    var sortable = $.widget('ui.sortable', $.ui.mouse, {
        version: '1.11.4',
        widgetEventPrefix: 'sort',
        ready: false,
        options: {
            appendTo: 'parent',
            axis: false,
            connectWith: false,
            containment: false,
            cursor: 'auto',
            cursorAt: false,
            dropOnEmpty: true,
            forcePlaceholderSize: false,
            forceHelperSize: false,
            grid: false,
            handle: false,
            helper: 'original',
            items: '> *',
            opacity: false,
            placeholder: false,
            revert: false,
            scroll: true,
            scrollSensitivity: 20,
            scrollSpeed: 20,
            scope: 'default',
            tolerance: 'intersect',
            zIndex: 1000,
            activate: null,
            beforeStop: null,
            change: null,
            deactivate: null,
            out: null,
            over: null,
            receive: null,
            remove: null,
            sort: null,
            start: null,
            stop: null,
            update: null
        },
        _isOverAxis: function (x, reference, size) {
            return x >= reference && x < reference + size;
        },
        _isFloating: function (item) {
            return /left|right/.test(item.css('float')) || /inline|table-cell/.test(item.css('display'));
        },
        _create: function () {
            this.containerCache = {};
            this.element.addClass('ui-sortable');
            this.refresh();
            this.offset = this.element.offset();
            this._mouseInit();
            this._setHandleClassName();
            this.ready = true;
        },
        _setOption: function (key, value) {
            this._super(key, value);
            if (key === 'handle') {
                this._setHandleClassName();
            }
        },
        _setHandleClassName: function () {
            this.element.find('.ui-sortable-handle').removeClass('ui-sortable-handle');
            $.each(this.items, function () {
                (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass('ui-sortable-handle');
            });
        },
        _destroy: function () {
            this.element.removeClass('ui-sortable ui-sortable-disabled').find('.ui-sortable-handle').removeClass('ui-sortable-handle');
            this._mouseDestroy();
            for (var i = this.items.length - 1; i >= 0; i--) {
                this.items[i].item.removeData(this.widgetName + '-item');
            }
            return this;
        },
        _mouseCapture: function (event, overrideHandle) {
            var currentItem = null, validHandle = false, that = this;
            if (this.reverting) {
                return false;
            }
            if (this.options.disabled || this.options.type === 'static') {
                return false;
            }
            this._refreshItems(event);
            $(event.target).parents().each(function () {
                if ($.data(this, that.widgetName + '-item') === that) {
                    currentItem = $(this);
                    return false;
                }
            });
            if ($.data(event.target, that.widgetName + '-item') === that) {
                currentItem = $(event.target);
            }
            if (!currentItem) {
                return false;
            }
            if (this.options.handle && !overrideHandle) {
                $(this.options.handle, currentItem).find('*').addBack().each(function () {
                    if (this === event.target) {
                        validHandle = true;
                    }
                });
                if (!validHandle) {
                    return false;
                }
            }
            this.currentItem = currentItem;
            this._removeCurrentsFromItems();
            return true;
        },
        _mouseStart: function (event, overrideHandle, noActivation) {
            var i, body, o = this.options;
            this.currentContainer = this;
            this.refreshPositions();
            this.helper = this._createHelper(event);
            this._cacheHelperProportions();
            this._cacheMargins();
            this.scrollParent = this.helper.scrollParent();
            this.offset = this.currentItem.offset();
            this.offset = {
                top: this.offset.top - this.margins.top,
                left: this.offset.left - this.margins.left
            };
            $.extend(this.offset, {
                click: {
                    left: event.pageX - this.offset.left,
                    top: event.pageY - this.offset.top
                },
                parent: this._getParentOffset(),
                relative: this._getRelativeOffset()
            });
            this.helper.css('position', 'absolute');
            this.cssPosition = this.helper.css('position');
            this.originalPosition = this._generatePosition(event);
            this.originalPageX = event.pageX;
            this.originalPageY = event.pageY;
            o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
            this.domPosition = {
                prev: this.currentItem.prev()[0],
                parent: this.currentItem.parent()[0]
            };
            if (this.helper[0] !== this.currentItem[0]) {
                this.currentItem.hide();
            }
            this._createPlaceholder();
            if (o.containment) {
                this._setContainment();
            }
            if (o.cursor && o.cursor !== 'auto') {
                body = this.document.find('body');
                this.storedCursor = body.css('cursor');
                body.css('cursor', o.cursor);
                this.storedStylesheet = $('<style>*{ cursor: ' + o.cursor + ' !important; }</style>').appendTo(body);
            }
            if (o.opacity) {
                if (this.helper.css('opacity')) {
                    this._storedOpacity = this.helper.css('opacity');
                }
                this.helper.css('opacity', o.opacity);
            }
            if (o.zIndex) {
                if (this.helper.css('zIndex')) {
                    this._storedZIndex = this.helper.css('zIndex');
                }
                this.helper.css('zIndex', o.zIndex);
            }
            if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== 'HTML') {
                this.overflowOffset = this.scrollParent.offset();
            }
            this._trigger('start', event, this._uiHash());
            if (!this._preserveHelperProportions) {
                this._cacheHelperProportions();
            }
            if (!noActivation) {
                for (i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger('activate', event, this._uiHash(this));
                }
            }
            if ($.ui.ddmanager) {
                $.ui.ddmanager.current = this;
            }
            if ($.ui.ddmanager && !o.dropBehaviour) {
                $.ui.ddmanager.prepareOffsets(this, event);
            }
            this.dragging = true;
            this.helper.addClass('ui-sortable-helper');
            this._mouseDrag(event);
            return true;
        },
        _mouseDrag: function (event) {
            var i, item, itemElement, intersection, o = this.options, scrolled = false;
            this.position = this._generatePosition(event);
            this.positionAbs = this._convertPositionTo('absolute');
            if (!this.lastPositionAbs) {
                this.lastPositionAbs = this.positionAbs;
            }
            if (this.options.scroll) {
                if (this.scrollParent[0] !== this.document[0] && this.scrollParent[0].tagName !== 'HTML') {
                    if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                    } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
                        this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                    }
                    if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                    } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
                        this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                    }
                } else {
                    if (event.pageY - this.document.scrollTop() < o.scrollSensitivity) {
                        scrolled = this.document.scrollTop(this.document.scrollTop() - o.scrollSpeed);
                    } else if (this.window.height() - (event.pageY - this.document.scrollTop()) < o.scrollSensitivity) {
                        scrolled = this.document.scrollTop(this.document.scrollTop() + o.scrollSpeed);
                    }
                    if (event.pageX - this.document.scrollLeft() < o.scrollSensitivity) {
                        scrolled = this.document.scrollLeft(this.document.scrollLeft() - o.scrollSpeed);
                    } else if (this.window.width() - (event.pageX - this.document.scrollLeft()) < o.scrollSensitivity) {
                        scrolled = this.document.scrollLeft(this.document.scrollLeft() + o.scrollSpeed);
                    }
                }
                if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                    $.ui.ddmanager.prepareOffsets(this, event);
                }
            }
            this.positionAbs = this._convertPositionTo('absolute');
            if (!this.options.axis || this.options.axis !== 'y') {
                this.helper[0].style.left = this.position.left + 'px';
            }
            if (!this.options.axis || this.options.axis !== 'x') {
                this.helper[0].style.top = this.position.top + 'px';
            }
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                itemElement = item.item[0];
                intersection = this._intersectsWithPointer(item);
                if (!intersection) {
                    continue;
                }
                if (item.instance !== this.currentContainer) {
                    continue;
                }
                if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? 'next' : 'prev']()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === 'semi-dynamic' ? !$.contains(this.element[0], itemElement) : true)) {
                    this.direction = intersection === 1 ? 'down' : 'up';
                    if (this.options.tolerance === 'pointer' || this._intersectsWithSides(item)) {
                        this._rearrange(event, item);
                    } else {
                        break;
                    }
                    this._trigger('change', event, this._uiHash());
                    break;
                }
            }
            this._contactContainers(event);
            if ($.ui.ddmanager) {
                $.ui.ddmanager.drag(this, event);
            }
            this._trigger('sort', event, this._uiHash());
            this.lastPositionAbs = this.positionAbs;
            return false;
        },
        _mouseStop: function (event, noPropagation) {
            if (!event) {
                return;
            }
            if ($.ui.ddmanager && !this.options.dropBehaviour) {
                $.ui.ddmanager.drop(this, event);
            }
            if (this.options.revert) {
                var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {};
                if (!axis || axis === 'x') {
                    animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft);
                }
                if (!axis || axis === 'y') {
                    animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop);
                }
                this.reverting = true;
                $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function () {
                    that._clear(event);
                });
            } else {
                this._clear(event, noPropagation);
            }
            return false;
        },
        cancel: function () {
            if (this.dragging) {
                this._mouseUp({ target: null });
                if (this.options.helper === 'original') {
                    this.currentItem.css(this._storedCSS).removeClass('ui-sortable-helper');
                } else {
                    this.currentItem.show();
                }
                for (var i = this.containers.length - 1; i >= 0; i--) {
                    this.containers[i]._trigger('deactivate', null, this._uiHash(this));
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger('out', null, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
            }
            if (this.placeholder) {
                if (this.placeholder[0].parentNode) {
                    this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                }
                if (this.options.helper !== 'original' && this.helper && this.helper[0].parentNode) {
                    this.helper.remove();
                }
                $.extend(this, {
                    helper: null,
                    dragging: false,
                    reverting: false,
                    _noFinalSort: null
                });
                if (this.domPosition.prev) {
                    $(this.domPosition.prev).after(this.currentItem);
                } else {
                    $(this.domPosition.parent).prepend(this.currentItem);
                }
            }
            return this;
        },
        serialize: function (o) {
            var items = this._getItemsAsjQuery(o && o.connected), str = [];
            o = o || {};
            $(items).each(function () {
                var res = ($(o.item || this).attr(o.attribute || 'id') || '').match(o.expression || /(.+)[\-=_](.+)/);
                if (res) {
                    str.push((o.key || res[1] + '[]') + '=' + (o.key && o.expression ? res[1] : res[2]));
                }
            });
            if (!str.length && o.key) {
                str.push(o.key + '=');
            }
            return str.join('&');
        },
        toArray: function (o) {
            var items = this._getItemsAsjQuery(o && o.connected), ret = [];
            o = o || {};
            items.each(function () {
                ret.push($(o.item || this).attr(o.attribute || 'id') || '');
            });
            return ret;
        },
        _intersectsWith: function (item) {
            var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElementHeight = this.options.axis === 'x' || y1 + dyClick > t && y1 + dyClick < b, isOverElementWidth = this.options.axis === 'y' || x1 + dxClick > l && x1 + dxClick < r, isOverElement = isOverElementHeight && isOverElementWidth;
            if (this.options.tolerance === 'pointer' || this.options.forcePointerForContainers || this.options.tolerance !== 'pointer' && this.helperProportions[this.floating ? 'width' : 'height'] > item[this.floating ? 'width' : 'height']) {
                return isOverElement;
            } else {
                return l < x1 + this.helperProportions.width / 2 && x2 - this.helperProportions.width / 2 < r && t < y1 + this.helperProportions.height / 2 && y2 - this.helperProportions.height / 2 < b;
            }
        },
        _intersectsWithPointer: function (item) {
            var isOverElementHeight = this.options.axis === 'x' || this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = this.options.axis === 'y' || this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth, verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            if (!isOverElement) {
                return false;
            }
            return this.floating ? horizontalDirection && horizontalDirection === 'right' || verticalDirection === 'down' ? 2 : 1 : verticalDirection && (verticalDirection === 'down' ? 2 : 1);
        },
        _intersectsWithSides: function (item) {
            var isOverBottomHalf = this._isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height), isOverRightHalf = this._isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
            if (this.floating && horizontalDirection) {
                return horizontalDirection === 'right' && isOverRightHalf || horizontalDirection === 'left' && !isOverRightHalf;
            } else {
                return verticalDirection && (verticalDirection === 'down' && isOverBottomHalf || verticalDirection === 'up' && !isOverBottomHalf);
            }
        },
        _getDragVerticalDirection: function () {
            var delta = this.positionAbs.top - this.lastPositionAbs.top;
            return delta !== 0 && (delta > 0 ? 'down' : 'up');
        },
        _getDragHorizontalDirection: function () {
            var delta = this.positionAbs.left - this.lastPositionAbs.left;
            return delta !== 0 && (delta > 0 ? 'right' : 'left');
        },
        refresh: function (event) {
            this._refreshItems(event);
            this._setHandleClassName();
            this.refreshPositions();
            return this;
        },
        _connectWith: function () {
            var options = this.options;
            return options.connectWith.constructor === String ? [options.connectWith] : options.connectWith;
        },
        _getItemsAsjQuery: function (connected) {
            var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
            if (connectWith && connected) {
                for (i = connectWith.length - 1; i >= 0; i--) {
                    cur = $(connectWith[i], this.document[0]);
                    for (j = cur.length - 1; j >= 0; j--) {
                        inst = $.data(cur[j], this.widgetFullName);
                        if (inst && inst !== this && !inst.options.disabled) {
                            queries.push([
                                $.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not('.ui-sortable-helper').not('.ui-sortable-placeholder'),
                                inst
                            ]);
                        }
                    }
                }
            }
            queries.push([
                $.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                    options: this.options,
                    item: this.currentItem
                }) : $(this.options.items, this.element).not('.ui-sortable-helper').not('.ui-sortable-placeholder'),
                this
            ]);
            function addItems() {
                items.push(this);
            }
            for (i = queries.length - 1; i >= 0; i--) {
                queries[i][0].each(addItems);
            }
            return $(items);
        },
        _removeCurrentsFromItems: function () {
            var list = this.currentItem.find(':data(' + this.widgetName + '-item)');
            this.items = $.grep(this.items, function (item) {
                for (var j = 0; j < list.length; j++) {
                    if (list[j] === item.item[0]) {
                        return false;
                    }
                }
                return true;
            });
        },
        _refreshItems: function (event) {
            this.items = [];
            this.containers = [this];
            var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [[
                        $.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, { item: this.currentItem }) : $(this.options.items, this.element),
                        this
                    ]], connectWith = this._connectWith();
            if (connectWith && this.ready) {
                for (i = connectWith.length - 1; i >= 0; i--) {
                    cur = $(connectWith[i], this.document[0]);
                    for (j = cur.length - 1; j >= 0; j--) {
                        inst = $.data(cur[j], this.widgetFullName);
                        if (inst && inst !== this && !inst.options.disabled) {
                            queries.push([
                                $.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, { item: this.currentItem }) : $(inst.options.items, inst.element),
                                inst
                            ]);
                            this.containers.push(inst);
                        }
                    }
                }
            }
            for (i = queries.length - 1; i >= 0; i--) {
                targetData = queries[i][1];
                _queries = queries[i][0];
                for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                    item = $(_queries[j]);
                    item.data(this.widgetName + '-item', targetData);
                    items.push({
                        item: item,
                        instance: targetData,
                        width: 0,
                        height: 0,
                        left: 0,
                        top: 0
                    });
                }
            }
        },
        refreshPositions: function (fast) {
            this.floating = this.items.length ? this.options.axis === 'x' || this._isFloating(this.items[0].item) : false;
            if (this.offsetParent && this.helper) {
                this.offset.parent = this._getParentOffset();
            }
            var i, item, t, p;
            for (i = this.items.length - 1; i >= 0; i--) {
                item = this.items[i];
                if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
                    continue;
                }
                t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                if (!fast) {
                    item.width = t.outerWidth();
                    item.height = t.outerHeight();
                }
                p = t.offset();
                item.left = p.left;
                item.top = p.top;
            }
            if (this.options.custom && this.options.custom.refreshContainers) {
                this.options.custom.refreshContainers.call(this);
            } else {
                for (i = this.containers.length - 1; i >= 0; i--) {
                    p = this.containers[i].element.offset();
                    this.containers[i].containerCache.left = p.left;
                    this.containers[i].containerCache.top = p.top;
                    this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                    this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
                }
            }
            return this;
        },
        _createPlaceholder: function (that) {
            that = that || this;
            var className, o = that.options;
            if (!o.placeholder || o.placeholder.constructor === String) {
                className = o.placeholder;
                o.placeholder = {
                    element: function () {
                        var nodeName = that.currentItem[0].nodeName.toLowerCase(), element = $('<' + nodeName + '>', that.document[0]).addClass(className || that.currentItem[0].className + ' ui-sortable-placeholder').removeClass('ui-sortable-helper');
                        if (nodeName === 'tbody') {
                            that._createTrPlaceholder(that.currentItem.find('tr').eq(0), $('<tr>', that.document[0]).appendTo(element));
                        } else if (nodeName === 'tr') {
                            that._createTrPlaceholder(that.currentItem, element);
                        } else if (nodeName === 'img') {
                            element.attr('src', that.currentItem.attr('src'));
                        }
                        if (!className) {
                            element.css('visibility', 'hidden');
                        }
                        return element;
                    },
                    update: function (container, p) {
                        if (className && !o.forcePlaceholderSize) {
                            return;
                        }
                        if (!p.height()) {
                            p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css('paddingTop') || 0, 10) - parseInt(that.currentItem.css('paddingBottom') || 0, 10));
                        }
                        if (!p.width()) {
                            p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css('paddingLeft') || 0, 10) - parseInt(that.currentItem.css('paddingRight') || 0, 10));
                        }
                    }
                };
            }
            that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
            that.currentItem.after(that.placeholder);
            o.placeholder.update(that, that.placeholder);
        },
        _createTrPlaceholder: function (sourceTr, targetTr) {
            var that = this;
            sourceTr.children().each(function () {
                $('<td>&#160;</td>', that.document[0]).attr('colspan', $(this).attr('colspan') || 1).appendTo(targetTr);
            });
        },
        _contactContainers: function (event) {
            var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, cur, nearBottom, floating, axis, innermostContainer = null, innermostIndex = null;
            for (i = this.containers.length - 1; i >= 0; i--) {
                if ($.contains(this.currentItem[0], this.containers[i].element[0])) {
                    continue;
                }
                if (this._intersectsWith(this.containers[i].containerCache)) {
                    if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
                        continue;
                    }
                    innermostContainer = this.containers[i];
                    innermostIndex = i;
                } else {
                    if (this.containers[i].containerCache.over) {
                        this.containers[i]._trigger('out', event, this._uiHash(this));
                        this.containers[i].containerCache.over = 0;
                    }
                }
            }
            if (!innermostContainer) {
                return;
            }
            if (this.containers.length === 1) {
                if (!this.containers[innermostIndex].containerCache.over) {
                    this.containers[innermostIndex]._trigger('over', event, this._uiHash(this));
                    this.containers[innermostIndex].containerCache.over = 1;
                }
            } else {
                dist = 10000;
                itemWithLeastDistance = null;
                floating = innermostContainer.floating || this._isFloating(this.currentItem);
                posProperty = floating ? 'left' : 'top';
                sizeProperty = floating ? 'width' : 'height';
                axis = floating ? 'clientX' : 'clientY';
                for (j = this.items.length - 1; j >= 0; j--) {
                    if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
                        continue;
                    }
                    if (this.items[j].item[0] === this.currentItem[0]) {
                        continue;
                    }
                    cur = this.items[j].item.offset()[posProperty];
                    nearBottom = false;
                    if (event[axis] - cur > this.items[j][sizeProperty] / 2) {
                        nearBottom = true;
                    }
                    if (Math.abs(event[axis] - cur) < dist) {
                        dist = Math.abs(event[axis] - cur);
                        itemWithLeastDistance = this.items[j];
                        this.direction = nearBottom ? 'up' : 'down';
                    }
                }
                if (!itemWithLeastDistance && !this.options.dropOnEmpty) {
                    return;
                }
                if (this.currentContainer === this.containers[innermostIndex]) {
                    if (!this.currentContainer.containerCache.over) {
                        this.containers[innermostIndex]._trigger('over', event, this._uiHash());
                        this.currentContainer.containerCache.over = 1;
                    }
                    return;
                }
                itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                this._trigger('change', event, this._uiHash());
                this.containers[innermostIndex]._trigger('change', event, this._uiHash(this));
                this.currentContainer = this.containers[innermostIndex];
                this.options.placeholder.update(this.currentContainer, this.placeholder);
                this.containers[innermostIndex]._trigger('over', event, this._uiHash(this));
                this.containers[innermostIndex].containerCache.over = 1;
            }
        },
        _createHelper: function (event) {
            var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [
                    event,
                    this.currentItem
                ])) : o.helper === 'clone' ? this.currentItem.clone() : this.currentItem;
            if (!helper.parents('body').length) {
                $(o.appendTo !== 'parent' ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
            }
            if (helper[0] === this.currentItem[0]) {
                this._storedCSS = {
                    width: this.currentItem[0].style.width,
                    height: this.currentItem[0].style.height,
                    position: this.currentItem.css('position'),
                    top: this.currentItem.css('top'),
                    left: this.currentItem.css('left')
                };
            }
            if (!helper[0].style.width || o.forceHelperSize) {
                helper.width(this.currentItem.width());
            }
            if (!helper[0].style.height || o.forceHelperSize) {
                helper.height(this.currentItem.height());
            }
            return helper;
        },
        _adjustOffsetFromHelper: function (obj) {
            if (typeof obj === 'string') {
                obj = obj.split(' ');
            }
            if ($.isArray(obj)) {
                obj = {
                    left: +obj[0],
                    top: +obj[1] || 0
                };
            }
            if ('left' in obj) {
                this.offset.click.left = obj.left + this.margins.left;
            }
            if ('right' in obj) {
                this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
            }
            if ('top' in obj) {
                this.offset.click.top = obj.top + this.margins.top;
            }
            if ('bottom' in obj) {
                this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
            }
        },
        _getParentOffset: function () {
            this.offsetParent = this.helper.offsetParent();
            var po = this.offsetParent.offset();
            if (this.cssPosition === 'absolute' && this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                po.left += this.scrollParent.scrollLeft();
                po.top += this.scrollParent.scrollTop();
            }
            if (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === 'html' && $.ui.ie) {
                po = {
                    top: 0,
                    left: 0
                };
            }
            return {
                top: po.top + (parseInt(this.offsetParent.css('borderTopWidth'), 10) || 0),
                left: po.left + (parseInt(this.offsetParent.css('borderLeftWidth'), 10) || 0)
            };
        },
        _getRelativeOffset: function () {
            if (this.cssPosition === 'relative') {
                var p = this.currentItem.position();
                return {
                    top: p.top - (parseInt(this.helper.css('top'), 10) || 0) + this.scrollParent.scrollTop(),
                    left: p.left - (parseInt(this.helper.css('left'), 10) || 0) + this.scrollParent.scrollLeft()
                };
            } else {
                return {
                    top: 0,
                    left: 0
                };
            }
        },
        _cacheMargins: function () {
            this.margins = {
                left: parseInt(this.currentItem.css('marginLeft'), 10) || 0,
                top: parseInt(this.currentItem.css('marginTop'), 10) || 0
            };
        },
        _cacheHelperProportions: function () {
            this.helperProportions = {
                width: this.helper.outerWidth(),
                height: this.helper.outerHeight()
            };
        },
        _setContainment: function () {
            var ce, co, over, o = this.options;
            if (o.containment === 'parent') {
                o.containment = this.helper[0].parentNode;
            }
            if (o.containment === 'document' || o.containment === 'window') {
                this.containment = [
                    0 - this.offset.relative.left - this.offset.parent.left,
                    0 - this.offset.relative.top - this.offset.parent.top,
                    o.containment === 'document' ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left,
                    (o.containment === 'document' ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
                ];
            }
            if (!/^(document|window|parent)$/.test(o.containment)) {
                ce = $(o.containment)[0];
                co = $(o.containment).offset();
                over = $(ce).css('overflow') !== 'hidden';
                this.containment = [
                    co.left + (parseInt($(ce).css('borderLeftWidth'), 10) || 0) + (parseInt($(ce).css('paddingLeft'), 10) || 0) - this.margins.left,
                    co.top + (parseInt($(ce).css('borderTopWidth'), 10) || 0) + (parseInt($(ce).css('paddingTop'), 10) || 0) - this.margins.top,
                    co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css('borderLeftWidth'), 10) || 0) - (parseInt($(ce).css('paddingRight'), 10) || 0) - this.helperProportions.width - this.margins.left,
                    co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css('borderTopWidth'), 10) || 0) - (parseInt($(ce).css('paddingBottom'), 10) || 0) - this.helperProportions.height - this.margins.top
                ];
            }
        },
        _convertPositionTo: function (d, pos) {
            if (!pos) {
                pos = this.position;
            }
            var mod = d === 'absolute' ? 1 : -1, scroll = this.cssPosition === 'absolute' && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            return {
                top: pos.top + this.offset.relative.top * mod + this.offset.parent.top * mod - (this.cssPosition === 'fixed' ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                left: pos.left + this.offset.relative.left * mod + this.offset.parent.left * mod - (this.cssPosition === 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
            };
        },
        _generatePosition: function (event) {
            var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = this.cssPosition === 'absolute' && !(this.scrollParent[0] !== this.document[0] && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
            if (this.cssPosition === 'relative' && !(this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0])) {
                this.offset.relative = this._getRelativeOffset();
            }
            if (this.originalPosition) {
                if (this.containment) {
                    if (event.pageX - this.offset.click.left < this.containment[0]) {
                        pageX = this.containment[0] + this.offset.click.left;
                    }
                    if (event.pageY - this.offset.click.top < this.containment[1]) {
                        pageY = this.containment[1] + this.offset.click.top;
                    }
                    if (event.pageX - this.offset.click.left > this.containment[2]) {
                        pageX = this.containment[2] + this.offset.click.left;
                    }
                    if (event.pageY - this.offset.click.top > this.containment[3]) {
                        pageY = this.containment[3] + this.offset.click.top;
                    }
                }
                if (o.grid) {
                    top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                    pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                    left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                    pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                }
            }
            return {
                top: pageY - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + (this.cssPosition === 'fixed' ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                left: pageX - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + (this.cssPosition === 'fixed' ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
            };
        },
        _rearrange: function (event, i, a, hardRefresh) {
            a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], this.direction === 'down' ? i.item[0] : i.item[0].nextSibling);
            this.counter = this.counter ? ++this.counter : 1;
            var counter = this.counter;
            this._delay(function () {
                if (counter === this.counter) {
                    this.refreshPositions(!hardRefresh);
                }
            });
        },
        _clear: function (event, noPropagation) {
            this.reverting = false;
            var i, delayedTriggers = [];
            if (!this._noFinalSort && this.currentItem.parent().length) {
                this.placeholder.before(this.currentItem);
            }
            this._noFinalSort = null;
            if (this.helper[0] === this.currentItem[0]) {
                for (i in this._storedCSS) {
                    if (this._storedCSS[i] === 'auto' || this._storedCSS[i] === 'static') {
                        this._storedCSS[i] = '';
                    }
                }
                this.currentItem.css(this._storedCSS).removeClass('ui-sortable-helper');
            } else {
                this.currentItem.show();
            }
            if (this.fromOutside && !noPropagation) {
                delayedTriggers.push(function (event) {
                    this._trigger('receive', event, this._uiHash(this.fromOutside));
                });
            }
            if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not('.ui-sortable-helper')[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
                delayedTriggers.push(function (event) {
                    this._trigger('update', event, this._uiHash());
                });
            }
            if (this !== this.currentContainer) {
                if (!noPropagation) {
                    delayedTriggers.push(function (event) {
                        this._trigger('remove', event, this._uiHash());
                    });
                    delayedTriggers.push(function (c) {
                        return function (event) {
                            c._trigger('receive', event, this._uiHash(this));
                        };
                    }.call(this, this.currentContainer));
                    delayedTriggers.push(function (c) {
                        return function (event) {
                            c._trigger('update', event, this._uiHash(this));
                        };
                    }.call(this, this.currentContainer));
                }
            }
            function delayEvent(type, instance, container) {
                return function (event) {
                    container._trigger(type, event, instance._uiHash(instance));
                };
            }
            for (i = this.containers.length - 1; i >= 0; i--) {
                if (!noPropagation) {
                    delayedTriggers.push(delayEvent('deactivate', this, this.containers[i]));
                }
                if (this.containers[i].containerCache.over) {
                    delayedTriggers.push(delayEvent('out', this, this.containers[i]));
                    this.containers[i].containerCache.over = 0;
                }
            }
            if (this.storedCursor) {
                this.document.find('body').css('cursor', this.storedCursor);
                this.storedStylesheet.remove();
            }
            if (this._storedOpacity) {
                this.helper.css('opacity', this._storedOpacity);
            }
            if (this._storedZIndex) {
                this.helper.css('zIndex', this._storedZIndex === 'auto' ? '' : this._storedZIndex);
            }
            this.dragging = false;
            if (!noPropagation) {
                this._trigger('beforeStop', event, this._uiHash());
            }
            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
            if (!this.cancelHelperRemoval) {
                if (this.helper[0] !== this.currentItem[0]) {
                    this.helper.remove();
                }
                this.helper = null;
            }
            if (!noPropagation) {
                for (i = 0; i < delayedTriggers.length; i++) {
                    delayedTriggers[i].call(this, event);
                }
                this._trigger('stop', event, this._uiHash());
            }
            this.fromOutside = false;
            return !this.cancelHelperRemoval;
        },
        _trigger: function () {
            if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                this.cancel();
            }
        },
        _uiHash: function (_inst) {
            var inst = _inst || this;
            return {
                helper: inst.helper,
                placeholder: inst.placeholder || $([]),
                position: inst.position,
                originalPosition: inst.originalPosition,
                offset: inst.positionAbs,
                item: inst.currentItem,
                sender: _inst ? _inst.element : null
            };
        }
    });
    function spinner_modifier(fn) {
        return function () {
            var previous = this.element.val();
            fn.apply(this, arguments);
            this._refresh();
            if (previous !== this.element.val()) {
                this._trigger('change');
            }
        };
    }
    var spinner = $.widget('ui.spinner', {
        version: '1.11.4',
        defaultElement: '<input>',
        widgetEventPrefix: 'spin',
        options: {
            culture: null,
            icons: {
                down: 'ui-icon-triangle-1-s',
                up: 'ui-icon-triangle-1-n'
            },
            incremental: true,
            max: null,
            min: null,
            numberFormat: null,
            page: 10,
            step: 1,
            change: null,
            spin: null,
            start: null,
            stop: null
        },
        _create: function () {
            this._setOption('max', this.options.max);
            this._setOption('min', this.options.min);
            this._setOption('step', this.options.step);
            if (this.value() !== '') {
                this._value(this.element.val(), true);
            }
            this._draw();
            this._on(this._events);
            this._refresh();
            this._on(this.window, {
                beforeunload: function () {
                    this.element.removeAttr('autocomplete');
                }
            });
        },
        _getCreateOptions: function () {
            var options = {}, element = this.element;
            $.each([
                'min',
                'max',
                'step'
            ], function (i, option) {
                var value = element.attr(option);
                if (value !== undefined && value.length) {
                    options[option] = value;
                }
            });
            return options;
        },
        _events: {
            keydown: function (event) {
                if (this._start(event) && this._keydown(event)) {
                    event.preventDefault();
                }
            },
            keyup: '_stop',
            focus: function () {
                this.previous = this.element.val();
            },
            blur: function (event) {
                if (this.cancelBlur) {
                    delete this.cancelBlur;
                    return;
                }
                this._stop();
                this._refresh();
                if (this.previous !== this.element.val()) {
                    this._trigger('change', event);
                }
            },
            mousewheel: function (event, delta) {
                if (!delta) {
                    return;
                }
                if (!this.spinning && !this._start(event)) {
                    return false;
                }
                this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                clearTimeout(this.mousewheelTimer);
                this.mousewheelTimer = this._delay(function () {
                    if (this.spinning) {
                        this._stop(event);
                    }
                }, 100);
                event.preventDefault();
            },
            'mousedown .ui-spinner-button': function (event) {
                var previous;
                previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();
                function checkFocus() {
                    var isActive = this.element[0] === this.document[0].activeElement;
                    if (!isActive) {
                        this.element.focus();
                        this.previous = previous;
                        this._delay(function () {
                            this.previous = previous;
                        });
                    }
                }
                event.preventDefault();
                checkFocus.call(this);
                this.cancelBlur = true;
                this._delay(function () {
                    delete this.cancelBlur;
                    checkFocus.call(this);
                });
                if (this._start(event) === false) {
                    return;
                }
                this._repeat(null, $(event.currentTarget).hasClass('ui-spinner-up') ? 1 : -1, event);
            },
            'mouseup .ui-spinner-button': '_stop',
            'mouseenter .ui-spinner-button': function (event) {
                if (!$(event.currentTarget).hasClass('ui-state-active')) {
                    return;
                }
                if (this._start(event) === false) {
                    return false;
                }
                this._repeat(null, $(event.currentTarget).hasClass('ui-spinner-up') ? 1 : -1, event);
            },
            'mouseleave .ui-spinner-button': '_stop'
        },
        _draw: function () {
            var uiSpinner = this.uiSpinner = this.element.addClass('ui-spinner-input').attr('autocomplete', 'off').wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
            this.element.attr('role', 'spinbutton');
            this.buttons = uiSpinner.find('.ui-spinner-button').attr('tabIndex', -1).button().removeClass('ui-corner-all');
            if (this.buttons.height() > Math.ceil(uiSpinner.height() * 0.5) && uiSpinner.height() > 0) {
                uiSpinner.height(uiSpinner.height());
            }
            if (this.options.disabled) {
                this.disable();
            }
        },
        _keydown: function (event) {
            var options = this.options, keyCode = $.ui.keyCode;
            switch (event.keyCode) {
            case keyCode.UP:
                this._repeat(null, 1, event);
                return true;
            case keyCode.DOWN:
                this._repeat(null, -1, event);
                return true;
            case keyCode.PAGE_UP:
                this._repeat(null, options.page, event);
                return true;
            case keyCode.PAGE_DOWN:
                this._repeat(null, -options.page, event);
                return true;
            }
            return false;
        },
        _uiSpinnerHtml: function () {
            return '<span class=\'ui-spinner ui-widget ui-widget-content ui-corner-all\'></span>';
        },
        _buttonHtml: function () {
            return '' + '<a class=\'ui-spinner-button ui-spinner-up ui-corner-tr\'>' + '<span class=\'ui-icon ' + this.options.icons.up + '\'>&#9650;</span>' + '</a>' + '<a class=\'ui-spinner-button ui-spinner-down ui-corner-br\'>' + '<span class=\'ui-icon ' + this.options.icons.down + '\'>&#9660;</span>' + '</a>';
        },
        _start: function (event) {
            if (!this.spinning && this._trigger('start', event) === false) {
                return false;
            }
            if (!this.counter) {
                this.counter = 1;
            }
            this.spinning = true;
            return true;
        },
        _repeat: function (i, steps, event) {
            i = i || 500;
            clearTimeout(this.timer);
            this.timer = this._delay(function () {
                this._repeat(40, steps, event);
            }, i);
            this._spin(steps * this.options.step, event);
        },
        _spin: function (step, event) {
            var value = this.value() || 0;
            if (!this.counter) {
                this.counter = 1;
            }
            value = this._adjustValue(value + step * this._increment(this.counter));
            if (!this.spinning || this._trigger('spin', event, { value: value }) !== false) {
                this._value(value);
                this.counter++;
            }
        },
        _increment: function (i) {
            var incremental = this.options.incremental;
            if (incremental) {
                return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 50000 - i * i / 500 + 17 * i / 200 + 1);
            }
            return 1;
        },
        _precision: function () {
            var precision = this._precisionOf(this.options.step);
            if (this.options.min !== null) {
                precision = Math.max(precision, this._precisionOf(this.options.min));
            }
            return precision;
        },
        _precisionOf: function (num) {
            var str = num.toString(), decimal = str.indexOf('.');
            return decimal === -1 ? 0 : str.length - decimal - 1;
        },
        _adjustValue: function (value) {
            var base, aboveMin, options = this.options;
            base = options.min !== null ? options.min : 0;
            aboveMin = value - base;
            aboveMin = Math.round(aboveMin / options.step) * options.step;
            value = base + aboveMin;
            value = parseFloat(value.toFixed(this._precision()));
            if (options.max !== null && value > options.max) {
                return options.max;
            }
            if (options.min !== null && value < options.min) {
                return options.min;
            }
            return value;
        },
        _stop: function (event) {
            if (!this.spinning) {
                return;
            }
            clearTimeout(this.timer);
            clearTimeout(this.mousewheelTimer);
            this.counter = 0;
            this.spinning = false;
            this._trigger('stop', event);
        },
        _setOption: function (key, value) {
            if (key === 'culture' || key === 'numberFormat') {
                var prevValue = this._parse(this.element.val());
                this.options[key] = value;
                this.element.val(this._format(prevValue));
                return;
            }
            if (key === 'max' || key === 'min' || key === 'step') {
                if (typeof value === 'string') {
                    value = this._parse(value);
                }
            }
            if (key === 'icons') {
                this.buttons.first().find('.ui-icon').removeClass(this.options.icons.up).addClass(value.up);
                this.buttons.last().find('.ui-icon').removeClass(this.options.icons.down).addClass(value.down);
            }
            this._super(key, value);
            if (key === 'disabled') {
                this.widget().toggleClass('ui-state-disabled', !!value);
                this.element.prop('disabled', !!value);
                this.buttons.button(value ? 'disable' : 'enable');
            }
        },
        _setOptions: spinner_modifier(function (options) {
            this._super(options);
        }),
        _parse: function (val) {
            if (typeof val === 'string' && val !== '') {
                val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;
            }
            return val === '' || isNaN(val) ? null : val;
        },
        _format: function (value) {
            if (value === '') {
                return '';
            }
            return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
        },
        _refresh: function () {
            this.element.attr({
                'aria-valuemin': this.options.min,
                'aria-valuemax': this.options.max,
                'aria-valuenow': this._parse(this.element.val())
            });
        },
        isValid: function () {
            var value = this.value();
            if (value === null) {
                return false;
            }
            return value === this._adjustValue(value);
        },
        _value: function (value, allowAny) {
            var parsed;
            if (value !== '') {
                parsed = this._parse(value);
                if (parsed !== null) {
                    if (!allowAny) {
                        parsed = this._adjustValue(parsed);
                    }
                    value = this._format(parsed);
                }
            }
            this.element.val(value);
            this._refresh();
        },
        _destroy: function () {
            this.element.removeClass('ui-spinner-input').prop('disabled', false).removeAttr('autocomplete').removeAttr('role').removeAttr('aria-valuemin').removeAttr('aria-valuemax').removeAttr('aria-valuenow');
            this.uiSpinner.replaceWith(this.element);
        },
        stepUp: spinner_modifier(function (steps) {
            this._stepUp(steps);
        }),
        _stepUp: function (steps) {
            if (this._start()) {
                this._spin((steps || 1) * this.options.step);
                this._stop();
            }
        },
        stepDown: spinner_modifier(function (steps) {
            this._stepDown(steps);
        }),
        _stepDown: function (steps) {
            if (this._start()) {
                this._spin((steps || 1) * -this.options.step);
                this._stop();
            }
        },
        pageUp: spinner_modifier(function (pages) {
            this._stepUp((pages || 1) * this.options.page);
        }),
        pageDown: spinner_modifier(function (pages) {
            this._stepDown((pages || 1) * this.options.page);
        }),
        value: function (newVal) {
            if (!arguments.length) {
                return this._parse(this.element.val());
            }
            spinner_modifier(this._value).call(this, newVal);
        },
        widget: function () {
            return this.uiSpinner;
        }
    });
    var tabs = $.widget('ui.tabs', {
        version: '1.11.4',
        delay: 300,
        options: {
            active: null,
            collapsible: false,
            event: 'click',
            heightStyle: 'content',
            hide: null,
            show: null,
            activate: null,
            beforeActivate: null,
            beforeLoad: null,
            load: null
        },
        _isLocal: function () {
            var rhash = /#.*$/;
            return function (anchor) {
                var anchorUrl, locationUrl;
                anchor = anchor.cloneNode(false);
                anchorUrl = anchor.href.replace(rhash, '');
                locationUrl = location.href.replace(rhash, '');
                try {
                    anchorUrl = decodeURIComponent(anchorUrl);
                } catch (error) {
                }
                try {
                    locationUrl = decodeURIComponent(locationUrl);
                } catch (error) {
                }
                return anchor.hash.length > 1 && anchorUrl === locationUrl;
            };
        }(),
        _create: function () {
            var that = this, options = this.options;
            this.running = false;
            this.element.addClass('ui-tabs ui-widget ui-widget-content ui-corner-all').toggleClass('ui-tabs-collapsible', options.collapsible);
            this._processTabs();
            options.active = this._initialActive();
            if ($.isArray(options.disabled)) {
                options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter('.ui-state-disabled'), function (li) {
                    return that.tabs.index(li);
                }))).sort();
            }
            if (this.options.active !== false && this.anchors.length) {
                this.active = this._findActive(options.active);
            } else {
                this.active = $();
            }
            this._refresh();
            if (this.active.length) {
                this.load(options.active);
            }
        },
        _initialActive: function () {
            var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1);
            if (active === null) {
                if (locationHash) {
                    this.tabs.each(function (i, tab) {
                        if ($(tab).attr('aria-controls') === locationHash) {
                            active = i;
                            return false;
                        }
                    });
                }
                if (active === null) {
                    active = this.tabs.index(this.tabs.filter('.ui-tabs-active'));
                }
                if (active === null || active === -1) {
                    active = this.tabs.length ? 0 : false;
                }
            }
            if (active !== false) {
                active = this.tabs.index(this.tabs.eq(active));
                if (active === -1) {
                    active = collapsible ? false : 0;
                }
            }
            if (!collapsible && active === false && this.anchors.length) {
                active = 0;
            }
            return active;
        },
        _getCreateEventData: function () {
            return {
                tab: this.active,
                panel: !this.active.length ? $() : this._getPanelForTab(this.active)
            };
        },
        _tabKeydown: function (event) {
            var focusedTab = $(this.document[0].activeElement).closest('li'), selectedIndex = this.tabs.index(focusedTab), goingForward = true;
            if (this._handlePageNav(event)) {
                return;
            }
            switch (event.keyCode) {
            case $.ui.keyCode.RIGHT:
            case $.ui.keyCode.DOWN:
                selectedIndex++;
                break;
            case $.ui.keyCode.UP:
            case $.ui.keyCode.LEFT:
                goingForward = false;
                selectedIndex--;
                break;
            case $.ui.keyCode.END:
                selectedIndex = this.anchors.length - 1;
                break;
            case $.ui.keyCode.HOME:
                selectedIndex = 0;
                break;
            case $.ui.keyCode.SPACE:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex);
                return;
            case $.ui.keyCode.ENTER:
                event.preventDefault();
                clearTimeout(this.activating);
                this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                return;
            default:
                return;
            }
            event.preventDefault();
            clearTimeout(this.activating);
            selectedIndex = this._focusNextTab(selectedIndex, goingForward);
            if (!event.ctrlKey && !event.metaKey) {
                focusedTab.attr('aria-selected', 'false');
                this.tabs.eq(selectedIndex).attr('aria-selected', 'true');
                this.activating = this._delay(function () {
                    this.option('active', selectedIndex);
                }, this.delay);
            }
        },
        _panelKeydown: function (event) {
            if (this._handlePageNav(event)) {
                return;
            }
            if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                event.preventDefault();
                this.active.focus();
            }
        },
        _handlePageNav: function (event) {
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                this._activate(this._focusNextTab(this.options.active - 1, false));
                return true;
            }
            if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                this._activate(this._focusNextTab(this.options.active + 1, true));
                return true;
            }
        },
        _findNextTab: function (index, goingForward) {
            var lastTabIndex = this.tabs.length - 1;
            function constrain() {
                if (index > lastTabIndex) {
                    index = 0;
                }
                if (index < 0) {
                    index = lastTabIndex;
                }
                return index;
            }
            while ($.inArray(constrain(), this.options.disabled) !== -1) {
                index = goingForward ? index + 1 : index - 1;
            }
            return index;
        },
        _focusNextTab: function (index, goingForward) {
            index = this._findNextTab(index, goingForward);
            this.tabs.eq(index).focus();
            return index;
        },
        _setOption: function (key, value) {
            if (key === 'active') {
                this._activate(value);
                return;
            }
            if (key === 'disabled') {
                this._setupDisabled(value);
                return;
            }
            this._super(key, value);
            if (key === 'collapsible') {
                this.element.toggleClass('ui-tabs-collapsible', value);
                if (!value && this.options.active === false) {
                    this._activate(0);
                }
            }
            if (key === 'event') {
                this._setupEvents(value);
            }
            if (key === 'heightStyle') {
                this._setupHeightStyle(value);
            }
        },
        _sanitizeSelector: function (hash) {
            return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, '\\$&') : '';
        },
        refresh: function () {
            var options = this.options, lis = this.tablist.children(':has(a[href])');
            options.disabled = $.map(lis.filter('.ui-state-disabled'), function (tab) {
                return lis.index(tab);
            });
            this._processTabs();
            if (options.active === false || !this.anchors.length) {
                options.active = false;
                this.active = $();
            } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {
                if (this.tabs.length === options.disabled.length) {
                    options.active = false;
                    this.active = $();
                } else {
                    this._activate(this._findNextTab(Math.max(0, options.active - 1), false));
                }
            } else {
                options.active = this.tabs.index(this.active);
            }
            this._refresh();
        },
        _refresh: function () {
            this._setupDisabled(this.options.disabled);
            this._setupEvents(this.options.event);
            this._setupHeightStyle(this.options.heightStyle);
            this.tabs.not(this.active).attr({
                'aria-selected': 'false',
                'aria-expanded': 'false',
                tabIndex: -1
            });
            this.panels.not(this._getPanelForTab(this.active)).hide().attr({ 'aria-hidden': 'true' });
            if (!this.active.length) {
                this.tabs.eq(0).attr('tabIndex', 0);
            } else {
                this.active.addClass('ui-tabs-active ui-state-active').attr({
                    'aria-selected': 'true',
                    'aria-expanded': 'true',
                    tabIndex: 0
                });
                this._getPanelForTab(this.active).show().attr({ 'aria-hidden': 'false' });
            }
        },
        _processTabs: function () {
            var that = this, prevTabs = this.tabs, prevAnchors = this.anchors, prevPanels = this.panels;
            this.tablist = this._getList().addClass('ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all').attr('role', 'tablist').delegate('> li', 'mousedown' + this.eventNamespace, function (event) {
                if ($(this).is('.ui-state-disabled')) {
                    event.preventDefault();
                }
            }).delegate('.ui-tabs-anchor', 'focus' + this.eventNamespace, function () {
                if ($(this).closest('li').is('.ui-state-disabled')) {
                    this.blur();
                }
            });
            this.tabs = this.tablist.find('> li:has(a[href])').addClass('ui-state-default ui-corner-top').attr({
                role: 'tab',
                tabIndex: -1
            });
            this.anchors = this.tabs.map(function () {
                return $('a', this)[0];
            }).addClass('ui-tabs-anchor').attr({
                role: 'presentation',
                tabIndex: -1
            });
            this.panels = $();
            this.anchors.each(function (i, anchor) {
                var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr('id'), tab = $(anchor).closest('li'), originalAriaControls = tab.attr('aria-controls');
                if (that._isLocal(anchor)) {
                    selector = anchor.hash;
                    panelId = selector.substring(1);
                    panel = that.element.find(that._sanitizeSelector(selector));
                } else {
                    panelId = tab.attr('aria-controls') || $({}).uniqueId()[0].id;
                    selector = '#' + panelId;
                    panel = that.element.find(selector);
                    if (!panel.length) {
                        panel = that._createPanel(panelId);
                        panel.insertAfter(that.panels[i - 1] || that.tablist);
                    }
                    panel.attr('aria-live', 'polite');
                }
                if (panel.length) {
                    that.panels = that.panels.add(panel);
                }
                if (originalAriaControls) {
                    tab.data('ui-tabs-aria-controls', originalAriaControls);
                }
                tab.attr({
                    'aria-controls': panelId,
                    'aria-labelledby': anchorId
                });
                panel.attr('aria-labelledby', anchorId);
            });
            this.panels.addClass('ui-tabs-panel ui-widget-content ui-corner-bottom').attr('role', 'tabpanel');
            if (prevTabs) {
                this._off(prevTabs.not(this.tabs));
                this._off(prevAnchors.not(this.anchors));
                this._off(prevPanels.not(this.panels));
            }
        },
        _getList: function () {
            return this.tablist || this.element.find('ol,ul').eq(0);
        },
        _createPanel: function (id) {
            return $('<div>').attr('id', id).addClass('ui-tabs-panel ui-widget-content ui-corner-bottom').data('ui-tabs-destroy', true);
        },
        _setupDisabled: function (disabled) {
            if ($.isArray(disabled)) {
                if (!disabled.length) {
                    disabled = false;
                } else if (disabled.length === this.anchors.length) {
                    disabled = true;
                }
            }
            for (var i = 0, li; li = this.tabs[i]; i++) {
                if (disabled === true || $.inArray(i, disabled) !== -1) {
                    $(li).addClass('ui-state-disabled').attr('aria-disabled', 'true');
                } else {
                    $(li).removeClass('ui-state-disabled').removeAttr('aria-disabled');
                }
            }
            this.options.disabled = disabled;
        },
        _setupEvents: function (event) {
            var events = {};
            if (event) {
                $.each(event.split(' '), function (index, eventName) {
                    events[eventName] = '_eventHandler';
                });
            }
            this._off(this.anchors.add(this.tabs).add(this.panels));
            this._on(true, this.anchors, {
                click: function (event) {
                    event.preventDefault();
                }
            });
            this._on(this.anchors, events);
            this._on(this.tabs, { keydown: '_tabKeydown' });
            this._on(this.panels, { keydown: '_panelKeydown' });
            this._focusable(this.tabs);
            this._hoverable(this.tabs);
        },
        _setupHeightStyle: function (heightStyle) {
            var maxHeight, parent = this.element.parent();
            if (heightStyle === 'fill') {
                maxHeight = parent.height();
                maxHeight -= this.element.outerHeight() - this.element.height();
                this.element.siblings(':visible').each(function () {
                    var elem = $(this), position = elem.css('position');
                    if (position === 'absolute' || position === 'fixed') {
                        return;
                    }
                    maxHeight -= elem.outerHeight(true);
                });
                this.element.children().not(this.panels).each(function () {
                    maxHeight -= $(this).outerHeight(true);
                });
                this.panels.each(function () {
                    $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                }).css('overflow', 'auto');
            } else if (heightStyle === 'auto') {
                maxHeight = 0;
                this.panels.each(function () {
                    maxHeight = Math.max(maxHeight, $(this).height('').height());
                }).height(maxHeight);
            }
        },
        _eventHandler: function (event) {
            var options = this.options, active = this.active, anchor = $(event.currentTarget), tab = anchor.closest('li'), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : this._getPanelForTab(tab), toHide = !active.length ? $() : this._getPanelForTab(active), eventData = {
                    oldTab: active,
                    oldPanel: toHide,
                    newTab: collapsing ? $() : tab,
                    newPanel: toShow
                };
            event.preventDefault();
            if (tab.hasClass('ui-state-disabled') || tab.hasClass('ui-tabs-loading') || this.running || clickedIsActive && !options.collapsible || this._trigger('beforeActivate', event, eventData) === false) {
                return;
            }
            options.active = collapsing ? false : this.tabs.index(tab);
            this.active = clickedIsActive ? $() : tab;
            if (this.xhr) {
                this.xhr.abort();
            }
            if (!toHide.length && !toShow.length) {
                $.error('jQuery UI Tabs: Mismatching fragment identifier.');
            }
            if (toShow.length) {
                this.load(this.tabs.index(tab), event);
            }
            this._toggle(event, eventData);
        },
        _toggle: function (event, eventData) {
            var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel;
            this.running = true;
            function complete() {
                that.running = false;
                that._trigger('activate', event, eventData);
            }
            function show() {
                eventData.newTab.closest('li').addClass('ui-tabs-active ui-state-active');
                if (toShow.length && that.options.show) {
                    that._show(toShow, that.options.show, complete);
                } else {
                    toShow.show();
                    complete();
                }
            }
            if (toHide.length && this.options.hide) {
                this._hide(toHide, this.options.hide, function () {
                    eventData.oldTab.closest('li').removeClass('ui-tabs-active ui-state-active');
                    show();
                });
            } else {
                eventData.oldTab.closest('li').removeClass('ui-tabs-active ui-state-active');
                toHide.hide();
                show();
            }
            toHide.attr('aria-hidden', 'true');
            eventData.oldTab.attr({
                'aria-selected': 'false',
                'aria-expanded': 'false'
            });
            if (toShow.length && toHide.length) {
                eventData.oldTab.attr('tabIndex', -1);
            } else if (toShow.length) {
                this.tabs.filter(function () {
                    return $(this).attr('tabIndex') === 0;
                }).attr('tabIndex', -1);
            }
            toShow.attr('aria-hidden', 'false');
            eventData.newTab.attr({
                'aria-selected': 'true',
                'aria-expanded': 'true',
                tabIndex: 0
            });
        },
        _activate: function (index) {
            var anchor, active = this._findActive(index);
            if (active[0] === this.active[0]) {
                return;
            }
            if (!active.length) {
                active = this.active;
            }
            anchor = active.find('.ui-tabs-anchor')[0];
            this._eventHandler({
                target: anchor,
                currentTarget: anchor,
                preventDefault: $.noop
            });
        },
        _findActive: function (index) {
            return index === false ? $() : this.tabs.eq(index);
        },
        _getIndex: function (index) {
            if (typeof index === 'string') {
                index = this.anchors.index(this.anchors.filter('[href$=\'' + index + '\']'));
            }
            return index;
        },
        _destroy: function () {
            if (this.xhr) {
                this.xhr.abort();
            }
            this.element.removeClass('ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible');
            this.tablist.removeClass('ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all').removeAttr('role');
            this.anchors.removeClass('ui-tabs-anchor').removeAttr('role').removeAttr('tabIndex').removeUniqueId();
            this.tablist.unbind(this.eventNamespace);
            this.tabs.add(this.panels).each(function () {
                if ($.data(this, 'ui-tabs-destroy')) {
                    $(this).remove();
                } else {
                    $(this).removeClass('ui-state-default ui-state-active ui-state-disabled ' + 'ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel').removeAttr('tabIndex').removeAttr('aria-live').removeAttr('aria-busy').removeAttr('aria-selected').removeAttr('aria-labelledby').removeAttr('aria-hidden').removeAttr('aria-expanded').removeAttr('role');
                }
            });
            this.tabs.each(function () {
                var li = $(this), prev = li.data('ui-tabs-aria-controls');
                if (prev) {
                    li.attr('aria-controls', prev).removeData('ui-tabs-aria-controls');
                } else {
                    li.removeAttr('aria-controls');
                }
            });
            this.panels.show();
            if (this.options.heightStyle !== 'content') {
                this.panels.css('height', '');
            }
        },
        enable: function (index) {
            var disabled = this.options.disabled;
            if (disabled === false) {
                return;
            }
            if (index === undefined) {
                disabled = false;
            } else {
                index = this._getIndex(index);
                if ($.isArray(disabled)) {
                    disabled = $.map(disabled, function (num) {
                        return num !== index ? num : null;
                    });
                } else {
                    disabled = $.map(this.tabs, function (li, num) {
                        return num !== index ? num : null;
                    });
                }
            }
            this._setupDisabled(disabled);
        },
        disable: function (index) {
            var disabled = this.options.disabled;
            if (disabled === true) {
                return;
            }
            if (index === undefined) {
                disabled = true;
            } else {
                index = this._getIndex(index);
                if ($.inArray(index, disabled) !== -1) {
                    return;
                }
                if ($.isArray(disabled)) {
                    disabled = $.merge([index], disabled).sort();
                } else {
                    disabled = [index];
                }
            }
            this._setupDisabled(disabled);
        },
        load: function (index, event) {
            index = this._getIndex(index);
            var that = this, tab = this.tabs.eq(index), anchor = tab.find('.ui-tabs-anchor'), panel = this._getPanelForTab(tab), eventData = {
                    tab: tab,
                    panel: panel
                }, complete = function (jqXHR, status) {
                    if (status === 'abort') {
                        that.panels.stop(false, true);
                    }
                    tab.removeClass('ui-tabs-loading');
                    panel.removeAttr('aria-busy');
                    if (jqXHR === that.xhr) {
                        delete that.xhr;
                    }
                };
            if (this._isLocal(anchor[0])) {
                return;
            }
            this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
            if (this.xhr && this.xhr.statusText !== 'canceled') {
                tab.addClass('ui-tabs-loading');
                panel.attr('aria-busy', 'true');
                this.xhr.done(function (response, status, jqXHR) {
                    setTimeout(function () {
                        panel.html(response);
                        that._trigger('load', event, eventData);
                        complete(jqXHR, status);
                    }, 1);
                }).fail(function (jqXHR, status) {
                    setTimeout(function () {
                        complete(jqXHR, status);
                    }, 1);
                });
            }
        },
        _ajaxSettings: function (anchor, event, eventData) {
            var that = this;
            return {
                url: anchor.attr('href'),
                beforeSend: function (jqXHR, settings) {
                    return that._trigger('beforeLoad', event, $.extend({
                        jqXHR: jqXHR,
                        ajaxSettings: settings
                    }, eventData));
                }
            };
        },
        _getPanelForTab: function (tab) {
            var id = $(tab).attr('aria-controls');
            return this.element.find(this._sanitizeSelector('#' + id));
        }
    });
    var tooltip = $.widget('ui.tooltip', {
        version: '1.11.4',
        options: {
            content: function () {
                var title = $(this).attr('title') || '';
                return $('<a>').text(title).html();
            },
            hide: true,
            items: '[title]:not([disabled])',
            position: {
                my: 'left top+15',
                at: 'left bottom',
                collision: 'flipfit flip'
            },
            show: true,
            tooltipClass: null,
            track: false,
            close: null,
            open: null
        },
        _addDescribedBy: function (elem, id) {
            var describedby = (elem.attr('aria-describedby') || '').split(/\s+/);
            describedby.push(id);
            elem.data('ui-tooltip-id', id).attr('aria-describedby', $.trim(describedby.join(' ')));
        },
        _removeDescribedBy: function (elem) {
            var id = elem.data('ui-tooltip-id'), describedby = (elem.attr('aria-describedby') || '').split(/\s+/), index = $.inArray(id, describedby);
            if (index !== -1) {
                describedby.splice(index, 1);
            }
            elem.removeData('ui-tooltip-id');
            describedby = $.trim(describedby.join(' '));
            if (describedby) {
                elem.attr('aria-describedby', describedby);
            } else {
                elem.removeAttr('aria-describedby');
            }
        },
        _create: function () {
            this._on({
                mouseover: 'open',
                focusin: 'open'
            });
            this.tooltips = {};
            this.parents = {};
            if (this.options.disabled) {
                this._disable();
            }
            this.liveRegion = $('<div>').attr({
                role: 'log',
                'aria-live': 'assertive',
                'aria-relevant': 'additions'
            }).addClass('ui-helper-hidden-accessible').appendTo(this.document[0].body);
        },
        _setOption: function (key, value) {
            var that = this;
            if (key === 'disabled') {
                this[value ? '_disable' : '_enable']();
                this.options[key] = value;
                return;
            }
            this._super(key, value);
            if (key === 'content') {
                $.each(this.tooltips, function (id, tooltipData) {
                    that._updateContent(tooltipData.element);
                });
            }
        },
        _disable: function () {
            var that = this;
            $.each(this.tooltips, function (id, tooltipData) {
                var event = $.Event('blur');
                event.target = event.currentTarget = tooltipData.element[0];
                that.close(event, true);
            });
            this.element.find(this.options.items).addBack().each(function () {
                var element = $(this);
                if (element.is('[title]')) {
                    element.data('ui-tooltip-title', element.attr('title')).removeAttr('title');
                }
            });
        },
        _enable: function () {
            this.element.find(this.options.items).addBack().each(function () {
                var element = $(this);
                if (element.data('ui-tooltip-title')) {
                    element.attr('title', element.data('ui-tooltip-title'));
                }
            });
        },
        open: function (event) {
            var that = this, target = $(event ? event.target : this.element).closest(this.options.items);
            if (!target.length || target.data('ui-tooltip-id')) {
                return;
            }
            if (target.attr('title')) {
                target.data('ui-tooltip-title', target.attr('title'));
            }
            target.data('ui-tooltip-open', true);
            if (event && event.type === 'mouseover') {
                target.parents().each(function () {
                    var parent = $(this), blurEvent;
                    if (parent.data('ui-tooltip-open')) {
                        blurEvent = $.Event('blur');
                        blurEvent.target = blurEvent.currentTarget = this;
                        that.close(blurEvent, true);
                    }
                    if (parent.attr('title')) {
                        parent.uniqueId();
                        that.parents[this.id] = {
                            element: this,
                            title: parent.attr('title')
                        };
                        parent.attr('title', '');
                    }
                });
            }
            this._registerCloseHandlers(event, target);
            this._updateContent(target, event);
        },
        _updateContent: function (target, event) {
            var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null;
            if (typeof contentOption === 'string') {
                return this._open(event, target, contentOption);
            }
            content = contentOption.call(target[0], function (response) {
                that._delay(function () {
                    if (!target.data('ui-tooltip-open')) {
                        return;
                    }
                    if (event) {
                        event.type = eventType;
                    }
                    this._open(event, target, response);
                });
            });
            if (content) {
                this._open(event, target, content);
            }
        },
        _open: function (event, target, content) {
            var tooltipData, tooltip, delayedShow, a11yContent, positionOption = $.extend({}, this.options.position);
            if (!content) {
                return;
            }
            tooltipData = this._find(target);
            if (tooltipData) {
                tooltipData.tooltip.find('.ui-tooltip-content').html(content);
                return;
            }
            if (target.is('[title]')) {
                if (event && event.type === 'mouseover') {
                    target.attr('title', '');
                } else {
                    target.removeAttr('title');
                }
            }
            tooltipData = this._tooltip(target);
            tooltip = tooltipData.tooltip;
            this._addDescribedBy(target, tooltip.attr('id'));
            tooltip.find('.ui-tooltip-content').html(content);
            this.liveRegion.children().hide();
            if (content.clone) {
                a11yContent = content.clone();
                a11yContent.removeAttr('id').find('[id]').removeAttr('id');
            } else {
                a11yContent = content;
            }
            $('<div>').html(a11yContent).appendTo(this.liveRegion);
            function position(event) {
                positionOption.of = event;
                if (tooltip.is(':hidden')) {
                    return;
                }
                tooltip.position(positionOption);
            }
            if (this.options.track && event && /^mouse/.test(event.type)) {
                this._on(this.document, { mousemove: position });
                position(event);
            } else {
                tooltip.position($.extend({ of: target }, this.options.position));
            }
            tooltip.hide();
            this._show(tooltip, this.options.show);
            if (this.options.show && this.options.show.delay) {
                delayedShow = this.delayedShow = setInterval(function () {
                    if (tooltip.is(':visible')) {
                        position(positionOption.of);
                        clearInterval(delayedShow);
                    }
                }, $.fx.interval);
            }
            this._trigger('open', event, { tooltip: tooltip });
        },
        _registerCloseHandlers: function (event, target) {
            var events = {
                keyup: function (event) {
                    if (event.keyCode === $.ui.keyCode.ESCAPE) {
                        var fakeEvent = $.Event(event);
                        fakeEvent.currentTarget = target[0];
                        this.close(fakeEvent, true);
                    }
                }
            };
            if (target[0] !== this.element[0]) {
                events.remove = function () {
                    this._removeTooltip(this._find(target).tooltip);
                };
            }
            if (!event || event.type === 'mouseover') {
                events.mouseleave = 'close';
            }
            if (!event || event.type === 'focusin') {
                events.focusout = 'close';
            }
            this._on(true, target, events);
        },
        close: function (event) {
            var tooltip, that = this, target = $(event ? event.currentTarget : this.element), tooltipData = this._find(target);
            if (!tooltipData) {
                target.removeData('ui-tooltip-open');
                return;
            }
            tooltip = tooltipData.tooltip;
            if (tooltipData.closing) {
                return;
            }
            clearInterval(this.delayedShow);
            if (target.data('ui-tooltip-title') && !target.attr('title')) {
                target.attr('title', target.data('ui-tooltip-title'));
            }
            this._removeDescribedBy(target);
            tooltipData.hiding = true;
            tooltip.stop(true);
            this._hide(tooltip, this.options.hide, function () {
                that._removeTooltip($(this));
            });
            target.removeData('ui-tooltip-open');
            this._off(target, 'mouseleave focusout keyup');
            if (target[0] !== this.element[0]) {
                this._off(target, 'remove');
            }
            this._off(this.document, 'mousemove');
            if (event && event.type === 'mouseleave') {
                $.each(this.parents, function (id, parent) {
                    $(parent.element).attr('title', parent.title);
                    delete that.parents[id];
                });
            }
            tooltipData.closing = true;
            this._trigger('close', event, { tooltip: tooltip });
            if (!tooltipData.hiding) {
                tooltipData.closing = false;
            }
        },
        _tooltip: function (element) {
            var tooltip = $('<div>').attr('role', 'tooltip').addClass('ui-tooltip ui-widget ui-corner-all ui-widget-content ' + (this.options.tooltipClass || '')), id = tooltip.uniqueId().attr('id');
            $('<div>').addClass('ui-tooltip-content').appendTo(tooltip);
            tooltip.appendTo(this.document[0].body);
            return this.tooltips[id] = {
                element: element,
                tooltip: tooltip
            };
        },
        _find: function (target) {
            var id = target.data('ui-tooltip-id');
            return id ? this.tooltips[id] : null;
        },
        _removeTooltip: function (tooltip) {
            tooltip.remove();
            delete this.tooltips[tooltip.attr('id')];
        },
        _destroy: function () {
            var that = this;
            $.each(this.tooltips, function (id, tooltipData) {
                var event = $.Event('blur'), element = tooltipData.element;
                event.target = event.currentTarget = element[0];
                that.close(event, true);
                $('#' + id).remove();
                if (element.data('ui-tooltip-title')) {
                    if (!element.attr('title')) {
                        element.attr('title', element.data('ui-tooltip-title'));
                    }
                    element.removeData('ui-tooltip-title');
                }
            });
            this.liveRegion.remove();
        }
    });
}));
/*mev-heatmap@0.0.1#src/main/view/heatmapvisualization/HeatmapVisualization*/
define('mev-heatmap@0.0.1#src/main/view/heatmapvisualization/HeatmapVisualization', [
    'mui',
    'd3',
    'jquery',
    'lodash',
    './style/mev-heatmap.less',
    './lib/HeatmapVisualizationClass',
    './lib/generateParams',
    './directives/visHeatmap.tpl.html',
    './directives/heatmapSettingsModalBody.tpl.html',
    '../colorBrewer/mevColorBrewer',
    '../alertService/mevHeatmapAlert',
    'jquery-ui'
], function (angular, d3, jquery, _, style, HeatmapVisualizationClass, generateParams, heatmapTemplate, heatmapSettingTemplate) {
    'use strict';
    return angular.module('mevHeatmapVisualization', ['mevColorBrewer']).directive('mevHeatmapSettings', [
        'mevD3colors',
        function (d3colors) {
            return {
                restrict: 'E',
                scope: {
                    currentColors: '=currentColors',
                    availableColorGroups: '=availableColorGroups',
                    colorEdge: '=colorEdge',
                    applyNewRanges: '=applyNewRanges',
                    applyDefaultRanges: '=applyDefaultRanges',
                    heatmapView: '=mevHeatmapView'
                },
                link: function (scope, elm, attr) {
                    scope.currentColors.group = d3colors.current();
                },
                template: heatmapSettingTemplate
            };
        }
    ]).directive('mevHeatmap', [
        '$http',
        'mevD3colors',
        'mevHeatmapAlertService',
        '$timeout',
        function ($http, d3colors, alertService, $timeout) {
            return {
                restrict: 'E',
                template: heatmapTemplate,
                scope: {
                    heatmapView: '=mevHeatmapView',
                    heatmapDataset: '=mevDataset'
                },
                controller: function ($scope) {
                    $scope.currentColors = { group: d3colors.current() };
                    $scope.availableColorGroups = _.keys(d3colors);
                    $scope.currentColors = d3colors.coloring;
                    $scope.visualization = undefined;
                    $scope.$on('ui:d3colors:change', function ($event, data) {
                        if ($scope.currentColors.group !== data) {
                            $scope.currentColors.group = data;
                            var updatedView = _.extend({}, $scope.heatmapView);
                            if (!updatedView.coloring)
                                updatedView.coloring = {};
                            updatedView.coloring = d3colors.coloring;
                            $scope.heatmapView = updatedView;
                        }
                    });
                    this.onDataLoaded = $scope.$on('mui:model:dataset:values:loaded', function () {
                        var position = {
                            top: $scope.scrollable.scrollTop(),
                            height: $scope.scrollable.height(),
                            left: $scope.scrollable.scrollLeft(),
                            width: $scope.scrollable.width()
                        };
                        if ($scope.visualization) {
                            $scope.heatmapView.refresh();
                            $scope.colorEdge.refresh();
                            $scope.applyNewRanges();
                        }
                    });
                },
                link: function ($scope, elems, attr) {
                    var $ = jquery;
                    var scrollable = $(elems).scrollParent();
                    if (!scrollable && $scope.heatmapView.scrollableContainer)
                        scrollable = $($scope.heatmapView.scrollableContainer);
                    if (!scrollable)
                        scrollable = $('div.tab-content');
                    $scope.scrollable = scrollable;
                    var delay = 50, timer = null;
                    console.debug('HeatmapVis scrollable', $scope.heatmapView.scrollableContainer, scrollable);
                    var position = {
                        top: scrollable.scrollTop(),
                        height: scrollable.height(),
                        left: scrollable.scrollLeft(),
                        width: scrollable.width()
                    };
                    var svg = undefined;
                    $scope.repaintView = function () {
                        var updatedView = _.extend({}, $scope.heatmapView);
                        updatedView.expression.min = $scope.heatmapDataset.expression.min;
                        updatedView.expression.max = $scope.heatmapDataset.expression.max;
                        updatedView.expression.avg = $scope.heatmapDataset.expression.avg;
                        updatedView.coloring = d3colors.current();
                        $scope.heatmapView = updatedView;
                    };
                    $scope.colorEdge = {
                        min: undefined,
                        max: undefined,
                        avg: undefined,
                        refresh: function () {
                            $scope.colorEdge.min = $scope.heatmapView.expression.min;
                            $scope.colorEdge.max = $scope.heatmapView.expression.max;
                            $scope.colorEdge.avg = $scope.heatmapView.expression.avg;
                        }
                    };
                    var colorSlider = jquery('div#heatmapColorSlider');
                    $timeout(function () {
                    }, 1000);
                    $scope.$watchCollection('colorEdge', function (colorEdge, oldval) {
                        if (colorEdge.min && colorEdge.max && colorEdge.avg) {
                        }
                    });
                    $scope.applyDefaultRanges = function () {
                        $('#settingsModal').modal('hide');
                        $scope.repaintView();
                    };
                    $scope.applyNewRanges = function () {
                        $('#settingsModal').modal('hide');
                        if (typeof parseFloat($scope.colorEdge.min) == 'number' && typeof parseFloat($scope.colorEdge.avg) == 'number' && typeof parseFloat($scope.colorEdge.max) == 'number' && parseFloat($scope.colorEdge.min) <= parseFloat($scope.colorEdge.avg) && parseFloat($scope.colorEdge.avg) <= parseFloat($scope.colorEdge.max) && parseFloat($scope.colorEdge.min) >= parseFloat($scope.heatmapView.expression.min) && parseFloat($scope.colorEdge.max) <= parseFloat($scope.heatmapView.expression.max)) {
                            var updatedView = _.extend({}, $scope.heatmapView);
                            updatedView.coloring = d3colors.current($scope.currentColors.group);
                            updatedView.expression.min = parseFloat($scope.colorEdge.min);
                            updatedView.expression.max = parseFloat($scope.colorEdge.max);
                            updatedView.expression.avg = parseFloat($scope.colorEdge.avg);
                            $scope.heatmapView = updatedView;
                        } else {
                            $scope.colorEdge.min = $scope.heatmapDataset.expression.min;
                            $scope.colorEdge.max = $scope.heatmapDataset.expression.max;
                            $scope.colorEdge.avg = $scope.heatmapDataset.expression.avg;
                            alertService.error('Ranges must be real numbers!', 'Range Update Error');
                            $scope.applyDefaultRanges();
                        }
                    };
                    var eventQ = [];
                    scrollable.on('scroll', function (e) {
                        while (eventQ.length > 0) {
                            clearTimeout(eventQ.pop());
                        }
                        timer = setTimeout(function () {
                            eventQ.pop();
                            position = {
                                top: scrollable.scrollTop(),
                                height: scrollable.height(),
                                left: scrollable.scrollLeft(),
                                width: scrollable.width()
                            };
                            $scope.visualization.updateCells(position, $scope.heatmapDataset);
                        }, 100);
                        eventQ.push(timer);
                    });
                    $scope.$watch('heatmapView', function (newval, oldval) {
                        console.debug('heatmapView change', oldval.note, newval.note);
                        if (newval) {
                            console.debug('watch heatmapView ', newval.note);
                            if (d3.select(elems[0]).selectAll('svg')) {
                                d3.select(elems[0]).selectAll('svg').remove();
                            }
                            var svg = d3.select(elems[0]).append('svg');
                            svg.attr('id', 'svg-Window-' + $scope.heatmapView.id);
                            $scope.colorEdge.min = newval.expression.min;
                            $scope.colorEdge.avg = newval.expression.avg;
                            $scope.colorEdge.max = newval.expression.max;
                            var params = new generateParams(newval.coloring ? { colors: newval.coloring } : { colors: d3colors.coloring });
                            $scope.visualization = new HeatmapVisualizationClass(newval, svg, params);
                        }
                    });
                    $scope.$watch('visualization', function (newval) {
                        if (newval) {
                            var startAvg = (newval.view.expression.avg - newval.view.expression.min) / (newval.view.expression.max - newval.view.expression.min) * 10000;
                            var startMin = (newval.view.expression.min - newval.view.expression.min) / (newval.view.expression.max - newval.view.expression.min) * 10000;
                            var startMax = (newval.view.expression.max - newval.view.expression.min) / (newval.view.expression.max - newval.view.expression.min) * 10000;
                            $scope.visualization.updateCells(position, $scope.heatmapDataset);
                            $timeout(function () {
                                jquery('div#heatmapColorSlider-' + newval.view.id).slider({
                                    min: 0,
                                    max: 10000,
                                    values: [
                                        startMin,
                                        startAvg,
                                        startMax
                                    ],
                                    slide: function (event, ui) {
                                        var index = $(ui.handle).siblings('a').andSelf().index(ui.handle);
                                        var values = $(this).slider('values');
                                        function domainToRange(min, max, input) {
                                            var output = min + (max - min) / 10000 * input;
                                            return output;
                                        }
                                        function applyValues(values) {
                                            $scope.colorEdge.min = domainToRange($scope.heatmapView.expression.min, $scope.heatmapView.expression.max, values[0]);
                                            $scope.colorEdge.avg = domainToRange($scope.heatmapView.expression.min, $scope.heatmapView.expression.max, values[1]);
                                            $scope.colorEdge.max = domainToRange($scope.heatmapView.expression.min, $scope.heatmapView.expression.max, values[2]);
                                        }
                                        var dimension = null;
                                        if (index == 0) {
                                            dimension = 'min';
                                        } else if (index == 1) {
                                            dimension = 'avg';
                                        } else if (index == 2) {
                                            dimension = 'max';
                                        }
                                        $scope.$apply(function () {
                                            applyValues(values);
                                        });
                                        var ret = true;
                                        var margin = 100;
                                        if (values[0] >= values[1] - margin / 2) {
                                            values[0] = values[1] - margin;
                                            applyValues(values);
                                            ret = false;
                                            $timeout(function () {
                                                console.debug('slide reset', values);
                                                $(this).slider('values', values);
                                            }.bind(this));
                                        } else if (values[2] <= values[1] + margin / 2) {
                                            values[2] = values[1] + margin;
                                            applyValues(values);
                                            ret = false;
                                            $timeout(function () {
                                                var slider = $(this).slider('values', values);
                                                console.debug('slide reset', slider.values);
                                            }.bind(this));
                                        }
                                        console.debug('slide ret', ret, values, $scope.colorEdge);
                                        return ret;
                                    }
                                });
                            }, 2000);
                        }
                        if ($scope.heatmapDataset.selections.column) {
                            $scope.visualization.drawSelections($scope.heatmapDataset.selections.column, 'column');
                        }
                        if ($scope.heatmapDataset.selections.row) {
                            $scope.visualization.drawSelections($scope.heatmapDataset.selections.row, 'row');
                        }
                        if ($scope.visualization.view.panel && $scope.visualization.view.panel.top) {
                            $scope.visualization.drawTopPanel($scope.visualization.view.panel.top);
                        }
                        if ($scope.visualization.view.panel && $scope.visualization.view.panel.side) {
                            $scope.visualization.drawSidePanel($scope.visualization.view.panel.side);
                        }
                    });
                    $scope.$watchCollection('heatmapDataset.selections.column', function (newval) {
                        if (newval && $scope.visualization) {
                            $scope.visualization.drawSelections(newval, 'column');
                        }
                        ;
                    });
                    $scope.$watchCollection('heatmapDataset.selections.row', function (newval) {
                        if (newval && $scope.visualization) {
                            $scope.visualization.drawSelections(newval, 'row');
                        }
                        ;
                    });
                    $scope.$watch('visualization.view.panel.top', function (newval, oldval) {
                        if (newval && $scope.visualization) {
                            $scope.visualization.drawTopPanel($scope.visualization.view.panel.top);
                        }
                    });
                    $scope.$watch('visualization.view.panel.side', function (newval, oldval) {
                        if (newval && $scope.visualization) {
                            $scope.visualization.drawSidePanel($scope.visualization.view.panel.side);
                        }
                    });
                    $scope.clearSelections = function (dimension) {
                        $scope.visualization.view.selectionParams[dimension].labels = [];
                        switch (dimension) {
                        case 'row':
                            $scope.visualization.drawSidePanel($scope.visualization.view.panel.side);
                            break;
                        case 'column':
                            $scope.visualization.drawTopPanel($scope.visualization.view.panel.top);
                            break;
                        }
                    };
                    $scope.addSelection = function (dimension) {
                        console.debug('HeatmaVisualization: addSelection', dimension, $scope.visualization.view.selectionParams[dimension].labels, $scope.visualization.view.selectionParams[dimension]);
                        var selectionsData = {
                            name: $scope.visualization.view.selectionParams[dimension].name,
                            properties: {
                                selectionDescription: '',
                                selectionColor: $scope.visualization.view.selectionParams[dimension].color
                            },
                            keys: $scope.visualization.view.selectionParams[dimension].labels
                        };
                        if (selectionsData.keys.length == 0) {
                            var message = 'Cannot add empty selection. Plese try again.';
                            var header = 'Selection Addition Problem (Error Code: 0)';
                            alertService.error(message, header);
                            return;
                        }
                        $scope.heatmapDataset.selection.post({
                            datasetName: $scope.heatmapDataset.datasetName,
                            dimension: dimension
                        }, selectionsData, function (response) {
                            var message = 'Added ' + $scope.visualization.view.selectionParams[dimension].name + ' as new Selection!';
                            var header = 'Heatmap Selection Addition';
                            $scope.$emit('SeletionAddedEvent', dimension);
                            $scope.visualization.view.selectionParams[dimension].color = '#' + Math.floor(Math.random() * 16777215 << 0).toString(16);
                            $scope.visualization.view.selectionParams[dimension].name = undefined;
                            alertService.success(message, header);
                        }, function (data, status, headers, config) {
                            var message = 'Couldn\'t add new selection. If ' + 'problem persists, please contact us.';
                            var header = 'Selection Addition Problem (Error Code: ' + status + ')';
                            alertService.error(message, header);
                        });
                    };
                }
            };
        }
    ]);
});
/*mev-heatmap@0.0.1#src/main/mev-heatmap*/
define('mev-heatmap@0.0.1#src/main/mev-heatmap', [
    'mui',
    'mev-bs-modal',
    'mev-chart-utils',
    './view/heatmapvisualization/HeatmapVisualization',
    './view/colorBrewer/mevColorBrewer',
    './view/alertService/mevHeatmapAlert',
    './view/heatmapvisualization/style/mev-heatmap.less'
], function (ng) {
    return ng.module('mev-heatmap', arguments, arguments);
});
/*mev-hcl@0.0.1#src/main/router/HclState.tpl.html!system-text@0.1.0#text*/
define('mev-hcl@0.0.1#src/main/router/HclState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<!-- <project-analysis-parameters parameters="DatasetAnalysisVM.analysis.params"></project-analysis-parameters> -->\n<div class="analysis-hcl column-wrapper">\n\t<ul class="nav nav-tabs column-header" id="importTabs">\n\t\t<li id="heatmap_tab" class="active"><a href="#heatmap" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n\t\t<li ng-if="DatasetAnalysisVM.analysis.result.column" id="histogram_tab_samples"><a href="#dendogram-samples" data-toggle="tab" target="_self">Samples Dendogram</a></li>\n\t\t<li ng-if="DatasetAnalysisVM.analysis.result.row" id="histogram_tab_genes"><a href="#dendogram-genes" data-toggle="tab" target="_self">Genes Dendogram</a></li>\n\t\t<div class="action-menu" mui-paste="action-menu"></div>\t\n\t</ul>\n\t\n\t<div class="tab-content column-body" >\n\t\t<div class="tab-pane active" id="heatmap">\n\t\t\t<!-- <view-Content-Item project=\'DatasetAnalysisVM.project\' view=\'DatasetAnalysisVM.heatmapView\'></view-Content-Item> -->\n\t\t\t<mev-heatmap mev-heatmap-View="DatasetAnalysisVM.heatmapView" mev-dataset="DatasetAnalysisVM.project.dataset"> </mev-heatmap>\n\t\t</div>\n\t\t<div class="tab-pane" id="dendogram-samples" ng-if="DatasetAnalysisVM.analysis.result.column">\n\t\t\t<hierarchical-Accordion analysis="DatasetAnalysisVM.analysis"\n\t\t\tproject="DatasetAnalysisVM.project" mev-dimension="column" is-it-open="isOpen"\n\t\t\tng-init="isOpen=true"> </hierarchical-Accordion>\t\t\t\t\n\t\t</div>\n\t\t<div class="tab-pane" id="dendogram-genes" ng-if="DatasetAnalysisVM.analysis.result.row">\n\t\t\t<hierarchical-Accordion analysis="DatasetAnalysisVM.analysis"\n\t\t\tproject="DatasetAnalysisVM.project" mev-dimension="row" is-it-open="isOpen"\n\t\t\tng-init="isOpen=true"> </hierarchical-Accordion>\t\t\t\t\n\t\t</div>\n\t</div>\n\t\n</div>';
});
/*mev-hcl@0.0.1#src/main/model/HclAnalysisType*/
define('mev-hcl@0.0.1#src/main/model/HclAnalysisType', [
    '../router/HclState.tpl.html',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/parentAnalysis/ParentAnalysisParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam'
], function (template, SelectParam) {
    'use strict';
    function component(MevAnalysisType, mevAnalysisParams, MevParentAnalysisParam, mevSelectionSetParam) {
        var hclType = new MevAnalysisType({
            id: 'hcl',
            name: 'HCL',
            viewModel: 'HclStateVM',
            template: template,
            params: mevAnalysisParams([
                new SelectParam({
                    'id': 'metric',
                    'displayName': 'Distance Metric',
                    'options': [
                        'euclidean',
                        'maximum',
                        'manhattan',
                        'canberra',
                        'binary',
                        'pearson',
                        'correlation',
                        'spearman'
                    ],
                    'value': 'euclidean',
                    'required': true
                }),
                new SelectParam({
                    'id': 'linkage',
                    'displayName': 'Linkage Criteria Algorithm',
                    'options': [
                        'complete',
                        'average',
                        'single'
                    ],
                    'value': 'complete',
                    'required': true
                }),
                new SelectParam({
                    'id': 'dimension',
                    'displayName': 'Clustering Dimension',
                    'options': [
                        'column',
                        'row'
                    ],
                    'value': 'column',
                    'required': true,
                    'allowAll': true
                }),
                new mevSelectionSetParam({
                    'id': 'columns',
                    'dimension': 'column',
                    'displayName': 'Sample Set',
                    'display': 'name',
                    'bound': 'keys',
                    'required': true,
                    'allowAll': 'root'
                }),
                new mevSelectionSetParam({
                    'id': 'rows',
                    'dimension': 'row',
                    'displayName': 'Gene Set',
                    'display': 'name',
                    'bound': 'keys',
                    'required': true,
                    'allowAll': 'root'
                })
            ])
        });
        return hclType;
    }
    component.$name = 'mevHclAnalysisType';
    component.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevParentAnalysisParam',
        'mevSelectionSetParam'
    ];
    component.$provider = 'factory';
    return component;
});
/*mev-hcl@0.0.1#src/main/router/HclStateVM*/
define('mev-hcl@0.0.1#src/main/router/HclStateVM', ['lodash'], function (_) {
    'use strict';
    function HclStateVMFactory() {
        function factory(scope, project, analysis) {
            var _self = this;
            scope.isItOpen = true;
            this.project = project;
            this.analysis = analysis;
            this.analysisId = analysis.name;
            var labelsColum = analysis.result.column ? traverse(analysis.result.column) : null;
            var labelsRow = analysis.result.row ? traverse(analysis.result.row) : null;
            function traverse(tree) {
                var leaves = {
                    '0': [],
                    '1': []
                };
                if (tree.children.length > 0) {
                    for (var i = 0; i < tree.children.length; i++) {
                        leaves[i] = !tree.children[i].children ? [tree.children[i].name] : traverse(tree.children[i]);
                    }
                }
                ;
                return leaves[0].concat(leaves[1]);
            }
            ;
            this.heatmapView = project.generateView({
                viewType: 'heatmapView',
                note: analysis.name,
                labels: {
                    row: { keys: analysis.params.rows || project.dataset.row.keys },
                    column: { keys: analysis.params.columns || project.dataset.column.keys }
                },
                panel: {}
            });
            if (analysis.result.column) {
                _.assign(this.heatmapView.labels.column, { keys: labelsColum });
                _.assign(this.heatmapView.panel, { top: analysis });
            }
            if (analysis.result.row) {
                _.assign(this.heatmapView.labels.row, { keys: labelsRow });
                _.assign(this.heatmapView.panel, { side: analysis });
            }
        }
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    HclStateVMFactory.$inject = [];
    HclStateVMFactory.$name = 'HclStateVMFactory';
    HclStateVMFactory.$provider = 'factory';
    return HclStateVMFactory;
});
/*mev-hcl@0.0.1#src/main/router/HclState*/
define('mev-hcl@0.0.1#src/main/router/HclState', [
    './HclState.tpl.html',
    './HclStateVM'
], function (template, HclStateVM) {
    'use strict';
    function HclState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.hcl', {
            parent: 'root.dataset.analysisType',
            url: 'hcl/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'HclStateVMFactory',
                function (scope, project, analysis, HclStateVMFactory) {
                    return HclStateVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'DatasetAnalysisVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    HclState.inject = ['$stateProvider'];
    HclState.provider = 'config';
    return HclState;
});
/*mev-hcl@0.0.1#src/main/mev-hcl*/
define('mev-hcl@0.0.1#src/main/mev-hcl', [
    'mui',
    'mev-heatmap',
    './model/HclAnalysisType',
    './router/HclState',
    './router/HclStateVM'
], function (ng) {
    'use strict';
    return ng.module('mev-hcl', arguments, arguments);
});
/*vega@2.6.5#vega.min.js*/
!function (e) {
    if ('object' == typeof exports && 'undefined' != typeof module)
        module.exports = e();
    else if ('function' == typeof define && define.amd)
        define('vega@2.6.5#vega.min.js', [], e);
    else {
        var t;
        t = 'undefined' != typeof window ? window : 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : this, t.vg = e();
    }
}(function () {
    var e;
    return function e(t, n, r) {
        function i(o, s) {
            if (!n[o]) {
                if (!t[o]) {
                    var u = 'function' == typeof require && require;
                    if (!s && u)
                        return u(o, !0);
                    if (a)
                        return a(o, !0);
                    var l = new Error('Cannot find module \'' + o + '\'');
                    throw l.code = 'MODULE_NOT_FOUND', l;
                }
                var c = n[o] = { exports: {} };
                t[o][0].call(c.exports, function (e) {
                    var n = t[o][1][e];
                    return i(n ? n : e);
                }, c, c.exports, e, t, n, r);
            }
            return n[o].exports;
        }
        for (var a = 'function' == typeof require && require, o = 0; o < r.length; o++)
            i(r[o]);
        return i;
    }({
        1: [
            function (e, t, n) {
                t.exports = {
                    version: '2.6.5',
                    dataflow: e('vega-dataflow'),
                    parse: e('./src/parse/'),
                    scene: {
                        Bounder: e('./src/scene/Bounder'),
                        Builder: e('./src/scene/Builder'),
                        Encoder: e('./src/scene/Encoder'),
                        GroupBuilder: e('./src/scene/GroupBuilder'),
                        visit: e('./src/scene/visit')
                    },
                    transforms: e('./src/transforms'),
                    Transform: e('./src/transforms/Transform'),
                    BatchTransform: e('./src/transforms/BatchTransform'),
                    Parameter: e('./src/transforms/Parameter'),
                    schema: e('./src/core/schema'),
                    config: e('./src/core/config'),
                    util: e('./src/util'),
                    logging: e('vega-logging'),
                    debug: e('vega-logging').debug
                };
            },
            {
                './src/core/config': 92,
                './src/core/schema': 93,
                './src/parse/': 98,
                './src/scene/Bounder': 110,
                './src/scene/Builder': 111,
                './src/scene/Encoder': 112,
                './src/scene/GroupBuilder': 113,
                './src/scene/visit': 118,
                './src/transforms': 146,
                './src/transforms/BatchTransform': 120,
                './src/transforms/Parameter': 136,
                './src/transforms/Transform': 141,
                './src/util': 149,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        2: [
            function (e, t, n) {
            },
            {}
        ],
        3: [
            function (t, n, r) {
                !function (t, i) {
                    'object' == typeof r && 'undefined' != typeof n ? i(r) : 'function' == typeof e && e.amd ? e(['exports'], i) : i(t.d3_dsv = {});
                }(this, function (e) {
                    'use strict';
                    function t(e) {
                        return new a(e);
                    }
                    function n(e) {
                        return new Function('d', 'return {' + e.map(function (e, t) {
                            return JSON.stringify(e) + ': d[' + t + ']';
                        }).join(',') + '}');
                    }
                    function r(e, t) {
                        var r = n(e);
                        return function (n, i) {
                            return t(r(n), i, e);
                        };
                    }
                    function i(e) {
                        var t = Object.create(null), n = [];
                        return e.forEach(function (e) {
                            for (var r in e)
                                r in t || n.push(t[r] = r);
                        }), n;
                    }
                    function a(e) {
                        function t(t) {
                            return t.map(a).join(e);
                        }
                        function a(e) {
                            return o.test(e) ? '"' + e.replace(/\"/g, '""') + '"' : e;
                        }
                        var o = new RegExp('["' + e + '\n]'), s = e.charCodeAt(0);
                        this.parse = function (e, t) {
                            var i, a, o = this.parseRows(e, function (e, o) {
                                    return i ? i(e, o - 1) : (a = e, void (i = t ? r(e, t) : n(e)));
                                });
                            return o.columns = a, o;
                        }, this.parseRows = function (e, t) {
                            function n() {
                                if (c >= l)
                                    return o;
                                if (i)
                                    return i = !1, a;
                                var t, n = c;
                                if (34 === e.charCodeAt(n)) {
                                    for (var r = n; r++ < l;)
                                        if (34 === e.charCodeAt(r)) {
                                            if (34 !== e.charCodeAt(r + 1))
                                                break;
                                            ++r;
                                        }
                                    return c = r + 2, t = e.charCodeAt(r + 1), 13 === t ? (i = !0, 10 === e.charCodeAt(r + 2) && ++c) : 10 === t && (i = !0), e.slice(n + 1, r).replace(/""/g, '"');
                                }
                                for (; c < l;) {
                                    var u = 1;
                                    if (t = e.charCodeAt(c++), 10 === t)
                                        i = !0;
                                    else if (13 === t)
                                        i = !0, 10 === e.charCodeAt(c) && (++c, ++u);
                                    else if (t !== s)
                                        continue;
                                    return e.slice(n, c - u);
                                }
                                return e.slice(n);
                            }
                            for (var r, i, a = {}, o = {}, u = [], l = e.length, c = 0, d = 0; (r = n()) !== o;) {
                                for (var f = []; r !== a && r !== o;)
                                    f.push(r), r = n();
                                t && null == (f = t(f, d++)) || u.push(f);
                            }
                            return u;
                        }, this.format = function (t, n) {
                            return null == n && (n = i(t)), [n.map(a).join(e)].concat(t.map(function (t) {
                                return n.map(function (e) {
                                    return a(t[e]);
                                }).join(e);
                            })).join('\n');
                        }, this.formatRows = function (e) {
                            return e.map(t).join('\n');
                        };
                    }
                    t.prototype = a.prototype;
                    var o = t(','), s = t('\t'), u = '0.1.14';
                    e.version = u, e.dsv = t, e.csv = o, e.tsv = s;
                });
            },
            {}
        ],
        4: [
            function (t, n, r) {
                !function (t, i) {
                    'object' == typeof r && 'undefined' != typeof n ? i(r) : 'function' == typeof e && e.amd ? e('d3-format', ['exports'], i) : i(t.d3_format = {});
                }(this, function (e) {
                    'use strict';
                    function t(e, t) {
                        if ((n = (e = t ? e.toExponential(t - 1) : e.toExponential()).indexOf('e')) < 0)
                            return null;
                        var n, r = e.slice(0, n);
                        return [
                            r.length > 1 ? r[0] + r.slice(2) : r,
                            +e.slice(n + 1)
                        ];
                    }
                    function n(e) {
                        return e = t(Math.abs(e)), e ? e[1] : NaN;
                    }
                    function r(e, t) {
                        return function (n, r) {
                            for (var i = n.length, a = [], o = 0, s = e[0], u = 0; i > 0 && s > 0 && (u + s + 1 > r && (s = Math.max(1, r - u)), a.push(n.substring(i -= s, i + s)), !((u += s + 1) > r));)
                                s = e[o = (o + 1) % e.length];
                            return a.reverse().join(t);
                        };
                    }
                    function i(e, n) {
                        var r = t(e, n);
                        if (!r)
                            return e + '';
                        var i = r[0], a = r[1], o = a - (p = 3 * Math.max(-8, Math.min(8, Math.floor(a / 3)))) + 1, s = i.length;
                        return o === s ? i : o > s ? i + new Array(o - s + 1).join('0') : o > 0 ? i.slice(0, o) + '.' + i.slice(o) : '0.' + new Array(1 - o).join('0') + t(e, Math.max(0, n + o - 1))[0];
                    }
                    function a(e, n) {
                        var r = t(e, n);
                        if (!r)
                            return e + '';
                        var i = r[0], a = r[1];
                        return a < 0 ? '0.' + new Array(-a).join('0') + i : i.length > a + 1 ? i.slice(0, a + 1) + '.' + i.slice(a + 1) : i + new Array(a - i.length + 2).join('0');
                    }
                    function o(e, t) {
                        e = e.toPrecision(t);
                        e:
                            for (var n, r = e.length, i = 1, a = -1; i < r; ++i)
                                switch (e[i]) {
                                case '.':
                                    a = n = i;
                                    break;
                                case '0':
                                    0 === a && (a = i), n = i;
                                    break;
                                case 'e':
                                    break e;
                                default:
                                    a > 0 && (a = 0);
                                }
                        return a > 0 ? e.slice(0, a) + e.slice(n + 1) : e;
                    }
                    function s(e) {
                        return new u(e);
                    }
                    function u(e) {
                        if (!(t = m.exec(e)))
                            throw new Error('invalid format: ' + e);
                        var t, n = t[1] || ' ', r = t[2] || '>', i = t[3] || '-', a = t[4] || '', o = !!t[5], s = t[6] && +t[6], u = !!t[7], l = t[8] && +t[8].slice(1), c = t[9] || '';
                        'n' === c ? (u = !0, c = 'g') : g[c] || (c = ''), (o || '0' === n && '=' === r) && (o = !0, n = '0', r = '='), this.fill = n, this.align = r, this.sign = i, this.symbol = a, this.zero = o, this.width = s, this.comma = u, this.precision = l, this.type = c;
                    }
                    function l(e) {
                        return e;
                    }
                    function c(e) {
                        function t(e) {
                            e = s(e);
                            var t = e.fill, n = e.align, r = e.sign, i = e.symbol, l = e.zero, c = e.width, d = e.comma, f = e.precision, h = e.type, m = '$' === i ? o[0] : '#' === i && /[boxX]/.test(h) ? '0' + h.toLowerCase() : '', y = '$' === i ? o[1] : /[%p]/.test(h) ? '%' : '', _ = g[h], b = !h || /[defgprs%]/.test(h);
                            return f = null == f ? h ? 6 : 12 : /[gprs]/.test(h) ? Math.max(1, Math.min(21, f)) : Math.max(0, Math.min(20, f)), function (e) {
                                var i = m, o = y;
                                if ('c' === h)
                                    o = _(e) + o, e = '';
                                else {
                                    e = +e;
                                    var s = (e < 0 || 1 / e < 0) && (e *= -1, !0);
                                    if (e = _(e, f), s) {
                                        var g, x = -1, w = e.length;
                                        for (s = !1; ++x < w;)
                                            if (g = e.charCodeAt(x), 48 < g && g < 58 || 'x' === h && 96 < g && g < 103 || 'X' === h && 64 < g && g < 71) {
                                                s = !0;
                                                break;
                                            }
                                    }
                                    if (i = (s ? '(' === r ? r : '-' : '-' === r || '(' === r ? '' : r) + i, o = o + ('s' === h ? v[8 + p / 3] : '') + (s && '(' === r ? ')' : ''), b)
                                        for (var g, x = -1, w = e.length; ++x < w;)
                                            if (g = e.charCodeAt(x), 48 > g || g > 57) {
                                                o = (46 === g ? u + e.slice(x + 1) : e.slice(x)) + o, e = e.slice(0, x);
                                                break;
                                            }
                                }
                                d && !l && (e = a(e, 1 / 0));
                                var k = i.length + e.length + o.length, M = k < c ? new Array(c - k + 1).join(t) : '';
                                switch (d && l && (e = a(M + e, M.length ? c - o.length : 1 / 0), M = ''), n) {
                                case '<':
                                    return i + e + o + M;
                                case '=':
                                    return i + M + e + o;
                                case '^':
                                    return M.slice(0, k = M.length >> 1) + i + e + o + M.slice(k);
                                }
                                return M + i + e + o;
                            };
                        }
                        function i(e, r) {
                            var i = t((e = s(e), e.type = 'f', e)), a = 3 * Math.max(-8, Math.min(8, Math.floor(n(r) / 3))), o = Math.pow(10, -a), u = v[8 + a / 3];
                            return function (e) {
                                return i(o * e) + u;
                            };
                        }
                        var a = e.grouping && e.thousands ? r(e.grouping, e.thousands) : l, o = e.currency, u = e.decimal;
                        return {
                            format: t,
                            formatPrefix: i
                        };
                    }
                    function d(e) {
                        return Math.max(0, -n(Math.abs(e)));
                    }
                    function f(e, t) {
                        return Math.max(0, 3 * Math.max(-8, Math.min(8, Math.floor(n(t) / 3))) - n(Math.abs(e)));
                    }
                    function h(e, t) {
                        return e = Math.abs(e), t = Math.abs(t) - e, Math.max(0, n(t) - n(e)) + 1;
                    }
                    var p, g = {
                            '': o,
                            '%': function (e, t) {
                                return (100 * e).toFixed(t);
                            },
                            b: function (e) {
                                return Math.round(e).toString(2);
                            },
                            c: function (e) {
                                return e + '';
                            },
                            d: function (e) {
                                return Math.round(e).toString(10);
                            },
                            e: function (e, t) {
                                return e.toExponential(t);
                            },
                            f: function (e, t) {
                                return e.toFixed(t);
                            },
                            g: function (e, t) {
                                return e.toPrecision(t);
                            },
                            o: function (e) {
                                return Math.round(e).toString(8);
                            },
                            p: function (e, t) {
                                return a(100 * e, t);
                            },
                            r: a,
                            s: i,
                            X: function (e) {
                                return Math.round(e).toString(16).toUpperCase();
                            },
                            x: function (e) {
                                return Math.round(e).toString(16);
                            }
                        }, m = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;
                    u.prototype.toString = function () {
                        return this.fill + this.align + this.sign + this.symbol + (this.zero ? '0' : '') + (null == this.width ? '' : Math.max(1, 0 | this.width)) + (this.comma ? ',' : '') + (null == this.precision ? '' : '.' + Math.max(0, 0 | this.precision)) + this.type;
                    };
                    var v = [
                            'y',
                            'z',
                            'a',
                            'f',
                            'p',
                            'n',
                            'µ',
                            'm',
                            '',
                            'k',
                            'M',
                            'G',
                            'T',
                            'P',
                            'E',
                            'Z',
                            'Y'
                        ], y = c({
                            decimal: '.',
                            thousands: ',',
                            grouping: [3],
                            currency: [
                                '$',
                                ''
                            ]
                        }), _ = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0\u20AC'
                            ]
                        }), b = c({
                            decimal: ',',
                            thousands: '\xA0',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0Kč'
                            ]
                        }), x = c({
                            decimal: ',',
                            thousands: '\'',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0CHF'
                            ]
                        }), w = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0\u20AC'
                            ]
                        }), k = c({
                            decimal: '.',
                            thousands: ',',
                            grouping: [3],
                            currency: [
                                '$',
                                ''
                            ]
                        }), M = c({
                            decimal: '.',
                            thousands: ',',
                            grouping: [3],
                            currency: [
                                '\xA3',
                                ''
                            ]
                        }), S = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0\u20AC'
                            ]
                        }), T = c({
                            decimal: ',',
                            thousands: '\xA0',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0\u20AC'
                            ]
                        }), E = c({
                            decimal: ',',
                            thousands: '\xA0',
                            grouping: [3],
                            currency: [
                                '',
                                '$'
                            ]
                        }), A = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0\u20AC'
                            ]
                        }), L = c({
                            decimal: '.',
                            thousands: ',',
                            grouping: [3],
                            currency: [
                                '\u20AA',
                                ''
                            ]
                        }), C = c({
                            decimal: ',',
                            thousands: '\xA0',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0Ft'
                            ]
                        }), D = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                '\u20AC',
                                ''
                            ]
                        }), P = c({
                            decimal: '.',
                            thousands: ',',
                            grouping: [3],
                            currency: [
                                '',
                                '円'
                            ]
                        }), I = c({
                            decimal: '.',
                            thousands: ',',
                            grouping: [3],
                            currency: [
                                '\u20A9',
                                ''
                            ]
                        }), N = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0ден.'
                            ]
                        }), O = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                '\u20AC\xA0',
                                ''
                            ]
                        }), j = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                '',
                                'zł'
                            ]
                        }), z = c({
                            decimal: ',',
                            thousands: '.',
                            grouping: [3],
                            currency: [
                                'R$',
                                ''
                            ]
                        }), U = c({
                            decimal: ',',
                            thousands: '\xA0',
                            grouping: [3],
                            currency: [
                                '',
                                '\xA0руб.'
                            ]
                        }), F = c({
                            decimal: ',',
                            thousands: '\xA0',
                            grouping: [3],
                            currency: [
                                '',
                                'SEK'
                            ]
                        }), R = c({
                            decimal: '.',
                            thousands: ',',
                            grouping: [3],
                            currency: [
                                '\xA5',
                                ''
                            ]
                        }), q = y.format, B = y.formatPrefix, G = '0.4.2';
                    e.version = G, e.format = q, e.formatPrefix = B, e.locale = c, e.localeCaEs = _, e.localeCsCz = b, e.localeDeCh = x, e.localeDeDe = w, e.localeEnCa = k, e.localeEnGb = M, e.localeEnUs = y, e.localeEsEs = S, e.localeFiFi = T, e.localeFrCa = E, e.localeFrFr = A, e.localeHeIl = L, e.localeHuHu = C, e.localeItIt = D, e.localeJaJp = P, e.localeKoKr = I, e.localeMkMk = N, e.localeNlNl = O, e.localePlPl = j, e.localePtBr = z, e.localeRuRu = U, e.localeSvSe = F, e.localeZhCn = R, e.formatSpecifier = s, e.precisionFixed = d, e.precisionPrefix = f, e.precisionRound = h;
                });
            },
            {}
        ],
        5: [
            function (t, n, r) {
                !function (i, a) {
                    'object' == typeof r && 'undefined' != typeof n ? a(r, t('d3-time')) : 'function' == typeof e && e.amd ? e('d3-time-format', [
                        'exports',
                        'd3-time'
                    ], a) : a(i.d3_time_format = {}, i.d3_time);
                }(this, function (e, t) {
                    'use strict';
                    function n(e) {
                        if (0 <= e.y && e.y < 100) {
                            var t = new Date(-1, e.m, e.d, e.H, e.M, e.S, e.L);
                            return t.setFullYear(e.y), t;
                        }
                        return new Date(e.y, e.m, e.d, e.H, e.M, e.S, e.L);
                    }
                    function r(e) {
                        if (0 <= e.y && e.y < 100) {
                            var t = new Date(Date.UTC(-1, e.m, e.d, e.H, e.M, e.S, e.L));
                            return t.setUTCFullYear(e.y), t;
                        }
                        return new Date(Date.UTC(e.y, e.m, e.d, e.H, e.M, e.S, e.L));
                    }
                    function i(e) {
                        return {
                            y: e,
                            m: 0,
                            d: 1,
                            H: 0,
                            M: 0,
                            S: 0,
                            L: 0
                        };
                    }
                    function a(e) {
                        function t(e, t) {
                            return function (n) {
                                var r, i, a, o = [], s = -1, u = 0, l = e.length;
                                for (n instanceof Date || (n = new Date(+n)); ++s < l;)
                                    37 === e.charCodeAt(s) && (o.push(e.slice(u, s)), null != (i = ee[r = e.charAt(++s)]) ? r = e.charAt(++s) : i = 'e' === r ? ' ' : '0', (a = t[r]) && (r = a(n, i)), o.push(r), u = s + 1);
                                return o.push(e.slice(u, s)), o.join('');
                            };
                        }
                        function a(e, t) {
                            return function (n) {
                                var a = i(1900), s = o(a, e, n += '', 0);
                                if (s != n.length)
                                    return null;
                                if ('p' in a && (a.H = a.H % 12 + 12 * a.p), 'W' in a || 'U' in a) {
                                    'w' in a || (a.w = 'W' in a ? 1 : 0);
                                    var u = 'Z' in a ? r(i(a.y)).getUTCDay() : t(i(a.y)).getDay();
                                    a.m = 0, a.d = 'W' in a ? (a.w + 6) % 7 + 7 * a.W - (u + 5) % 7 : a.w + 7 * a.U - (u + 6) % 7;
                                }
                                return 'Z' in a ? (a.H += a.Z / 100 | 0, a.M += a.Z % 100, r(a)) : t(a);
                            };
                        }
                        function o(e, t, n, r) {
                            for (var i, a, o = 0, s = t.length, u = n.length; o < s;) {
                                if (r >= u)
                                    return -1;
                                if (i = t.charCodeAt(o++), 37 === i) {
                                    if (i = t.charAt(o++), a = ze[i in ee ? t.charAt(o++) : i], !a || (r = a(e, n, r)) < 0)
                                        return -1;
                                } else if (i != n.charCodeAt(r++))
                                    return -1;
                            }
                            return r;
                        }
                        function s(e, t, n) {
                            var r = Se.exec(t.slice(n));
                            return r ? (e.p = Te[r[0].toLowerCase()], n + r[0].length) : -1;
                        }
                        function Q(e, t, n) {
                            var r = Le.exec(t.slice(n));
                            return r ? (e.w = Ce[r[0].toLowerCase()], n + r[0].length) : -1;
                        }
                        function te(e, t, n) {
                            var r = Ee.exec(t.slice(n));
                            return r ? (e.w = Ae[r[0].toLowerCase()], n + r[0].length) : -1;
                        }
                        function ne(e, t, n) {
                            var r = Ie.exec(t.slice(n));
                            return r ? (e.m = Ne[r[0].toLowerCase()], n + r[0].length) : -1;
                        }
                        function re(e, t, n) {
                            var r = De.exec(t.slice(n));
                            return r ? (e.m = Pe[r[0].toLowerCase()], n + r[0].length) : -1;
                        }
                        function ie(e, t, n) {
                            return o(e, ve, t, n);
                        }
                        function ae(e, t, n) {
                            return o(e, ye, t, n);
                        }
                        function oe(e, t, n) {
                            return o(e, _e, t, n);
                        }
                        function se(e) {
                            return we[e.getDay()];
                        }
                        function ue(e) {
                            return xe[e.getDay()];
                        }
                        function le(e) {
                            return Me[e.getMonth()];
                        }
                        function ce(e) {
                            return ke[e.getMonth()];
                        }
                        function de(e) {
                            return be[+(e.getHours() >= 12)];
                        }
                        function fe(e) {
                            return we[e.getUTCDay()];
                        }
                        function he(e) {
                            return xe[e.getUTCDay()];
                        }
                        function pe(e) {
                            return Me[e.getUTCMonth()];
                        }
                        function ge(e) {
                            return ke[e.getUTCMonth()];
                        }
                        function me(e) {
                            return be[+(e.getUTCHours() >= 12)];
                        }
                        var ve = e.dateTime, ye = e.date, _e = e.time, be = e.periods, xe = e.days, we = e.shortDays, ke = e.months, Me = e.shortMonths, Se = u(be), Te = l(be), Ee = u(xe), Ae = l(xe), Le = u(we), Ce = l(we), De = u(ke), Pe = l(ke), Ie = u(Me), Ne = l(Me), Oe = {
                                a: se,
                                A: ue,
                                b: le,
                                B: ce,
                                c: null,
                                d: M,
                                e: M,
                                H: S,
                                I: T,
                                j: E,
                                L: A,
                                m: L,
                                M: C,
                                p: de,
                                S: D,
                                U: P,
                                w: I,
                                W: N,
                                x: null,
                                X: null,
                                y: O,
                                Y: j,
                                Z: z,
                                '%': Z
                            }, je = {
                                a: fe,
                                A: he,
                                b: pe,
                                B: ge,
                                c: null,
                                d: U,
                                e: U,
                                H: F,
                                I: R,
                                j: q,
                                L: B,
                                m: G,
                                M: $,
                                p: me,
                                S: H,
                                U: Y,
                                w: V,
                                W: W,
                                x: null,
                                X: null,
                                y: J,
                                Y: X,
                                Z: K,
                                '%': Z
                            }, ze = {
                                a: Q,
                                A: te,
                                b: ne,
                                B: re,
                                c: ie,
                                d: v,
                                e: v,
                                H: _,
                                I: _,
                                j: y,
                                L: w,
                                m: m,
                                M: b,
                                p: s,
                                S: x,
                                U: d,
                                w: c,
                                W: f,
                                x: ae,
                                X: oe,
                                y: p,
                                Y: h,
                                Z: g,
                                '%': k
                            };
                        return Oe.x = t(ye, Oe), Oe.X = t(_e, Oe), Oe.c = t(ve, Oe), je.x = t(ye, je), je.X = t(_e, je), je.c = t(ve, je), {
                            format: function (e) {
                                var r = t(e += '', Oe);
                                return r.parse = a(e, n), r.toString = function () {
                                    return e;
                                }, r;
                            },
                            utcFormat: function (e) {
                                var n = t(e += '', je);
                                return n.parse = a(e, r), n.toString = function () {
                                    return e;
                                }, n;
                            }
                        };
                    }
                    function o(e, t, n) {
                        var r = e < 0 ? '-' : '', i = (r ? -e : e) + '', a = i.length;
                        return r + (a < n ? new Array(n - a + 1).join(t) + i : i);
                    }
                    function s(e) {
                        return e.replace(re, '\\$&');
                    }
                    function u(e) {
                        return new RegExp('^(?:' + e.map(s).join('|') + ')', 'i');
                    }
                    function l(e) {
                        for (var t = {}, n = -1, r = e.length; ++n < r;)
                            t[e[n].toLowerCase()] = n;
                        return t;
                    }
                    function c(e, t, n) {
                        var r = te.exec(t.slice(n, n + 1));
                        return r ? (e.w = +r[0], n + r[0].length) : -1;
                    }
                    function d(e, t, n) {
                        var r = te.exec(t.slice(n));
                        return r ? (e.U = +r[0], n + r[0].length) : -1;
                    }
                    function f(e, t, n) {
                        var r = te.exec(t.slice(n));
                        return r ? (e.W = +r[0], n + r[0].length) : -1;
                    }
                    function h(e, t, n) {
                        var r = te.exec(t.slice(n, n + 4));
                        return r ? (e.y = +r[0], n + r[0].length) : -1;
                    }
                    function p(e, t, n) {
                        var r = te.exec(t.slice(n, n + 2));
                        return r ? (e.y = +r[0] + (+r[0] > 68 ? 1900 : 2000), n + r[0].length) : -1;
                    }
                    function g(e, t, n) {
                        var r = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(t.slice(n, n + 6));
                        return r ? (e.Z = r[1] ? 0 : -(r[2] + (r[3] || '00')), n + r[0].length) : -1;
                    }
                    function m(e, t, n) {
                        var r = te.exec(t.slice(n, n + 2));
                        return r ? (e.m = r[0] - 1, n + r[0].length) : -1;
                    }
                    function v(e, t, n) {
                        var r = te.exec(t.slice(n, n + 2));
                        return r ? (e.d = +r[0], n + r[0].length) : -1;
                    }
                    function y(e, t, n) {
                        var r = te.exec(t.slice(n, n + 3));
                        return r ? (e.m = 0, e.d = +r[0], n + r[0].length) : -1;
                    }
                    function _(e, t, n) {
                        var r = te.exec(t.slice(n, n + 2));
                        return r ? (e.H = +r[0], n + r[0].length) : -1;
                    }
                    function b(e, t, n) {
                        var r = te.exec(t.slice(n, n + 2));
                        return r ? (e.M = +r[0], n + r[0].length) : -1;
                    }
                    function x(e, t, n) {
                        var r = te.exec(t.slice(n, n + 2));
                        return r ? (e.S = +r[0], n + r[0].length) : -1;
                    }
                    function w(e, t, n) {
                        var r = te.exec(t.slice(n, n + 3));
                        return r ? (e.L = +r[0], n + r[0].length) : -1;
                    }
                    function k(e, t, n) {
                        var r = ne.exec(t.slice(n, n + 1));
                        return r ? n + r[0].length : -1;
                    }
                    function M(e, t) {
                        return o(e.getDate(), t, 2);
                    }
                    function S(e, t) {
                        return o(e.getHours(), t, 2);
                    }
                    function T(e, t) {
                        return o(e.getHours() % 12 || 12, t, 2);
                    }
                    function E(e, n) {
                        return o(1 + t.day.count(t.year(e), e), n, 3);
                    }
                    function A(e, t) {
                        return o(e.getMilliseconds(), t, 3);
                    }
                    function L(e, t) {
                        return o(e.getMonth() + 1, t, 2);
                    }
                    function C(e, t) {
                        return o(e.getMinutes(), t, 2);
                    }
                    function D(e, t) {
                        return o(e.getSeconds(), t, 2);
                    }
                    function P(e, n) {
                        return o(t.sunday.count(t.year(e), e), n, 2);
                    }
                    function I(e) {
                        return e.getDay();
                    }
                    function N(e, n) {
                        return o(t.monday.count(t.year(e), e), n, 2);
                    }
                    function O(e, t) {
                        return o(e.getFullYear() % 100, t, 2);
                    }
                    function j(e, t) {
                        return o(e.getFullYear() % 10000, t, 4);
                    }
                    function z(e) {
                        var t = e.getTimezoneOffset();
                        return (t > 0 ? '-' : (t *= -1, '+')) + o(t / 60 | 0, '0', 2) + o(t % 60, '0', 2);
                    }
                    function U(e, t) {
                        return o(e.getUTCDate(), t, 2);
                    }
                    function F(e, t) {
                        return o(e.getUTCHours(), t, 2);
                    }
                    function R(e, t) {
                        return o(e.getUTCHours() % 12 || 12, t, 2);
                    }
                    function q(e, n) {
                        return o(1 + t.utcDay.count(t.utcYear(e), e), n, 3);
                    }
                    function B(e, t) {
                        return o(e.getUTCMilliseconds(), t, 3);
                    }
                    function G(e, t) {
                        return o(e.getUTCMonth() + 1, t, 2);
                    }
                    function $(e, t) {
                        return o(e.getUTCMinutes(), t, 2);
                    }
                    function H(e, t) {
                        return o(e.getUTCSeconds(), t, 2);
                    }
                    function Y(e, n) {
                        return o(t.utcSunday.count(t.utcYear(e), e), n, 2);
                    }
                    function V(e) {
                        return e.getUTCDay();
                    }
                    function W(e, n) {
                        return o(t.utcMonday.count(t.utcYear(e), e), n, 2);
                    }
                    function J(e, t) {
                        return o(e.getUTCFullYear() % 100, t, 2);
                    }
                    function X(e, t) {
                        return o(e.getUTCFullYear() % 10000, t, 4);
                    }
                    function K() {
                        return '+0000';
                    }
                    function Z() {
                        return '%';
                    }
                    function Q(e) {
                        return e.toISOString();
                    }
                    var ee = {
                            '-': '',
                            _: ' ',
                            0: '0'
                        }, te = /^\s*\d+/, ne = /^%/, re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g, ie = a({
                            dateTime: '%a %b %e %X %Y',
                            date: '%m/%d/%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'Sunday',
                                'Monday',
                                'Tuesday',
                                'Wednesday',
                                'Thursday',
                                'Friday',
                                'Saturday'
                            ],
                            shortDays: [
                                'Sun',
                                'Mon',
                                'Tue',
                                'Wed',
                                'Thu',
                                'Fri',
                                'Sat'
                            ],
                            months: [
                                'January',
                                'February',
                                'March',
                                'April',
                                'May',
                                'June',
                                'July',
                                'August',
                                'September',
                                'October',
                                'November',
                                'December'
                            ],
                            shortMonths: [
                                'Jan',
                                'Feb',
                                'Mar',
                                'Apr',
                                'May',
                                'Jun',
                                'Jul',
                                'Aug',
                                'Sep',
                                'Oct',
                                'Nov',
                                'Dec'
                            ]
                        }), ae = a({
                            dateTime: '%A, %e de %B de %Y, %X',
                            date: '%d/%m/%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'diumenge',
                                'dilluns',
                                'dimarts',
                                'dimecres',
                                'dijous',
                                'divendres',
                                'dissabte'
                            ],
                            shortDays: [
                                'dg.',
                                'dl.',
                                'dt.',
                                'dc.',
                                'dj.',
                                'dv.',
                                'ds.'
                            ],
                            months: [
                                'gener',
                                'febrer',
                                'març',
                                'abril',
                                'maig',
                                'juny',
                                'juliol',
                                'agost',
                                'setembre',
                                'octubre',
                                'novembre',
                                'desembre'
                            ],
                            shortMonths: [
                                'gen.',
                                'febr.',
                                'març',
                                'abr.',
                                'maig',
                                'juny',
                                'jul.',
                                'ag.',
                                'set.',
                                'oct.',
                                'nov.',
                                'des.'
                            ]
                        }), oe = a({
                            dateTime: '%A, der %e. %B %Y, %X',
                            date: '%d.%m.%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'Sonntag',
                                'Montag',
                                'Dienstag',
                                'Mittwoch',
                                'Donnerstag',
                                'Freitag',
                                'Samstag'
                            ],
                            shortDays: [
                                'So',
                                'Mo',
                                'Di',
                                'Mi',
                                'Do',
                                'Fr',
                                'Sa'
                            ],
                            months: [
                                'Januar',
                                'Februar',
                                'März',
                                'April',
                                'Mai',
                                'Juni',
                                'Juli',
                                'August',
                                'September',
                                'Oktober',
                                'November',
                                'Dezember'
                            ],
                            shortMonths: [
                                'Jan',
                                'Feb',
                                'Mrz',
                                'Apr',
                                'Mai',
                                'Jun',
                                'Jul',
                                'Aug',
                                'Sep',
                                'Okt',
                                'Nov',
                                'Dez'
                            ]
                        }), se = a({
                            dateTime: '%A, der %e. %B %Y, %X',
                            date: '%d.%m.%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'Sonntag',
                                'Montag',
                                'Dienstag',
                                'Mittwoch',
                                'Donnerstag',
                                'Freitag',
                                'Samstag'
                            ],
                            shortDays: [
                                'So',
                                'Mo',
                                'Di',
                                'Mi',
                                'Do',
                                'Fr',
                                'Sa'
                            ],
                            months: [
                                'Januar',
                                'Februar',
                                'März',
                                'April',
                                'Mai',
                                'Juni',
                                'Juli',
                                'August',
                                'September',
                                'Oktober',
                                'November',
                                'Dezember'
                            ],
                            shortMonths: [
                                'Jan',
                                'Feb',
                                'Mrz',
                                'Apr',
                                'Mai',
                                'Jun',
                                'Jul',
                                'Aug',
                                'Sep',
                                'Okt',
                                'Nov',
                                'Dez'
                            ]
                        }), ue = a({
                            dateTime: '%a %b %e %X %Y',
                            date: '%Y-%m-%d',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'Sunday',
                                'Monday',
                                'Tuesday',
                                'Wednesday',
                                'Thursday',
                                'Friday',
                                'Saturday'
                            ],
                            shortDays: [
                                'Sun',
                                'Mon',
                                'Tue',
                                'Wed',
                                'Thu',
                                'Fri',
                                'Sat'
                            ],
                            months: [
                                'January',
                                'February',
                                'March',
                                'April',
                                'May',
                                'June',
                                'July',
                                'August',
                                'September',
                                'October',
                                'November',
                                'December'
                            ],
                            shortMonths: [
                                'Jan',
                                'Feb',
                                'Mar',
                                'Apr',
                                'May',
                                'Jun',
                                'Jul',
                                'Aug',
                                'Sep',
                                'Oct',
                                'Nov',
                                'Dec'
                            ]
                        }), le = a({
                            dateTime: '%a %e %b %X %Y',
                            date: '%d/%m/%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'Sunday',
                                'Monday',
                                'Tuesday',
                                'Wednesday',
                                'Thursday',
                                'Friday',
                                'Saturday'
                            ],
                            shortDays: [
                                'Sun',
                                'Mon',
                                'Tue',
                                'Wed',
                                'Thu',
                                'Fri',
                                'Sat'
                            ],
                            months: [
                                'January',
                                'February',
                                'March',
                                'April',
                                'May',
                                'June',
                                'July',
                                'August',
                                'September',
                                'October',
                                'November',
                                'December'
                            ],
                            shortMonths: [
                                'Jan',
                                'Feb',
                                'Mar',
                                'Apr',
                                'May',
                                'Jun',
                                'Jul',
                                'Aug',
                                'Sep',
                                'Oct',
                                'Nov',
                                'Dec'
                            ]
                        }), ce = a({
                            dateTime: '%A, %e de %B de %Y, %X',
                            date: '%d/%m/%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'domingo',
                                'lunes',
                                'martes',
                                'miércoles',
                                'jueves',
                                'viernes',
                                'sábado'
                            ],
                            shortDays: [
                                'dom',
                                'lun',
                                'mar',
                                'mié',
                                'jue',
                                'vie',
                                'sáb'
                            ],
                            months: [
                                'enero',
                                'febrero',
                                'marzo',
                                'abril',
                                'mayo',
                                'junio',
                                'julio',
                                'agosto',
                                'septiembre',
                                'octubre',
                                'noviembre',
                                'diciembre'
                            ],
                            shortMonths: [
                                'ene',
                                'feb',
                                'mar',
                                'abr',
                                'may',
                                'jun',
                                'jul',
                                'ago',
                                'sep',
                                'oct',
                                'nov',
                                'dic'
                            ]
                        }), de = a({
                            dateTime: '%A, %-d. %Bta %Y klo %X',
                            date: '%-d.%-m.%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'a.m.',
                                'p.m.'
                            ],
                            days: [
                                'sunnuntai',
                                'maanantai',
                                'tiistai',
                                'keskiviikko',
                                'torstai',
                                'perjantai',
                                'lauantai'
                            ],
                            shortDays: [
                                'Su',
                                'Ma',
                                'Ti',
                                'Ke',
                                'To',
                                'Pe',
                                'La'
                            ],
                            months: [
                                'tammikuu',
                                'helmikuu',
                                'maaliskuu',
                                'huhtikuu',
                                'toukokuu',
                                'kesäkuu',
                                'heinäkuu',
                                'elokuu',
                                'syyskuu',
                                'lokakuu',
                                'marraskuu',
                                'joulukuu'
                            ],
                            shortMonths: [
                                'Tammi',
                                'Helmi',
                                'Maalis',
                                'Huhti',
                                'Touko',
                                'Kesä',
                                'Heinä',
                                'Elo',
                                'Syys',
                                'Loka',
                                'Marras',
                                'Joulu'
                            ]
                        }), fe = a({
                            dateTime: '%a %e %b %Y %X',
                            date: '%Y-%m-%d',
                            time: '%H:%M:%S',
                            periods: [
                                '',
                                ''
                            ],
                            days: [
                                'dimanche',
                                'lundi',
                                'mardi',
                                'mercredi',
                                'jeudi',
                                'vendredi',
                                'samedi'
                            ],
                            shortDays: [
                                'dim',
                                'lun',
                                'mar',
                                'mer',
                                'jeu',
                                'ven',
                                'sam'
                            ],
                            months: [
                                'janvier',
                                'février',
                                'mars',
                                'avril',
                                'mai',
                                'juin',
                                'juillet',
                                'août',
                                'septembre',
                                'octobre',
                                'novembre',
                                'décembre'
                            ],
                            shortMonths: [
                                'jan',
                                'fév',
                                'mar',
                                'avr',
                                'mai',
                                'jui',
                                'jul',
                                'aoû',
                                'sep',
                                'oct',
                                'nov',
                                'déc'
                            ]
                        }), he = a({
                            dateTime: '%A, le %e %B %Y, %X',
                            date: '%d/%m/%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'dimanche',
                                'lundi',
                                'mardi',
                                'mercredi',
                                'jeudi',
                                'vendredi',
                                'samedi'
                            ],
                            shortDays: [
                                'dim.',
                                'lun.',
                                'mar.',
                                'mer.',
                                'jeu.',
                                'ven.',
                                'sam.'
                            ],
                            months: [
                                'janvier',
                                'février',
                                'mars',
                                'avril',
                                'mai',
                                'juin',
                                'juillet',
                                'août',
                                'septembre',
                                'octobre',
                                'novembre',
                                'décembre'
                            ],
                            shortMonths: [
                                'janv.',
                                'févr.',
                                'mars',
                                'avr.',
                                'mai',
                                'juin',
                                'juil.',
                                'août',
                                'sept.',
                                'oct.',
                                'nov.',
                                'déc.'
                            ]
                        }), pe = a({
                            dateTime: '%A, %e ב%B %Y %X',
                            date: '%d.%m.%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'ראשון',
                                'שני',
                                'שלישי',
                                'רביעי',
                                'חמישי',
                                'שישי',
                                'שבת'
                            ],
                            shortDays: [
                                'א\u05F3',
                                'ב\u05F3',
                                'ג\u05F3',
                                'ד\u05F3',
                                'ה\u05F3',
                                'ו\u05F3',
                                'ש\u05F3'
                            ],
                            months: [
                                'ינואר',
                                'פברואר',
                                'מרץ',
                                'אפריל',
                                'מאי',
                                'יוני',
                                'יולי',
                                'אוגוסט',
                                'ספטמבר',
                                'אוקטובר',
                                'נובמבר',
                                'דצמבר'
                            ],
                            shortMonths: [
                                'ינו\u05F3',
                                'פבר\u05F3',
                                'מרץ',
                                'אפר\u05F3',
                                'מאי',
                                'יוני',
                                'יולי',
                                'אוג\u05F3',
                                'ספט\u05F3',
                                'אוק\u05F3',
                                'נוב\u05F3',
                                'דצמ\u05F3'
                            ]
                        }), ge = a({
                            dateTime: '%Y. %B %-e., %A %X',
                            date: '%Y. %m. %d.',
                            time: '%H:%M:%S',
                            periods: [
                                'de.',
                                'du.'
                            ],
                            days: [
                                'vasárnap',
                                'hétfő',
                                'kedd',
                                'szerda',
                                'csütörtök',
                                'péntek',
                                'szombat'
                            ],
                            shortDays: [
                                'V',
                                'H',
                                'K',
                                'Sze',
                                'Cs',
                                'P',
                                'Szo'
                            ],
                            months: [
                                'január',
                                'február',
                                'március',
                                'április',
                                'május',
                                'június',
                                'július',
                                'augusztus',
                                'szeptember',
                                'október',
                                'november',
                                'december'
                            ],
                            shortMonths: [
                                'jan.',
                                'feb.',
                                'már.',
                                'ápr.',
                                'máj.',
                                'jún.',
                                'júl.',
                                'aug.',
                                'szept.',
                                'okt.',
                                'nov.',
                                'dec.'
                            ]
                        }), me = a({
                            dateTime: '%A %e %B %Y, %X',
                            date: '%d/%m/%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'Domenica',
                                'Lunedì',
                                'Martedì',
                                'Mercoledì',
                                'Giovedì',
                                'Venerdì',
                                'Sabato'
                            ],
                            shortDays: [
                                'Dom',
                                'Lun',
                                'Mar',
                                'Mer',
                                'Gio',
                                'Ven',
                                'Sab'
                            ],
                            months: [
                                'Gennaio',
                                'Febbraio',
                                'Marzo',
                                'Aprile',
                                'Maggio',
                                'Giugno',
                                'Luglio',
                                'Agosto',
                                'Settembre',
                                'Ottobre',
                                'Novembre',
                                'Dicembre'
                            ],
                            shortMonths: [
                                'Gen',
                                'Feb',
                                'Mar',
                                'Apr',
                                'Mag',
                                'Giu',
                                'Lug',
                                'Ago',
                                'Set',
                                'Ott',
                                'Nov',
                                'Dic'
                            ]
                        }), ve = a({
                            dateTime: '%Y %b %e %a %X',
                            date: '%Y/%m/%d',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                '日曜日',
                                '月曜日',
                                '火曜日',
                                '水曜日',
                                '木曜日',
                                '金曜日',
                                '土曜日'
                            ],
                            shortDays: [
                                '日',
                                '月',
                                '火',
                                '水',
                                '木',
                                '金',
                                '土'
                            ],
                            months: [
                                '睦月',
                                '如月',
                                '弥生',
                                '卯月',
                                '皐月',
                                '水無月',
                                '文月',
                                '葉月',
                                '長月',
                                '神無月',
                                '霜月',
                                '師走'
                            ],
                            shortMonths: [
                                '1月',
                                '2月',
                                '3月',
                                '4月',
                                '5月',
                                '6月',
                                '7月',
                                '8月',
                                '9月',
                                '10月',
                                '11月',
                                '12月'
                            ]
                        }), ye = a({
                            dateTime: '%Y/%m/%d %a %X',
                            date: '%Y/%m/%d',
                            time: '%H:%M:%S',
                            periods: [
                                '오전',
                                '오후'
                            ],
                            days: [
                                '일요일',
                                '월요일',
                                '화요일',
                                '수요일',
                                '목요일',
                                '금요일',
                                '토요일'
                            ],
                            shortDays: [
                                '일',
                                '월',
                                '화',
                                '수',
                                '목',
                                '금',
                                '토'
                            ],
                            months: [
                                '1월',
                                '2월',
                                '3월',
                                '4월',
                                '5월',
                                '6월',
                                '7월',
                                '8월',
                                '9월',
                                '10월',
                                '11월',
                                '12월'
                            ],
                            shortMonths: [
                                '1월',
                                '2월',
                                '3월',
                                '4\uFFFD\uFFFD\uFFFD',
                                '5월',
                                '6월',
                                '7월',
                                '8월',
                                '9월',
                                '10월',
                                '11월',
                                '12월'
                            ]
                        }), _e = a({
                            dateTime: '%A, %e %B %Y г. %X',
                            date: '%d.%m.%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'недела',
                                'понеделник',
                                'вторник',
                                'среда',
                                'четврток',
                                'петок',
                                'сабота'
                            ],
                            shortDays: [
                                'нед',
                                'пон',
                                'вто',
                                'сре',
                                'чет',
                                'пет',
                                'саб'
                            ],
                            months: [
                                'јануари',
                                'февруари',
                                'март',
                                'април',
                                'мај',
                                'јуни',
                                'јули',
                                'август',
                                'септември',
                                'октомври',
                                'ноември',
                                'декември'
                            ],
                            shortMonths: [
                                'јан',
                                'фев',
                                'мар',
                                'апр',
                                'мај',
                                'јун',
                                'јул',
                                'авг',
                                'сеп',
                                'окт',
                                'ное',
                                'дек'
                            ]
                        }), be = a({
                            dateTime: '%a %e %B %Y %T',
                            date: '%d-%m-%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'zondag',
                                'maandag',
                                'dinsdag',
                                'woensdag',
                                'donderdag',
                                'vrijdag',
                                'zaterdag'
                            ],
                            shortDays: [
                                'zo',
                                'ma',
                                'di',
                                'wo',
                                'do',
                                'vr',
                                'za'
                            ],
                            months: [
                                'januari',
                                'februari',
                                'maart',
                                'april',
                                'mei',
                                'juni',
                                'juli',
                                'augustus',
                                'september',
                                'oktober',
                                'november',
                                'december'
                            ],
                            shortMonths: [
                                'jan',
                                'feb',
                                'mrt',
                                'apr',
                                'mei',
                                'jun',
                                'jul',
                                'aug',
                                'sep',
                                'okt',
                                'nov',
                                'dec'
                            ]
                        }), xe = a({
                            dateTime: '%A, %e %B %Y, %X',
                            date: '%d/%m/%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'Niedziela',
                                'Poniedziałek',
                                'Wtorek',
                                'Środa',
                                'Czwartek',
                                'Pi\uFFFD\uFFFDtek',
                                'Sobota'
                            ],
                            shortDays: [
                                'Niedz.',
                                'Pon.',
                                'Wt.',
                                'Śr.',
                                'Czw.',
                                'Pt.',
                                'Sob.'
                            ],
                            months: [
                                'Styczeń',
                                'Luty',
                                'Marzec',
                                'Kwiecień',
                                'Maj',
                                'Czerwiec',
                                'Lipiec',
                                'Sierpień',
                                'Wrzesień',
                                'Październik',
                                'Listopad',
                                'Grudzień'
                            ],
                            shortMonths: [
                                'Stycz.',
                                'Luty',
                                'Marz.',
                                'Kwie.',
                                'Maj',
                                'Czerw.',
                                'Lipc.',
                                'Sierp.',
                                'Wrz.',
                                'Paźdz.',
                                'Listop.',
                                'Grudz.'
                            ]
                        }), we = a({
                            dateTime: '%A, %e de %B de %Y. %X',
                            date: '%d/%m/%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'Domingo',
                                'Segunda',
                                'Terça',
                                'Quarta',
                                'Quinta',
                                'Sexta',
                                'Sábado'
                            ],
                            shortDays: [
                                'Dom',
                                'Seg',
                                'Ter',
                                'Qua',
                                'Qui',
                                'Sex',
                                'Sáb'
                            ],
                            months: [
                                'Janeiro',
                                'Fevereiro',
                                'Março',
                                'Abril',
                                'Maio',
                                'Junho',
                                'Julho',
                                'Agosto',
                                'Setembro',
                                'Outubro',
                                'Novembro',
                                'Dezembro'
                            ],
                            shortMonths: [
                                'Jan',
                                'Fev',
                                'Mar',
                                'Abr',
                                'Mai',
                                'Jun',
                                'Jul',
                                'Ago',
                                'Set',
                                'Out',
                                'Nov',
                                'Dez'
                            ]
                        }), ke = a({
                            dateTime: '%A, %e %B %Y г. %X',
                            date: '%d.%m.%Y',
                            time: '%H:%M:%S',
                            periods: [
                                'AM',
                                'PM'
                            ],
                            days: [
                                'воскресенье',
                                'понедельник',
                                'вторник',
                                'среда',
                                'четверг',
                                'пятница',
                                'суббота'
                            ],
                            shortDays: [
                                'вс',
                                'пн',
                                'вт',
                                'ср',
                                'чт',
                                'пт',
                                'сб'
                            ],
                            months: [
                                'января',
                                'февраля',
                                'марта',
                                'апреля',
                                'мая',
                                'июня',
                                'июля',
                                'августа',
                                'сентября',
                                'октября',
                                'ноября',
                                'декабря'
                            ],
                            shortMonths: [
                                'янв',
                                'фев',
                                'мар',
                                'апр',
                                'май',
                                'июн',
                                'июл',
                                'авг',
                                'сен',
                                'окт',
                                'ноя',
                                'дек'
                            ]
                        }), Me = a({
                            dateTime: '%A den %d %B %Y %X',
                            date: '%Y-%m-%d',
                            time: '%H:%M:%S',
                            periods: [
                                'fm',
                                'em'
                            ],
                            days: [
                                'Söndag',
                                'Måndag',
                                'Tisdag',
                                'Onsdag',
                                'Torsdag',
                                'Fredag',
                                'Lördag'
                            ],
                            shortDays: [
                                'Sön',
                                'Mån',
                                'Tis',
                                'Ons',
                                'Tor',
                                'Fre',
                                'Lör'
                            ],
                            months: [
                                'Januari',
                                'Februari',
                                'Mars',
                                'April',
                                'Maj',
                                'Juni',
                                'Juli',
                                'Augusti',
                                'September',
                                'Oktober',
                                'November',
                                'December'
                            ],
                            shortMonths: [
                                'Jan',
                                'Feb',
                                'Mar',
                                'Apr',
                                'Maj',
                                'Jun',
                                'Jul',
                                'Aug',
                                'Sep',
                                'Okt',
                                'Nov',
                                'Dec'
                            ]
                        }), Se = a({
                            dateTime: '%a %b %e %X %Y',
                            date: '%Y/%-m/%-d',
                            time: '%H:%M:%S',
                            periods: [
                                '上午',
                                '下午'
                            ],
                            days: [
                                '星期日',
                                '星期一',
                                '星期二',
                                '星期三',
                                '星期四',
                                '星期五',
                                '星期六'
                            ],
                            shortDays: [
                                '星期日',
                                '星期一',
                                '星期二',
                                '星期三',
                                '星期四',
                                '星期五',
                                '星期六'
                            ],
                            months: [
                                '一月',
                                '二月',
                                '三月',
                                '四月',
                                '五月',
                                '六月',
                                '七月',
                                '八月',
                                '九月',
                                '十月',
                                '十一月',
                                '十二月'
                            ],
                            shortMonths: [
                                '一月',
                                '二月',
                                '三月',
                                '四月',
                                '五月',
                                '六月',
                                '七月',
                                '八月',
                                '九月',
                                '十月',
                                '十一月',
                                '十二月'
                            ]
                        }), Te = '%Y-%m-%dT%H:%M:%S.%LZ';
                    Q.parse = function (e) {
                        var t = new Date(e);
                        return isNaN(t) ? null : t;
                    }, Q.toString = function () {
                        return Te;
                    };
                    var Ee = Date.prototype.toISOString && +new Date('2000-01-01T00:00:00.000Z') ? Q : ie.utcFormat(Te), Ae = ie.format, Le = ie.utcFormat, Ce = '0.2.1';
                    e.version = Ce, e.format = Ae, e.utcFormat = Le, e.locale = a, e.localeCaEs = ae, e.localeDeCh = oe, e.localeDeDe = se, e.localeEnCa = ue, e.localeEnGb = le, e.localeEnUs = ie, e.localeEsEs = ce, e.localeFiFi = de, e.localeFrCa = fe, e.localeFrFr = he, e.localeHeIl = pe, e.localeHuHu = ge, e.localeItIt = me, e.localeJaJp = ve, e.localeKoKr = ye, e.localeMkMk = _e, e.localeNlNl = be, e.localePlPl = xe, e.localePtBr = we, e.localeRuRu = ke, e.localeSvSe = Me, e.localeZhCn = Se, e.isoFormat = Ee;
                });
            },
            { 'd3-time': 6 }
        ],
        6: [
            function (t, n, r) {
                !function (t, i) {
                    'object' == typeof r && 'undefined' != typeof n ? i(r) : 'function' == typeof e && e.amd ? e('d3-time', ['exports'], i) : i(t.d3_time = {});
                }(this, function (e) {
                    'use strict';
                    function t(e, n, r, o) {
                        function s(t) {
                            return e(t = new Date(+t)), t;
                        }
                        return s.floor = s, s.round = function (t) {
                            var r = new Date(+t), i = new Date(t - 1);
                            return e(r), e(i), n(i, 1), t - r < i - t ? r : i;
                        }, s.ceil = function (t) {
                            return e(t = new Date(t - 1)), n(t, 1), t;
                        }, s.offset = function (e, t) {
                            return n(e = new Date(+e), null == t ? 1 : Math.floor(t)), e;
                        }, s.range = function (t, r, i) {
                            var a = [];
                            if (t = new Date(t - 1), r = new Date(+r), i = null == i ? 1 : Math.floor(i), !(t < r && i > 0))
                                return a;
                            for (n(t, 1), e(t), t < r && a.push(new Date(+t)); n(t, i), e(t), t < r;)
                                a.push(new Date(+t));
                            return a;
                        }, s.filter = function (r) {
                            return t(function (t) {
                                for (; e(t), !r(t);)
                                    t.setTime(t - 1);
                            }, function (e, t) {
                                for (; --t >= 0;)
                                    for (; n(e, 1), !r(e););
                            });
                        }, r && (s.count = function (t, n) {
                            return i.setTime(+t), a.setTime(+n), e(i), e(a), Math.floor(r(i, a));
                        }, s.every = function (e) {
                            return e = Math.floor(e), isFinite(e) && e > 0 ? e > 1 ? s.filter(o ? function (t) {
                                return o(t) % e === 0;
                            } : function (t) {
                                return s.count(0, t) % e === 0;
                            }) : s : null;
                        }), s;
                    }
                    function n(e) {
                        return t(function (t) {
                            t.setHours(0, 0, 0, 0), t.setDate(t.getDate() - (t.getDay() + 7 - e) % 7);
                        }, function (e, t) {
                            e.setDate(e.getDate() + 7 * t);
                        }, function (e, t) {
                            return (t - e - 60000 * (t.getTimezoneOffset() - e.getTimezoneOffset())) / 604800000;
                        });
                    }
                    function r(e) {
                        return t(function (t) {
                            t.setUTCHours(0, 0, 0, 0), t.setUTCDate(t.getUTCDate() - (t.getUTCDay() + 7 - e) % 7);
                        }, function (e, t) {
                            e.setUTCDate(e.getUTCDate() + 7 * t);
                        }, function (e, t) {
                            return (t - e) / 604800000;
                        });
                    }
                    var i = new Date(), a = new Date(), o = t(function () {
                        }, function (e, t) {
                            e.setTime(+e + t);
                        }, function (e, t) {
                            return t - e;
                        });
                    o.every = function (e) {
                        return e = Math.floor(e), isFinite(e) && e > 0 ? e > 1 ? t(function (t) {
                            t.setTime(Math.floor(t / e) * e);
                        }, function (t, n) {
                            t.setTime(+t + n * e);
                        }, function (t, n) {
                            return (n - t) / e;
                        }) : o : null;
                    };
                    var s = t(function (e) {
                            e.setMilliseconds(0);
                        }, function (e, t) {
                            e.setTime(+e + 1000 * t);
                        }, function (e, t) {
                            return (t - e) / 1000;
                        }, function (e) {
                            return e.getSeconds();
                        }), u = t(function (e) {
                            e.setSeconds(0, 0);
                        }, function (e, t) {
                            e.setTime(+e + 60000 * t);
                        }, function (e, t) {
                            return (t - e) / 60000;
                        }, function (e) {
                            return e.getMinutes();
                        }), l = t(function (e) {
                            e.setMinutes(0, 0, 0);
                        }, function (e, t) {
                            e.setTime(+e + 3600000 * t);
                        }, function (e, t) {
                            return (t - e) / 3600000;
                        }, function (e) {
                            return e.getHours();
                        }), c = t(function (e) {
                            e.setHours(0, 0, 0, 0);
                        }, function (e, t) {
                            e.setDate(e.getDate() + t);
                        }, function (e, t) {
                            return (t - e - 60000 * (t.getTimezoneOffset() - e.getTimezoneOffset())) / 86400000;
                        }, function (e) {
                            return e.getDate() - 1;
                        }), d = n(0), f = n(1), h = n(2), p = n(3), g = n(4), m = n(5), v = n(6), y = t(function (e) {
                            e.setHours(0, 0, 0, 0), e.setDate(1);
                        }, function (e, t) {
                            e.setMonth(e.getMonth() + t);
                        }, function (e, t) {
                            return t.getMonth() - e.getMonth() + 12 * (t.getFullYear() - e.getFullYear());
                        }, function (e) {
                            return e.getMonth();
                        }), _ = t(function (e) {
                            e.setHours(0, 0, 0, 0), e.setMonth(0, 1);
                        }, function (e, t) {
                            e.setFullYear(e.getFullYear() + t);
                        }, function (e, t) {
                            return t.getFullYear() - e.getFullYear();
                        }, function (e) {
                            return e.getFullYear();
                        }), b = t(function (e) {
                            e.setUTCMilliseconds(0);
                        }, function (e, t) {
                            e.setTime(+e + 1000 * t);
                        }, function (e, t) {
                            return (t - e) / 1000;
                        }, function (e) {
                            return e.getUTCSeconds();
                        }), x = t(function (e) {
                            e.setUTCSeconds(0, 0);
                        }, function (e, t) {
                            e.setTime(+e + 60000 * t);
                        }, function (e, t) {
                            return (t - e) / 60000;
                        }, function (e) {
                            return e.getUTCMinutes();
                        }), w = t(function (e) {
                            e.setUTCMinutes(0, 0, 0);
                        }, function (e, t) {
                            e.setTime(+e + 3600000 * t);
                        }, function (e, t) {
                            return (t - e) / 3600000;
                        }, function (e) {
                            return e.getUTCHours();
                        }), k = t(function (e) {
                            e.setUTCHours(0, 0, 0, 0);
                        }, function (e, t) {
                            e.setUTCDate(e.getUTCDate() + t);
                        }, function (e, t) {
                            return (t - e) / 86400000;
                        }, function (e) {
                            return e.getUTCDate() - 1;
                        }), M = r(0), S = r(1), T = r(2), E = r(3), A = r(4), L = r(5), C = r(6), D = t(function (e) {
                            e.setUTCHours(0, 0, 0, 0), e.setUTCDate(1);
                        }, function (e, t) {
                            e.setUTCMonth(e.getUTCMonth() + t);
                        }, function (e, t) {
                            return t.getUTCMonth() - e.getUTCMonth() + 12 * (t.getUTCFullYear() - e.getUTCFullYear());
                        }, function (e) {
                            return e.getUTCMonth();
                        }), P = t(function (e) {
                            e.setUTCHours(0, 0, 0, 0), e.setUTCMonth(0, 1);
                        }, function (e, t) {
                            e.setUTCFullYear(e.getUTCFullYear() + t);
                        }, function (e, t) {
                            return t.getUTCFullYear() - e.getUTCFullYear();
                        }, function (e) {
                            return e.getUTCFullYear();
                        }), I = o.range, N = s.range, O = u.range, j = l.range, z = c.range, U = d.range, F = f.range, R = h.range, q = p.range, B = g.range, G = m.range, $ = v.range, H = d.range, Y = y.range, V = _.range, W = o, J = I, X = b.range, K = x.range, Z = w.range, Q = k.range, ee = M.range, te = S.range, ne = T.range, re = E.range, ie = A.range, ae = L.range, oe = C.range, se = M.range, ue = D.range, le = P.range, ce = '0.1.1';
                    e.version = ce, e.milliseconds = I, e.seconds = N, e.minutes = O, e.hours = j, e.days = z, e.sundays = U, e.mondays = F, e.tuesdays = R, e.wednesdays = q, e.thursdays = B, e.fridays = G, e.saturdays = $, e.weeks = H, e.months = Y, e.years = V, e.utcMillisecond = W, e.utcMilliseconds = J, e.utcSeconds = X, e.utcMinutes = K, e.utcHours = Z, e.utcDays = Q, e.utcSundays = ee, e.utcMondays = te, e.utcTuesdays = ne, e.utcWednesdays = re, e.utcThursdays = ie, e.utcFridays = ae, e.utcSaturdays = oe, e.utcWeeks = se, e.utcMonths = ue, e.utcYears = le, e.millisecond = o, e.second = s, e.minute = u, e.hour = l, e.day = c, e.sunday = d, e.monday = f, e.tuesday = h, e.wednesday = p, e.thursday = g, e.friday = m, e.saturday = v, e.week = d, e.month = y, e.year = _, e.utcSecond = b, e.utcMinute = x, e.utcHour = w, e.utcDay = k, e.utcSunday = M, e.utcMonday = S, e.utcTuesday = T, e.utcWednesday = E, e.utcThursday = A, e.utcFriday = L, e.utcSaturday = C, e.utcWeek = M, e.utcMonth = D, e.utcYear = P, e.interval = t;
                });
            },
            {}
        ],
        7: [
            function (e, t, n) {
                t.exports = {
                    _args: [[
                            {
                                raw: 'datalib@^1.7.1',
                                scope: null,
                                escapedName: 'datalib',
                                name: 'datalib',
                                rawSpec: '^1.7.1',
                                spec: '>=1.7.1 <2.0.0',
                                type: 'range'
                            },
                            '/Users/arvind/Research/vega2/vega3-2'
                        ]],
                    _from: 'datalib@>=1.7.1 <2.0.0',
                    _id: 'datalib@1.7.3',
                    _inCache: !0,
                    _installable: !0,
                    _location: '/datalib',
                    _nodeVersion: '0.12.7',
                    _npmOperationalInternal: {
                        host: 'packages-16-east.internal.npmjs.com',
                        tmp: 'tmp/datalib-1.7.3.tgz_1476399375564_0.8775846140924841'
                    },
                    _npmUser: {
                        name: 'jheer',
                        email: 'jeffrey.heer@gmail.com'
                    },
                    _npmVersion: '2.12.1',
                    _phantomChildren: {},
                    _requested: {
                        raw: 'datalib@^1.7.1',
                        scope: null,
                        escapedName: 'datalib',
                        name: 'datalib',
                        rawSpec: '^1.7.1',
                        spec: '>=1.7.1 <2.0.0',
                        type: 'range'
                    },
                    _requiredBy: [
                        '/',
                        '/vega-dataflow',
                        '/vega-scenegraph'
                    ],
                    _resolved: 'https://registry.npmjs.org/datalib/-/datalib-1.7.3.tgz',
                    _shasum: '4722715bb91f5a2411cf42bf984932cc403eba48',
                    _shrinkwrap: null,
                    _spec: 'datalib@^1.7.1',
                    _where: '/Users/arvind/Research/vega2/vega3-2',
                    author: {
                        name: 'Jeffrey Heer',
                        url: 'http://idl.cs.washington.edu'
                    },
                    browser: {
                        buffer: !1,
                        fs: !1,
                        http: !1,
                        request: !1,
                        'sync-request': !1,
                        url: !1
                    },
                    bugs: { url: 'https://github.com/vega/datalib/issues' },
                    contributors: [
                        {
                            name: 'Michael Correll',
                            url: 'http://pages.cs.wisc.edu/~mcorrell/'
                        },
                        {
                            name: 'Ryan Russell',
                            url: 'https://github.com/RussellSprouts'
                        }
                    ],
                    dependencies: {
                        'd3-dsv': '0.1',
                        'd3-format': '0.4',
                        'd3-time': '0.1',
                        'd3-time-format': '0.2',
                        request: '^2.67.0',
                        'sync-request': '^2.1.0',
                        topojson: '^1.6.19'
                    },
                    description: 'JavaScript utilites for loading, summarizing and working with data.',
                    devDependencies: {
                        browserify: '^12.0.1',
                        chai: '^3.4.1',
                        istanbul: 'latest',
                        jshint: '^2.9.1-rc1',
                        mocha: '^2.3.4',
                        'uglify-js': '^2.6.1'
                    },
                    directories: {},
                    dist: {
                        shasum: '4722715bb91f5a2411cf42bf984932cc403eba48',
                        tarball: 'https://registry.npmjs.org/datalib/-/datalib-1.7.3.tgz'
                    },
                    gitHead: '0087f0a1e9e9f819bffb309fa10b4ac3c9292486',
                    homepage: 'https://github.com/vega/datalib#readme',
                    keywords: [
                        'data',
                        'table',
                        'statistics',
                        'parse',
                        'csv',
                        'tsv',
                        'json',
                        'utility'
                    ],
                    license: 'BSD-3-Clause',
                    main: 'src/index.js',
                    maintainers: [{
                            name: 'jheer',
                            email: 'jeffrey.heer@gmail.com'
                        }],
                    name: 'datalib',
                    optionalDependencies: {},
                    readme: 'ERROR: No README data found!',
                    repository: {
                        type: 'git',
                        url: 'git+ssh://git@github.com/vega/datalib.git'
                    },
                    scripts: {
                        build: 'browserify src/index.js -d -s dl -o datalib.js',
                        cover: 'TZ=America/Los_Angeles istanbul cover _mocha -- --recursive test/',
                        deploy: 'npm run test && scripts/deploy.sh',
                        lint: 'jshint src/',
                        postbuild: 'uglifyjs datalib.js -c -m -o datalib.min.js',
                        test: 'npm run lint && TZ=America/Los_Angeles mocha --recursive test/'
                    },
                    version: '1.7.3'
                };
            },
            {}
        ],
        8: [
            function (e, t, n) {
                var r = e('./util'), i = e('./time'), a = i.utc, o = t.exports;
                o.$year = r.$func('year', i.year.unit), o.$month = r.$func('month', i.months.unit), o.$date = r.$func('date', i.dates.unit), o.$day = r.$func('day', i.weekdays.unit), o.$hour = r.$func('hour', i.hours.unit), o.$minute = r.$func('minute', i.minutes.unit), o.$second = r.$func('second', i.seconds.unit), o.$utcYear = r.$func('utcYear', a.year.unit), o.$utcMonth = r.$func('utcMonth', a.months.unit), o.$utcDate = r.$func('utcDate', a.dates.unit), o.$utcDay = r.$func('utcDay', a.weekdays.unit), o.$utcHour = r.$func('utcHour', a.hours.unit), o.$utcMinute = r.$func('utcMinute', a.minutes.unit), o.$utcSecond = r.$func('utcSecond', a.seconds.unit);
            },
            {
                './time': 30,
                './util': 31
            }
        ],
        9: [
            function (e, t, n) {
                function r() {
                    this._cells = {}, this._aggr = [], this._stream = !1;
                }
                function i(e) {
                    if (a.isArray(e))
                        return e;
                    if (null == e)
                        return [];
                    var t, n, r = [];
                    for (t in e)
                        n = a.array(e[t]), r.push({
                            name: t,
                            ops: n
                        });
                    return r;
                }
                var a = e('../util'), o = e('./measures'), s = e('./collector'), u = r.Flags = {
                        ADD_CELL: 1,
                        MOD_CELL: 2
                    }, l = r.prototype;
                l.stream = function (e) {
                    return null == e ? this._stream : (this._stream = !!e, this._aggr = [], this);
                }, l.key = function (e) {
                    return null == e ? this._key : (this._key = a.$(e), this);
                }, l.groupby = function (e) {
                    return this._dims = a.array(e).map(function (e, t) {
                        if (e = a.isString(e) ? {
                                name: e,
                                get: a.$(e)
                            } : a.isFunction(e) ? {
                                name: a.name(e) || e.name || '_' + t,
                                get: e
                            } : e.name && a.isFunction(e.get) ? e : null, null == e)
                            throw 'Invalid groupby argument: ' + e;
                        return e;
                    }), this.clear();
                }, l.summarize = function (e) {
                    e = i(e), this._count = !0;
                    var t, n, r, s, u, l, c, d = this._aggr = [];
                    for (r = 0; r < e.length; ++r) {
                        for (s = 0, t = [], n = e[r]; s < n.ops.length; ++s)
                            u = n.ops[s], 'count' !== u && (this._count = !1), l = n.as && n.as[s] || u + ('*' === n.name ? '' : '_' + n.name), t.push(o[u](l));
                        c = n.get && a.$(n.get) || ('*' === n.name ? a.identity : a.$(n.name)), d.push({
                            name: n.name,
                            measures: o.create(t, this._stream, c, this._assign)
                        });
                    }
                    return this.clear();
                }, l.count = function () {
                    return this.summarize({ '*': 'count' });
                }, l._assign = function (e, t, n) {
                    e[t] = n;
                }, l.clear = function () {
                    return this._cells = {}, this;
                }, l._cellkey = function (e) {
                    var t, n = this._dims, r = n.length, i = String(n[0].get(e));
                    for (t = 1; t < r; ++t)
                        i += '|' + n[t].get(e);
                    return i;
                }, l._cell = function (e) {
                    var t = this._dims.length ? this._cellkey(e) : '';
                    return this._cells[t] || (this._cells[t] = this._newcell(e, t));
                }, l._newcell = function (e, t) {
                    var n, r = {
                            num: 0,
                            tuple: this._newtuple(e, t),
                            flag: u.ADD_CELL,
                            aggs: {}
                        }, i = this._aggr;
                    for (n = 0; n < i.length; ++n)
                        r.aggs[i[n].name] = new i[n].measures(r, r.tuple);
                    return r.collect && (r.data = new s(this._key)), r;
                }, l._newtuple = function (e) {
                    var t, n, r = this._dims, i = {};
                    for (t = 0, n = r.length; t < n; ++t)
                        i[r[t].name] = r[t].get(e);
                    return this._ingest(i);
                }, l._ingest = a.identity, l._add = function (e) {
                    var t, n = this._cell(e), r = this._aggr;
                    if (n.num += 1, !this._count)
                        for (n.collect && n.data.add(e), t = 0; t < r.length; ++t)
                            n.aggs[r[t].name].add(e);
                    n.flag |= u.MOD_CELL, this._on_add && this._on_add(e, n);
                }, l._rem = function (e) {
                    var t, n = this._cell(e), r = this._aggr;
                    if (n.num -= 1, !this._count)
                        for (n.collect && n.data.rem(e), t = 0; t < r.length; ++t)
                            n.aggs[r[t].name].rem(e);
                    n.flag |= u.MOD_CELL, this._on_rem && this._on_rem(e, n);
                }, l._mod = function (e, t) {
                    var n, r = this._cell(t), i = this._cell(e), o = this._aggr;
                    for (r !== i ? (r.num -= 1, i.num += 1, r.collect && r.data.rem(t), i.collect && i.data.add(e)) : r.collect && !a.isObject(e) && (r.data.rem(t), r.data.add(e)), n = 0; n < o.length; ++n)
                        r.aggs[o[n].name].rem(t), i.aggs[o[n].name].add(e);
                    r.flag |= u.MOD_CELL, i.flag |= u.MOD_CELL, this._on_mod && this._on_mod(e, t, r, i);
                }, l._markMod = function (e) {
                    var t = this._cell(e);
                    t.flag |= u.MOD_CELL;
                }, l.result = function () {
                    var e, t, n, r = [], i = this._aggr;
                    for (n in this._cells) {
                        if (e = this._cells[n], e.num > 0) {
                            for (e.collect && e.data.values(), t = 0; t < i.length; ++t)
                                e.aggs[i[t].name].set();
                            r.push(e.tuple);
                        } else
                            delete this._cells[n];
                        e.flag = 0;
                    }
                    return this._rems = !1, r;
                }, l.changes = function (e) {
                    var t, n, r, i, a = e || {
                            add: [],
                            rem: [],
                            mod: []
                        }, o = this._aggr;
                    for (i in this._cells) {
                        for (t = this._cells[i], n = t.flag, t.collect && t.data.values(), r = 0; r < o.length; ++r)
                            t.aggs[o[r].name].set();
                        t.num <= 0 ? (a.rem.push(t.tuple), delete this._cells[i], this._on_drop && this._on_drop(t)) : (this._on_keep && this._on_keep(t), n & u.ADD_CELL ? a.add.push(t.tuple) : n & u.MOD_CELL && a.mod.push(t.tuple)), t.flag = 0;
                    }
                    return this._rems = !1, a;
                }, l.execute = function (e) {
                    return this.clear().insert(e).result();
                }, l.insert = function (e) {
                    this._consolidate();
                    for (var t = 0; t < e.length; ++t)
                        this._add(e[t]);
                    return this;
                }, l.remove = function (e) {
                    if (!this._stream)
                        throw 'Aggregator not configured for streaming removes. Call stream(true) prior to calling summarize.';
                    for (var t = 0; t < e.length; ++t)
                        this._rem(e[t]);
                    return this._rems = !0, this;
                }, l._consolidate = function () {
                    if (this._rems) {
                        for (var e in this._cells)
                            this._cells[e].collect && this._cells[e].data.values();
                        this._rems = !1;
                    }
                }, t.exports = r;
            },
            {
                '../util': 31,
                './collector': 10,
                './measures': 12
            }
        ],
        10: [
            function (e, t, n) {
                function r(e) {
                    this._add = [], this._rem = [], this._key = e || null, this._last = null;
                }
                var i = e('../util'), a = e('../stats'), o = '__dl_rem__', s = r.prototype;
                s.add = function (e) {
                    this._add.push(e);
                }, s.rem = function (e) {
                    this._rem.push(e);
                }, s.values = function () {
                    if (this._get = null, 0 === this._rem.length)
                        return this._add;
                    var e, t, n, r, s = this._add, u = this._rem, l = this._key, c = Array(s.length - u.length);
                    if (i.isObject(u[0]))
                        if (l)
                            for (r = i.toMap(u, l), e = 0, t = 0, n = s.length; e < n; ++e)
                                r.hasOwnProperty(l(s[e])) || (c[t++] = s[e]);
                        else {
                            for (e = 0, n = u.length; e < n; ++e)
                                u[e][o] = 1;
                            for (e = 0, t = 0, n = s.length; e < n; ++e)
                                s[e][o] || (c[t++] = s[e]);
                            for (e = 0, n = u.length; e < n; ++e)
                                delete u[e][o];
                        }
                    else
                        for (r = a.count.map(u), e = 0, t = 0, n = s.length; e < n; ++e)
                            r[s[e]] > 0 ? r[s[e]] -= 1 : c[t++] = s[e];
                    return this._rem = [], this._add = c;
                }, s.extent = function (e) {
                    if (this._get !== e || !this._ext) {
                        var t = this.values(), n = a.extent.index(t, e);
                        this._ext = [
                            t[n[0]],
                            t[n[1]]
                        ], this._get = e;
                    }
                    return this._ext;
                }, s.argmin = function (e) {
                    return this.extent(e)[0];
                }, s.argmax = function (e) {
                    return this.extent(e)[1];
                }, s.min = function (e) {
                    var t = this.extent(e)[0];
                    return null != t ? e(t) : +(1 / 0);
                }, s.max = function (e) {
                    var t = this.extent(e)[1];
                    return null != t ? e(t) : -(1 / 0);
                }, s.quartile = function (e) {
                    return this._get === e && this._q || (this._q = a.quartile(this.values(), e), this._get = e), this._q;
                }, s.q1 = function (e) {
                    return this.quartile(e)[0];
                }, s.q2 = function (e) {
                    return this.quartile(e)[1];
                }, s.q3 = function (e) {
                    return this.quartile(e)[2];
                }, t.exports = r;
            },
            {
                '../stats': 28,
                '../util': 31
            }
        ],
        11: [
            function (e, t, n) {
                var r = e('../util'), i = e('./aggregator');
                t.exports = function () {
                    var e = [].reduce.call(arguments, function (e, t) {
                        return e.concat(r.array(t));
                    }, []);
                    return new i().groupby(e).summarize({ '*': 'values' });
                };
            },
            {
                '../util': 31,
                './aggregator': 9
            }
        ],
        12: [
            function (e, t, n) {
                function r(e) {
                    return function (t) {
                        var n = o.extend({
                            init: '',
                            add: '',
                            rem: '',
                            idx: 0
                        }, e);
                        return n.out = t || e.name, n;
                    };
                }
                function i(e, t) {
                    function n(e, r) {
                        function i(t) {
                            e[t] || n(e, e[t] = s[t]());
                        }
                        return r.req && r.req.forEach(i), t && r.str && r.str.forEach(i), e;
                    }
                    var r = e.reduce(n, e.reduce(function (e, t) {
                        return e[t.name] = t, e;
                    }, {}));
                    return o.vals(r).sort(function (e, t) {
                        return e.idx - t.idx;
                    });
                }
                function a(t, n, r, a) {
                    var s = i(t, n), u = 'this.cell = cell; this.tuple = t; this.valid = 0; this.missing = 0;', l = 'if (v==null) this.missing++; if (!this.isValid(v)) return; ++this.valid;', c = 'if (v==null) this.missing--; if (!this.isValid(v)) return; --this.valid;', d = 'var t = this.tuple; var cell = this.cell;';
                    return s.forEach(function (e) {
                        e.idx < 0 ? (u = e.init + u, l = e.add + l, c = e.rem + c) : (u += e.init, l += e.add, c += e.rem);
                    }), t.slice().sort(function (e, t) {
                        return e.idx - t.idx;
                    }).forEach(function (e) {
                        d += 'this.assign(t,\'' + e.out + '\',' + e.set + ');';
                    }), d += 'return t;', u = Function('cell', 't', u), u.prototype.assign = a, u.prototype.add = Function('t', 'var v = this.get(t);' + l), u.prototype.rem = Function('t', 'var v = this.get(t);' + c), u.prototype.set = Function(d), u.prototype.get = r, u.prototype.distinct = e('../stats').count.distinct, u.prototype.isValid = o.isValid, u.fields = t.map(o.$('out')), u;
                }
                var o = e('../util'), s = {
                        values: r({
                            name: 'values',
                            init: 'cell.collect = true;',
                            set: 'cell.data.values()',
                            idx: -1
                        }),
                        count: r({
                            name: 'count',
                            set: 'cell.num'
                        }),
                        missing: r({
                            name: 'missing',
                            set: 'this.missing'
                        }),
                        valid: r({
                            name: 'valid',
                            set: 'this.valid'
                        }),
                        sum: r({
                            name: 'sum',
                            init: 'this.sum = 0;',
                            add: 'this.sum += v;',
                            rem: 'this.sum -= v;',
                            set: 'this.sum'
                        }),
                        mean: r({
                            name: 'mean',
                            init: 'this.mean = 0;',
                            add: 'var d = v - this.mean; this.mean += d / this.valid;',
                            rem: 'var d = v - this.mean; this.mean -= this.valid ? d / this.valid : this.mean;',
                            set: 'this.mean'
                        }),
                        average: r({
                            name: 'average',
                            set: 'this.mean',
                            req: ['mean'],
                            idx: 1
                        }),
                        variance: r({
                            name: 'variance',
                            init: 'this.dev = 0;',
                            add: 'this.dev += d * (v - this.mean);',
                            rem: 'this.dev -= d * (v - this.mean);',
                            set: 'this.valid > 1 ? this.dev / (this.valid-1) : 0',
                            req: ['mean'],
                            idx: 1
                        }),
                        variancep: r({
                            name: 'variancep',
                            set: 'this.valid > 1 ? this.dev / this.valid : 0',
                            req: ['variance'],
                            idx: 2
                        }),
                        stdev: r({
                            name: 'stdev',
                            set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid-1)) : 0',
                            req: ['variance'],
                            idx: 2
                        }),
                        stdevp: r({
                            name: 'stdevp',
                            set: 'this.valid > 1 ? Math.sqrt(this.dev / this.valid) : 0',
                            req: ['variance'],
                            idx: 2
                        }),
                        stderr: r({
                            name: 'stderr',
                            set: 'this.valid > 1 ? Math.sqrt(this.dev / (this.valid * (this.valid-1))) : 0',
                            req: ['variance'],
                            idx: 2
                        }),
                        median: r({
                            name: 'median',
                            set: 'cell.data.q2(this.get)',
                            req: ['values'],
                            idx: 3
                        }),
                        q1: r({
                            name: 'q1',
                            set: 'cell.data.q1(this.get)',
                            req: ['values'],
                            idx: 3
                        }),
                        q3: r({
                            name: 'q3',
                            set: 'cell.data.q3(this.get)',
                            req: ['values'],
                            idx: 3
                        }),
                        distinct: r({
                            name: 'distinct',
                            set: 'this.distinct(cell.data.values(), this.get)',
                            req: ['values'],
                            idx: 3
                        }),
                        argmin: r({
                            name: 'argmin',
                            add: 'if (v < this.min) this.argmin = t;',
                            rem: 'if (v <= this.min) this.argmin = null;',
                            set: 'this.argmin = this.argmin || cell.data.argmin(this.get)',
                            req: ['min'],
                            str: ['values'],
                            idx: 3
                        }),
                        argmax: r({
                            name: 'argmax',
                            add: 'if (v > this.max) this.argmax = t;',
                            rem: 'if (v >= this.max) this.argmax = null;',
                            set: 'this.argmax = this.argmax || cell.data.argmax(this.get)',
                            req: ['max'],
                            str: ['values'],
                            idx: 3
                        }),
                        min: r({
                            name: 'min',
                            init: 'this.min = +Infinity;',
                            add: 'if (v < this.min) this.min = v;',
                            rem: 'if (v <= this.min) this.min = NaN;',
                            set: 'this.min = (isNaN(this.min) ? cell.data.min(this.get) : this.min)',
                            str: ['values'],
                            idx: 4
                        }),
                        max: r({
                            name: 'max',
                            init: 'this.max = -Infinity;',
                            add: 'if (v > this.max) this.max = v;',
                            rem: 'if (v >= this.max) this.max = NaN;',
                            set: 'this.max = (isNaN(this.max) ? cell.data.max(this.get) : this.max)',
                            str: ['values'],
                            idx: 4
                        }),
                        modeskew: r({
                            name: 'modeskew',
                            set: 'this.dev===0 ? 0 : (this.mean - cell.data.q2(this.get)) / Math.sqrt(this.dev/(this.valid-1))',
                            req: [
                                'mean',
                                'variance',
                                'median'
                            ],
                            idx: 5
                        })
                    };
                s.create = a, t.exports = s;
            },
            {
                '../stats': 28,
                '../util': 31
            }
        ],
        13: [
            function (e, t, n) {
                function r(e) {
                    if (!e)
                        throw Error('Missing binning options.');
                    var t, n, r, s, u, l, c, d = e.maxbins || 15, f = e.base || 10, h = Math.log(f), p = e.div || [
                            5,
                            2
                        ], g = e.min, m = e.max, v = m - g;
                    if (e.step)
                        t = e.step;
                    else if (e.steps)
                        t = e.steps[Math.min(e.steps.length - 1, i(e.steps, v / d, 0, e.steps.length))];
                    else {
                        for (n = Math.ceil(Math.log(d) / h), r = e.minstep || 0, t = Math.max(r, Math.pow(f, Math.round(Math.log(v) / h) - n)); Math.ceil(v / t) > d;)
                            t *= f;
                        for (l = 0; l < p.length; ++l)
                            u = t / p[l], u >= r && v / u <= d && (t = u);
                    }
                    return u = Math.log(t), s = u >= 0 ? 0 : ~~(-u / h) + 1, c = Math.pow(f, -s - 1), g = Math.min(g, Math.floor(g / t + c) * t), m = Math.ceil(m / t) * t, {
                        start: g,
                        stop: m,
                        step: t,
                        unit: { precision: s },
                        value: a,
                        index: o
                    };
                }
                function i(e, t, n, r) {
                    for (; n < r;) {
                        var i = n + r >>> 1;
                        l.cmp(e[i], t) < 0 ? n = i + 1 : r = i;
                    }
                    return n;
                }
                function a(e) {
                    return this.step * Math.floor(e / this.step + d);
                }
                function o(e) {
                    return Math.floor((e - this.start) / this.step + d);
                }
                function s(e) {
                    return this.unit.date(a.call(this, e));
                }
                function u(e) {
                    return o.call(this, this.unit.unit(e));
                }
                var l = e('../util'), c = e('../time'), d = 1e-15;
                r.date = function (e) {
                    if (!e)
                        throw Error('Missing date binning options.');
                    var t = e.utc ? c.utc : c, n = e.min, i = e.max, a = e.maxbins || 20, o = e.minbins || 4, l = +i - +n, d = e.unit ? t[e.unit] : t.find(l, o, a), f = r({
                            min: null != d.min ? d.min : d.unit(n),
                            max: null != d.max ? d.max : d.unit(i),
                            maxbins: a,
                            minstep: d.minstep,
                            steps: d.step
                        });
                    return f.unit = d, f.index = u, e.raw || (f.value = s), f;
                }, t.exports = r;
            },
            {
                '../time': 30,
                '../util': 31
            }
        ],
        14: [
            function (e, t, n) {
                function r(e, t, n) {
                    n = o(e, t, n);
                    var r = a(n);
                    return r ? f.$func('bin', r.unit.unit ? function (e) {
                        return r.value(r.unit.unit(e));
                    } : function (e) {
                        return r.value(e);
                    })(n.accessor) : n.accessor || f.identity;
                }
                function i(e, t, n) {
                    n = o(e, t, n);
                    var r = a(n);
                    return r ? s(e, n.accessor, r) : u(e, n.accessor, n && n.sort);
                }
                function a(e) {
                    var t = e.type, n = null;
                    return (null == t || p[t]) && ('integer' === t && null == e.minstep && (e.minstep = 1), n = 'date' === t ? l.date(e) : l(e)), n;
                }
                function o() {
                    var e = arguments, t = 0, n = f.isArray(e[t]) ? e[t++] : null, r = f.isFunction(e[t]) || f.isString(e[t]) ? f.$(e[t++]) : null, i = f.extend({}, e[t]);
                    if (n && (i.type = i.type || d(n, r), p[i.type])) {
                        var a = h.extent(n, r);
                        i = f.extend({
                            min: a[0],
                            max: a[1]
                        }, i);
                    }
                    return r && (i.accessor = r), i;
                }
                function s(e, t, n) {
                    for (var r, i, a = c.range(n.start, n.stop + n.step / 2, n.step).map(function (e) {
                                return {
                                    value: n.value(e),
                                    count: 0
                                };
                            }), o = 0; o < e.length; ++o)
                        if (r = t ? t(e[o]) : e[o], f.isValid(r)) {
                            if (i = n.index(r), i < 0 || i >= a.length || !isFinite(i))
                                continue;
                            a[i].count += 1;
                        }
                    return a.bins = n, a;
                }
                function u(e, t, n) {
                    var r = h.unique(e, t), i = h.count.map(e, t);
                    return r.map(function (e) {
                        return {
                            value: e,
                            count: i[e]
                        };
                    }).sort(f.comparator(n ? '-count' : '+value'));
                }
                var l = e('./bins'), c = e('../generate'), d = e('../import/type'), f = e('../util'), h = e('../stats'), p = {
                        integer: 1,
                        number: 1,
                        date: 1
                    };
                t.exports = {
                    $bin: r,
                    histogram: i
                };
            },
            {
                '../generate': 17,
                '../import/type': 26,
                '../stats': 28,
                '../util': 31,
                './bins': 13
            }
        ],
        15: [
            function (e, t, n) {
                function r(e, t) {
                    t = s.extend({
                        separator: ' ',
                        minwidth: 8,
                        maxwidth: 15
                    }, t);
                    var n = t.fields || s.keys(e[0]), r = u.all(e);
                    if (t.start || t.limit) {
                        var i = t.start || 0, a = t.limit ? i + t.limit : e.length;
                        e = e.slice(i, a);
                    }
                    var o = n.map(function (n) {
                            var i = d[r[n]] || '', a = c('{{' + n + i + '}}'), o = l.max(e, function (e) {
                                    return a(e).length;
                                });
                            return o = Math.max(Math.min(n.length, t.minwidth), o), t.maxwidth > 0 ? Math.min(o, t.maxwidth) : o;
                        }), h = n.map(function (e, t) {
                            return s.truncate(s.pad(e, o[t], 'center'), o[t]);
                        }).join(t.separator), p = c(n.map(function (e, t) {
                            return '{{' + e + (d[r[e]] || '') + ('|pad:' + o[t] + ',' + (f[r[e]] || 'right')) + ('|truncate:' + o[t]) + '}}';
                        }).join(t.separator));
                    return h + '\n' + e.map(p).join('\n');
                }
                function i(e) {
                    e = e ? e.__summary__ ? e : l.summary(e) : this;
                    var t, n, r = [];
                    for (t = 0, n = e.length; t < n; ++t)
                        r.push('-- ' + e[t].field + ' --'), 'string' === e[t].type || e[t].distinct < 10 ? r.push(o(e[t])) : r.push(a(e[t])), r.push('');
                    return r.join('\n');
                }
                function a(e) {
                    return [
                        'valid:    ' + e.valid,
                        'missing:  ' + e.missing,
                        'distinct: ' + e.distinct,
                        'min:      ' + e.min,
                        'max:      ' + e.max,
                        'median:   ' + e.median,
                        'mean:     ' + e.mean,
                        'stdev:    ' + e.stdev,
                        'modeskew: ' + e.modeskew
                    ].join('\n');
                }
                function o(e) {
                    var t = [
                            'valid:    ' + e.valid,
                            'missing:  ' + e.missing,
                            'distinct: ' + e.distinct,
                            'top values: '
                        ], n = e.unique, r = s.keys(n).sort(function (e, t) {
                            return n[t] - n[e];
                        }).slice(0, 6).map(function (e) {
                            return ' \'' + e + '\' (' + n[e] + ')';
                        });
                    return t.concat(r).join('\n');
                }
                var s = e('./util'), u = e('./import/type'), l = e('./stats'), c = e('./template');
                t.exports = {
                    table: r,
                    summary: i
                };
                var d = {
                        date: '|time:"%m/%d/%Y %H:%M:%S"',
                        number: '|number:".4f"',
                        integer: '|number:"d"'
                    }, f = {
                        number: 'left',
                        integer: 'left'
                    };
            },
            {
                './import/type': 26,
                './stats': 28,
                './template': 29,
                './util': 31
            }
        ],
        16: [
            function (e, t, n) {
                function r(e) {
                    return e.length > 4 && 'locale' + (e[0].toUpperCase() + e[1].toLowerCase() + e[3].toUpperCase() + e[4].toLowerCase());
                }
                function i(e) {
                    var t = x.isString(e) ? M[r(e)] : M.locale(e);
                    if (null == t)
                        throw Error('Unrecognized locale: ' + e);
                    S = t;
                }
                function a(e) {
                    var t = x.isString(e) ? k[r(e)] : k.locale(e);
                    if (null == t)
                        throw Error('Unrecognized locale: ' + e);
                    T = t, v = y = _ = b = null;
                }
                function o(e, t) {
                    e.length || (e = [0]), null == t && (t = 10);
                    var n = e[0], r = e[e.length - 1];
                    r < n && (o = r, r = n, n = o);
                    var i = r - n || (t = 1, n || r || 1), a = Math.pow(10, Math.floor(Math.log(i / t) / Math.LN10)), o = i / t / a;
                    return o >= A ? a *= 10 : o >= L ? a *= 5 : o >= C && (a *= 2), [
                        Math.ceil(n / a) * a,
                        Math.floor(r / a) * a + a / 2,
                        a
                    ];
                }
                function s(e, t) {
                    return function (n) {
                        var r = e(n), i = r.indexOf(t);
                        if (i < 0)
                            return r;
                        for (var a = u(r, i), o = a < r.length ? r.slice(a) : ''; --a > i;)
                            if ('0' !== r[a]) {
                                ++a;
                                break;
                            }
                        return r.slice(0, a) + o;
                    };
                }
                function u(e, t) {
                    var n, r = e.lastIndexOf('e');
                    if (r > 0)
                        return r;
                    for (r = e.length; --r > t;)
                        if (n = e.charCodeAt(r), n >= 48 && n <= 57)
                            return r + 1;
                }
                function l(e) {
                    var t = S.format('.1f')(1)[1];
                    switch (null == e && (e = ','), e = M.formatSpecifier(e), null == e.precision && (e.precision = 12), e.type) {
                    case '%':
                        e.precision -= 2;
                        break;
                    case 'e':
                        e.precision -= 1;
                    }
                    return s(S.format(e), t);
                }
                function c(e, t, n) {
                    var r = o(e, t);
                    switch (null == n && (n = ',f'), n = M.formatSpecifier(n), n.type) {
                    case 's':
                        var i = Math.max(Math.abs(r[0]), Math.abs(r[1]));
                        return null == n.precision && (n.precision = M.precisionPrefix(r[2], i)), S.formatPrefix(n, i);
                    case '':
                    case 'e':
                    case 'g':
                    case 'p':
                    case 'r':
                        null == n.precision && (n.precision = M.precisionRound(r[2], Math.max(Math.abs(r[0]), Math.abs(r[1]))) - ('e' === n.type));
                        break;
                    case 'f':
                    case '%':
                        null == n.precision && (n.precision = M.precisionFixed(r[2]) - 2 * ('%' === n.type));
                    }
                    return S.format(n);
                }
                function d() {
                    var e = T.format, t = e('.%L'), n = e(':%S'), r = e('%I:%M'), i = e('%I %p'), a = e('%a %d'), o = e('%b %d'), s = e('%B'), u = e('%Y');
                    return function (e) {
                        var l = +e;
                        return (w.second(e) < l ? t : w.minute(e) < l ? n : w.hour(e) < l ? r : w.day(e) < l ? i : w.month(e) < l ? w.week(e) < l ? a : o : w.year(e) < l ? s : u)(e);
                    };
                }
                function f() {
                    var e = T.utcFormat, t = e('.%L'), n = e(':%S'), r = e('%I:%M'), i = e('%I %p'), a = e('%a %d'), o = e('%b %d'), s = e('%B'), u = e('%Y');
                    return function (e) {
                        var l = +e;
                        return (w.utcSecond(e) < l ? t : w.utcMinute(e) < l ? n : w.utcHour(e) < l ? r : w.utcDay(e) < l ? i : w.utcMonth(e) < l ? w.utcWeek(e) < l ? a : o : w.utcYear(e) < l ? s : u)(e);
                    };
                }
                function h(e, t) {
                    var n = t ? y || (y = T.format('%b')) : v || (v = T.format('%B'));
                    return E.setMonth(e), n(E);
                }
                function p(e, t) {
                    var n = t ? b || (b = T.format('%a')) : _ || (_ = T.format('%A'));
                    return E.setMonth(0), E.setDate(2 + e), n(E);
                }
                function g(e) {
                    return Math.floor(e.getMonth() / 3) + 1;
                }
                function m(e) {
                    return Math.floor(e.getUTCMonth() / 3) + 1;
                }
                var v, y, _, b, x = e('./util'), w = e('d3-time'), k = e('d3-time-format'), M = e('d3-format'), S = M, T = k, E = new Date(2000, 0, 1);
                t.exports = {
                    numberLocale: i,
                    number: function (e) {
                        return S.format(e);
                    },
                    numberPrefix: function (e, t) {
                        return S.formatPrefix(e, t);
                    },
                    timeLocale: a,
                    time: function (e) {
                        return T.format(e);
                    },
                    utc: function (e) {
                        return T.utcFormat(e);
                    },
                    locale: function (e) {
                        i(e), a(e);
                    },
                    auto: {
                        number: l,
                        linear: c,
                        time: function () {
                            return d();
                        },
                        utc: function () {
                            return f();
                        }
                    },
                    month: h,
                    day: p,
                    quarter: g,
                    utcQuarter: m
                };
                var A = Math.sqrt(50), L = Math.sqrt(10), C = Math.sqrt(2);
            },
            {
                './util': 31,
                'd3-format': 4,
                'd3-time': 6,
                'd3-time-format': 5
            }
        ],
        17: [
            function (e, t, n) {
                var r = e('./util'), i = t.exports;
                i.repeat = function (e, t) {
                    var n, r = Array(t);
                    for (n = 0; n < t; ++n)
                        r[n] = e;
                    return r;
                }, i.zeros = function (e) {
                    return i.repeat(0, e);
                }, i.range = function (e, t, n) {
                    if (arguments.length < 3 && (n = 1, arguments.length < 2 && (t = e, e = 0)), (t - e) / n == 1 / 0)
                        throw new Error('Infinite range');
                    var r, i = [], a = -1;
                    if (n < 0)
                        for (; (r = e + n * ++a) > t;)
                            i.push(r);
                    else
                        for (; (r = e + n * ++a) < t;)
                            i.push(r);
                    return i;
                }, i.random = {}, i.random.uniform = function (e, t) {
                    void 0 === t && (t = void 0 === e ? 1 : e, e = 0);
                    var n = t - e, r = function () {
                            return e + n * Math.random();
                        };
                    return r.samples = function (e) {
                        return i.zeros(e).map(r);
                    }, r.pdf = function (r) {
                        return r >= e && r <= t ? 1 / n : 0;
                    }, r.cdf = function (r) {
                        return r < e ? 0 : r > t ? 1 : (r - e) / n;
                    }, r.icdf = function (t) {
                        return t >= 0 && t <= 1 ? e + t * n : NaN;
                    }, r;
                }, i.random.integer = function (e, t) {
                    void 0 === t && (t = e, e = 0);
                    var n = t - e, r = function () {
                            return e + Math.floor(n * Math.random());
                        };
                    return r.samples = function (e) {
                        return i.zeros(e).map(r);
                    }, r.pdf = function (r) {
                        return r === Math.floor(r) && r >= e && r < t ? 1 / n : 0;
                    }, r.cdf = function (r) {
                        var i = Math.floor(r);
                        return i < e ? 0 : i >= t ? 1 : (i - e + 1) / n;
                    }, r.icdf = function (t) {
                        return t >= 0 && t <= 1 ? e - 1 + Math.floor(t * n) : NaN;
                    }, r;
                }, i.random.normal = function (e, t) {
                    e = e || 0, t = t || 1;
                    var n, r = function () {
                            var r, i, a = 0, o = 0;
                            if (void 0 !== n)
                                return a = n, n = void 0, a;
                            do
                                a = 2 * Math.random() - 1, o = 2 * Math.random() - 1, r = a * a + o * o;
                            while (0 === r || r > 1);
                            return i = Math.sqrt(-2 * Math.log(r) / r), n = e + o * i * t, e + a * i * t;
                        };
                    return r.samples = function (e) {
                        return i.zeros(e).map(r);
                    }, r.pdf = function (n) {
                        var r = Math.exp(Math.pow(n - e, 2) / (-2 * Math.pow(t, 2)));
                        return 1 / (t * Math.sqrt(2 * Math.PI)) * r;
                    }, r.cdf = function (n) {
                        var r, i = (n - e) / t, a = Math.abs(i);
                        if (a > 37)
                            r = 0;
                        else {
                            var o, s = Math.exp(-a * a / 2);
                            a < 7.07106781186547 ? (o = 0.0352624965998911 * a + 0.700383064443688, o = o * a + 6.37396220353165, o = o * a + 33.912866078383, o = o * a + 112.079291497871, o = o * a + 221.213596169931, o = o * a + 220.206867912376, r = s * o, o = 0.0883883476483184 * a + 1.75566716318264, o = o * a + 16.064177579207, o = o * a + 86.7807322029461, o = o * a + 296.564248779674, o = o * a + 637.333633378831, o = o * a + 793.826512519948, o = o * a + 440.413735824752, r /= o) : (o = a + 0.65, o = a + 4 / o, o = a + 3 / o, o = a + 2 / o, o = a + 1 / o, r = s / o / 2.506628274631);
                        }
                        return i > 0 ? 1 - r : r;
                    }, r.icdf = function (n) {
                        if (n <= 0 || n >= 1)
                            return NaN;
                        var r = 2 * n - 1, i = 8 * (Math.PI - 3) / (3 * Math.PI * (4 - Math.PI)), a = 2 / (Math.PI * i) + Math.log(1 - Math.pow(r, 2)) / 2, o = Math.log(1 - r * r) / i, s = (r > 0 ? 1 : -1) * Math.sqrt(Math.sqrt(a * a - o) - a);
                        return e + t * Math.SQRT2 * s;
                    }, r;
                }, i.random.bootstrap = function (e, t) {
                    var n = e.filter(r.isValid), a = n.length, o = t ? i.random.normal(0, t) : null, s = function () {
                            return n[~~(Math.random() * a)] + (o ? o() : 0);
                        };
                    return s.samples = function (e) {
                        return i.zeros(e).map(s);
                    }, s;
                };
            },
            { './util': 31 }
        ],
        18: [
            function (e, t, n) {
                function r(e, t) {
                    if (e) {
                        var n = t.header;
                        e = (n ? n.join(t.delimiter) + '\n' : '') + e;
                    }
                    return a.dsv(t.delimiter).parse(e);
                }
                var i = e('../../util'), a = e('d3-dsv');
                r.delimiter = function (e) {
                    var t = { delimiter: e };
                    return function (e, n) {
                        return r(e, n ? i.extend(n, t) : t);
                    };
                }, t.exports = r;
            },
            {
                '../../util': 31,
                'd3-dsv': 3
            }
        ],
        19: [
            function (e, t, n) {
                var r = e('./dsv');
                t.exports = {
                    json: e('./json'),
                    topojson: e('./topojson'),
                    treejson: e('./treejson'),
                    dsv: r,
                    csv: r.delimiter(','),
                    tsv: r.delimiter('\t')
                };
            },
            {
                './dsv': 18,
                './json': 20,
                './topojson': 21,
                './treejson': 22
            }
        ],
        20: [
            function (e, t, n) {
                var r = e('../../util');
                t.exports = function (e, t) {
                    var n = r.isObject(e) && !r.isBuffer(e) ? e : JSON.parse(e);
                    return t && t.property && (n = r.accessor(t.property)(n)), n;
                };
            },
            { '../../util': 31 }
        ],
        21: [
            function (e, t, n) {
                var r = e('./json'), i = function (e, t) {
                        var n = i.topojson;
                        if (null == n)
                            throw Error('TopoJSON library not loaded.');
                        var a, o = r(e, t);
                        if (t && t.feature) {
                            if (a = o.objects[t.feature])
                                return n.feature(o, a).features;
                            throw Error('Invalid TopoJSON object: ' + t.feature);
                        }
                        if (t && t.mesh) {
                            if (a = o.objects[t.mesh])
                                return [n.mesh(o, o.objects[t.mesh])];
                            throw Error('Invalid TopoJSON object: ' + t.mesh);
                        }
                        throw Error('Missing TopoJSON feature or mesh parameter.');
                    };
                i.topojson = e('topojson'), t.exports = i;
            },
            {
                './json': 20,
                topojson: 32
            }
        ],
        22: [
            function (e, t, n) {
                function r(e, t) {
                    function n(e, t) {
                        e[i] = t, a.push(e);
                        var o = e[r];
                        if (o)
                            for (var s = 0; s < o.length; ++s)
                                n(o[s], e);
                    }
                    var r = t && t.children || 'children', i = t && t.parent || 'parent', a = [];
                    return n(e, null), a.root = e, a;
                }
                var i = e('./json');
                t.exports = function (e, t) {
                    return r(i(e, t), t);
                };
            },
            { './json': 20 }
        ],
        23: [
            function (e, t, n) {
                function r(t) {
                    var n = t.url;
                    if (!n && t.file)
                        return h + t.file;
                    if (t.baseURL && !f.test(n) && (c(n, '/') || '/' === t.baseURL[t.baseURL.length - 1] || (n = '/' + n), n = t.baseURL + n), !i.useXHR && c(n, '//') && (n = (t.defaultProtocol || 'http') + ':' + n), t.domainWhiteList) {
                        var r, a;
                        if (i.useXHR) {
                            var o = document.createElement('a');
                            o.href = n, '' === o.host && (o.href = o.href), r = o.hostname.toLowerCase(), a = window.location.hostname;
                        } else {
                            var s = e('url').parse(n);
                            r = s.hostname, a = null;
                        }
                        if (a !== r) {
                            var u = t.domainWhiteList.some(function (e) {
                                var t = r.length - e.length;
                                return e === r || t > 1 && '.' === r[t - 1] && r.lastIndexOf(e) === t;
                            });
                            if (!u)
                                throw 'URL is not whitelisted: ' + n;
                        }
                    }
                    return n;
                }
                function i(e, t) {
                    return i.loader(e, t);
                }
                function a(e, t) {
                    var n, r = t || function (e) {
                            throw e;
                        };
                    try {
                        n = i.sanitizeUrl(e);
                    } catch (e) {
                        return void r(e);
                    }
                    return n ? i.useXHR ? i.xhr(n, e, t) : c(n, h) ? i.file(n.slice(h.length), e, t) : n.indexOf('://') < 0 ? i.file(n, e, t) : i.http(n, e, t) : void r('Invalid URL: ' + e.url);
                }
                function o(e) {
                    var t = e.responseType;
                    return t && 'text' !== t ? e.response : e.responseText;
                }
                function s(e, t, n) {
                    function r() {
                        var e = s.status;
                        !e && o(s) || e >= 200 && e < 300 || 304 === e ? n(null, s.responseText) : n(s, null);
                    }
                    var a = !!n, s = new XMLHttpRequest();
                    if ('undefined' == typeof XDomainRequest || 'withCredentials' in s || !/^(http(s)?:)?\/\//.test(e) || (s = new XDomainRequest()), a && ('onload' in s ? s.onload = s.onerror = r : s.onreadystatechange = function () {
                            s.readyState > 3 && r();
                        }), s.open('GET', e, a), s.setRequestHeader) {
                        var u = d.extend({}, i.headers, t.headers);
                        for (var l in u)
                            s.setRequestHeader(l, u[l]);
                    }
                    if (s.send(), !a && o(s))
                        return s.responseText;
                }
                function u(t, n, r) {
                    var i = e('fs');
                    return r ? void i.readFile(t, r) : i.readFileSync(t, 'utf8');
                }
                function l(t, n, r) {
                    var a = d.extend({}, i.headers, n.headers), o = {
                            url: t,
                            encoding: null,
                            gzip: !0,
                            headers: a
                        };
                    return r ? void e('request')(o, function (e, t, n) {
                        e || 200 !== t.statusCode ? (e = e || 'Load failed with response code ' + t.statusCode + '.', r(e, null)) : r(null, n);
                    }) : e('sync-request')('GET', t, o).getBody();
                }
                function c(e, t) {
                    return null != e && 0 === e.lastIndexOf(t, 0);
                }
                var d = e('../util'), f = /^([A-Za-z]+:)?\/\//, h = 'file://';
                i.loader = a, i.sanitizeUrl = r, i.xhr = s, i.file = u, i.http = l, i.useXHR = 'undefined' != typeof XMLHttpRequest, i.headers = {}, t.exports = i;
            },
            {
                '../util': 31,
                fs: 2,
                request: 2,
                'sync-request': 2,
                url: 2
            }
        ],
        24: [
            function (e, t, n) {
                function r(e, t) {
                    var n = t && t.type || 'json';
                    return e = s[n](e, t), t && t.parse && i(e, t.parse), e;
                }
                function i(e, t) {
                    var n, r, i, s, l, c, d = e.length;
                    for (t = 'auto' === t ? o.inferAll(e) : a.duplicate(t), n = a.keys(t), r = n.map(function (e) {
                            var n = t[e];
                            if (n && 0 === n.indexOf('date:')) {
                                var r = n.split(/:(.+)?/, 2), i = r[1];
                                if (!('\'' === i[0] && '\'' === i[i.length - 1] || '"' === i[0] && '"' === i[i.length - 1]))
                                    throw Error('Format pattern must be quoted: ' + i);
                                return i = i.slice(1, -1), i = u(i), function (e) {
                                    return i.parse(e);
                                };
                            }
                            if (!o.parsers[n])
                                throw Error('Illegal format pattern: ' + e + ':' + n);
                            return o.parsers[n];
                        }), s = 0, c = n.length; s < d; ++s)
                        for (i = e[s], l = 0; l < c; ++l)
                            i[n[l]] = r[l](i[n[l]]);
                    o.annotation(e, t);
                }
                var a = e('../util'), o = e('./type'), s = e('./formats'), u = e('../format').time;
                r.formats = s, t.exports = r;
            },
            {
                '../format': 16,
                '../util': 31,
                './formats': 19,
                './type': 26
            }
        ],
        25: [
            function (e, t, n) {
                var r = e('../util'), i = e('./load'), a = e('./read');
                t.exports = r.keys(a.formats).reduce(function (e, t) {
                    return e[t] = function (e, n, o) {
                        r.isString(e) && (e = { url: e }), 2 === arguments.length && r.isFunction(n) && (o = n, n = void 0), n = r.extend({ parse: 'auto' }, n), n.type = t;
                        var s = i(e, o ? function (e, t) {
                            if (e)
                                return void o(e, null);
                            try {
                                t = a(t, n), o(null, t);
                            } catch (e) {
                                o(e, null);
                            }
                        } : void 0);
                        if (!o)
                            return a(s, n);
                    }, e;
                }, {});
            },
            {
                '../util': 31,
                './load': 23,
                './read': 24
            }
        ],
        26: [
            function (e, t, n) {
                function r(e, t) {
                    return t ? void (e[d] = t) : e && e[d] || null;
                }
                function i(e) {
                    return c.keys(e);
                }
                function a(e) {
                    return '[' + e + ']';
                }
                function o(e, t) {
                    e = c.array(e), t = c.$(t);
                    var n, r, i;
                    if (e[d] && (n = t(e[d]), c.isString(n)))
                        return n;
                    for (r = 0, i = e.length; !c.isValid(n) && r < i; ++r)
                        n = t ? t(e[r]) : e[r];
                    return c.isDate(n) ? 'date' : c.isNumber(n) ? 'number' : c.isBoolean(n) ? 'boolean' : c.isString(n) ? 'string' : null;
                }
                function s(e, t) {
                    if (e.length) {
                        var n = t ? c.identity : (t = i(e[0]), a);
                        return t.reduce(function (t, r) {
                            return t[r] = o(e, n(r)), t;
                        }, {});
                    }
                }
                function u(e, t) {
                    e = c.array(e), t = c.$(t);
                    var n, r, i, a = [
                            'boolean',
                            'integer',
                            'number',
                            'date'
                        ];
                    for (n = 0; n < e.length; ++n) {
                        for (i = t ? t(e[n]) : e[n], r = 0; r < a.length; ++r)
                            c.isValid(i) && !h[a[r]](i) && (a.splice(r, 1), r -= 1);
                        if (0 === a.length)
                            return 'string';
                    }
                    return a[0];
                }
                function l(e, t) {
                    var n = t ? c.identity : (t = i(e[0]), a);
                    return t.reduce(function (t, r) {
                        return t[r] = u(e, n(r)), t;
                    }, {});
                }
                var c = e('../util'), d = '__types__', f = {
                        boolean: c.boolean,
                        integer: c.number,
                        number: c.number,
                        date: c.date,
                        string: function (e) {
                            return null == e || '' === e ? null : e + '';
                        }
                    }, h = {
                        boolean: function (e) {
                            return 'true' === e || 'false' === e || c.isBoolean(e);
                        },
                        integer: function (e) {
                            return h.number(e) && (e = +e) === ~~e;
                        },
                        number: function (e) {
                            return !isNaN(+e) && !c.isDate(e);
                        },
                        date: function (e) {
                            return !isNaN(Date.parse(e));
                        }
                    };
                o.annotation = r, o.all = s, o.infer = u, o.inferAll = l, o.parsers = f, t.exports = o;
            },
            { '../util': 31 }
        ],
        27: [
            function (e, t, n) {
                var r = e('./util'), i = {
                        version: e('../package.json').version,
                        load: e('./import/load'),
                        read: e('./import/read'),
                        type: e('./import/type'),
                        Aggregator: e('./aggregate/aggregator'),
                        groupby: e('./aggregate/groupby'),
                        bins: e('./bins/bins'),
                        $bin: e('./bins/histogram').$bin,
                        histogram: e('./bins/histogram').histogram,
                        format: e('./format'),
                        template: e('./template'),
                        time: e('./time')
                    };
                r.extend(i, r), r.extend(i, e('./accessor')), r.extend(i, e('./generate')), r.extend(i, e('./stats')), r.extend(i, e('./import/readers')), r.extend(i.format, e('./format-tables')), i.print = {
                    table: i.format.table,
                    summary: i.format.summary
                }, t.exports = i;
            },
            {
                '../package.json': 7,
                './accessor': 8,
                './aggregate/aggregator': 9,
                './aggregate/groupby': 11,
                './bins/bins': 13,
                './bins/histogram': 14,
                './format': 16,
                './format-tables': 15,
                './generate': 17,
                './import/load': 23,
                './import/read': 24,
                './import/readers': 25,
                './import/type': 26,
                './stats': 28,
                './template': 29,
                './time': 30,
                './util': 31
            }
        ],
        28: [
            function (e, t, n) {
                function r(e, t, n) {
                    var r = e && e.nullh || 0, i = u.random.normal(0, 1), a = l.mean(t, n), o = l.stdev(t, n) / Math.sqrt(l.count.valid(t, n));
                    if (0 === o)
                        return a - r === 0 ? 1 : 0;
                    var s = (a - r) / o;
                    return 2 * i.cdf(-Math.abs(s));
                }
                function i(e, t, n, r) {
                    var i, a = r ? t.map(o.$(n)) : t, s = r ? t.map(o.$(r)) : n, u = l.count(a), c = l.count(s), d = Array();
                    if (u !== c)
                        throw Error('Array lengths must match.');
                    for (i = 0; i < u; ++i)
                        o.isValid(a[i]) && o.isValid(s[i]) && d.push(a[i] - s[i]);
                    return l.z.test(d, e && e.nullh || 0);
                }
                function a(e, t, n, r) {
                    var i = r ? t.map(o.$(n)) : t, a = r ? t.map(o.$(r)) : n, s = l.count.valid(i), c = l.count.valid(a), d = u.random.normal(0, 1), f = l.mean(i) - l.mean(a) - (e && e.nullh || 0), h = Math.sqrt(l.variance(i) / s + l.variance(a) / c);
                    if (0 === h)
                        return 0 === f ? 1 : 0;
                    var p = f / h;
                    return 2 * d.cdf(-Math.abs(p));
                }
                var o = e('./util'), s = e('./import/type'), u = e('./generate'), l = t.exports;
                l.unique = function (e, t, n) {
                    t = o.$(t), n = n || [];
                    var r, i, a, s = {};
                    for (i = 0, a = e.length; i < a; ++i)
                        r = t ? t(e[i]) : e[i], r in s || (s[r] = 1, n.push(r));
                    return n;
                }, l.count = function (e) {
                    return e && e.length || 0;
                }, l.count.valid = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a = 0;
                    for (r = 0, i = e.length; r < i; ++r)
                        n = t ? t(e[r]) : e[r], o.isValid(n) && (a += 1);
                    return a;
                }, l.count.missing = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a = 0;
                    for (r = 0, i = e.length; r < i; ++r)
                        n = t ? t(e[r]) : e[r], null == n && (a += 1);
                    return a;
                }, l.count.distinct = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a = {}, s = 0;
                    for (r = 0, i = e.length; r < i; ++r)
                        n = t ? t(e[r]) : e[r], n in a || (a[n] = 1, s += 1);
                    return s;
                }, l.count.map = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a = {};
                    for (r = 0, i = e.length; r < i; ++r)
                        n = t ? t(e[r]) : e[r], a[n] = n in a ? a[n] + 1 : 1;
                    return a;
                }, l.median = function (e, t) {
                    return t && (e = e.map(o.$(t))), e = e.filter(o.isValid).sort(o.cmp), l.quantile(e, 0.5);
                }, l.quartile = function (e, t) {
                    t && (e = e.map(o.$(t))), e = e.filter(o.isValid).sort(o.cmp);
                    var n = l.quantile;
                    return [
                        n(e, 0.25),
                        n(e, 0.5),
                        n(e, 0.75)
                    ];
                }, l.quantile = function (e, t, n) {
                    void 0 === n && (n = t, t = o.identity), t = o.$(t);
                    var r = (e.length - 1) * n + 1, i = Math.floor(r), a = +t(e[i - 1]), s = r - i;
                    return s ? a + s * (t(e[i]) - a) : a;
                }, l.sum = function (e, t) {
                    t = o.$(t);
                    for (var n, r = 0, i = 0, a = e.length; i < a; ++i)
                        n = t ? t(e[i]) : e[i], o.isValid(n) && (r += n);
                    return r;
                }, l.mean = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a, s, u = 0;
                    for (r = 0, a = 0, i = e.length; r < i; ++r)
                        s = t ? t(e[r]) : e[r], o.isValid(s) && (n = s - u, u += n / ++a);
                    return u;
                }, l.mean.geometric = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a, s = 1;
                    for (a = 0, n = 0, r = e.length; a < r; ++a)
                        if (i = t ? t(e[a]) : e[a], o.isValid(i)) {
                            if (i <= 0)
                                throw Error('Geometric mean only defined for positive values.');
                            s *= i, ++n;
                        }
                    return s = n > 0 ? Math.pow(s, 1 / n) : 0;
                }, l.mean.harmonic = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a, s = 0;
                    for (a = 0, n = 0, r = e.length; a < r; ++a)
                        i = t ? t(e[a]) : e[a], o.isValid(i) && (s += 1 / i, ++n);
                    return n / s;
                }, l.variance = function (e, t) {
                    if (t = o.$(t), !o.isArray(e) || e.length < 2)
                        return 0;
                    var n, r, i, a, s = 0, u = 0;
                    for (r = 0, i = 0; r < e.length; ++r)
                        a = t ? t(e[r]) : e[r], o.isValid(a) && (n = a - s, s += n / ++i, u += n * (a - s));
                    return u /= i - 1;
                }, l.stdev = function (e, t) {
                    return Math.sqrt(l.variance(e, t));
                }, l.modeskew = function (e, t) {
                    var n = l.mean(e, t), r = l.median(e, t), i = l.stdev(e, t);
                    return 0 === i ? 0 : (n - r) / i;
                }, l.min = function (e, t) {
                    return l.extent(e, t)[0];
                }, l.max = function (e, t) {
                    return l.extent(e, t)[1];
                }, l.extent = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a, s = e.length;
                    for (a = 0; a < s; ++a)
                        if (i = t ? t(e[a]) : e[a], o.isValid(i)) {
                            n = r = i;
                            break;
                        }
                    for (; a < s; ++a)
                        i = t ? t(e[a]) : e[a], o.isValid(i) && (i < n && (n = i), i > r && (r = i));
                    return [
                        n,
                        r
                    ];
                }, l.extent.index = function (e, t) {
                    t = o.$(t);
                    var n, r, i, a, s = -1, u = -1, l = e.length;
                    for (a = 0; a < l; ++a)
                        if (i = t ? t(e[a]) : e[a], o.isValid(i)) {
                            n = r = i, s = u = a;
                            break;
                        }
                    for (; a < l; ++a)
                        i = t ? t(e[a]) : e[a], o.isValid(i) && (i < n && (n = i, s = a), i > r && (r = i, u = a));
                    return [
                        s,
                        u
                    ];
                }, l.dot = function (e, t, n) {
                    var r, i, a = 0;
                    if (n)
                        for (t = o.$(t), n = o.$(n), r = 0; r < e.length; ++r)
                            i = t(e[r]) * n(e[r]), i === i && (a += i);
                    else {
                        if (e.length !== t.length)
                            throw Error('Array lengths must match.');
                        for (r = 0; r < e.length; ++r)
                            i = e[r] * t[r], i === i && (a += i);
                    }
                    return a;
                }, l.dist = function (e, t, n, r) {
                    var i, a, s = o.isFunction(n) || o.isString(n), u = e, l = s ? e : t, c = s ? r : n, d = 2 === c || null == c, f = e.length, h = 0;
                    for (s && (t = o.$(t), n = o.$(n)), a = 0; a < f; ++a)
                        i = s ? t(u[a]) - n(l[a]) : u[a] - l[a], h += d ? i * i : Math.pow(Math.abs(i), c);
                    return d ? Math.sqrt(h) : Math.pow(h, 1 / c);
                }, l.cohensd = function (e, t, n) {
                    var r = n ? e.map(o.$(t)) : e, i = n ? e.map(o.$(n)) : t, a = l.mean(r), s = l.mean(i), u = l.count.valid(r), c = l.count.valid(i);
                    if (u + c - 2 <= 0)
                        return 0;
                    var d = l.variance(r), f = l.variance(i), h = Math.sqrt(((u - 1) * d + (c - 1) * f) / (u + c - 2));
                    return 0 === h ? 0 : (a - s) / h;
                }, l.covariance = function (e, t, n) {
                    var r, i, a, s, u, c = n ? e.map(o.$(t)) : e, d = n ? e.map(o.$(n)) : t, f = c.length, h = l.mean(c), p = l.mean(d), g = 0, m = 0;
                    if (f !== d.length)
                        throw Error('Input lengths must match.');
                    for (r = 0; r < f; ++r)
                        if (i = c[r], s = o.isValid(i), a = d[r], u = o.isValid(a), s && u)
                            g += (i - h) * (a - p), ++m;
                        else if (s || u)
                            throw Error('Valid values must align.');
                    return g / (m - 1);
                }, l.rank = function (e, t) {
                    t = o.$(t) || o.identity;
                    var n, r, i, a = e.map(function (e, n) {
                            return {
                                idx: n,
                                val: t(e)
                            };
                        }).sort(o.comparator('val')), s = e.length, u = Array(s), l = -1, c = {};
                    for (n = 0; n < s; ++n) {
                        if (r = a[n].val, l < 0 && c === r)
                            l = n - 1;
                        else if (l > -1 && c !== r) {
                            for (i = 1 + (n - 1 + l) / 2; l < n; ++l)
                                u[a[l].idx] = i;
                            l = -1;
                        }
                        u[a[n].idx] = n + 1, c = r;
                    }
                    if (l > -1)
                        for (i = 1 + (s - 1 + l) / 2; l < s; ++l)
                            u[a[l].idx] = i;
                    return u;
                }, l.cor = function (e, t, n) {
                    var r = n;
                    n = r ? e.map(o.$(n)) : t, t = r ? e.map(o.$(t)) : e;
                    var i = l.dot(t, n), a = l.mean(t), s = l.mean(n), u = l.stdev(t), c = l.stdev(n), d = e.length;
                    return (i - d * a * s) / ((d - 1) * u * c);
                }, l.cor.rank = function (e, t, n) {
                    var r, i, a, o = n ? l.rank(e, t) : l.rank(e), s = n ? l.rank(e, n) : l.rank(t), u = e.length;
                    for (r = 0, i = 0; r < u; ++r)
                        a = o[r] - s[r], i += a * a;
                    return 1 - 6 * i / (u * (u * u - 1));
                }, l.cor.dist = function (e, t, n) {
                    var r, i, a, s, u = n ? e.map(o.$(t)) : e, c = n ? e.map(o.$(n)) : t, d = l.dist.mat(u), f = l.dist.mat(c), h = d.length;
                    for (r = 0, i = 0, a = 0, s = 0; r < h; ++r)
                        i += d[r] * d[r], a += f[r] * f[r], s += d[r] * f[r];
                    return Math.sqrt(s / Math.sqrt(i * a));
                }, l.linearRegression = function (e, t, n) {
                    var r, i, a = n ? e.map(o.$(t)) : e, s = n ? e.map(o.$(n)) : t, u = a.length, c = l.covariance(a, s), d = l.stdev(a), f = l.stdev(s), h = c / (d * d), p = l.mean(s) - h * l.mean(a), g = {
                            slope: h,
                            intercept: p,
                            R: c / (d * f),
                            rss: 0
                        };
                    for (i = 0; i < u; ++i)
                        o.isValid(a[i]) && o.isValid(s[i]) && (r = h * a[i] + p - s[i], g.rss += r * r);
                    return g;
                }, l.bootstrap = {}, l.bootstrap.ci = function (e, t, n, r, i) {
                    var a, s, c, d, f, h, p;
                    for (o.isFunction(t) || o.isString(t) ? (a = e.map(o.$(t)), s = n, c = r, d = i) : (a = e, s = t, c = n, d = r), s = s ? +s : 1000, c = c || 0.05, f = u.random.bootstrap(a, d), p = 0, h = Array(s); p < s; ++p)
                        h[p] = l.mean(f.samples(a.length));
                    return h.sort(o.numcmp), [
                        l.quantile(h, c / 2),
                        l.quantile(h, 1 - c / 2)
                    ];
                }, l.z = {}, l.z.ci = function (e, t, n) {
                    var r = e, i = t;
                    (o.isFunction(t) || o.isString(t)) && (r = e.map(o.$(t)), i = n), i = i || 0.05;
                    var a = 0.05 === i ? 1.96 : u.random.normal(0, 1).icdf(1 - i / 2), s = l.mean(r), c = l.stdev(r) / Math.sqrt(l.count.valid(r));
                    return [
                        s - a * c,
                        s + a * c
                    ];
                }, l.z.test = function (e, t, n, s) {
                    return o.isFunction(n) || o.isString(n) ? (s && s.paired ? i : a)(s, e, t, n) : o.isArray(t) ? (n && n.paired ? i : a)(n, e, t) : o.isFunction(t) || o.isString(t) ? r(n, e, t) : r(t, e);
                }, l.dist.mat = function (e) {
                    var t, n, r, i = e.length, a = i * i, o = Array(a), s = u.zeros(i), l = 0;
                    for (n = 0; n < i; ++n)
                        for (o[n * i + n] = 0, r = n + 1; r < i; ++r)
                            o[n * i + r] = t = Math.abs(e[n] - e[r]), o[r * i + n] = t, s[n] += t, s[r] += t;
                    for (n = 0; n < i; ++n)
                        l += s[n], s[n] /= i;
                    for (l /= a, n = 0; n < i; ++n)
                        for (r = n; r < i; ++r)
                            o[n * i + r] += l - s[n] - s[r], o[r * i + n] = o[n * i + r];
                    return o;
                }, l.entropy = function (e, t) {
                    t = o.$(t);
                    var n, r, i = 0, a = 0, s = e.length;
                    for (n = 0; n < s; ++n)
                        i += t ? t(e[n]) : e[n];
                    if (0 === i)
                        return 0;
                    for (n = 0; n < s; ++n)
                        r = (t ? t(e[n]) : e[n]) / i, r && (a += r * Math.log(r));
                    return -a / Math.LN2;
                }, l.mutual = function (e, t, n, r) {
                    var i, a, s, u = r ? e.map(o.$(t)) : e, l = r ? e.map(o.$(n)) : t, c = r ? e.map(o.$(r)) : n, d = {}, f = {}, h = c.length, p = 0, g = 0, m = 0;
                    for (s = 0; s < h; ++s)
                        d[u[s]] = 0, f[l[s]] = 0;
                    for (s = 0; s < h; ++s)
                        d[u[s]] += c[s], f[l[s]] += c[s], p += c[s];
                    for (a = 1 / (p * Math.LN2), s = 0; s < h; ++s)
                        0 !== c[s] && (i = p * c[s] / (d[u[s]] * f[l[s]]), g += c[s] * a * Math.log(i), m += c[s] * a * Math.log(c[s] / p));
                    return [
                        g,
                        1 + g / m
                    ];
                }, l.mutual.info = function (e, t, n, r) {
                    return l.mutual(e, t, n, r)[0];
                }, l.mutual.dist = function (e, t, n, r) {
                    return l.mutual(e, t, n, r)[1];
                }, l.profile = function (e, t) {
                    var n, r, i, a, u, c = 0, d = 0, f = 0, h = 0, p = null, g = null, m = 0, v = [], y = {};
                    for (i = 0; i < e.length; ++i)
                        a = t ? t(e[i]) : e[i], y[a] = a in y ? y[a] + 1 : (h += 1, 1), null == a ? ++f : o.isValid(a) && (u = 'string' == typeof a ? a.length : a, (null === p || u < p) && (p = u), (null === g || u > g) && (g = u), n = u - c, c += n / ++d, m += n * (u - c), v.push(u));
                    return m /= d - 1, r = Math.sqrt(m), v.sort(o.cmp), {
                        type: s(e, t),
                        unique: y,
                        count: e.length,
                        valid: d,
                        missing: f,
                        distinct: h,
                        min: p,
                        max: g,
                        mean: c,
                        stdev: r,
                        median: a = l.quantile(v, 0.5),
                        q1: l.quantile(v, 0.25),
                        q3: l.quantile(v, 0.75),
                        modeskew: 0 === r ? 0 : (c - a) / r
                    };
                }, l.summary = function (e, t) {
                    t = t || o.keys(e[0]);
                    var n = t.map(function (t) {
                        var n = l.profile(e, o.$(t));
                        return n.field = t, n;
                    });
                    return n.__summary__ = !0, n;
                };
            },
            {
                './generate': 17,
                './import/type': 26,
                './util': 31
            }
        ],
        29: [
            function (e, t, n) {
                function r(e) {
                    var t = i(e, 'd');
                    return t = 'var __t; return ' + t + ';', new Function('d', t).bind(d);
                }
                function i(e, t, n) {
                    t = t || 'obj';
                    var r = 0, i = '\'', s = f;
                    return e.replace(s, function (s, u, l) {
                        return i += e.slice(r, l).replace(m, o), r = l + s.length, u && (i += '\'\n+((__t=(' + a(u, t, n) + '))==null?\'\':__t)+\n\''), s;
                    }), i + '\'';
                }
                function a(e, t, n) {
                    function i(e) {
                        return e = e || '', d ? (d = !1, f = 'String(' + f + ')' + e) : f += e, f;
                    }
                    function a() {
                        return '(typeof ' + f + '==="number"?new Date(' + f + '):' + f + ')';
                    }
                    function o(e) {
                        var t = b[0];
                        if (!('\'' === t[0] && '\'' === t[t.length - 1] || '"' === t[0] && '"' === t[t.length - 1]))
                            throw Error('Format pattern must be quoted: ' + t);
                        t = t.slice(1, -1), v = s(t, e), d = !1;
                        var n = 'number' === e ? f : a();
                        f = 'this.formats[' + v + '](' + n + ')';
                    }
                    var u = e.match(h), c = u.shift().trim(), d = !0;
                    n && (n[c] = 1);
                    for (var f = r.property(t, c), g = 0; g < u.length; ++g) {
                        var m, v, y, _ = u[g], b = null;
                        switch ((m = _.indexOf(':')) > 0 && (_ = _.slice(0, m), b = u[g].slice(m + 1).match(p).map(function (e) {
                                return e.trim();
                            })), _ = _.trim()) {
                        case 'length':
                            i('.length');
                            break;
                        case 'lower':
                            i('.toLowerCase()');
                            break;
                        case 'upper':
                            i('.toUpperCase()');
                            break;
                        case 'lower-locale':
                            i('.toLocaleLowerCase()');
                            break;
                        case 'upper-locale':
                            i('.toLocaleUpperCase()');
                            break;
                        case 'trim':
                            i('.trim()');
                            break;
                        case 'left':
                            v = l.number(b[0]), i('.slice(0,' + v + ')');
                            break;
                        case 'right':
                            v = l.number(b[0]), i('.slice(-' + v + ')');
                            break;
                        case 'mid':
                            v = l.number(b[0]), y = v + l.number(b[1]), i('.slice(+' + v + ',' + y + ')');
                            break;
                        case 'slice':
                            v = l.number(b[0]), i('.slice(' + v + (b.length > 1 ? ',' + l.number(b[1]) : '') + ')');
                            break;
                        case 'truncate':
                            v = l.number(b[0]), y = b[1], y = 'left' !== y && 'middle' !== y && 'center' !== y ? 'right' : y, f = 'this.truncate(' + i() + ',' + v + ',\'' + y + '\')';
                            break;
                        case 'pad':
                            v = l.number(b[0]), y = b[1], y = 'left' !== y && 'middle' !== y && 'center' !== y ? 'right' : y, f = 'this.pad(' + i() + ',' + v + ',\'' + y + '\')';
                            break;
                        case 'number':
                            o('number');
                            break;
                        case 'time':
                            o('time');
                            break;
                        case 'time-utc':
                            o('utc');
                            break;
                        case 'month':
                            f = 'this.month(' + f + ')';
                            break;
                        case 'month-abbrev':
                            f = 'this.month(' + f + ',true)';
                            break;
                        case 'day':
                            f = 'this.day(' + f + ')';
                            break;
                        case 'day-abbrev':
                            f = 'this.day(' + f + ',true)';
                            break;
                        case 'quarter':
                            f = 'this.quarter(' + f + ')';
                            break;
                        case 'quarter-utc':
                            f = 'this.utcQuarter(' + f + ')';
                            break;
                        default:
                            throw Error('Unrecognized template filter: ' + _);
                        }
                    }
                    return f;
                }
                function o(e) {
                    return '\\' + g[e];
                }
                function s(e, t) {
                    var n = t + ':' + e;
                    if (null == d.format_map[n]) {
                        var r = c[t](e), i = d.formats.length;
                        return d.formats.push(r), d.format_map[n] = i, i;
                    }
                    return d.format_map[n];
                }
                function u(e, t) {
                    return d.formats[s(e, t)];
                }
                var l = e('./util'), c = e('./format'), d = {
                        formats: [],
                        format_map: {},
                        truncate: l.truncate,
                        pad: l.pad,
                        day: c.day,
                        month: c.month,
                        quarter: c.quarter,
                        utcQuarter: c.utcQuarter
                    };
                r.source = i, r.context = d, r.format = u, t.exports = r, r.clearFormatCache = function () {
                    d.formats = [], d.format_map = {};
                }, r.property = function (e, t) {
                    var n = l.field(t).map(l.str).join('][');
                    return e + '[' + n + ']';
                };
                var f = /\{\{(.+?)\}\}|$/g, h = /(?:"[^"]*"|\'[^\']*\'|[^\|"]+|[^\|\']+)+/g, p = /(?:"[^"]*"|\'[^\']*\'|[^,"]+|[^,\']+)+/g, g = {
                        '\'': '\'',
                        '\\': '\\',
                        '\r': 'r',
                        '\n': 'n',
                        '\u2028': 'u2028',
                        '\u2029': 'u2029'
                    }, m = /\\|'|\r|\n|\u2028|\u2029/g;
            },
            {
                './format': 16,
                './util': 31
            }
        ],
        30: [
            function (e, t, n) {
                function r(e) {
                    return l.setTime(+e), l;
                }
                function i(e, t, n, r, i, a) {
                    var o = {
                        type: e,
                        date: t,
                        unit: n
                    };
                    return r ? o.step = r : o.minstep = 1, null != i && (o.min = i), null != a && (o.max = a), o;
                }
                function a(e, t, n, r, a, o) {
                    return i(e, function (e) {
                        return t.offset(n, e);
                    }, function (e) {
                        return t.count(n, e);
                    }, r, a, o);
                }
                function o(e, t, n, r) {
                    var i, a, o, s = p[0];
                    for (i = 1, a = p.length; i < a; ++i)
                        if (s = p[i], t > s[0]) {
                            if (o = t / s[0], o > r)
                                return e[p[i - 1][1]];
                            if (o >= n)
                                return e[s[1]];
                        }
                    return e[p[a - 1][1]];
                }
                function s(e) {
                    var t, n, r = {};
                    for (t = 0, n = e.length; t < n; ++t)
                        r[e[t].type] = e[t];
                    return r.find = function (t, n, r) {
                        return o(e, t, n, r);
                    }, r;
                }
                var u = e('d3-time'), l = new Date(), c = new Date(0, 0, 1).setFullYear(0), d = new Date(Date.UTC(0, 0, 1)).setUTCFullYear(0), f = [
                        a('second', u.second, c),
                        a('minute', u.minute, c),
                        a('hour', u.hour, c),
                        a('day', u.day, c, [
                            1,
                            7
                        ]),
                        a('month', u.month, c, [
                            1,
                            3,
                            6
                        ]),
                        a('year', u.year, c),
                        i('seconds', function (e) {
                            return new Date(1970, 0, 1, 0, 0, e);
                        }, function (e) {
                            return r(e).getSeconds();
                        }, null, 0, 59),
                        i('minutes', function (e) {
                            return new Date(1970, 0, 1, 0, e);
                        }, function (e) {
                            return r(e).getMinutes();
                        }, null, 0, 59),
                        i('hours', function (e) {
                            return new Date(1970, 0, 1, e);
                        }, function (e) {
                            return r(e).getHours();
                        }, null, 0, 23),
                        i('weekdays', function (e) {
                            return new Date(1970, 0, 4 + e);
                        }, function (e) {
                            return r(e).getDay();
                        }, [1], 0, 6),
                        i('dates', function (e) {
                            return new Date(1970, 0, e);
                        }, function (e) {
                            return r(e).getDate();
                        }, [1], 1, 31),
                        i('months', function (e) {
                            return new Date(1970, e % 12, 1);
                        }, function (e) {
                            return r(e).getMonth();
                        }, [1], 0, 11)
                    ], h = [
                        a('second', u.utcSecond, d),
                        a('minute', u.utcMinute, d),
                        a('hour', u.utcHour, d),
                        a('day', u.utcDay, d, [
                            1,
                            7
                        ]),
                        a('month', u.utcMonth, d, [
                            1,
                            3,
                            6
                        ]),
                        a('year', u.utcYear, d),
                        i('seconds', function (e) {
                            return new Date(Date.UTC(1970, 0, 1, 0, 0, e));
                        }, function (e) {
                            return r(e).getUTCSeconds();
                        }, null, 0, 59),
                        i('minutes', function (e) {
                            return new Date(Date.UTC(1970, 0, 1, 0, e));
                        }, function (e) {
                            return r(e).getUTCMinutes();
                        }, null, 0, 59),
                        i('hours', function (e) {
                            return new Date(Date.UTC(1970, 0, 1, e));
                        }, function (e) {
                            return r(e).getUTCHours();
                        }, null, 0, 23),
                        i('weekdays', function (e) {
                            return new Date(Date.UTC(1970, 0, 4 + e));
                        }, function (e) {
                            return r(e).getUTCDay();
                        }, [1], 0, 6),
                        i('dates', function (e) {
                            return new Date(Date.UTC(1970, 0, e));
                        }, function (e) {
                            return r(e).getUTCDate();
                        }, [1], 1, 31),
                        i('months', function (e) {
                            return new Date(Date.UTC(1970, e % 12, 1));
                        }, function (e) {
                            return r(e).getUTCMonth();
                        }, [1], 0, 11)
                    ], p = [
                        [
                            31536000000,
                            5
                        ],
                        [
                            7776000000,
                            4
                        ],
                        [
                            2592000000,
                            4
                        ],
                        [
                            1209600000,
                            3
                        ],
                        [
                            604800000,
                            3
                        ],
                        [
                            172800000,
                            3
                        ],
                        [
                            86400000,
                            3
                        ],
                        [
                            43200000,
                            2
                        ],
                        [
                            21600000,
                            2
                        ],
                        [
                            10800000,
                            2
                        ],
                        [
                            3600000,
                            2
                        ],
                        [
                            1800000,
                            1
                        ],
                        [
                            900000,
                            1
                        ],
                        [
                            300000,
                            1
                        ],
                        [
                            60000,
                            1
                        ],
                        [
                            30000,
                            0
                        ],
                        [
                            15000,
                            0
                        ],
                        [
                            5000,
                            0
                        ],
                        [
                            1000,
                            0
                        ]
                    ];
                t.exports = s(f), t.exports.utc = s(h);
            },
            { 'd3-time': 6 }
        ],
        31: [
            function (e, t, n) {
                (function (e) {
                    function n(e, t) {
                        var n, r = '';
                        for (n = 0; n < e; ++n)
                            r += t;
                        return r;
                    }
                    function r(e, t, n) {
                        var r = 0, i = e.split(u);
                        return e = n ? (i = i.reverse()).filter(function (e) {
                            return r += e.length, r <= t;
                        }).reverse() : i.filter(function (e) {
                            return r += e.length, r <= t;
                        }), e.length ? e.join('').trim() : i[0].slice(0, t);
                    }
                    var i = t.exports, a = '__name__';
                    i.namedfunc = function (e, t) {
                        return t[a] = e, t;
                    }, i.name = function (e) {
                        return null == e ? null : e[a];
                    }, i.identity = function (e) {
                        return e;
                    }, i.true = i.namedfunc('true', function () {
                        return !0;
                    }), i.false = i.namedfunc('false', function () {
                        return !1;
                    }), i.duplicate = function (e) {
                        return JSON.parse(JSON.stringify(e));
                    }, i.equal = function (e, t) {
                        return JSON.stringify(e) === JSON.stringify(t);
                    }, i.extend = function (e) {
                        for (var t, n, r = 1, i = arguments.length; r < i; ++r) {
                            t = arguments[r];
                            for (n in t)
                                e[n] = t[n];
                        }
                        return e;
                    }, i.length = function (e) {
                        return null != e && null != e.length ? e.length : null;
                    }, i.keys = function (e) {
                        var t, n = [];
                        for (t in e)
                            n.push(t);
                        return n;
                    }, i.vals = function (e) {
                        var t, n = [];
                        for (t in e)
                            n.push(e[t]);
                        return n;
                    }, i.toMap = function (e, t) {
                        return (t = i.$(t)) ? e.reduce(function (e, n) {
                            return e[t(n)] = 1, e;
                        }, {}) : e.reduce(function (e, t) {
                            return e[t] = 1, e;
                        }, {});
                    }, i.keystr = function (e) {
                        var t = e.length;
                        if (!t)
                            return '';
                        for (var n = String(e[0]), r = 1; r < t; ++r)
                            n += '|' + String(e[r]);
                        return n;
                    };
                    var o = Object.prototype.toString;
                    i.isObject = function (e) {
                        return e === Object(e);
                    }, i.isFunction = function (e) {
                        return '[object Function]' === o.call(e);
                    }, i.isString = function (e) {
                        return 'string' == typeof value || '[object String]' === o.call(e);
                    }, i.isArray = Array.isArray || function (e) {
                        return '[object Array]' === o.call(e);
                    }, i.isNumber = function (e) {
                        return 'number' == typeof e || '[object Number]' === o.call(e);
                    }, i.isBoolean = function (e) {
                        return e === !0 || e === !1 || '[object Boolean]' == o.call(e);
                    }, i.isDate = function (e) {
                        return '[object Date]' === o.call(e);
                    }, i.isValid = function (e) {
                        return null != e && e === e;
                    }, i.isBuffer = 'function' == typeof e && e.isBuffer || i.false, i.number = function (e) {
                        return null == e || '' === e ? null : +e;
                    }, i.boolean = function (e) {
                        return null == e || '' === e ? null : 'false' !== e && !!e;
                    }, i.date = function (e, t) {
                        var n = t ? t : Date;
                        return null == e || '' === e ? null : n.parse(e);
                    }, i.array = function (e) {
                        return null != e ? i.isArray(e) ? e : [e] : [];
                    }, i.str = function (e) {
                        return i.isArray(e) ? '[' + e.map(i.str) + ']' : i.isObject(e) || i.isString(e) ? JSON.stringify(e).replace('\u2028', '\\u2028').replace('\u2029', '\\u2029') : e;
                    };
                    var s = /\[(.*?)\]|[^.\[]+/g;
                    i.field = function (e) {
                        return String(e).match(s).map(function (e) {
                            return '[' !== e[0] ? e : '\'' !== e[1] && '"' !== e[1] ? e.slice(1, -1) : e.slice(2, -2).replace(/\\(["'])/g, '$1');
                        });
                    }, i.accessor = function (e) {
                        return null == e || i.isFunction(e) ? e : i.namedfunc(e, Function('x', 'return x[' + i.field(e).map(i.str).join('][') + '];'));
                    }, i.$ = i.accessor, i.mutator = function (e) {
                        var t;
                        return i.isString(e) && (t = i.field(e)).length > 1 ? function (e, n) {
                            for (var r = 0; r < t.length - 1; ++r)
                                e = e[t[r]];
                            e[t[r]] = n;
                        } : function (t, n) {
                            t[e] = n;
                        };
                    }, i.$func = function (e, t) {
                        return function (n) {
                            n = i.$(n) || i.identity;
                            var r = e + (i.name(n) ? '_' + i.name(n) : '');
                            return i.namedfunc(r, function (e) {
                                return t(n(e));
                            });
                        };
                    }, i.$valid = i.$func('valid', i.isValid), i.$length = i.$func('length', i.length), i.$in = function (e, t) {
                        e = i.$(e);
                        var n = i.isArray(t) ? i.toMap(t) : t;
                        return function (t) {
                            return !!n[e(t)];
                        };
                    }, i.comparator = function (e) {
                        var t = [];
                        return void 0 === e && (e = []), e = i.array(e).map(function (e) {
                            var n = 1;
                            return '-' === e[0] ? (n = -1, e = e.slice(1)) : '+' === e[0] && (n = 1, e = e.slice(1)), t.push(n), i.accessor(e);
                        }), function (n, r) {
                            var a, o, s, u;
                            for (a = 0, o = e.length; a < o; ++a)
                                if (s = e[a], u = i.cmp(s(n), s(r)))
                                    return u * t[a];
                            return 0;
                        };
                    }, i.cmp = function (e, t) {
                        return (e < t || null == e) && null != t ? -1 : (e > t || null == t) && null != e ? 1 : (t = t instanceof Date ? +t : t, (e = e instanceof Date ? +e : e) !== e && t === t ? -1 : t !== t && e === e ? 1 : 0);
                    }, i.numcmp = function (e, t) {
                        return e - t;
                    }, i.stablesort = function (e, t, n) {
                        var r = e.reduce(function (e, t, r) {
                            return e[n(t)] = r, e;
                        }, {});
                        return e.sort(function (e, i) {
                            var a = t(e), o = t(i);
                            return a < o ? -1 : a > o ? 1 : r[n(e)] - r[n(i)];
                        }), e;
                    }, i.permute = function (e) {
                        for (var t, n, r = e.length; r;)
                            n = Math.floor(Math.random() * r--), t = e[r], e[r] = e[n], e[n] = t;
                    }, i.pad = function (e, t, r, i) {
                        i = i || ' ';
                        var a = t - e.length;
                        if (a <= 0)
                            return e;
                        switch (r) {
                        case 'left':
                            return n(a, i) + e;
                        case 'middle':
                        case 'center':
                            return n(Math.floor(a / 2), i) + e + n(Math.ceil(a / 2), i);
                        default:
                            return e + n(a, i);
                        }
                    }, i.truncate = function (e, t, n, i, a) {
                        var o = e.length;
                        if (o <= t)
                            return e;
                        a = void 0 !== a ? String(a) : '\u2026';
                        var s = Math.max(0, t - a.length);
                        switch (n) {
                        case 'left':
                            return a + (i ? r(e, s, 1) : e.slice(o - s));
                        case 'middle':
                        case 'center':
                            var u = Math.ceil(s / 2), l = Math.floor(s / 2);
                            return (i ? r(e, u) : e.slice(0, u)) + a + (i ? r(e, l, 1) : e.slice(o - l));
                        default:
                            return (i ? r(e, s) : e.slice(0, s)) + a;
                        }
                    };
                    var u = /([\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u2028\u2029\u3000\uFEFF])/;
                }.call(this, e('buffer').Buffer));
            },
            { buffer: 2 }
        ],
        32: [
            function (t, n, r) {
                !function (t, i) {
                    'object' == typeof r && 'undefined' != typeof n ? i(r) : 'function' == typeof e && e.amd ? e(['exports'], i) : i(t.topojson = t.topojson || {});
                }(this, function (e) {
                    'use strict';
                    function t() {
                    }
                    function n(e) {
                        if (!e)
                            return t;
                        var n, r, i = e.scale[0], a = e.scale[1], o = e.translate[0], s = e.translate[1];
                        return function (e, t) {
                            t || (n = r = 0), e[0] = (n += e[0]) * i + o, e[1] = (r += e[1]) * a + s;
                        };
                    }
                    function r(e) {
                        if (!e)
                            return t;
                        var n, r, i = e.scale[0], a = e.scale[1], o = e.translate[0], s = e.translate[1];
                        return function (e, t) {
                            t || (n = r = 0);
                            var u = Math.round((e[0] - o) / i), l = Math.round((e[1] - s) / a);
                            e[0] = u - n, e[1] = l - r, n = u, r = l;
                        };
                    }
                    function i(e, t) {
                        for (var n, r = e.length, i = r - t; i < --r;)
                            n = e[i], e[i++] = e[r], e[r] = n;
                    }
                    function a(e, t) {
                        for (var n = 0, r = e.length; n < r;) {
                            var i = n + r >>> 1;
                            e[i] < t ? n = i + 1 : r = i;
                        }
                        return n;
                    }
                    function o(e, t) {
                        return 'GeometryCollection' === t.type ? {
                            type: 'FeatureCollection',
                            features: t.geometries.map(function (t) {
                                return s(e, t);
                            })
                        } : s(e, t);
                    }
                    function s(e, t) {
                        var n = {
                            type: 'Feature',
                            id: t.id,
                            properties: t.properties || {},
                            geometry: u(e, t)
                        };
                        return null == t.id && delete n.id, n;
                    }
                    function u(e, t) {
                        function r(e, t) {
                            t.length && t.pop();
                            for (var n, r = d[e < 0 ? ~e : e], a = 0, o = r.length; a < o; ++a)
                                t.push(n = r[a].slice()), c(n, a);
                            e < 0 && i(t, o);
                        }
                        function a(e) {
                            return e = e.slice(), c(e, 0), e;
                        }
                        function o(e) {
                            for (var t = [], n = 0, i = e.length; n < i; ++n)
                                r(e[n], t);
                            return t.length < 2 && t.push(t[0].slice()), t;
                        }
                        function s(e) {
                            for (var t = o(e); t.length < 4;)
                                t.push(t[0].slice());
                            return t;
                        }
                        function u(e) {
                            return e.map(s);
                        }
                        function l(e) {
                            var t = e.type;
                            return 'GeometryCollection' === t ? {
                                type: t,
                                geometries: e.geometries.map(l)
                            } : t in f ? {
                                type: t,
                                coordinates: f[t](e)
                            } : null;
                        }
                        var c = n(e.transform), d = e.arcs, f = {
                                Point: function (e) {
                                    return a(e.coordinates);
                                },
                                MultiPoint: function (e) {
                                    return e.coordinates.map(a);
                                },
                                LineString: function (e) {
                                    return o(e.arcs);
                                },
                                MultiLineString: function (e) {
                                    return e.arcs.map(o);
                                },
                                Polygon: function (e) {
                                    return u(e.arcs);
                                },
                                MultiPolygon: function (e) {
                                    return e.arcs.map(u);
                                }
                            };
                        return l(t);
                    }
                    function l(e, t) {
                        function n(t) {
                            var n, r = e.arcs[t < 0 ? ~t : t], i = r[0];
                            return e.transform ? (n = [
                                0,
                                0
                            ], r.forEach(function (e) {
                                n[0] += e[0], n[1] += e[1];
                            })) : n = r[r.length - 1], t < 0 ? [
                                n,
                                i
                            ] : [
                                i,
                                n
                            ];
                        }
                        function r(e, t) {
                            for (var n in e) {
                                var r = e[n];
                                delete t[r.start], delete r.start, delete r.end, r.forEach(function (e) {
                                    i[e < 0 ? ~e : e] = 1;
                                }), s.push(r);
                            }
                        }
                        var i = {}, a = {}, o = {}, s = [], u = -1;
                        return t.forEach(function (n, r) {
                            var i, a = e.arcs[n < 0 ? ~n : n];
                            a.length < 3 && !a[1][0] && !a[1][1] && (i = t[++u], t[u] = n, t[r] = i);
                        }), t.forEach(function (e) {
                            var t, r, i = n(e), s = i[0], u = i[1];
                            if (t = o[s])
                                if (delete o[t.end], t.push(e), t.end = u, r = a[u]) {
                                    delete a[r.start];
                                    var l = r === t ? t : t.concat(r);
                                    a[l.start = t.start] = o[l.end = r.end] = l;
                                } else
                                    a[t.start] = o[t.end] = t;
                            else if (t = a[u])
                                if (delete a[t.start], t.unshift(e), t.start = s, r = o[s]) {
                                    delete o[r.end];
                                    var c = r === t ? t : r.concat(t);
                                    a[c.start = r.start] = o[c.end = t.end] = c;
                                } else
                                    a[t.start] = o[t.end] = t;
                            else
                                t = [e], a[t.start = s] = o[t.end = u] = t;
                        }), r(o, a), r(a, o), t.forEach(function (e) {
                            i[e < 0 ? ~e : e] || s.push([e]);
                        }), s;
                    }
                    function c(e) {
                        return u(e, d.apply(this, arguments));
                    }
                    function d(e, t, n) {
                        function r(e) {
                            var t = e < 0 ? ~e : e;
                            (c[t] || (c[t] = [])).push({
                                i: e,
                                g: u
                            });
                        }
                        function i(e) {
                            e.forEach(r);
                        }
                        function a(e) {
                            e.forEach(i);
                        }
                        function o(e) {
                            'GeometryCollection' === e.type ? e.geometries.forEach(o) : e.type in d && (u = e, d[e.type](e.arcs));
                        }
                        var s = [];
                        if (arguments.length > 1) {
                            var u, c = [], d = {
                                    LineString: i,
                                    MultiLineString: a,
                                    Polygon: a,
                                    MultiPolygon: function (e) {
                                        e.forEach(a);
                                    }
                                };
                            o(t), c.forEach(arguments.length < 3 ? function (e) {
                                s.push(e[0].i);
                            } : function (e) {
                                n(e[0].g, e[e.length - 1].g) && s.push(e[0].i);
                            });
                        } else
                            for (var f = 0, h = e.arcs.length; f < h; ++f)
                                s.push(f);
                        return {
                            type: 'MultiLineString',
                            arcs: l(e, s)
                        };
                    }
                    function f(e) {
                        var t = e[0], n = e[1], r = e[2];
                        return Math.abs((t[0] - r[0]) * (n[1] - t[1]) - (t[0] - n[0]) * (r[1] - t[1]));
                    }
                    function h(e) {
                        for (var t, n = -1, r = e.length, i = e[r - 1], a = 0; ++n < r;)
                            t = i, i = e[n], a += t[0] * i[1] - t[1] * i[0];
                        return a / 2;
                    }
                    function p(e) {
                        return u(e, g.apply(this, arguments));
                    }
                    function g(e, t) {
                        function n(e) {
                            e.forEach(function (t) {
                                t.forEach(function (t) {
                                    (i[t = t < 0 ? ~t : t] || (i[t] = [])).push(e);
                                });
                            }), a.push(e);
                        }
                        function r(t) {
                            return Math.abs(h(u(e, {
                                type: 'Polygon',
                                arcs: [t]
                            }).coordinates[0]));
                        }
                        var i = {}, a = [], o = [];
                        return t.forEach(function (e) {
                            'Polygon' === e.type ? n(e.arcs) : 'MultiPolygon' === e.type && e.arcs.forEach(n);
                        }), a.forEach(function (e) {
                            if (!e._) {
                                var t = [], n = [e];
                                for (e._ = 1, o.push(t); e = n.pop();)
                                    t.push(e), e.forEach(function (e) {
                                        e.forEach(function (e) {
                                            i[e < 0 ? ~e : e].forEach(function (e) {
                                                e._ || (e._ = 1, n.push(e));
                                            });
                                        });
                                    });
                            }
                        }), a.forEach(function (e) {
                            delete e._;
                        }), {
                            type: 'MultiPolygon',
                            arcs: o.map(function (t) {
                                var n, a = [];
                                if (t.forEach(function (e) {
                                        e.forEach(function (e) {
                                            e.forEach(function (e) {
                                                i[e < 0 ? ~e : e].length < 2 && a.push(e);
                                            });
                                        });
                                    }), a = l(e, a), (n = a.length) > 1)
                                    for (var o, s, u = 1, c = r(a[0]); u < n; ++u)
                                        (o = r(a[u])) > c && (s = a[0], a[0] = a[u], a[u] = s, c = o);
                                return a;
                            })
                        };
                    }
                    function m(e) {
                        function t(e, t) {
                            e.forEach(function (e) {
                                e < 0 && (e = ~e);
                                var n = i[e];
                                n ? n.push(t) : i[e] = [t];
                            });
                        }
                        function n(e, n) {
                            e.forEach(function (e) {
                                t(e, n);
                            });
                        }
                        function r(e, t) {
                            'GeometryCollection' === e.type ? e.geometries.forEach(function (e) {
                                r(e, t);
                            }) : e.type in s && s[e.type](e.arcs, t);
                        }
                        var i = {}, o = e.map(function () {
                                return [];
                            }), s = {
                                LineString: t,
                                MultiLineString: n,
                                Polygon: n,
                                MultiPolygon: function (e, t) {
                                    e.forEach(function (e) {
                                        n(e, t);
                                    });
                                }
                            };
                        e.forEach(r);
                        for (var u in i)
                            for (var l = i[u], c = l.length, d = 0; d < c; ++d)
                                for (var f = d + 1; f < c; ++f) {
                                    var h, p = l[d], g = l[f];
                                    (h = o[p])[u = a(h, g)] !== g && h.splice(u, 0, g), (h = o[g])[u = a(h, p)] !== p && h.splice(u, 0, p);
                                }
                        return o;
                    }
                    function v(e, t) {
                        return e[1][2] - t[1][2];
                    }
                    function y() {
                        function e(e, t) {
                            for (; t > 0;) {
                                var n = (t + 1 >> 1) - 1, i = r[n];
                                if (v(e, i) >= 0)
                                    break;
                                r[i._ = t] = i, r[e._ = t = n] = e;
                            }
                        }
                        function t(e, t) {
                            for (;;) {
                                var n = t + 1 << 1, a = n - 1, o = t, s = r[o];
                                if (a < i && v(r[a], s) < 0 && (s = r[o = a]), n < i && v(r[n], s) < 0 && (s = r[o = n]), o === t)
                                    break;
                                r[s._ = t] = s, r[e._ = t = o] = e;
                            }
                        }
                        var n = {}, r = [], i = 0;
                        return n.push = function (t) {
                            return e(r[t._ = i] = t, i++), i;
                        }, n.pop = function () {
                            if (!(i <= 0)) {
                                var e, n = r[0];
                                return --i > 0 && (e = r[i], t(r[e._ = 0] = e, 0)), n;
                            }
                        }, n.remove = function (n) {
                            var a, o = n._;
                            if (r[o] === n)
                                return o !== --i && (a = r[i], (v(a, n) < 0 ? e : t)(r[a._ = o] = a, o)), o;
                        }, n;
                    }
                    function _(e, t) {
                        function i(e) {
                            s.remove(e), e[1][2] = t(e), s.push(e);
                        }
                        var a = n(e.transform), o = r(e.transform), s = y();
                        return t || (t = f), e.arcs.forEach(function (e) {
                            var n, r, u, l, c = [], d = 0;
                            for (r = 0, u = e.length; r < u; ++r)
                                l = e[r], a(e[r] = [
                                    l[0],
                                    l[1],
                                    1 / 0
                                ], r);
                            for (r = 1, u = e.length - 1; r < u; ++r)
                                n = e.slice(r - 1, r + 2), n[1][2] = t(n), c.push(n), s.push(n);
                            for (r = 0, u = c.length; r < u; ++r)
                                n = c[r], n.previous = c[r - 1], n.next = c[r + 1];
                            for (; n = s.pop();) {
                                var f = n.previous, h = n.next;
                                n[1][2] < d ? n[1][2] = d : d = n[1][2], f && (f.next = h, f[2] = n[2], i(f)), h && (h.previous = f, h[0] = n[0], i(h));
                            }
                            e.forEach(o);
                        }), e;
                    }
                    var b = '1.6.27';
                    e.version = b, e.mesh = c, e.meshArcs = d, e.merge = p, e.mergeArcs = g, e.feature = o, e.neighbors = m, e.presimplify = _, Object.defineProperty(e, '__esModule', { value: !0 });
                });
            },
            {}
        ],
        33: [
            function (e, t, n) {
                function r(e, t) {
                    var n = {};
                    return i(e, n), n.add = [], n.mod = [], n.rem = [], n.reflow = t, n;
                }
                function i(e, t) {
                    t.stamp = e ? e.stamp : 0, t.sort = e ? e.sort : null, t.facet = e ? e.facet : null, t.trans = e ? e.trans : null, t.dirty = e ? e.dirty : [], t.request = e ? e.request : null;
                    for (var n, r = 0, i = a.length; r < i; ++r)
                        t[n = a[r]] = e ? e[n] : {};
                }
                var a = e('./Dependencies').ALL;
                t.exports = {
                    create: r,
                    copy: i
                };
            },
            { './Dependencies': 36 }
        ],
        34: [
            function (e, t, n) {
                function r(e) {
                    o.init.call(this, e), this._data = [], this.router(!0).collector(!0);
                }
                var i = e('vega-logging'), a = e('./Tuple'), o = e('./Node').prototype, s = e('./ChangeSet'), u = r.prototype = Object.create(o);
                u.constructor = r, u.data = function () {
                    return this._data;
                }, u.evaluate = function (e) {
                    i.debug(e, ['collecting']);
                    var t = s.create(e);
                    return e.rem.length && (this._data = a.idFilter(this._data, e.rem), t.rem = e.rem.slice(0)), e.add.length && (this._data = this._data.concat(e.add), t.add = e.add.slice(0)), e.mod.length && (t.mod = e.mod.slice(0)), e.sort && this._data.sort(e.sort), e.reflow && (t.mod = t.mod.concat(a.idFilter(this._data, t.add, t.mod, t.rem)), t.reflow = !1), t;
                }, t.exports = r;
            },
            {
                './ChangeSet': 33,
                './Node': 39,
                './Tuple': 41,
                'vega-logging': 49
            }
        ],
        35: [
            function (e, t, n) {
                function r(e, t, n) {
                    this._graph = e, this._name = t, this._data = [], this._source = null, this._facet = n, this._input = l.create(), this._output = null, this._indexes = {}, this._indexFields = [], this._inputNode = null, this._outputNode = null, this._pipeline = null, this._collector = null, this._mutates = !1;
                }
                function i(e) {
                    var t = new f(e._graph).router(!0).collector(!0);
                    return t.data = function () {
                        return e._data;
                    }, t.evaluate = function (t) {
                        u.debug(t, [
                            'input',
                            e._name
                        ]);
                        var n, r = e._input, i = l.create(t);
                        for (n in r.fields)
                            i.fields[n] = 1;
                        return r.rem.length && (e._data = d.idFilter(e._data, r.rem)), r.add.length && (e._data = e._data.concat(r.add)), r.sort && e._data.sort(r.sort), t.reflow && (r.mod = r.mod.concat(d.idFilter(e._data, r.add, r.mod, r.rem))), e._input = l.create(), i.add = r.add, i.mod = r.mod, i.rem = r.rem, i.facet = e._facet, i;
                    }, t;
                }
                function a(e) {
                    function t(t) {
                        var n, r, i, a, o, u, l = e._indexFields;
                        for (n = 0; n < l.length; ++n) {
                            for (a = l[n], o = e._indexes[a], i = s.$(a), r = 0; r < t.add.length; ++r)
                                u = i(t.add[r]), d.prev_init(t.add[r]), o[u] = (o[u] || 0) + 1;
                            for (r = 0; r < t.rem.length; ++r)
                                u = i(t.rem[r]), o[u] = (o[u] || 0) - 1;
                            for (r = 0; r < t.mod.length; ++r)
                                u = i(t.mod[r]._prev), o[u] = (o[u] || 0) - 1, u = i(t.mod[r]), o[u] = (o[u] || 0) + 1;
                        }
                    }
                    var n = new f(e._graph).router(!0).reflows(!0).collector(!0);
                    return n.data = function () {
                        return e._collector ? e._collector.data() : e._data;
                    }, n.evaluate = function (n) {
                        u.debug(n, [
                            'output',
                            e._name
                        ]), t(n);
                        var r = l.create(n, !0);
                        return e._facet && (e._facet.values = e.values(), n.facet = null), e._output = n, r.data[e._name] = 1, r;
                    }, n;
                }
                function o(e) {
                    var t = new f(e._graph).router(!0);
                    return t.evaluate = function (t) {
                        if (e.mutates()) {
                            var n = e._srcMap || (e._srcMap = {}), r = l.create(t);
                            return r.add = t.add.map(function (e) {
                                return n[e._id] = d.derive(e);
                            }), r.mod = t.mod.map(function (e) {
                                return d.rederive(e, n[e._id]);
                            }), r.rem = t.rem.map(function (e) {
                                var t = n[e._id];
                                return n[e._id] = null, t;
                            }), e._input = r;
                        }
                        return e._input = t;
                    }, t;
                }
                var s = e('datalib'), u = e('vega-logging'), l = e('./ChangeSet'), c = e('./Collector'), d = e('./Tuple'), f = e('./Node'), h = r.prototype;
                h.name = function (e) {
                    return arguments.length ? (this._name = e, this) : this._name;
                }, h.source = function (e) {
                    return arguments.length ? this._source = this._graph.data(e) : this._source;
                }, h.insert = function (e) {
                    return this._input.add = this._input.add.concat(e.map(d.ingest)), this;
                }, h.remove = function (e) {
                    var t = this._data.filter(e);
                    return this._input.rem = this._input.rem.concat(t), this;
                }, h.update = function (e, t, n) {
                    var r = this._input.mod, i = d.idMap(r);
                    return this._input.fields[t] = 1, this._data.filter(e).forEach(function (e) {
                        var a = e[t], o = n(e);
                        a !== o && (d.set(e, t, o), 1 !== i[e._id] && (r.push(e), i[e._id] = 1));
                    }), this;
                }, h.values = function (e) {
                    return arguments.length ? (this._input.rem = this._data.slice(), e && this.insert(e), this) : this._collector.data();
                }, h.mutates = function (e) {
                    return arguments.length ? (this._mutates = this._mutates || e, this) : this._mutates;
                }, h.last = function () {
                    return this._output;
                }, h.fire = function (e) {
                    return e && (this._input = e), this._graph.propagate(this._input, this._pipeline[0]), this;
                }, h.pipeline = function (e) {
                    if (!arguments.length)
                        return this._pipeline;
                    var t, n = this._graph;
                    return e.unshift(this._inputNode = i(this)), t = n.preprocess(e), t.router && e.push(t.collector = new c(n)), e.push(this._outputNode = a(this)), this._collector = t.collector, this._mutates = !!t.mutates, n.connect(this._pipeline = e), this;
                }, h.synchronize = function () {
                    return this._graph.synchronize(this._pipeline), this;
                }, h.getIndex = function (e) {
                    var t, n, r, i, a = this.values(), o = this._indexes, u = this._indexFields, l = s.$(e);
                    if (!o[e])
                        for (o[e] = t = {}, u.push(e), n = 0, r = a.length; n < r; ++n)
                            i = l(a[n]), t[i] = (t[i] || 0) + 1, d.prev_init(a[n]);
                    return o[e];
                }, h.listener = function () {
                    return o(this).addListener(this._inputNode);
                }, h.addListener = function (e) {
                    return e instanceof r ? this._collector.addListener(e.listener()) : this._outputNode.addListener(e), this;
                }, h.removeListener = function (e) {
                    this._outputNode.removeListener(e);
                }, h.listeners = function (e) {
                    return (e ? this._collector : this._outputNode).listeners();
                }, t.exports = r;
            },
            {
                './ChangeSet': 33,
                './Collector': 34,
                './Node': 39,
                './Tuple': 41,
                datalib: 27,
                'vega-logging': 49
            }
        ],
        36: [
            function (e, t, n) {
                var r = t.exports = {
                    ALL: [
                        'data',
                        'fields',
                        'scales',
                        'signals'
                    ]
                };
                r.ALL.forEach(function (e) {
                    r[e.toUpperCase()] = e;
                });
            },
            {}
        ],
        37: [
            function (e, t, n) {
                function r() {
                }
                var i = e('datalib'), a = e('vega-logging'), o = e('./Heap'), s = e('./ChangeSet'), u = e('./DataSource'), l = e('./Collector'), c = e('./Tuple'), d = e('./Signal'), f = e('./Dependencies'), h = r.prototype;
                h.init = function () {
                    this._stamp = 0, this._rank = 0, this._data = {}, this._signals = {}, this._requestedIndexes = {}, this.doNotPropagate = {};
                }, h.rank = function () {
                    return ++this._rank;
                }, h.values = function (e, t, n) {
                    var r, a, o = e === f.SIGNALS ? this._signals : this._data, s = void 0 !== t ? t : i.keys(o);
                    if (Array.isArray(s)) {
                        for (r = n || {}, a = 0; a < s.length; ++a)
                            r[s[a]] = o[s[a]].values();
                        return r;
                    }
                    return o[s].values();
                }, h.dataValues = function (e) {
                    return this.values(f.DATA, e);
                }, h.signalValues = function (e) {
                    return this.values(f.SIGNALS, e);
                }, h.data = function (e, t, n) {
                    var r = this._data;
                    if (arguments.length)
                        return 1 === arguments.length ? r[e] : r[e] = new u(this, e, n).pipeline(t);
                    var i, a = [];
                    for (i in r)
                        a.push(r[i]);
                    return a;
                }, h.signal = function (e, t) {
                    if (1 === arguments.length) {
                        var n = this;
                        return Array.isArray(e) ? e.map(function (e) {
                            return n._signals[e];
                        }) : this._signals[e];
                    }
                    return this._signals[e] = new d(this, e, t);
                }, h.signalRef = function (e) {
                    Array.isArray(e) || (e = i.field(e));
                    var t = this.signal(e[0]).value();
                    if (e.length > 1)
                        for (var n = 1, r = e.length; n < r; ++n)
                            t = t[e[n]];
                    return t;
                }, h.requestIndex = function (e, t) {
                    var n = this._requestedIndexes, r = n[e] || (n[e] = {});
                    return r[t] = !0, this;
                }, h.buildIndexes = function () {
                    var e, t, n, r, a, o, s, u, l = this._requestedIndexes, c = i.keys(l);
                    for (e = 0, t = c.length; e < t; ++e) {
                        if (o = this.data(a = c[e]), !o)
                            throw Error('Data source ' + i.str(a) + ' does not exist.');
                        for (s = i.keys(l[a]), n = 0, r = s.length; n < r; ++n)
                            null !== (u = s[n]) && (o.getIndex(u), l[a][u] = null);
                    }
                    return this;
                }, h.propagate = function (e, t, n, r) {
                    var i, a, u, l, c, f, h, p, g = {}, m = new o(function (e, t) {
                            return e._qrank - t._qrank;
                        });
                    if (e.stamp)
                        throw Error('Pulse already has a non-zero stamp.');
                    for (e.stamp = n || ++this._stamp, g[t._id] = e, m.push(t.qrank(!0)); m.size() > 0;)
                        if (t = m.peek(), p = t instanceof d, e = g[t._id], t.rank() !== t.qrank())
                            m.replace(t.qrank(!0));
                        else if (m.pop(), g[t._id] = null, i = t._listeners, (!p || p && !r) && (e = this.evaluate(e, t)), e !== this.doNotPropagate)
                            for (!e.reflow && t.reflows() && (e = s.create(e, !0)), f = 0, h = i.length; f < h; ++f)
                                if (a = i[f], void 0 !== (u = g[a._id])) {
                                    if (null === u)
                                        throw Error('Already propagated to node.');
                                    if (u === e)
                                        continue;
                                    if (l = e.add.length || e.mod.length || e.rem.length, c = u.add.length || u.mod.length || u.rem.length, l && c)
                                        throw Error('Multiple changeset pulses to same node');
                                    g[a._id] = l ? e : u, g[a._id].reflow = e.reflow || u.reflow;
                                } else
                                    m.push(a.qrank(!0)), g[a._id] = e;
                    return this.done(e);
                }, h.done = function (e) {
                    a.debug(e, ['bookkeeping']);
                    for (var t in e.data)
                        this.data(t).synchronize();
                    return this;
                }, h.preprocess = function (e) {
                    for (var t, n, r, i, a = this, o = 0, s = 0; s < e.length; ++s)
                        t = e[s], t.batch() && !t._collector && (n || !r ? (t = new l(a), e.splice(s, 0, t), n = !1) : t._collector = r), (i = t.collector()) && (r = t), n = n || t.router() && !i, o = o || t.mutates(), t.produces() && (e.splice(s + 1, 0, new l(a)), n = !1);
                    return {
                        router: n,
                        collector: r,
                        mutates: o
                    };
                }, h.connect = function (e) {
                    var t, n, r, a, o, s, u, l, c, d;
                    for (o = 0, s = e.length; o < s; ++o) {
                        for (n = e[o], n.collector() && (t = n), r = n.dependency(f.DATA), u = 0, l = r.length; u < l; ++u) {
                            if (!(c = this.data(d = r[u])))
                                throw new Error('Unknown data source ' + i.str(d));
                            c.addListener(t);
                        }
                        for (a = n.dependency(f.SIGNALS), u = 0, l = a.length; u < l; ++u) {
                            if (!(c = this.signal(d = a[u])))
                                throw new Error('Unknown signal ' + i.str(d));
                            c.addListener(t);
                        }
                        o > 0 && e[o - 1].addListener(n);
                    }
                    return e;
                }, h.disconnect = function (e) {
                    var t, n, r, i, a, o, s, u;
                    for (a = 0, o = e.length; a < o; ++a) {
                        for (n = e[a], n.collector() && (t = n), r = n.dependency(f.DATA), s = 0, u = r.length; s < u; ++s)
                            this.data(r[s]).removeListener(t);
                        for (i = n.dependency(f.SIGNALS), s = 0, u = i.length; s < u; ++s)
                            this.signal(i[s]).removeListener(t);
                        n.disconnect();
                    }
                    return e;
                }, h.synchronize = function (e) {
                    var t, n, r, i, a, o, s, u, l = {};
                    for (r = 0, i = e.length; r < i; ++r)
                        if (t = e[r], t.collector())
                            for (a = 0, n = t.data(), o = n.length; a < o; ++a)
                                u = (s = n[a])._id, l[u] || (c.prev_update(s), l[u] = 1);
                    return this;
                }, h.reevaluate = function (e, t) {
                    var n = e.reflow && t.last() >= e.stamp, r = t.router() || e.add.length || e.rem.length;
                    return r || !n || t.reevaluate(e);
                }, h.evaluate = function (e, t) {
                    return this.reevaluate(e, t) ? (e = t.evaluate(e), t.last(e.stamp), e) : e;
                }, t.exports = r;
            },
            {
                './ChangeSet': 33,
                './Collector': 34,
                './DataSource': 35,
                './Dependencies': 36,
                './Heap': 38,
                './Signal': 40,
                './Tuple': 41,
                datalib: 27,
                'vega-logging': 49
            }
        ],
        38: [
            function (e, t, n) {
                function r(e) {
                    this.cmp = e, this.nodes = [];
                }
                function i(e, t, n, r) {
                    var i, a, o;
                    for (i = e[n]; n > t && (o = n - 1 >> 1, a = e[o], r(i, a) < 0);)
                        e[n] = a, n = o;
                    return e[n] = i;
                }
                function a(e, t, n) {
                    for (var r, a = t, o = e.length, s = e[t], u = 2 * t + 1; u < o;)
                        r = u + 1, r < o && n(e[u], e[r]) >= 0 && (u = r), e[t] = e[u], t = u, u = 2 * t + 1;
                    return e[t] = s, i(e, a, t, n);
                }
                var o = r.prototype;
                o.size = function () {
                    return this.nodes.length;
                }, o.clear = function () {
                    return this.nodes = [], this;
                }, o.peek = function () {
                    return this.nodes[0];
                }, o.push = function (e) {
                    var t = this.nodes;
                    return t.push(e), i(t, 0, t.length - 1, this.cmp);
                }, o.pop = function () {
                    var e, t = this.nodes, n = t.pop();
                    return t.length ? (e = t[0], t[0] = n, a(t, 0, this.cmp)) : e = n, e;
                }, o.replace = function (e) {
                    var t = this.nodes, n = t[0];
                    return t[0] = e, a(t, 0, this.cmp), n;
                }, o.pushpop = function (e) {
                    var t = this.nodes, n = t[0];
                    return t.length && this.cmp(n, e) < 0 && (t[0] = e, e = n, a(t, 0, this.cmp)), e;
                }, t.exports = r;
            },
            {}
        ],
        39: [
            function (e, t, n) {
                function r(e) {
                    e && this.init(e);
                }
                var i = e('./Dependencies').ALL, a = 0, o = r.Flags = {
                        Router: 1,
                        Collector: 2,
                        Produces: 4,
                        Mutates: 8,
                        Reflows: 16,
                        Batch: 32
                    }, s = r.prototype;
                s.init = function (e) {
                    this._id = ++a, this._graph = e, this._rank = e.rank(), this._qrank = null, this._stamp = 0, this._listeners = [], this._listeners._ids = {}, this._deps = {};
                    for (var t = 0, n = i.length; t < n; ++t)
                        this._deps[i[t]] = [];
                    return this._flags = 0, this;
                }, s.rank = function () {
                    return this._rank;
                }, s.rerank = function () {
                    for (var e, t = this._graph, n = [this]; n.length;)
                        e = n.shift(), e._rank = t.rank(), n.unshift.apply(n, e.listeners());
                    return this;
                }, s.qrank = function () {
                    return arguments.length ? (this._qrank = this._rank, this) : this._qrank;
                }, s.last = function (e) {
                    return arguments.length ? (this._stamp = e, this) : this._stamp;
                }, s._setf = function (e, t) {
                    return t ? this._flags |= e : this._flags &= ~e, this;
                }, s.router = function (e) {
                    return arguments.length ? this._setf(o.Router, e) : this._flags & o.Router;
                }, s.collector = function (e) {
                    return arguments.length ? this._setf(o.Collector, e) : this._flags & o.Collector;
                }, s.produces = function (e) {
                    return arguments.length ? this._setf(o.Produces, e) : this._flags & o.Produces;
                }, s.mutates = function (e) {
                    return arguments.length ? this._setf(o.Mutates, e) : this._flags & o.Mutates;
                }, s.reflows = function (e) {
                    return arguments.length ? this._setf(o.Reflows, e) : this._flags & o.Reflows;
                }, s.batch = function (e) {
                    return arguments.length ? this._setf(o.Batch, e) : this._flags & o.Batch;
                }, s.dependency = function (e, t) {
                    var n = this._deps[e], r = n._names || (n._names = {});
                    if (1 === arguments.length)
                        return n;
                    if (null === t)
                        n.splice(0, n.length), n._names = {};
                    else if (Array.isArray(t))
                        for (var i, a = 0, o = t.length; a < o; ++a)
                            i = t[a], r[i] || (n.push(i), r[i] = 1);
                    else {
                        if (r[t])
                            return this;
                        n.push(t), r[t] = 1;
                    }
                    return this;
                }, s.listeners = function () {
                    return this._listeners;
                }, s.addListener = function (e) {
                    if (!(e instanceof r))
                        throw Error('Listener is not a Node');
                    return this._listeners._ids[e._id] ? this : (this._listeners.push(e), this._listeners._ids[e._id] = 1, this._rank > e._rank && e.rerank(), this);
                }, s.removeListener = function (e) {
                    if (!this._listeners._ids[e._id])
                        return !1;
                    var t = this._listeners.indexOf(e), n = t >= 0;
                    return n && (this._listeners.splice(t, 1), this._listeners._ids[e._id] = null), n;
                }, s.disconnect = function () {
                    this._listeners = [], this._listeners._ids = {};
                }, s.evaluate = function (e) {
                    return e;
                }, s.reevaluate = function (e) {
                    var t, n, r, a, o, s;
                    for (r = 0, a = i.length; r < a; ++r)
                        for (t = i[r], n = this._deps[t], o = 0, s = n.length; o < s; ++o)
                            if (e[t][n[o]])
                                return !0;
                    return !1;
                }, r.reset = function () {
                    a = 0;
                }, t.exports = r;
            },
            { './Dependencies': 36 }
        ],
        40: [
            function (e, t, n) {
                function r(e, t, n) {
                    return o.init.call(this, e), this._name = t, this._value = n, this._verbose = !1, this._handlers = [], this;
                }
                var i = e('./ChangeSet'), a = e('./Node'), o = a.prototype, s = r.prototype = Object.create(o);
                s.constructor = r, s.name = function () {
                    return this._name;
                }, s.value = function (e) {
                    return arguments.length ? (this._value = e, this) : this._value;
                }, s.values = s.value, s.verbose = function (e) {
                    return arguments.length ? (this._verbose = !!e, this) : this._verbose;
                }, s.evaluate = function (e) {
                    return e.signals[this._name] ? e : this._graph.doNotPropagate;
                }, s.fire = function (e) {
                    e || (e = i.create(null, !0)), e.signals[this._name] = 1, this._graph.propagate(e, this);
                }, s.on = function (e) {
                    var t = this, n = new a(this._graph);
                    return n.evaluate = function (n) {
                        return e(t.name(), t.value()), n;
                    }, this._handlers.push({
                        handler: e,
                        node: n
                    }), this.addListener(n);
                }, s.off = function (e) {
                    var t, n, r = this._handlers;
                    for (t = r.length; --t >= 0;)
                        e && r[t].handler !== e || (n = r.splice(t, 1)[0], this.removeListener(n.node));
                    return this;
                }, t.exports = r;
            },
            {
                './ChangeSet': 33,
                './Node': 39
            }
        ],
        41: [
            function (e, t, n) {
                function r(e) {
                    return e = e === Object(e) ? e : { data: e }, e._id = ++o, e._prev && (e._prev = null), e;
                }
                function i(e, t) {
                    t = t || {};
                    for (var n = 0, r = e.length; n < r; ++n)
                        t[e[n]._id] = 1;
                    return t;
                }
                function a(e, t) {
                    t = t || {};
                    for (var n in e)
                        '_prev' !== n && '_id' !== n && (t[n] = e[n]);
                    return t;
                }
                var o = 0;
                t.exports = {
                    ingest: r,
                    idMap: i,
                    derive: function (e) {
                        return r(a(e));
                    },
                    rederive: function (e, t) {
                        return a(e, t);
                    },
                    set: function (e, t, n) {
                        return e[t] === n ? 0 : (e[t] = n, 1);
                    },
                    prev: function (e) {
                        return e._prev || e;
                    },
                    prev_init: function (e) {
                        e._prev || (e._prev = { _id: e._id });
                    },
                    prev_update: function (e) {
                        var t, n, r = e._prev;
                        if (r)
                            for (t in e)
                                '_prev' !== t && '_id' !== t && (r[t] = (n = e[t]) instanceof Object && n._prev ? n._prev : n);
                    },
                    reset: function () {
                        o = 0;
                    },
                    idFilter: function (e) {
                        for (var t = {}, n = arguments.length; --n > 0;)
                            i(arguments[n], t);
                        return e.filter(function (e) {
                            return !t[e._id];
                        });
                    }
                };
            },
            {}
        ],
        42: [
            function (e, t, n) {
                t.exports = {
                    ChangeSet: e('./ChangeSet'),
                    Collector: e('./Collector'),
                    DataSource: e('./DataSource'),
                    Dependencies: e('./Dependencies'),
                    Graph: e('./Graph'),
                    Node: e('./Node'),
                    Signal: e('./Signal'),
                    Tuple: e('./Tuple'),
                    debug: e('vega-logging').debug
                };
            },
            {
                './ChangeSet': 33,
                './Collector': 34,
                './DataSource': 35,
                './Dependencies': 36,
                './Graph': 37,
                './Node': 39,
                './Signal': 40,
                './Tuple': 41,
                'vega-logging': 49
            }
        ],
        43: [
            function (e, t, n) {
                t.exports = function () {
                    'use strict';
                    function e(e, t) {
                        function n() {
                            this.constructor = e;
                        }
                        n.prototype = t.prototype, e.prototype = new n();
                    }
                    function t(e, n, r, i) {
                        this.message = e, this.expected = n, this.found = r, this.location = i, this.name = 'SyntaxError', 'function' == typeof Error.captureStackTrace && Error.captureStackTrace(this, t);
                    }
                    function n(e) {
                        function n(t) {
                            var n, r, i = pt[t];
                            if (i)
                                return i;
                            for (n = t - 1; !pt[n];)
                                n--;
                            for (i = pt[n], i = {
                                    line: i.line,
                                    column: i.column,
                                    seenCR: i.seenCR
                                }; n < t;)
                                r = e.charAt(n), '\n' === r ? (i.seenCR || i.line++, i.column = 1, i.seenCR = !1) : '\r' === r || '\u2028' === r || '\u2029' === r ? (i.line++, i.column = 1, i.seenCR = !0) : (i.column++, i.seenCR = !1), n++;
                            return pt[t] = i, i;
                        }
                        function r(e, t) {
                            var r = n(e), i = n(t);
                            return {
                                start: {
                                    offset: e,
                                    line: r.line,
                                    column: r.column
                                },
                                end: {
                                    offset: t,
                                    line: i.line,
                                    column: i.column
                                }
                            };
                        }
                        function i(e) {
                            ft < gt || (ft > gt && (gt = ft, mt = []), mt.push(e));
                        }
                        function a(e, n, r, i) {
                            function a(e) {
                                var t = 1;
                                for (e.sort(function (e, t) {
                                        return e.description < t.description ? -1 : e.description > t.description ? 1 : 0;
                                    }); t < e.length;)
                                    e[t - 1] === e[t] ? e.splice(t, 1) : t++;
                            }
                            function o(e, t) {
                                function n(e) {
                                    function t(e) {
                                        return e.charCodeAt(0).toString(16).toUpperCase();
                                    }
                                    return e.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (e) {
                                        return '\\x0' + t(e);
                                    }).replace(/[\x10-\x1F\x80-\xFF]/g, function (e) {
                                        return '\\x' + t(e);
                                    }).replace(/[\u0100-\u0FFF]/g, function (e) {
                                        return '\\u0' + t(e);
                                    }).replace(/[\u1000-\uFFFF]/g, function (e) {
                                        return '\\u' + t(e);
                                    });
                                }
                                var r, i, a, o = new Array(e.length);
                                for (a = 0; a < e.length; a++)
                                    o[a] = e[a].description;
                                return r = e.length > 1 ? o.slice(0, -1).join(', ') + ' or ' + o[e.length - 1] : o[0], i = t ? '"' + n(t) + '"' : 'end of input', 'Expected ' + r + ' but ' + i + ' found.';
                            }
                            return null !== n && a(n), new t(null !== e ? e : o(n, r), n, r, i);
                        }
                        function o() {
                            var e;
                            return e = s();
                        }
                        function s() {
                            var t, n, r, a, o, l;
                            return t = ft, n = u(), n !== b ? (r = v(), r !== b ? (44 === e.charCodeAt(ft) ? (a = k, ft++) : (a = b, 0 === vt && i(M)), a !== b ? (o = v(), o !== b ? (l = s(), l !== b ? (ht = t, n = S(n, l), t = n) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b), t === b && (t = ft, n = u(), n !== b && (ht = t, n = T(n)), t = n), t;
                        }
                        function u() {
                            var t, n, r, a, o, s, c, d, f, h, p, g, m, y;
                            return t = ft, 91 === e.charCodeAt(ft) ? (n = E, ft++) : (n = b, 0 === vt && i(A)), n !== b ? (r = v(), r !== b ? (a = l(), a !== b ? (o = v(), o !== b ? (44 === e.charCodeAt(ft) ? (s = k, ft++) : (s = b, 0 === vt && i(M)), s !== b ? (c = v(), c !== b ? (d = l(), d !== b ? (f = v(), f !== b ? (93 === e.charCodeAt(ft) ? (h = L, ft++) : (h = b, 0 === vt && i(C)), h !== b ? (p = v(), p !== b ? (62 === e.charCodeAt(ft) ? (g = D, ft++) : (g = b, 0 === vt && i(P)), g !== b ? (m = v(), m !== b ? (y = u(), y !== b ? (ht = t, n = I(a, d, y), t = n) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b), t === b && (t = l()), t;
                        }
                        function l() {
                            var e, t, n, r;
                            if (e = ft, t = c(), t !== b) {
                                if (n = [], r = h(), r !== b)
                                    for (; r !== b;)
                                        n.push(r), r = h();
                                else
                                    n = b;
                                n !== b ? (ht = e, t = N(t, n), e = t) : (ft = e, e = b);
                            } else
                                ft = e, e = b;
                            return e === b && (e = ft, t = c(), t !== b && (ht = e, t = O(t)), e = t), e;
                        }
                        function c() {
                            var t, n, r, a, o;
                            return t = ft, 40 === e.charCodeAt(ft) ? (n = j, ft++) : (n = b, 0 === vt && i(z)), n !== b ? (r = s(), r !== b ? (41 === e.charCodeAt(ft) ? (a = U, ft++) : (a = b, 0 === vt && i(F)), a !== b ? (ht = t, n = R(r), t = n) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b), t === b && (t = ft, 64 === e.charCodeAt(ft) ? (n = q, ft++) : (n = b, 0 === vt && i(B)), n !== b ? (r = p(), r !== b ? (58 === e.charCodeAt(ft) ? (a = G, ft++) : (a = b, 0 === vt && i($)), a !== b ? (o = f(), o !== b ? (ht = t, n = H(r, o), t = n) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b), t === b && (t = ft, n = d(), n !== b ? (58 === e.charCodeAt(ft) ? (r = G, ft++) : (r = b, 0 === vt && i($)), r !== b ? (a = f(), a !== b ? (ht = t, n = Y(n, a), t = n) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b), t === b && (t = ft, n = g(), n !== b ? (58 === e.charCodeAt(ft) ? (r = G, ft++) : (r = b, 0 === vt && i($)), r !== b ? (a = f(), a !== b ? (ht = t, n = V(n, a), t = n) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b), t === b && (t = ft, n = f(), n !== b && (ht = t, n = W(n)), t = n, t === b && (t = ft, n = p(), n !== b && (ht = t, n = J(n)), t = n))))), t;
                        }
                        function d() {
                            var t;
                            return e.substr(ft, 4) === X ? (t = X, ft += 4) : (t = b, 0 === vt && i(K)), t === b && (e.substr(ft, 6) === Z ? (t = Z, ft += 6) : (t = b, 0 === vt && i(Q)), t === b && (e.substr(ft, 4) === ee ? (t = ee, ft += 4) : (t = b, 0 === vt && i(te)), t === b && (e.substr(ft, 3) === ne ? (t = ne, ft += 3) : (t = b, 0 === vt && i(re)), t === b && (e.substr(ft, 4) === ie ? (t = ie, ft += 4) : (t = b, 0 === vt && i(ae)), t === b && (e.substr(ft, 4) === oe ? (t = oe, ft += 4) : (t = b, 0 === vt && i(se)), t === b && (e.substr(ft, 4) === ue ? (t = ue, ft += 4) : (t = b, 0 === vt && i(le)), t === b && (e.substr(ft, 5) === ce ? (t = ce, ft += 5) : (t = b, 0 === vt && i(de)), t === b && (e.substr(ft, 4) === fe ? (t = fe, ft += 4) : (t = b, 0 === vt && i(he)), t === b && (e.substr(ft, 5) === pe ? (t = pe, ft += 5) : (t = b, 0 === vt && i(ge))))))))))), t;
                        }
                        function f() {
                            var t;
                            return e.substr(ft, 9) === me ? (t = me, ft += 9) : (t = b, 0 === vt && i(ve)), t === b && (e.substr(ft, 7) === ye ? (t = ye, ft += 7) : (t = b, 0 === vt && i(_e)), t === b && (e.substr(ft, 5) === be ? (t = be, ft += 5) : (t = b, 0 === vt && i(xe)), t === b && (e.substr(ft, 8) === we ? (t = we, ft += 8) : (t = b, 0 === vt && i(ke)), t === b && (e.substr(ft, 5) === Me ? (t = Me, ft += 5) : (t = b, 0 === vt && i(Se)), t === b && (e.substr(ft, 7) === Te ? (t = Te, ft += 7) : (t = b, 0 === vt && i(Ee)), t === b && (e.substr(ft, 8) === Ae ? (t = Ae, ft += 8) : (t = b, 0 === vt && i(Le)), t === b && (e.substr(ft, 5) === Ce ? (t = Ce, ft += 5) : (t = b, 0 === vt && i(De)), t === b && (e.substr(ft, 10) === Pe ? (t = Pe, ft += 10) : (t = b, 0 === vt && i(Ie)), t === b && (e.substr(ft, 9) === Ne ? (t = Ne, ft += 9) : (t = b, 0 === vt && i(Oe)), t === b && (e.substr(ft, 8) === je ? (t = je, ft += 8) : (t = b, 0 === vt && i(ze)), t === b && (e.substr(ft, 9) === Ue ? (t = Ue, ft += 9) : (t = b, 0 === vt && i(Fe)), t === b && (e.substr(ft, 10) === Re ? (t = Re, ft += 10) : (t = b, 0 === vt && i(qe)), t === b && (e.substr(ft, 10) === Be ? (t = Be, ft += 10) : (t = b, 0 === vt && i(Ge)), t === b && (e.substr(ft, 9) === $e ? (t = $e, ft += 9) : (t = b, 0 === vt && i(He)), t === b && (e.substr(ft, 8) === Ye ? (t = Ye, ft += 8) : (t = b, 0 === vt && i(Ve)), t === b && (e.substr(ft, 9) === We ? (t = We, ft += 9) : (t = b, 0 === vt && i(Je)), t === b && (e.substr(ft, 8) === Xe ? (t = Xe, ft += 8) : (t = b, 0 === vt && i(Ke)), t === b && (e.substr(ft, 9) === Ze ? (t = Ze, ft += 9) : (t = b, 0 === vt && i(Qe)))))))))))))))))))), t;
                        }
                        function h() {
                            var t, n, r, a;
                            return t = ft, 91 === e.charCodeAt(ft) ? (n = E, ft++) : (n = b, 0 === vt && i(A)), n !== b ? (r = m(), r !== b ? (93 === e.charCodeAt(ft) ? (a = L, ft++) : (a = b, 0 === vt && i(C)), a !== b ? (ht = t, n = et(r), t = n) : (ft = t, t = b)) : (ft = t, t = b)) : (ft = t, t = b), t;
                        }
                        function p() {
                            var t, n, r;
                            if (t = ft, n = [], tt.test(e.charAt(ft)) ? (r = e.charAt(ft), ft++) : (r = b, 0 === vt && i(nt)), r !== b)
                                for (; r !== b;)
                                    n.push(r), tt.test(e.charAt(ft)) ? (r = e.charAt(ft), ft++) : (r = b, 0 === vt && i(nt));
                            else
                                n = b;
                            return n !== b && (ht = t, n = rt(n)), t = n;
                        }
                        function g() {
                            var t, n, r;
                            if (t = ft, n = [], it.test(e.charAt(ft)) ? (r = e.charAt(ft), ft++) : (r = b, 0 === vt && i(at)), r !== b)
                                for (; r !== b;)
                                    n.push(r), it.test(e.charAt(ft)) ? (r = e.charAt(ft), ft++) : (r = b, 0 === vt && i(at));
                            else
                                n = b;
                            return n !== b && (ht = t, n = ot(n)), t = n;
                        }
                        function m() {
                            var t, n, r;
                            if (t = ft, n = [], st.test(e.charAt(ft)) ? (r = e.charAt(ft), ft++) : (r = b, 0 === vt && i(ut)), r !== b)
                                for (; r !== b;)
                                    n.push(r), st.test(e.charAt(ft)) ? (r = e.charAt(ft), ft++) : (r = b, 0 === vt && i(ut));
                            else
                                n = b;
                            return n !== b && (ht = t, n = lt(n)), t = n;
                        }
                        function v() {
                            var t, n;
                            for (t = [], ct.test(e.charAt(ft)) ? (n = e.charAt(ft), ft++) : (n = b, 0 === vt && i(dt)); n !== b;)
                                t.push(n), ct.test(e.charAt(ft)) ? (n = e.charAt(ft), ft++) : (n = b, 0 === vt && i(dt));
                            return t;
                        }
                        var y, _ = arguments.length > 1 ? arguments[1] : {}, b = {}, x = { start: o }, w = o, k = ',', M = {
                                type: 'literal',
                                value: ',',
                                description: '","'
                            }, S = function (e, t) {
                                return [e].concat(t);
                            }, T = function (e) {
                                return [e];
                            }, E = '[', A = {
                                type: 'literal',
                                value: '[',
                                description: '"["'
                            }, L = ']', C = {
                                type: 'literal',
                                value: ']',
                                description: '"]"'
                            }, D = '>', P = {
                                type: 'literal',
                                value: '>',
                                description: '">"'
                            }, I = function (e, t, n) {
                                return {
                                    start: e,
                                    middle: n,
                                    end: t,
                                    str: '[' + e.str + ', ' + t.str + '] > ' + n.str
                                };
                            }, N = function (e, t) {
                                return e.filters = t, e.str += t.map(function (e) {
                                    return '[' + e + ']';
                                }).join(''), e;
                            }, O = function (e) {
                                return e;
                            }, j = '(', z = {
                                type: 'literal',
                                value: '(',
                                description: '"("'
                            }, U = ')', F = {
                                type: 'literal',
                                value: ')',
                                description: '")"'
                            }, R = function (e) {
                                return {
                                    stream: e,
                                    str: '(' + e.map(function (e) {
                                        return e.str;
                                    }).join(', ') + ')'
                                };
                            }, q = '@', B = {
                                type: 'literal',
                                value: '@',
                                description: '"@"'
                            }, G = ':', $ = {
                                type: 'literal',
                                value: ':',
                                description: '":"'
                            }, H = function (e, t) {
                                return {
                                    event: t,
                                    name: e,
                                    str: '@' + e + ':' + t
                                };
                            }, Y = function (e, t) {
                                return {
                                    event: t,
                                    mark: e,
                                    str: e + ':' + t
                                };
                            }, V = function (e, t) {
                                return {
                                    event: t,
                                    target: e,
                                    str: e + ':' + t
                                };
                            }, W = function (e) {
                                return {
                                    event: e,
                                    str: e
                                };
                            }, J = function (e) {
                                return {
                                    signal: e,
                                    str: e
                                };
                            }, X = 'rect', K = {
                                type: 'literal',
                                value: 'rect',
                                description: '"rect"'
                            }, Z = 'symbol', Q = {
                                type: 'literal',
                                value: 'symbol',
                                description: '"symbol"'
                            }, ee = 'path', te = {
                                type: 'literal',
                                value: 'path',
                                description: '"path"'
                            }, ne = 'arc', re = {
                                type: 'literal',
                                value: 'arc',
                                description: '"arc"'
                            }, ie = 'area', ae = {
                                type: 'literal',
                                value: 'area',
                                description: '"area"'
                            }, oe = 'line', se = {
                                type: 'literal',
                                value: 'line',
                                description: '"line"'
                            }, ue = 'rule', le = {
                                type: 'literal',
                                value: 'rule',
                                description: '"rule"'
                            }, ce = 'image', de = {
                                type: 'literal',
                                value: 'image',
                                description: '"image"'
                            }, fe = 'text', he = {
                                type: 'literal',
                                value: 'text',
                                description: '"text"'
                            }, pe = 'group', ge = {
                                type: 'literal',
                                value: 'group',
                                description: '"group"'
                            }, me = 'mousedown', ve = {
                                type: 'literal',
                                value: 'mousedown',
                                description: '"mousedown"'
                            }, ye = 'mouseup', _e = {
                                type: 'literal',
                                value: 'mouseup',
                                description: '"mouseup"'
                            }, be = 'click', xe = {
                                type: 'literal',
                                value: 'click',
                                description: '"click"'
                            }, we = 'dblclick', ke = {
                                type: 'literal',
                                value: 'dblclick',
                                description: '"dblclick"'
                            }, Me = 'wheel', Se = {
                                type: 'literal',
                                value: 'wheel',
                                description: '"wheel"'
                            }, Te = 'keydown', Ee = {
                                type: 'literal',
                                value: 'keydown',
                                description: '"keydown"'
                            }, Ae = 'keypress', Le = {
                                type: 'literal',
                                value: 'keypress',
                                description: '"keypress"'
                            }, Ce = 'keyup', De = {
                                type: 'literal',
                                value: 'keyup',
                                description: '"keyup"'
                            }, Pe = 'mousewheel', Ie = {
                                type: 'literal',
                                value: 'mousewheel',
                                description: '"mousewheel"'
                            }, Ne = 'mousemove', Oe = {
                                type: 'literal',
                                value: 'mousemove',
                                description: '"mousemove"'
                            }, je = 'mouseout', ze = {
                                type: 'literal',
                                value: 'mouseout',
                                description: '"mouseout"'
                            }, Ue = 'mouseover', Fe = {
                                type: 'literal',
                                value: 'mouseover',
                                description: '"mouseover"'
                            }, Re = 'mouseenter', qe = {
                                type: 'literal',
                                value: 'mouseenter',
                                description: '"mouseenter"'
                            }, Be = 'touchstart', Ge = {
                                type: 'literal',
                                value: 'touchstart',
                                description: '"touchstart"'
                            }, $e = 'touchmove', He = {
                                type: 'literal',
                                value: 'touchmove',
                                description: '"touchmove"'
                            }, Ye = 'touchend', Ve = {
                                type: 'literal',
                                value: 'touchend',
                                description: '"touchend"'
                            }, We = 'dragenter', Je = {
                                type: 'literal',
                                value: 'dragenter',
                                description: '"dragenter"'
                            }, Xe = 'dragover', Ke = {
                                type: 'literal',
                                value: 'dragover',
                                description: '"dragover"'
                            }, Ze = 'dragleave', Qe = {
                                type: 'literal',
                                value: 'dragleave',
                                description: '"dragleave"'
                            }, et = function (e) {
                                return e;
                            }, tt = /^[a-zA-Z0-9_\-]/, nt = {
                                type: 'class',
                                value: '[a-zA-Z0-9_-]',
                                description: '[a-zA-Z0-9_-]'
                            }, rt = function (e) {
                                return e.join('');
                            }, it = /^[a-zA-Z0-9\-_  #.>+~[\]=|\^$*]/, at = {
                                type: 'class',
                                value: '[a-zA-Z0-9-_  #\\.\\>\\+~\\[\\]=|\\^\\$\\*]',
                                description: '[a-zA-Z0-9-_  #\\.\\>\\+~\\[\\]=|\\^\\$\\*]'
                            }, ot = function (e) {
                                return e.join('');
                            }, st = /^['"a-zA-Z0-9_().><=! \t-&|~]/, ut = {
                                type: 'class',
                                value: '[\'"a-zA-Z0-9_\\(\\)\\.\\>\\<\\=\\! \\t-&|~]',
                                description: '[\'"a-zA-Z0-9_\\(\\)\\.\\>\\<\\=\\! \\t-&|~]'
                            }, lt = function (e) {
                                return e.join('');
                            }, ct = /^[ \t\r\n]/, dt = {
                                type: 'class',
                                value: '[ \\t\\r\\n]',
                                description: '[ \\t\\r\\n]'
                            }, ft = 0, ht = 0, pt = [{
                                    line: 1,
                                    column: 1,
                                    seenCR: !1
                                }], gt = 0, mt = [], vt = 0;
                        if ('startRule' in _) {
                            if (!(_.startRule in x))
                                throw new Error('Can\'t start parsing from rule "' + _.startRule + '".');
                            w = x[_.startRule];
                        }
                        if (y = w(), y !== b && ft === e.length)
                            return y;
                        throw y !== b && ft < e.length && i({
                            type: 'end',
                            description: 'end of input'
                        }), a(null, mt, gt < e.length ? e.charAt(gt) : null, gt < e.length ? r(gt, gt + 1) : r(gt, gt));
                    }
                    return e(t, Error), {
                        SyntaxError: t,
                        parse: n
                    };
                }();
            },
            {}
        ],
        44: [
            function (e, t, n) {
                function r(e) {
                    var t, n, r = {};
                    for (t = 0, n = e.length; t < n; ++t)
                        r[e[t]] = 1;
                    return r;
                }
                function i(e) {
                    var t, n = [];
                    for (t in e)
                        n.push(t);
                    return n;
                }
                t.exports = function (t) {
                    function n(e) {
                        var t = {
                            code: a(e),
                            globals: i(p),
                            fields: i(g),
                            dataSources: i(m),
                            defs: u
                        };
                        return p = {}, g = {}, m = {}, t;
                    }
                    function a(e) {
                        if ('string' == typeof e)
                            return e;
                        var t = y[e.type];
                        if (null == t)
                            throw new Error('Unsupported type: ' + e.type);
                        return t(e);
                    }
                    t = t || {};
                    var o = t.constants || e('./constants'), s = (t.functions || e('./functions'))(a), u = t.functionDefs ? t.functionDefs(a) : {}, l = t.idWhiteList ? r(t.idWhiteList) : null, c = t.idBlackList ? r(t.idBlackList) : null, d = 0, f = t.fieldVar || 'datum', h = t.globalVar || 'signals', p = {}, g = {}, m = {}, v = 'function' == typeof h ? h : function (e) {
                            return h + '["' + e + '"]';
                        }, y = {
                            Literal: function (e) {
                                return e.raw;
                            },
                            Identifier: function (e) {
                                var t = e.name;
                                if (d > 0)
                                    return t;
                                if (o.hasOwnProperty(t))
                                    return o[t];
                                if (l)
                                    return l.hasOwnProperty(t) ? t : (p[t] = 1, v(t));
                                if (c && c.hasOwnProperty(t))
                                    throw new Error('Illegal identifier: ' + t);
                                return t;
                            },
                            Program: function (e) {
                                return e.body.map(a).join('\n');
                            },
                            MemberExpression: function (e) {
                                var t = !e.computed, n = a(e.object);
                                t && (d += 1);
                                var r = a(e.property);
                                return n === f && (g[r] = 1), t && (d -= 1), n + (t ? '.' + r : '[' + r + ']');
                            },
                            CallExpression: function (e) {
                                if ('Identifier' !== e.callee.type)
                                    throw new Error('Illegal callee type: ' + e.callee.type);
                                var t = e.callee.name, n = e.arguments, r = s.hasOwnProperty(t) && s[t];
                                if (!r)
                                    throw new Error('Unrecognized function: ' + t);
                                return r instanceof Function ? r(n, p, g, m) : r + '(' + n.map(a).join(',') + ')';
                            },
                            ArrayExpression: function (e) {
                                return '[' + e.elements.map(a).join(',') + ']';
                            },
                            BinaryExpression: function (e) {
                                return '(' + a(e.left) + e.operator + a(e.right) + ')';
                            },
                            UnaryExpression: function (e) {
                                return '(' + e.operator + a(e.argument) + ')';
                            },
                            ConditionalExpression: function (e) {
                                return '(' + a(e.test) + '?' + a(e.consequent) + ':' + a(e.alternate) + ')';
                            },
                            LogicalExpression: function (e) {
                                return '(' + a(e.left) + e.operator + a(e.right) + ')';
                            },
                            ObjectExpression: function (e) {
                                return '{' + e.properties.map(a).join(',') + '}';
                            },
                            Property: function (e) {
                                d += 1;
                                var t = a(e.key);
                                return d -= 1, t + ':' + a(e.value);
                            },
                            ExpressionStatement: function (e) {
                                return a(e.expression);
                            }
                        };
                    return n.functions = s, n.functionDefs = u, n.constants = o, n;
                };
            },
            {
                './constants': 45,
                './functions': 46
            }
        ],
        45: [
            function (e, t, n) {
                t.exports = {
                    NaN: 'NaN',
                    E: 'Math.E',
                    LN2: 'Math.LN2',
                    LN10: 'Math.LN10',
                    LOG2E: 'Math.LOG2E',
                    LOG10E: 'Math.LOG10E',
                    PI: 'Math.PI',
                    SQRT1_2: 'Math.SQRT1_2',
                    SQRT2: 'Math.SQRT2'
                };
            },
            {}
        ],
        46: [
            function (e, t, n) {
                t.exports = function (e) {
                    function t(t, n, r, i) {
                        var a = e(n[0]);
                        return r && (a = r + '(' + a + ')', 0 === r.lastIndexOf('new ', 0) && (a = '(' + a + ')')), a + '.' + t + (i < 0 ? '' : 0 === i ? '()' : '(' + n.slice(1).map(e).join(',') + ')');
                    }
                    function n(e, n, r) {
                        return function (i) {
                            return t(e, i, n, r);
                        };
                    }
                    var r = 'new Date', i = 'String', a = 'RegExp';
                    return {
                        isNaN: 'isNaN',
                        isFinite: 'isFinite',
                        abs: 'Math.abs',
                        acos: 'Math.acos',
                        asin: 'Math.asin',
                        atan: 'Math.atan',
                        atan2: 'Math.atan2',
                        ceil: 'Math.ceil',
                        cos: 'Math.cos',
                        exp: 'Math.exp',
                        floor: 'Math.floor',
                        log: 'Math.log',
                        max: 'Math.max',
                        min: 'Math.min',
                        pow: 'Math.pow',
                        random: 'Math.random',
                        round: 'Math.round',
                        sin: 'Math.sin',
                        sqrt: 'Math.sqrt',
                        tan: 'Math.tan',
                        clamp: function (t) {
                            if (t.length < 3)
                                throw new Error('Missing arguments to clamp function.');
                            if (t.length > 3)
                                throw new Error('Too many arguments to clamp function.');
                            var n = t.map(e);
                            return 'Math.max(' + n[1] + ', Math.min(' + n[2] + ',' + n[0] + '))';
                        },
                        now: 'Date.now',
                        utc: 'Date.UTC',
                        datetime: r,
                        date: n('getDate', r, 0),
                        day: n('getDay', r, 0),
                        year: n('getFullYear', r, 0),
                        month: n('getMonth', r, 0),
                        hours: n('getHours', r, 0),
                        minutes: n('getMinutes', r, 0),
                        seconds: n('getSeconds', r, 0),
                        milliseconds: n('getMilliseconds', r, 0),
                        time: n('getTime', r, 0),
                        timezoneoffset: n('getTimezoneOffset', r, 0),
                        utcdate: n('getUTCDate', r, 0),
                        utcday: n('getUTCDay', r, 0),
                        utcyear: n('getUTCFullYear', r, 0),
                        utcmonth: n('getUTCMonth', r, 0),
                        utchours: n('getUTCHours', r, 0),
                        utcminutes: n('getUTCMinutes', r, 0),
                        utcseconds: n('getUTCSeconds', r, 0),
                        utcmilliseconds: n('getUTCMilliseconds', r, 0),
                        length: n('length', null, -1),
                        indexof: n('indexOf', null),
                        lastindexof: n('lastIndexOf', null),
                        parseFloat: 'parseFloat',
                        parseInt: 'parseInt',
                        upper: n('toUpperCase', i, 0),
                        lower: n('toLowerCase', i, 0),
                        slice: n('slice', i),
                        substring: n('substring', i),
                        replace: n('replace', i),
                        regexp: a,
                        test: n('test', a),
                        if: function (t) {
                            if (t.length < 3)
                                throw new Error('Missing arguments to if function.');
                            if (t.length > 3)
                                throw new Error('Too many arguments to if function.');
                            var n = t.map(e);
                            return n[0] + '?' + n[1] + ':' + n[2];
                        }
                    };
                };
            },
            {}
        ],
        47: [
            function (e, t, n) {
                var r = e('./parser'), i = e('./codegen'), a = t.exports = {
                        parse: function (e, t) {
                            return r.parse('(' + e + ')', t);
                        },
                        code: function (e) {
                            return i(e);
                        },
                        compiler: function (e, t) {
                            e = e.slice();
                            var n = i(t), r = e.length, o = function (t) {
                                    var i = n(a.parse(t));
                                    e[r] = '"use strict"; return (' + i.code + ');';
                                    var o = Function.apply(null, e);
                                    return i.fn = e.length > 8 ? function () {
                                        return o.apply(i, arguments);
                                    } : function (e, t, n, r, a, s, u) {
                                        return o.call(i, e, t, n, r, a, s, u);
                                    }, i;
                                };
                            return o.codegen = n, o;
                        },
                        functions: e('./functions'),
                        constants: e('./constants')
                    };
            },
            {
                './codegen': 44,
                './constants': 45,
                './functions': 46,
                './parser': 48
            }
        ],
        48: [
            function (e, t, n) {
                t.exports = function () {
                    'use strict';
                    function e(e, t) {
                        if (!e)
                            throw new Error('ASSERT: ' + t);
                    }
                    function t(e) {
                        return e >= 48 && e <= 57;
                    }
                    function n(e) {
                        return '0123456789abcdefABCDEF'.indexOf(e) >= 0;
                    }
                    function r(e) {
                        return '01234567'.indexOf(e) >= 0;
                    }
                    function i(e) {
                        return 32 === e || 9 === e || 11 === e || 12 === e || 160 === e || e >= 5760 && [
                            5760,
                            6158,
                            8192,
                            8193,
                            8194,
                            8195,
                            8196,
                            8197,
                            8198,
                            8199,
                            8200,
                            8201,
                            8202,
                            8239,
                            8287,
                            12288,
                            65279
                        ].indexOf(e) >= 0;
                    }
                    function a(e) {
                        return 10 === e || 13 === e || 8232 === e || 8233 === e;
                    }
                    function o(e) {
                        return 36 === e || 95 === e || e >= 65 && e <= 90 || e >= 97 && e <= 122 || 92 === e || e >= 128 && Me.NonAsciiIdentifierStart.test(String.fromCharCode(e));
                    }
                    function s(e) {
                        return 36 === e || 95 === e || e >= 65 && e <= 90 || e >= 97 && e <= 122 || e >= 48 && e <= 57 || 92 === e || e >= 128 && Me.NonAsciiIdentifierPart.test(String.fromCharCode(e));
                    }
                    function u(e) {
                        switch (e) {
                        case 'class':
                        case 'enum':
                        case 'export':
                        case 'extends':
                        case 'import':
                        case 'super':
                            return !0;
                        default:
                            return !1;
                        }
                    }
                    function l(e) {
                        switch (e) {
                        case 'implements':
                        case 'interface':
                        case 'package':
                        case 'private':
                        case 'protected':
                        case 'public':
                        case 'static':
                        case 'yield':
                        case 'let':
                            return !0;
                        default:
                            return !1;
                        }
                    }
                    function c(e) {
                        if (Te && l(e))
                            return !0;
                        switch (e.length) {
                        case 2:
                            return 'if' === e || 'in' === e || 'do' === e;
                        case 3:
                            return 'var' === e || 'for' === e || 'new' === e || 'try' === e || 'let' === e;
                        case 4:
                            return 'this' === e || 'else' === e || 'case' === e || 'void' === e || 'with' === e || 'enum' === e;
                        case 5:
                            return 'while' === e || 'break' === e || 'catch' === e || 'throw' === e || 'const' === e || 'yield' === e || 'class' === e || 'super' === e;
                        case 6:
                            return 'return' === e || 'typeof' === e || 'delete' === e || 'switch' === e || 'export' === e || 'import' === e;
                        case 7:
                            return 'default' === e || 'finally' === e || 'extends' === e;
                        case 8:
                            return 'function' === e || 'continue' === e || 'debugger' === e;
                        case 10:
                            return 'instanceof' === e;
                        default:
                            return !1;
                        }
                    }
                    function d() {
                        var e, t;
                        for (t = 0 === Ee; Ee < Ce;)
                            if (e = Se.charCodeAt(Ee), i(e))
                                ++Ee;
                            else {
                                if (!a(e))
                                    break;
                                ++Ee, 13 === e && 10 === Se.charCodeAt(Ee) && ++Ee, ++Ae, Le = Ee, t = !0;
                            }
                    }
                    function f(e) {
                        var t, r, i, a = 0;
                        for (r = 'u' === e ? 4 : 2, t = 0; t < r; ++t) {
                            if (!(Ee < Ce && n(Se[Ee])))
                                return '';
                            i = Se[Ee++], a = 16 * a + '0123456789abcdef'.indexOf(i.toLowerCase());
                        }
                        return String.fromCharCode(a);
                    }
                    function h() {
                        var e, t, r, i;
                        for (e = Se[Ee], t = 0, '}' === e && F({}, ke.UnexpectedToken, 'ILLEGAL'); Ee < Ce && (e = Se[Ee++], n(e));)
                            t = 16 * t + '0123456789abcdef'.indexOf(e.toLowerCase());
                        return (t > 1114111 || '}' !== e) && F({}, ke.UnexpectedToken, 'ILLEGAL'), t <= 65535 ? String.fromCharCode(t) : (r = (t - 65536 >> 10) + 55296, i = (t - 65536 & 1023) + 56320, String.fromCharCode(r, i));
                    }
                    function p() {
                        var e, t;
                        for (e = Se.charCodeAt(Ee++), t = String.fromCharCode(e), 92 === e && (117 !== Se.charCodeAt(Ee) && F({}, ke.UnexpectedToken, 'ILLEGAL'), ++Ee, e = f('u'), e && '\\' !== e && o(e.charCodeAt(0)) || F({}, ke.UnexpectedToken, 'ILLEGAL'), t = e); Ee < Ce && (e = Se.charCodeAt(Ee), s(e));)
                            ++Ee, t += String.fromCharCode(e), 92 === e && (t = t.substr(0, t.length - 1), 117 !== Se.charCodeAt(Ee) && F({}, ke.UnexpectedToken, 'ILLEGAL'), ++Ee, e = f('u'), e && '\\' !== e && s(e.charCodeAt(0)) || F({}, ke.UnexpectedToken, 'ILLEGAL'), t += e);
                        return t;
                    }
                    function g() {
                        var e, t;
                        for (e = Ee++; Ee < Ce;) {
                            if (t = Se.charCodeAt(Ee), 92 === t)
                                return Ee = e, p();
                            if (!s(t))
                                break;
                            ++Ee;
                        }
                        return Se.slice(e, Ee);
                    }
                    function m() {
                        var e, t, n;
                        return e = Ee, t = 92 === Se.charCodeAt(Ee) ? p() : g(), n = 1 === t.length ? _e.Identifier : c(t) ? _e.Keyword : 'null' === t ? _e.NullLiteral : 'true' === t || 'false' === t ? _e.BooleanLiteral : _e.Identifier, {
                            type: n,
                            value: t,
                            lineNumber: Ae,
                            lineStart: Le,
                            start: e,
                            end: Ee
                        };
                    }
                    function v() {
                        var e, t, n, r, i = Ee, a = Se.charCodeAt(Ee), o = Se[Ee];
                        switch (a) {
                        case 46:
                        case 40:
                        case 41:
                        case 59:
                        case 44:
                        case 123:
                        case 125:
                        case 91:
                        case 93:
                        case 58:
                        case 63:
                        case 126:
                            return ++Ee, Ie.tokenize && (40 === a ? Ie.openParenToken = Ie.tokens.length : 123 === a && (Ie.openCurlyToken = Ie.tokens.length)), {
                                type: _e.Punctuator,
                                value: String.fromCharCode(a),
                                lineNumber: Ae,
                                lineStart: Le,
                                start: i,
                                end: Ee
                            };
                        default:
                            if (e = Se.charCodeAt(Ee + 1), 61 === e)
                                switch (a) {
                                case 43:
                                case 45:
                                case 47:
                                case 60:
                                case 62:
                                case 94:
                                case 124:
                                case 37:
                                case 38:
                                case 42:
                                    return Ee += 2, {
                                        type: _e.Punctuator,
                                        value: String.fromCharCode(a) + String.fromCharCode(e),
                                        lineNumber: Ae,
                                        lineStart: Le,
                                        start: i,
                                        end: Ee
                                    };
                                case 33:
                                case 61:
                                    return Ee += 2, 61 === Se.charCodeAt(Ee) && ++Ee, {
                                        type: _e.Punctuator,
                                        value: Se.slice(i, Ee),
                                        lineNumber: Ae,
                                        lineStart: Le,
                                        start: i,
                                        end: Ee
                                    };
                                }
                        }
                        return r = Se.substr(Ee, 4), '>>>=' === r ? (Ee += 4, {
                            type: _e.Punctuator,
                            value: r,
                            lineNumber: Ae,
                            lineStart: Le,
                            start: i,
                            end: Ee
                        }) : (n = r.substr(0, 3), '>>>' === n || '<<=' === n || '>>=' === n ? (Ee += 3, {
                            type: _e.Punctuator,
                            value: n,
                            lineNumber: Ae,
                            lineStart: Le,
                            start: i,
                            end: Ee
                        }) : (t = n.substr(0, 2), o === t[1] && '+-<>&|'.indexOf(o) >= 0 || '=>' === t ? (Ee += 2, {
                            type: _e.Punctuator,
                            value: t,
                            lineNumber: Ae,
                            lineStart: Le,
                            start: i,
                            end: Ee
                        }) : '<>=!+-*%&|^/'.indexOf(o) >= 0 ? (++Ee, {
                            type: _e.Punctuator,
                            value: o,
                            lineNumber: Ae,
                            lineStart: Le,
                            start: i,
                            end: Ee
                        }) : void F({}, ke.UnexpectedToken, 'ILLEGAL')));
                    }
                    function y(e) {
                        for (var t = ''; Ee < Ce && n(Se[Ee]);)
                            t += Se[Ee++];
                        return 0 === t.length && F({}, ke.UnexpectedToken, 'ILLEGAL'), o(Se.charCodeAt(Ee)) && F({}, ke.UnexpectedToken, 'ILLEGAL'), {
                            type: _e.NumericLiteral,
                            value: parseInt('0x' + t, 16),
                            lineNumber: Ae,
                            lineStart: Le,
                            start: e,
                            end: Ee
                        };
                    }
                    function _(e) {
                        for (var n = '0' + Se[Ee++]; Ee < Ce && r(Se[Ee]);)
                            n += Se[Ee++];
                        return (o(Se.charCodeAt(Ee)) || t(Se.charCodeAt(Ee))) && F({}, ke.UnexpectedToken, 'ILLEGAL'), {
                            type: _e.NumericLiteral,
                            value: parseInt(n, 8),
                            octal: !0,
                            lineNumber: Ae,
                            lineStart: Le,
                            start: e,
                            end: Ee
                        };
                    }
                    function b() {
                        var n, i, a;
                        if (a = Se[Ee], e(t(a.charCodeAt(0)) || '.' === a, 'Numeric literal must start with a decimal digit or a decimal point'), i = Ee, n = '', '.' !== a) {
                            if (n = Se[Ee++], a = Se[Ee], '0' === n) {
                                if ('x' === a || 'X' === a)
                                    return ++Ee, y(i);
                                if (r(a))
                                    return _(i);
                                a && t(a.charCodeAt(0)) && F({}, ke.UnexpectedToken, 'ILLEGAL');
                            }
                            for (; t(Se.charCodeAt(Ee));)
                                n += Se[Ee++];
                            a = Se[Ee];
                        }
                        if ('.' === a) {
                            for (n += Se[Ee++]; t(Se.charCodeAt(Ee));)
                                n += Se[Ee++];
                            a = Se[Ee];
                        }
                        if ('e' === a || 'E' === a)
                            if (n += Se[Ee++], a = Se[Ee], '+' !== a && '-' !== a || (n += Se[Ee++]), t(Se.charCodeAt(Ee)))
                                for (; t(Se.charCodeAt(Ee));)
                                    n += Se[Ee++];
                            else
                                F({}, ke.UnexpectedToken, 'ILLEGAL');
                        return o(Se.charCodeAt(Ee)) && F({}, ke.UnexpectedToken, 'ILLEGAL'), {
                            type: _e.NumericLiteral,
                            value: parseFloat(n),
                            lineNumber: Ae,
                            lineStart: Le,
                            start: i,
                            end: Ee
                        };
                    }
                    function x() {
                        var t, n, i, o, s, u, l, c, d = '', p = !1;
                        for (l = Ae, c = Le, t = Se[Ee], e('\'' === t || '"' === t, 'String literal must starts with a quote'), n = Ee, ++Ee; Ee < Ce;) {
                            if (i = Se[Ee++], i === t) {
                                t = '';
                                break;
                            }
                            if ('\\' === i)
                                if (i = Se[Ee++], i && a(i.charCodeAt(0)))
                                    ++Ae, '\r' === i && '\n' === Se[Ee] && ++Ee, Le = Ee;
                                else
                                    switch (i) {
                                    case 'u':
                                    case 'x':
                                        '{' === Se[Ee] ? (++Ee, d += h()) : (u = Ee, s = f(i), s ? d += s : (Ee = u, d += i));
                                        break;
                                    case 'n':
                                        d += '\n';
                                        break;
                                    case 'r':
                                        d += '\r';
                                        break;
                                    case 't':
                                        d += '\t';
                                        break;
                                    case 'b':
                                        d += '\b';
                                        break;
                                    case 'f':
                                        d += '\f';
                                        break;
                                    case 'v':
                                        d += '\x0B';
                                        break;
                                    default:
                                        r(i) ? (o = '01234567'.indexOf(i), 0 !== o && (p = !0), Ee < Ce && r(Se[Ee]) && (p = !0, o = 8 * o + '01234567'.indexOf(Se[Ee++]), '0123'.indexOf(i) >= 0 && Ee < Ce && r(Se[Ee]) && (o = 8 * o + '01234567'.indexOf(Se[Ee++]))), d += String.fromCharCode(o)) : d += i;
                                    }
                            else {
                                if (a(i.charCodeAt(0)))
                                    break;
                                d += i;
                            }
                        }
                        return '' !== t && F({}, ke.UnexpectedToken, 'ILLEGAL'), {
                            type: _e.StringLiteral,
                            value: d,
                            octal: p,
                            startLineNumber: l,
                            startLineStart: c,
                            lineNumber: Ae,
                            lineStart: Le,
                            start: n,
                            end: Ee
                        };
                    }
                    function w(e, t) {
                        var n, r = e;
                        t.indexOf('u') >= 0 && (r = r.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (e, t) {
                            return parseInt(t, 16) <= 1114111 ? 'x' : void F({}, ke.InvalidRegExp);
                        }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, 'x'));
                        try {
                            n = new RegExp(r);
                        } catch (e) {
                            F({}, ke.InvalidRegExp);
                        }
                        try {
                            return new RegExp(e, t);
                        } catch (e) {
                            return null;
                        }
                    }
                    function k() {
                        var t, n, r, i, o;
                        for (t = Se[Ee], e('/' === t, 'Regular expression literal must start with a slash'), n = Se[Ee++], r = !1, i = !1; Ee < Ce;)
                            if (t = Se[Ee++], n += t, '\\' === t)
                                t = Se[Ee++], a(t.charCodeAt(0)) && F({}, ke.UnterminatedRegExp), n += t;
                            else if (a(t.charCodeAt(0)))
                                F({}, ke.UnterminatedRegExp);
                            else if (r)
                                ']' === t && (r = !1);
                            else {
                                if ('/' === t) {
                                    i = !0;
                                    break;
                                }
                                '[' === t && (r = !0);
                            }
                        return i || F({}, ke.UnterminatedRegExp), o = n.substr(1, n.length - 2), {
                            value: o,
                            literal: n
                        };
                    }
                    function M() {
                        var e, t, n, r;
                        for (t = '', n = ''; Ee < Ce && (e = Se[Ee], s(e.charCodeAt(0)));)
                            if (++Ee, '\\' === e && Ee < Ce)
                                if (e = Se[Ee], 'u' === e) {
                                    if (++Ee, r = Ee, e = f('u'))
                                        for (n += e, t += '\\u'; r < Ee; ++r)
                                            t += Se[r];
                                    else
                                        Ee = r, n += 'u', t += '\\u';
                                    R({}, ke.UnexpectedToken, 'ILLEGAL');
                                } else
                                    t += '\\', R({}, ke.UnexpectedToken, 'ILLEGAL');
                            else
                                n += e, t += e;
                        return {
                            value: n,
                            literal: t
                        };
                    }
                    function S() {
                        var e, t, n, r;
                        return De = null, d(), e = Ee, t = k(), n = M(), r = w(t.value, n.value), Ie.tokenize ? {
                            type: _e.RegularExpression,
                            value: r,
                            regex: {
                                pattern: t.value,
                                flags: n.value
                            },
                            lineNumber: Ae,
                            lineStart: Le,
                            start: e,
                            end: Ee
                        } : {
                            literal: t.literal + n.literal,
                            value: r,
                            regex: {
                                pattern: t.value,
                                flags: n.value
                            },
                            start: e,
                            end: Ee
                        };
                    }
                    function T() {
                        var e, t, n, r;
                        return d(), e = Ee, t = {
                            start: {
                                line: Ae,
                                column: Ee - Le
                            }
                        }, n = S(), t.end = {
                            line: Ae,
                            column: Ee - Le
                        }, Ie.tokenize || (Ie.tokens.length > 0 && (r = Ie.tokens[Ie.tokens.length - 1], r.range[0] === e && 'Punctuator' === r.type && ('/' !== r.value && '/=' !== r.value || Ie.tokens.pop())), Ie.tokens.push({
                            type: 'RegularExpression',
                            value: n.literal,
                            regex: n.regex,
                            range: [
                                e,
                                Ee
                            ],
                            loc: t
                        })), n;
                    }
                    function E(e) {
                        return e.type === _e.Identifier || e.type === _e.Keyword || e.type === _e.BooleanLiteral || e.type === _e.NullLiteral;
                    }
                    function A() {
                        var e, t;
                        if (e = Ie.tokens[Ie.tokens.length - 1], !e)
                            return T();
                        if ('Punctuator' === e.type) {
                            if (']' === e.value)
                                return v();
                            if (')' === e.value)
                                return t = Ie.tokens[Ie.openParenToken - 1], !t || 'Keyword' !== t.type || 'if' !== t.value && 'while' !== t.value && 'for' !== t.value && 'with' !== t.value ? v() : T();
                            if ('}' === e.value) {
                                if (Ie.tokens[Ie.openCurlyToken - 3] && 'Keyword' === Ie.tokens[Ie.openCurlyToken - 3].type) {
                                    if (t = Ie.tokens[Ie.openCurlyToken - 4], !t)
                                        return v();
                                } else {
                                    if (!Ie.tokens[Ie.openCurlyToken - 4] || 'Keyword' !== Ie.tokens[Ie.openCurlyToken - 4].type)
                                        return v();
                                    if (t = Ie.tokens[Ie.openCurlyToken - 5], !t)
                                        return T();
                                }
                                return v();
                            }
                            return T();
                        }
                        return 'Keyword' === e.type && 'this' !== e.value ? T() : v();
                    }
                    function L() {
                        var e;
                        return d(), Ee >= Ce ? {
                            type: _e.EOF,
                            lineNumber: Ae,
                            lineStart: Le,
                            start: Ee,
                            end: Ee
                        } : (e = Se.charCodeAt(Ee), o(e) ? m() : 40 === e || 41 === e || 59 === e ? v() : 39 === e || 34 === e ? x() : 46 === e ? t(Se.charCodeAt(Ee + 1)) ? b() : v() : t(e) ? b() : Ie.tokenize && 47 === e ? A() : v());
                    }
                    function C() {
                        var e, t, n, r;
                        return d(), e = {
                            start: {
                                line: Ae,
                                column: Ee - Le
                            }
                        }, t = L(), e.end = {
                            line: Ae,
                            column: Ee - Le
                        }, t.type !== _e.EOF && (n = Se.slice(t.start, t.end), r = {
                            type: be[t.type],
                            value: n,
                            range: [
                                t.start,
                                t.end
                            ],
                            loc: e
                        }, t.regex && (r.regex = {
                            pattern: t.regex.pattern,
                            flags: t.regex.flags
                        }), Ie.tokens.push(r)), t;
                    }
                    function D() {
                        var e;
                        return e = De, Ee = e.end, Ae = e.lineNumber, Le = e.lineStart, De = 'undefined' != typeof Ie.tokens ? C() : L(), Ee = e.end, Ae = e.lineNumber, Le = e.lineStart, e;
                    }
                    function P() {
                        var e, t, n;
                        e = Ee, t = Ae, n = Le, De = 'undefined' != typeof Ie.tokens ? C() : L(), Ee = e, Ae = t, Le = n;
                    }
                    function I() {
                        this.line = Ae, this.column = Ee - Le;
                    }
                    function N() {
                        this.start = new I(), this.end = null;
                    }
                    function O(e) {
                        e.type === _e.StringLiteral ? this.start = {
                            line: e.startLineNumber,
                            column: e.start - e.startLineStart
                        } : this.start = {
                            line: e.lineNumber,
                            column: e.start - e.lineStart
                        }, this.end = null;
                    }
                    function j() {
                        Ee = De.start, De.type === _e.StringLiteral ? (Ae = De.startLineNumber, Le = De.startLineStart) : (Ae = De.lineNumber, Le = De.lineStart), Ie.range && (this.range = [
                            Ee,
                            0
                        ]), Ie.loc && (this.loc = new N());
                    }
                    function z(e) {
                        Ie.range && (this.range = [
                            e.start,
                            0
                        ]), Ie.loc && (this.loc = new O(e));
                    }
                    function U() {
                        var e, t, n, r;
                        return e = Ee, t = Ae, n = Le, d(), r = Ae !== t, Ee = e, Ae = t, Le = n, r;
                    }
                    function F(t, n) {
                        var r, i = Array.prototype.slice.call(arguments, 2), a = n.replace(/%(\d)/g, function (t, n) {
                                return e(n < i.length, 'Message reference must be in range'), i[n];
                            });
                        throw 'number' == typeof t.lineNumber ? (r = new Error('Line ' + t.lineNumber + ': ' + a), r.index = t.start, r.lineNumber = t.lineNumber, r.column = t.start - Le + 1) : (r = new Error('Line ' + Ae + ': ' + a), r.index = Ee, r.lineNumber = Ae, r.column = Ee - Le + 1), r.description = a, r;
                    }
                    function R() {
                        try {
                            F.apply(null, arguments);
                        } catch (e) {
                            if (!Ie.errors)
                                throw e;
                            Ie.errors.push(e);
                        }
                    }
                    function q(e) {
                        if (e.type === _e.EOF && F(e, ke.UnexpectedEOS), e.type === _e.NumericLiteral && F(e, ke.UnexpectedNumber), e.type === _e.StringLiteral && F(e, ke.UnexpectedString), e.type === _e.Identifier && F(e, ke.UnexpectedIdentifier), e.type === _e.Keyword) {
                            if (u(e.value))
                                F(e, ke.UnexpectedReserved);
                            else if (Te && l(e.value))
                                return void R(e, ke.StrictReservedWord);
                            F(e, ke.UnexpectedToken, e.value);
                        }
                        F(e, ke.UnexpectedToken, e.value);
                    }
                    function B(e) {
                        var t = D();
                        t.type === _e.Punctuator && t.value === e || q(t);
                    }
                    function G(e) {
                        if (Ie.errors) {
                            var t = De;
                            t.type !== _e.Punctuator && t.value !== e ? R(t, ke.UnexpectedToken, t.value) : D();
                        } else
                            B(e);
                    }
                    function $(e) {
                        return De.type === _e.Punctuator && De.value === e;
                    }
                    function H(e) {
                        return De.type === _e.Keyword && De.value === e;
                    }
                    function Y() {
                        var e;
                        return 59 === Se.charCodeAt(Ee) || $(';') ? void D() : (e = Ae, d(), void (Ae === e && (De.type === _e.EOF || $('}') || q(De))));
                    }
                    function V() {
                        var e = [], t = new j();
                        for (B('['); !$(']');)
                            $(',') ? (D(), e.push(null)) : (e.push(le()), $(']') || B(','));
                        return D(), t.finishArrayExpression(e);
                    }
                    function W() {
                        var e, t = new j();
                        return e = D(), e.type === _e.StringLiteral || e.type === _e.NumericLiteral ? (Te && e.octal && R(e, ke.StrictOctalLiteral), t.finishLiteral(e)) : t.finishIdentifier(e.value);
                    }
                    function J() {
                        var e, t, n, r, i = new j();
                        return e = De, e.type === _e.Identifier ? (n = W(), B(':'), r = le(), i.finishProperty('init', n, r)) : e.type !== _e.EOF && e.type !== _e.Punctuator ? (t = W(), B(':'), r = le(), i.finishProperty('init', t, r)) : void q(e);
                    }
                    function X() {
                        var e, t, n, r, i = [], a = {}, o = String, s = new j();
                        for (B('{'); !$('}');)
                            e = J(), t = e.key.type === xe.Identifier ? e.key.name : o(e.key.value), r = 'init' === e.kind ? we.Data : 'get' === e.kind ? we.Get : we.Set, n = '$' + t, Object.prototype.hasOwnProperty.call(a, n) ? (a[n] === we.Data ? Te && r === we.Data ? R({}, ke.StrictDuplicateProperty) : r !== we.Data && R({}, ke.AccessorDataProperty) : r === we.Data ? R({}, ke.AccessorDataProperty) : a[n] & r && R({}, ke.AccessorGetSet), a[n] |= r) : a[n] = r, i.push(e), $('}') || G(',');
                        return B('}'), s.finishObjectExpression(i);
                    }
                    function K() {
                        var e;
                        return B('('), ++Pe.parenthesisCount, e = ce(), B(')'), e;
                    }
                    function Z() {
                        var e, t, n, r;
                        if ($('('))
                            return K();
                        if ($('['))
                            return V();
                        if ($('{'))
                            return X();
                        if (e = De.type, r = new j(), e === _e.Identifier || Ne[De.value])
                            n = r.finishIdentifier(D().value);
                        else if (e === _e.StringLiteral || e === _e.NumericLiteral)
                            Te && De.octal && R(De, ke.StrictOctalLiteral), n = r.finishLiteral(D());
                        else {
                            if (e === _e.Keyword)
                                throw new Error('Disabled.');
                            e === _e.BooleanLiteral ? (t = D(), t.value = 'true' === t.value, n = r.finishLiteral(t)) : e === _e.NullLiteral ? (t = D(), t.value = null, n = r.finishLiteral(t)) : $('/') || $('/=') ? (n = 'undefined' != typeof Ie.tokens ? r.finishLiteral(T()) : r.finishLiteral(S()), P()) : q(D());
                        }
                        return n;
                    }
                    function Q() {
                        var e = [];
                        if (B('('), !$(')'))
                            for (; Ee < Ce && (e.push(le()), !$(')'));)
                                G(',');
                        return B(')'), e;
                    }
                    function ee() {
                        var e, t = new j();
                        return e = D(), E(e) || q(e), t.finishIdentifier(e.value);
                    }
                    function te() {
                        return B('.'), ee();
                    }
                    function ne() {
                        var e;
                        return B('['), e = ce(), B(']'), e;
                    }
                    function re() {
                        var e, t, n, r, i = Pe.allowIn;
                        for (r = De, Pe.allowIn = !0, e = Z();;)
                            if ($('.'))
                                n = te(), e = new z(r).finishMemberExpression('.', e, n);
                            else if ($('('))
                                t = Q(), e = new z(r).finishCallExpression(e, t);
                            else {
                                if (!$('['))
                                    break;
                                n = ne(), e = new z(r).finishMemberExpression('[', e, n);
                            }
                        return Pe.allowIn = i, e;
                    }
                    function ie() {
                        var e = re();
                        if (De.type === _e.Punctuator && ($('++') || $('--')) && !U())
                            throw new Error('Disabled.');
                        return e;
                    }
                    function ae() {
                        var e, t, n;
                        if (De.type !== _e.Punctuator && De.type !== _e.Keyword)
                            t = ie();
                        else {
                            if ($('++') || $('--'))
                                throw new Error('Disabled.');
                            if ($('+') || $('-') || $('~') || $('!'))
                                n = De, e = D(), t = ae(), t = new z(n).finishUnaryExpression(e.value, t);
                            else {
                                if (H('delete') || H('void') || H('typeof'))
                                    throw new Error('Disabled.');
                                t = ie();
                            }
                        }
                        return t;
                    }
                    function oe(e, t) {
                        var n = 0;
                        if (e.type !== _e.Punctuator && e.type !== _e.Keyword)
                            return 0;
                        switch (e.value) {
                        case '||':
                            n = 1;
                            break;
                        case '&&':
                            n = 2;
                            break;
                        case '|':
                            n = 3;
                            break;
                        case '^':
                            n = 4;
                            break;
                        case '&':
                            n = 5;
                            break;
                        case '==':
                        case '!=':
                        case '===':
                        case '!==':
                            n = 6;
                            break;
                        case '<':
                        case '>':
                        case '<=':
                        case '>=':
                        case 'instanceof':
                            n = 7;
                            break;
                        case 'in':
                            n = t ? 7 : 0;
                            break;
                        case '<<':
                        case '>>':
                        case '>>>':
                            n = 8;
                            break;
                        case '+':
                        case '-':
                            n = 9;
                            break;
                        case '*':
                        case '/':
                        case '%':
                            n = 11;
                        }
                        return n;
                    }
                    function se() {
                        var e, t, n, r, i, a, o, s, u, l;
                        if (e = De, u = ae(), r = De, i = oe(r, Pe.allowIn), 0 === i)
                            return u;
                        for (r.prec = i, D(), t = [
                                e,
                                De
                            ], o = ae(), a = [
                                u,
                                r,
                                o
                            ]; (i = oe(De, Pe.allowIn)) > 0;) {
                            for (; a.length > 2 && i <= a[a.length - 2].prec;)
                                o = a.pop(), s = a.pop().value, u = a.pop(), t.pop(), n = new z(t[t.length - 1]).finishBinaryExpression(s, u, o), a.push(n);
                            r = D(), r.prec = i, a.push(r), t.push(De), n = ae(), a.push(n);
                        }
                        for (l = a.length - 1, n = a[l], t.pop(); l > 1;)
                            n = new z(t.pop()).finishBinaryExpression(a[l - 1].value, a[l - 2], n), l -= 2;
                        return n;
                    }
                    function ue() {
                        var e, t, n, r, i;
                        return i = De, e = se(), $('?') && (D(), t = Pe.allowIn, Pe.allowIn = !0, n = le(), Pe.allowIn = t, B(':'), r = le(), e = new z(i).finishConditionalExpression(e, n, r)), e;
                    }
                    function le() {
                        var e, t, n, r;
                        return e = Pe.parenthesisCount, r = De, t = De, n = ue();
                    }
                    function ce() {
                        var e = le();
                        if ($(','))
                            throw new Error('Disabled.');
                        return e;
                    }
                    function de(e) {
                        var t = ce();
                        return Y(), e.finishExpressionStatement(t);
                    }
                    function fe() {
                        var e, t, n = De.type;
                        if (n === _e.EOF && q(De), n === _e.Punctuator && '{' === De.value)
                            throw new Error('Disabled.');
                        if (t = new j(), n === _e.Punctuator)
                            switch (De.value) {
                            case ';':
                                throw new Error('Disabled.');
                            case '(':
                                return de(t);
                            }
                        else if (n === _e.Keyword)
                            throw new Error('Disabled.');
                        return e = ce(), Y(), t.finishExpressionStatement(e);
                    }
                    function he() {
                        if (De.type === _e.Keyword)
                            switch (De.value) {
                            case 'const':
                            case 'let':
                                throw new Error('Disabled.');
                            case 'function':
                                throw new Error('Disabled.');
                            default:
                                return fe();
                            }
                        if (De.type !== _e.EOF)
                            return fe();
                    }
                    function pe() {
                        for (var e, t, n, r, i = []; Ee < Ce && (t = De, t.type === _e.StringLiteral) && (e = he(), i.push(e), e.expression.type === xe.Literal);)
                            n = Se.slice(t.start + 1, t.end - 1), 'use strict' === n ? (Te = !0, r && R(r, ke.StrictOctalLiteral)) : !r && t.octal && (r = t);
                        for (; Ee < Ce && (e = he(), 'undefined' != typeof e);)
                            i.push(e);
                        return i;
                    }
                    function ge() {
                        var e, t;
                        return d(), P(), t = new j(), Te = !0, e = pe(), t.finishProgram(e);
                    }
                    function me() {
                        var e, t, n, r = [];
                        for (e = 0; e < Ie.tokens.length; ++e)
                            t = Ie.tokens[e], n = {
                                type: t.type,
                                value: t.value
                            }, t.regex && (n.regex = {
                                pattern: t.regex.pattern,
                                flags: t.regex.flags
                            }), Ie.range && (n.range = t.range), Ie.loc && (n.loc = t.loc), r.push(n);
                        Ie.tokens = r;
                    }
                    function ve(e, t) {
                        var n, r;
                        n = String, 'string' == typeof e || e instanceof String || (e = n(e)), Se = e, Ee = 0, Ae = Se.length > 0 ? 1 : 0, Le = 0, Ce = Se.length, De = null, Pe = {
                            allowIn: !0,
                            labelSet: {},
                            inFunctionBody: !1,
                            inIteration: !1,
                            inSwitch: !1,
                            lastCommentStart: -1
                        }, Ie = {}, t = t || {}, t.tokens = !0, Ie.tokens = [], Ie.tokenize = !0, Ie.openParenToken = -1, Ie.openCurlyToken = -1, Ie.range = 'boolean' == typeof t.range && t.range, Ie.loc = 'boolean' == typeof t.loc && t.loc, 'boolean' == typeof t.tolerant && t.tolerant && (Ie.errors = []);
                        try {
                            if (P(), De.type === _e.EOF)
                                return Ie.tokens;
                            for (D(); De.type !== _e.EOF;)
                                try {
                                    D();
                                } catch (e) {
                                    if (Ie.errors) {
                                        Ie.errors.push(e);
                                        break;
                                    }
                                    throw e;
                                }
                            me(), r = Ie.tokens, 'undefined' != typeof Ie.errors && (r.errors = Ie.errors);
                        } catch (e) {
                            throw e;
                        } finally {
                            Ie = {};
                        }
                        return r;
                    }
                    function ye(e, t) {
                        var n, r;
                        r = String, 'string' == typeof e || e instanceof String || (e = r(e)), Se = e, Ee = 0, Ae = Se.length > 0 ? 1 : 0, Le = 0, Ce = Se.length, De = null, Pe = {
                            allowIn: !0,
                            labelSet: {},
                            parenthesisCount: 0,
                            inFunctionBody: !1,
                            inIteration: !1,
                            inSwitch: !1,
                            lastCommentStart: -1
                        }, Ie = {}, 'undefined' != typeof t && (Ie.range = 'boolean' == typeof t.range && t.range, Ie.loc = 'boolean' == typeof t.loc && t.loc, Ie.loc && null !== t.source && void 0 !== t.source && (Ie.source = r(t.source)), 'boolean' == typeof t.tokens && t.tokens && (Ie.tokens = []), 'boolean' == typeof t.tolerant && t.tolerant && (Ie.errors = []));
                        try {
                            n = ge(), 'undefined' != typeof Ie.tokens && (me(), n.tokens = Ie.tokens), 'undefined' != typeof Ie.errors && (n.errors = Ie.errors);
                        } catch (e) {
                            throw e;
                        } finally {
                            Ie = {};
                        }
                        return n;
                    }
                    var _e, be, xe, we, ke, Me, Se, Te, Ee, Ae, Le, Ce, De, Pe, Ie;
                    _e = {
                        BooleanLiteral: 1,
                        EOF: 2,
                        Identifier: 3,
                        Keyword: 4,
                        NullLiteral: 5,
                        NumericLiteral: 6,
                        Punctuator: 7,
                        StringLiteral: 8,
                        RegularExpression: 9
                    }, be = {}, be[_e.BooleanLiteral] = 'Boolean', be[_e.EOF] = '<end>', be[_e.Identifier] = 'Identifier', be[_e.Keyword] = 'Keyword', be[_e.NullLiteral] = 'Null', be[_e.NumericLiteral] = 'Numeric', be[_e.Punctuator] = 'Punctuator', be[_e.StringLiteral] = 'String', be[_e.RegularExpression] = 'RegularExpression', xe = {
                        AssignmentExpression: 'AssignmentExpression',
                        ArrayExpression: 'ArrayExpression',
                        BinaryExpression: 'BinaryExpression',
                        CallExpression: 'CallExpression',
                        ConditionalExpression: 'ConditionalExpression',
                        ExpressionStatement: 'ExpressionStatement',
                        Identifier: 'Identifier',
                        Literal: 'Literal',
                        LogicalExpression: 'LogicalExpression',
                        MemberExpression: 'MemberExpression',
                        ObjectExpression: 'ObjectExpression',
                        Program: 'Program',
                        Property: 'Property',
                        UnaryExpression: 'UnaryExpression'
                    }, we = {
                        Data: 1,
                        Get: 2,
                        Set: 4
                    }, ke = {
                        UnexpectedToken: 'Unexpected token %0',
                        UnexpectedNumber: 'Unexpected number',
                        UnexpectedString: 'Unexpected string',
                        UnexpectedIdentifier: 'Unexpected identifier',
                        UnexpectedReserved: 'Unexpected reserved word',
                        UnexpectedEOS: 'Unexpected end of input',
                        NewlineAfterThrow: 'Illegal newline after throw',
                        InvalidRegExp: 'Invalid regular expression',
                        UnterminatedRegExp: 'Invalid regular expression: missing /',
                        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
                        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
                        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
                        NoCatchOrFinally: 'Missing catch or finally after try',
                        UnknownLabel: 'Undefined label \'%0\'',
                        Redeclaration: '%0 \'%1\' has already been declared',
                        IllegalContinue: 'Illegal continue statement',
                        IllegalBreak: 'Illegal break statement',
                        IllegalReturn: 'Illegal return statement',
                        StrictModeWith: 'Strict mode code may not include a with statement',
                        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
                        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
                        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
                        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
                        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
                        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
                        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
                        StrictDuplicateProperty: 'Duplicate data property in object literal not allowed in strict mode',
                        AccessorDataProperty: 'Object literal may not have data and accessor property with the same name',
                        AccessorGetSet: 'Object literal may not have multiple get/set accessors with the same name',
                        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
                        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
                        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
                        StrictReservedWord: 'Use of future reserved word in strict mode'
                    }, Me = {
                        NonAsciiIdentifierStart: new RegExp('[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]'),
                        NonAsciiIdentifierPart: new RegExp('[ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮ̀-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁ҃-҇Ҋ-ԯԱ-Ֆՙա-և֑-ׇֽֿׁׂׅׄא-תװ-ײؐ-ؚؠ-٩ٮ-ۓە-ۜ۟-۪ۨ-ۼۿܐ-݊ݍ-ޱ߀-ߵߺࠀ-࠭ࡀ-࡛ࢠ-ࢲࣤ-ॣ०-९ॱ-ঃঅ-ঌএঐও-নপ-রলশ-হ়-ৄেৈো-ৎৗড়ঢ়য়-ৣ০-ৱਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹ਼ਾ-ੂੇੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-૯ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହ଼-ୄେୈୋ-୍ୖୗଡ଼ଢ଼ୟ-ୣ୦-୯ୱஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-௯ఀ-ఃఅ-ఌఎ-ఐఒ-నప-హఽ-ౄె-ైొ-్ౕౖౘౙౠ-ౣ౦-౯ಁ-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕೖೞೠ-ೣ೦-೯ೱೲഁ-ഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-ൎൗൠ-ൣ൦-൯ൺ-ൿංඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟ෦-෯ෲෳก-ฺเ-๎๐-๙ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໟༀ༘༙༠-༩༹༵༷༾-ཇཉ-ཬཱ-྄྆-ྗྙ-ྼ࿆က-၉ၐ-ႝႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፝-፟ᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-᜔ᜠ-᜴ᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲᝳក-៓ៗៜ៝០-៩᠋-᠍᠐-᠙ᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤞᤠ-ᤫᤰ-᤻᥆-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉ᧐-᧙ᨀ-ᨛᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙ᪧ᪰-᪽ᬀ-ᭋ᭐-᭙᭫-᭳ᮀ-᯳ᰀ-᰷᱀-᱉ᱍ-ᱽ᳐-᳔᳒-ᳶ᳸᳹ᴀ-᷵᷼-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼ‌‍‿⁀⁔ⁱⁿₐ-ₜ⃐-⃥⃜⃡-⃰ℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯ⵿-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〇〡-〯〱-〵〸-〼ぁ-ゖ゙゚ゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘫꙀ-꙯ꙴ-꙽ꙿ-ꚝꚟ-꛱ꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠧꡀ-ꡳꢀ-꣄꣐-꣙꣠-ꣷꣻ꤀-꤭ꤰ-꥓ꥠ-ꥼꦀ-꧀ꧏ-꧙ꧠ-ꧾꨀ-ꨶꩀ-ꩍ꩐-꩙ꩠ-ꩶꩺ-ꫂꫛ-ꫝꫠ-ꫯꫲ-꫶ꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯪ꯬꯭꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻ︀-️︠-︭︳︴﹍-﹏ﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚ＿ａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]')
                    }, z.prototype = j.prototype = {
                        finish: function () {
                            Ie.range && (this.range[1] = Ee), Ie.loc && (this.loc.end = new I(), Ie.source && (this.loc.source = Ie.source));
                        },
                        finishArrayExpression: function (e) {
                            return this.type = xe.ArrayExpression, this.elements = e, this.finish(), this;
                        },
                        finishAssignmentExpression: function (e, t, n) {
                            return this.type = xe.AssignmentExpression, this.operator = e, this.left = t, this.right = n, this.finish(), this;
                        },
                        finishBinaryExpression: function (e, t, n) {
                            return this.type = '||' === e || '&&' === e ? xe.LogicalExpression : xe.BinaryExpression, this.operator = e, this.left = t, this.right = n, this.finish(), this;
                        },
                        finishCallExpression: function (e, t) {
                            return this.type = xe.CallExpression, this.callee = e, this.arguments = t, this.finish(), this;
                        },
                        finishConditionalExpression: function (e, t, n) {
                            return this.type = xe.ConditionalExpression, this.test = e, this.consequent = t, this.alternate = n, this.finish(), this;
                        },
                        finishExpressionStatement: function (e) {
                            return this.type = xe.ExpressionStatement, this.expression = e, this.finish(), this;
                        },
                        finishIdentifier: function (e) {
                            return this.type = xe.Identifier, this.name = e, this.finish(), this;
                        },
                        finishLiteral: function (e) {
                            return this.type = xe.Literal, this.value = e.value, this.raw = Se.slice(e.start, e.end), e.regex && ('//' == this.raw && (this.raw = '/(?:)/'), this.regex = e.regex), this.finish(), this;
                        },
                        finishMemberExpression: function (e, t, n) {
                            return this.type = xe.MemberExpression, this.computed = '[' === e, this.object = t, this.property = n, this.finish(), this;
                        },
                        finishObjectExpression: function (e) {
                            return this.type = xe.ObjectExpression, this.properties = e, this.finish(), this;
                        },
                        finishProgram: function (e) {
                            return this.type = xe.Program, this.body = e, this.finish(), this;
                        },
                        finishProperty: function (e, t, n) {
                            return this.type = xe.Property, this.key = t, this.value = n, this.kind = e, this.finish(), this;
                        },
                        finishUnaryExpression: function (e, t) {
                            return this.type = xe.UnaryExpression, this.operator = e, this.argument = t, this.prefix = !0, this.finish(), this;
                        }
                    };
                    var Ne = {
                        if: 1,
                        this: 1
                    };
                    return {
                        tokenize: ve,
                        parse: ye
                    };
                }();
            },
            {}
        ],
        49: [
            function (e, t, n) {
                function r(e) {
                    console.log('[Vega Log]', e);
                }
                function i(e) {
                    console.error('[Vega Err]', e);
                }
                function a(e, t) {
                    if (a.enable) {
                        var n = Function.prototype.bind.call(console.log, console), r = {
                                prevTime: Date.now() - o,
                                stamp: e.stamp
                            };
                        e.add && (r.add = e.add.length, r.mod = e.mod.length, r.rem = e.rem.length, r.reflow = !!e.reflow), n.apply(console, (t.push(JSON.stringify(r)), t)), o = Date.now();
                    }
                }
                var o = Date.now();
                t.exports = {
                    log: r,
                    error: i,
                    debug: (a.enable = !1, a)
                };
            },
            {}
        ],
        50: [
            function (e, t, n) {
                t.exports = {
                    path: e('./path'),
                    render: e('./render'),
                    Item: e('./util/Item'),
                    bound: e('./util/bound'),
                    Bounds: e('./util/Bounds'),
                    canvas: e('./util/canvas'),
                    Gradient: e('./util/Gradient'),
                    toJSON: e('./util/scene').toJSON,
                    fromJSON: e('./util/scene').fromJSON
                };
            },
            {
                './path': 52,
                './render': 72,
                './util/Bounds': 78,
                './util/Gradient': 80,
                './util/Item': 82,
                './util/bound': 83,
                './util/canvas': 84,
                './util/scene': 86
            }
        ],
        51: [
            function (e, t, n) {
                function r(e, t, n, r, i, o, u, l, c) {
                    var d = s.call(arguments);
                    if (a[d])
                        return a[d];
                    var f = u * (Math.PI / 180), h = Math.sin(f), p = Math.cos(f);
                    n = Math.abs(n), r = Math.abs(r);
                    var g = p * (l - e) * 0.5 + h * (c - t) * 0.5, m = p * (c - t) * 0.5 - h * (l - e) * 0.5, v = g * g / (n * n) + m * m / (r * r);
                    v > 1 && (v = Math.sqrt(v), n *= v, r *= v);
                    var y = p / n, _ = h / n, b = -h / r, x = p / r, w = y * l + _ * c, k = b * l + x * c, M = y * e + _ * t, S = b * e + x * t, T = (M - w) * (M - w) + (S - k) * (S - k), E = 1 / T - 0.25;
                    E < 0 && (E = 0);
                    var A = Math.sqrt(E);
                    o == i && (A = -A);
                    var L = 0.5 * (w + M) - A * (S - k), C = 0.5 * (k + S) + A * (M - w), D = Math.atan2(k - C, w - L), P = Math.atan2(S - C, M - L), I = P - D;
                    I < 0 && 1 === o ? I += 2 * Math.PI : I > 0 && 0 === o && (I -= 2 * Math.PI);
                    for (var N = Math.ceil(Math.abs(I / (0.5 * Math.PI + 0.001))), O = [], j = 0; j < N; ++j) {
                        var z = D + j * I / N, U = D + (j + 1) * I / N;
                        O[j] = [
                            L,
                            C,
                            z,
                            U,
                            n,
                            r,
                            h,
                            p
                        ];
                    }
                    return a[d] = O;
                }
                function i(e) {
                    var t = s.call(e);
                    if (o[t])
                        return o[t];
                    var n = e[0], r = e[1], i = e[2], a = e[3], u = e[4], l = e[5], c = e[6], d = e[7], f = d * u, h = -c * l, p = c * u, g = d * l, m = Math.cos(i), v = Math.sin(i), y = Math.cos(a), _ = Math.sin(a), b = 0.5 * (a - i), x = Math.sin(0.5 * b), w = 8 / 3 * x * x / Math.sin(b), k = n + m - w * v, M = r + v + w * m, S = n + y, T = r + _, E = S + w * _, A = T - w * y;
                    return o[t] = [
                        f * k + h * M,
                        p * k + g * M,
                        f * E + h * A,
                        p * E + g * A,
                        f * S + h * T,
                        p * S + g * T
                    ];
                }
                var a = {}, o = {}, s = [].join;
                t.exports = {
                    segments: r,
                    bezier: i,
                    cache: {
                        segments: a,
                        bezier: o
                    }
                };
            },
            {}
        ],
        52: [
            function (e, t, n) {
                t.exports = {
                    parse: e('./parse'),
                    render: e('./render')
                };
            },
            {
                './parse': 53,
                './render': 54
            }
        ],
        53: [
            function (e, t, n) {
                var r = {
                        m: 2,
                        l: 2,
                        h: 1,
                        v: 1,
                        c: 6,
                        s: 4,
                        q: 4,
                        t: 2,
                        a: 7
                    }, i = [
                        /([MLHVCSQTAZmlhvcsqtaz])/g,
                        /###/,
                        /(\d)([-+])/g,
                        /\s|,|###/
                    ];
                t.exports = function (e) {
                    var t, n, a, o, s, u, l, c, d, f, h, p = [];
                    for (t = e.slice().replace(i[0], '###$1').split(i[1]).slice(1), c = 0, f = t.length; c < f; ++c) {
                        for (n = t[c], a = n.slice(1).trim().replace(i[2], '$1###$2').split(i[3]), u = n.charAt(0), o = [u], d = 0, h = a.length; d < h; ++d)
                            (s = +a[d]) === s && o.push(s);
                        if (l = r[u.toLowerCase()], o.length - 1 > l)
                            for (d = 1, h = o.length; d < h; d += l)
                                p.push([u].concat(o.slice(d, d + l)));
                        else
                            p.push(o);
                    }
                    return p;
                };
            },
            {}
        ],
        54: [
            function (e, t, n) {
                function r(e, t, n, r) {
                    for (var a = i.segments(r[5], r[6], r[0], r[1], r[3], r[4], r[2], t, n), o = 0; o < a.length; ++o) {
                        var s = i.bezier(a[o]);
                        e.bezierCurveTo.apply(e, s);
                    }
                }
                var i = e('./arc');
                t.exports = function (e, t, n, i) {
                    var a, o, s, u, l, c = null, d = 0, f = 0, h = 0, p = 0;
                    null == n && (n = 0), null == i && (i = 0), e.beginPath();
                    for (var g = 0, m = t.length; g < m; ++g) {
                        switch (a = t[g], a[0]) {
                        case 'l':
                            d += a[1], f += a[2], e.lineTo(d + n, f + i);
                            break;
                        case 'L':
                            d = a[1], f = a[2], e.lineTo(d + n, f + i);
                            break;
                        case 'h':
                            d += a[1], e.lineTo(d + n, f + i);
                            break;
                        case 'H':
                            d = a[1], e.lineTo(d + n, f + i);
                            break;
                        case 'v':
                            f += a[1], e.lineTo(d + n, f + i);
                            break;
                        case 'V':
                            f = a[1], e.lineTo(d + n, f + i);
                            break;
                        case 'm':
                            d += a[1], f += a[2], e.moveTo(d + n, f + i);
                            break;
                        case 'M':
                            d = a[1], f = a[2], e.moveTo(d + n, f + i);
                            break;
                        case 'c':
                            o = d + a[5], s = f + a[6], h = d + a[3], p = f + a[4], e.bezierCurveTo(d + a[1] + n, f + a[2] + i, h + n, p + i, o + n, s + i), d = o, f = s;
                            break;
                        case 'C':
                            d = a[5], f = a[6], h = a[3], p = a[4], e.bezierCurveTo(a[1] + n, a[2] + i, h + n, p + i, d + n, f + i);
                            break;
                        case 's':
                            o = d + a[3], s = f + a[4], h = 2 * d - h, p = 2 * f - p, e.bezierCurveTo(h + n, p + i, d + a[1] + n, f + a[2] + i, o + n, s + i), h = d + a[1], p = f + a[2], d = o, f = s;
                            break;
                        case 'S':
                            o = a[3], s = a[4], h = 2 * d - h, p = 2 * f - p, e.bezierCurveTo(h + n, p + i, a[1] + n, a[2] + i, o + n, s + i), d = o, f = s, h = a[1], p = a[2];
                            break;
                        case 'q':
                            o = d + a[3], s = f + a[4], h = d + a[1], p = f + a[2], e.quadraticCurveTo(h + n, p + i, o + n, s + i), d = o, f = s;
                            break;
                        case 'Q':
                            o = a[3], s = a[4], e.quadraticCurveTo(a[1] + n, a[2] + i, o + n, s + i), d = o, f = s, h = a[1], p = a[2];
                            break;
                        case 't':
                            o = d + a[1], s = f + a[2], null === c[0].match(/[QqTt]/) ? (h = d, p = f) : 't' === c[0] ? (h = 2 * d - u, p = 2 * f - l) : 'q' === c[0] && (h = 2 * d - h, p = 2 * f - p), u = h, l = p, e.quadraticCurveTo(h + n, p + i, o + n, s + i), d = o, f = s, h = d + a[1], p = f + a[2];
                            break;
                        case 'T':
                            o = a[1], s = a[2], h = 2 * d - h, p = 2 * f - p, e.quadraticCurveTo(h + n, p + i, o + n, s + i), d = o, f = s;
                            break;
                        case 'a':
                            r(e, d + n, f + i, [
                                a[1],
                                a[2],
                                a[3],
                                a[4],
                                a[5],
                                a[6] + d + n,
                                a[7] + f + i
                            ]), d += a[6], f += a[7];
                            break;
                        case 'A':
                            r(e, d + n, f + i, [
                                a[1],
                                a[2],
                                a[3],
                                a[4],
                                a[5],
                                a[6] + n,
                                a[7] + i
                            ]), d = a[6], f = a[7];
                            break;
                        case 'z':
                        case 'Z':
                            e.closePath();
                        }
                        c = a;
                    }
                };
            },
            { './arc': 51 }
        ],
        55: [
            function (e, t, n) {
                function r() {
                    this._active = null, this._handlers = {};
                }
                var i = r.prototype;
                i.initialize = function (e, t, n) {
                    return this._el = e, this._obj = n || null, this.padding(t);
                }, i.element = function () {
                    return this._el;
                }, i.padding = function (e) {
                    return this._padding = e || {
                        top: 0,
                        left: 0,
                        bottom: 0,
                        right: 0
                    }, this;
                }, i.scene = function (e) {
                    return arguments.length ? (this._scene = e, this) : this._scene;
                }, i.on = function () {
                }, i.off = function () {
                }, i.handlers = function () {
                    var e, t = this._handlers, n = [];
                    for (e in t)
                        n.push.apply(n, t[e]);
                    return n;
                }, i.eventName = function (e) {
                    var t = e.indexOf('.');
                    return t < 0 ? e : e.slice(0, t);
                }, t.exports = r;
            },
            {}
        ],
        56: [
            function (e, t, n) {
                function r() {
                    this._el = null, this._bgcolor = null;
                }
                var i = r.prototype;
                i.initialize = function (e, t, n, r) {
                    return this._el = e, this.resize(t, n, r);
                }, i.element = function () {
                    return this._el;
                }, i.scene = function () {
                    return this._el && this._el.firstChild;
                }, i.background = function (e) {
                    return 0 === arguments.length ? this._bgcolor : (this._bgcolor = e, this);
                }, i.resize = function (e, t, n) {
                    return this._width = e, this._height = t, this._padding = n || {
                        top: 0,
                        left: 0,
                        bottom: 0,
                        right: 0
                    }, this;
                }, i.render = function () {
                    return this;
                }, t.exports = r;
            },
            {}
        ],
        57: [
            function (e, t, n) {
                function r() {
                    s.call(this), this._down = null, this._touch = null, this._first = !0;
                }
                function i(e, t, n) {
                    return function (r) {
                        var i = this._active, a = this.pickEvent(r);
                        a === i ? this.fire(e, r) : (this.fire(n, r), this._active = a, this.fire(t, r), this.fire(e, r));
                    };
                }
                function a(e) {
                    return function (t) {
                        this.fire(e, t), this._active = null;
                    };
                }
                var o = e('../../util/dom'), s = e('../Handler'), u = e('./marks'), l = s.prototype, c = r.prototype = Object.create(l);
                c.constructor = r, c.initialize = function (e, t, n) {
                    var r = this._canvas = o.find(e, 'canvas');
                    if (r) {
                        var i = this;
                        this.events.forEach(function (e) {
                            r.addEventListener(e, function (t) {
                                c[e] ? c[e].call(i, t) : i.fire(e, t);
                            });
                        });
                    }
                    return l.initialize.call(this, e, t, n);
                }, c.canvas = function () {
                    return this._canvas;
                }, c.context = function () {
                    return this._canvas.getContext('2d');
                }, c.events = [
                    'keydown',
                    'keypress',
                    'keyup',
                    'dragenter',
                    'dragleave',
                    'dragover',
                    'mousedown',
                    'mouseup',
                    'mousemove',
                    'mouseout',
                    'mouseover',
                    'click',
                    'dblclick',
                    'wheel',
                    'mousewheel',
                    'touchstart',
                    'touchmove',
                    'touchend'
                ], c.DOMMouseScroll = function (e) {
                    this.fire('mousewheel', e);
                }, c.mousemove = i('mousemove', 'mouseover', 'mouseout'), c.dragover = i('dragover', 'dragenter', 'dragleave'), c.mouseout = a('mouseout'), c.dragleave = a('dragleave'), c.mousedown = function (e) {
                    this._down = this._active, this.fire('mousedown', e);
                }, c.click = function (e) {
                    this._down === this._active && (this.fire('click', e), this._down = null);
                }, c.touchstart = function (e) {
                    this._touch = this.pickEvent(e.changedTouches[0]), this._first && (this._active = this._touch, this._first = !1), this.fire('touchstart', e, !0);
                }, c.touchmove = function (e) {
                    this.fire('touchmove', e, !0);
                }, c.touchend = function (e) {
                    this.fire('touchend', e, !0), this._touch = null;
                }, c.fire = function (e, t, n) {
                    var r, i, a = n ? this._touch : this._active, o = this._handlers[e];
                    if (o)
                        for (t.vegaType = e, r = 0, i = o.length; r < i; ++r)
                            o[r].handler.call(this._obj, t, a);
                }, c.on = function (e, t) {
                    var n = this.eventName(e), r = this._handlers;
                    return (r[n] || (r[n] = [])).push({
                        type: e,
                        handler: t
                    }), this;
                }, c.off = function (e, t) {
                    var n, r = this.eventName(e), i = this._handlers[r];
                    if (i) {
                        for (n = i.length; --n >= 0;)
                            i[n].type === e && (t && i[n].handler !== t || i.splice(n, 1));
                        return this;
                    }
                }, c.pickEvent = function (e) {
                    var t, n, r = this._canvas.getBoundingClientRect(), i = this._padding;
                    return this.pick(this._scene, t = e.clientX - r.left, n = e.clientY - r.top, t - i.left, n - i.top);
                }, c.pick = function (e, t, n, r, i) {
                    var a = this.context(), o = u[e.marktype];
                    return o.pick.call(this, a, e, t, n, r, i);
                }, t.exports = r;
            },
            {
                '../../util/dom': 85,
                '../Handler': 55,
                './marks': 64
            }
        ],
        58: [
            function (e, t, n) {
                function r(e) {
                    c.call(this), this._loader = new u(e);
                }
                function i(e, t) {
                    if (!t)
                        return null;
                    var n, r, i, o, u, l = new s();
                    for (n = 0, r = t.length; n < r; ++n)
                        i = t[n], o = i.mark, u = o.group, i = d[o.marktype].nested ? o : i, l.union(a(i.bounds, u)), i['bounds:prev'] && l.union(a(i['bounds:prev'], u));
                    return l.round(), e.beginPath(), e.rect(l.x1, l.y1, l.width(), l.height()), e.clip(), l;
                }
                function a(e, t) {
                    if (null == t)
                        return e;
                    for (var n = e.clone(); null != t; t = t.mark.group)
                        n.translate(t.x || 0, t.y || 0);
                    return n;
                }
                var o = e('../../util/dom'), s = e('../../util/Bounds'), u = e('../../util/ImageLoader'), l = e('../../util/canvas'), c = e('../Renderer'), d = e('./marks');
                r.RETINA = !0;
                var f = c.prototype, h = r.prototype = Object.create(f);
                h.constructor = r, h.initialize = function (e, t, n, r) {
                    return this._canvas = l.instance(t, n), e && (o.clear(e, 0).appendChild(this._canvas), this._canvas.setAttribute('class', 'marks')), f.initialize.call(this, e, t, n, r);
                }, h.resize = function (e, t, n) {
                    return f.resize.call(this, e, t, n), l.resize(this._canvas, this._width, this._height, this._padding, r.RETINA), this;
                }, h.canvas = function () {
                    return this._canvas;
                }, h.context = function () {
                    return this._canvas ? this._canvas.getContext('2d') : null;
                }, h.pendingImages = function () {
                    return this._loader.pending();
                }, h.render = function (e, t) {
                    var n, r = this.context(), a = this._padding, o = this._width + a.left + a.right, s = this._height + a.top + a.bottom;
                    return this._scene = e, r.save(), n = i(r, t), this.clear(-a.left, -a.top, o, s), this.draw(r, e, n), r.restore(), this._scene = null, this;
                }, h.draw = function (e, t, n) {
                    var r = d[t.marktype];
                    r.draw.call(this, e, t, n);
                }, h.clear = function (e, t, n, r) {
                    var i = this.context();
                    i.clearRect(e, t, n, r), null != this._bgcolor && (i.fillStyle = this._bgcolor, i.fillRect(e, t, n, r));
                }, h.loadImage = function (e) {
                    var t = this, n = this._scene;
                    return this._loader.loadImage(e, function () {
                        t.renderAsync(n);
                    });
                }, h.renderAsync = function (e) {
                    var t = this;
                    t._async_id && clearTimeout(t._async_id), t._async_id = setTimeout(function () {
                        t.render(e), delete t._async_id;
                    }, 10);
                }, t.exports = r;
            },
            {
                '../../util/Bounds': 78,
                '../../util/ImageLoader': 81,
                '../../util/canvas': 84,
                '../../util/dom': 85,
                '../Renderer': 56,
                './marks': 64
            }
        ],
        59: [
            function (e, t, n) {
                t.exports = {
                    Handler: e('./CanvasHandler'),
                    Renderer: e('./CanvasRenderer')
                };
            },
            {
                './CanvasHandler': 57,
                './CanvasRenderer': 58
            }
        ],
        60: [
            function (e, t, n) {
                function r(e, t) {
                    var n = t.x || 0, r = t.y || 0, i = t.innerRadius || 0, o = t.outerRadius || 0, s = (t.startAngle || 0) - a, u = (t.endAngle || 0) - a;
                    e.beginPath(), 0 === i ? e.moveTo(n, r) : e.arc(n, r, i, s, u, 0), e.arc(n, r, o, u, s, 1), e.closePath();
                }
                var i = e('./util'), a = Math.PI / 2;
                t.exports = {
                    draw: i.drawAll(r),
                    pick: i.pickPath(r)
                };
            },
            { './util': 71 }
        ],
        61: [
            function (e, t, n) {
                function r(e, t) {
                    var n = t[0], r = n.pathCache || (n.pathCache = o(u(t)));
                    s(e, r);
                }
                function i(e, t, n, r, i, a) {
                    var o = t.items, s = t.bounds;
                    return !o || !o.length || s && !s.contains(i, a) ? null : (null != e.pixelratio && 1 !== e.pixelratio && (n *= e.pixelratio, r *= e.pixelratio), l(e, o, n, r) ? o[0] : null);
                }
                var a = e('./util'), o = e('../../../path/parse'), s = e('../../../path/render'), u = e('../../../util/svg').path.area, l = a.testPath(r);
                t.exports = {
                    draw: a.drawOne(r),
                    pick: i,
                    nested: !0
                };
            },
            {
                '../../../path/parse': 53,
                '../../../path/render': 54,
                '../../../util/svg': 87,
                './util': 71
            }
        ],
        62: [
            function (e, t, n) {
                function r(e, t, n) {
                    if (t.items && t.items.length) {
                        var r, i, s, u, l, c, d, f, h, p, g, m, v, y = t.items, _ = this;
                        for (p = 0, g = y.length; p < g; ++p) {
                            for (r = y[p], s = r.axisItems || o, i = r.items || o, u = r.legendItems || o, l = r.x || 0, c = r.y || 0, d = r.width || 0, f = r.height || 0, (r.stroke || r.fill) && (h = null == r.opacity ? 1 : r.opacity, h > 0 && (r.fill && a.fill(e, r, h) && e.fillRect(l, c, d, f), r.stroke && a.stroke(e, r, h) && e.strokeRect(l, c, d, f))), e.save(), e.translate(l, c), r.clip && (e.beginPath(), e.rect(0, 0, d, f), e.clip()), n && n.translate(-l, -c), m = 0, v = s.length; m < v; ++m)
                                'back' === s[m].layer && _.draw(e, s[m], n);
                            for (m = 0, v = i.length; m < v; ++m)
                                _.draw(e, i[m], n);
                            for (m = 0, v = s.length; m < v; ++m)
                                'back' !== s[m].layer && _.draw(e, s[m], n);
                            for (m = 0, v = u.length; m < v; ++m)
                                _.draw(e, u[m], n);
                            n && n.translate(l, c), e.restore();
                        }
                    }
                }
                function i(e, t, n, r, i, a) {
                    if (t.bounds && !t.bounds.contains(i, a))
                        return null;
                    var s, u, l, c, d, f, h, p, g, m, v, y = t.items || o;
                    for (g = y.length; --g >= 0;)
                        if (u = y[g], v = u.bounds, !v || v.contains(i, a)) {
                            for (l = u.axisItems || o, c = u.items || o, d = u.legendItems || o, h = u.x || 0, p = u.y || 0, e.save(), e.translate(h, p), h = i - h, p = a - p, m = d.length; --m >= 0;)
                                if (s = d[m], s.interactive !== !1 && (f = this.pick(s, n, r, h, p)))
                                    return e.restore(), f;
                            for (m = l.length; --m >= 0;)
                                if (s = l[m], s.interactive !== !1 && 'back' !== s.layer && (f = this.pick(s, n, r, h, p)))
                                    return e.restore(), f;
                            for (m = c.length; --m >= 0;)
                                if (s = c[m], s.interactive !== !1 && (f = this.pick(s, n, r, h, p)))
                                    return e.restore(), f;
                            for (m = l.length; --m >= 0;)
                                if (s = l[m], s.interative !== !1 && 'back' === s.layer && (f = this.pick(s, n, r, h, p)))
                                    return e.restore(), f;
                            if (e.restore(), t.interactive !== !1 && (u.fill || u.stroke) && h >= 0 && h <= u.width && p >= 0 && p <= u.height)
                                return u;
                        }
                    return null;
                }
                var a = e('./util'), o = [];
                t.exports = {
                    draw: r,
                    pick: i
                };
            },
            { './util': 71 }
        ],
        63: [
            function (e, t, n) {
                function r(e, t, n) {
                    if (t.items && t.items.length)
                        for (var r, i = this, a = t.items, o = 0, s = a.length; o < s; ++o)
                            if (r = a[o], !n || n.intersects(r.bounds)) {
                                r.image && r.image.url === r.url || (r.image = i.loadImage(r.url), r.image.url = r.url);
                                var u, l = r.x || 0, c = r.y || 0, d = r.width || r.image && r.image.width || 0, f = r.height || r.image && r.image.height || 0;
                                l -= 'center' === r.align ? d / 2 : 'right' === r.align ? d : 0, c -= 'middle' === r.baseline ? f / 2 : 'bottom' === r.baseline ? f : 0, r.image.loaded && (e.globalAlpha = null != (u = r.opacity) ? u : 1, e.drawImage(r.image, l, c, d, f));
                            }
                }
                var i = e('./util');
                t.exports = {
                    draw: r,
                    pick: i.pick()
                };
            },
            { './util': 71 }
        ],
        64: [
            function (e, t, n) {
                t.exports = {
                    arc: e('./arc'),
                    area: e('./area'),
                    group: e('./group'),
                    image: e('./image'),
                    line: e('./line'),
                    path: e('./path'),
                    rect: e('./rect'),
                    rule: e('./rule'),
                    symbol: e('./symbol'),
                    text: e('./text')
                };
            },
            {
                './arc': 60,
                './area': 61,
                './group': 62,
                './image': 63,
                './line': 65,
                './path': 66,
                './rect': 67,
                './rule': 68,
                './symbol': 69,
                './text': 70
            }
        ],
        65: [
            function (e, t, n) {
                function r(e, t) {
                    var n = t[0], r = n.pathCache || (n.pathCache = o(u(t)));
                    s(e, r);
                }
                function i(e, t, n, r, i, a) {
                    var o = t.items, s = t.bounds;
                    return !o || !o.length || s && !s.contains(i, a) ? null : (null != e.pixelratio && 1 !== e.pixelratio && (n *= e.pixelratio, r *= e.pixelratio), l(e, o, n, r) ? o[0] : null);
                }
                var a = e('./util'), o = e('../../../path/parse'), s = e('../../../path/render'), u = e('../../../util/svg').path.line, l = a.testPath(r, !1);
                t.exports = {
                    draw: a.drawOne(r),
                    pick: i,
                    nested: !0
                };
            },
            {
                '../../../path/parse': 53,
                '../../../path/render': 54,
                '../../../util/svg': 87,
                './util': 71
            }
        ],
        66: [
            function (e, t, n) {
                function r(e, t) {
                    if (null == t.path)
                        return !0;
                    var n = t.pathCache || (t.pathCache = a(t.path));
                    o(e, n, t.x, t.y);
                }
                var i = e('./util'), a = e('../../../path/parse'), o = e('../../../path/render');
                t.exports = {
                    draw: i.drawAll(r),
                    pick: i.pickPath(r)
                };
            },
            {
                '../../../path/parse': 53,
                '../../../path/render': 54,
                './util': 71
            }
        ],
        67: [
            function (e, t, n) {
                function r(e, t, n) {
                    if (t.items && t.items.length)
                        for (var r, a, o, s, u, l, c = t.items, d = 0, f = c.length; d < f; ++d)
                            r = c[d], n && !n.intersects(r.bounds) || (a = null == r.opacity ? 1 : r.opacity, 0 !== a && (o = r.x || 0, s = r.y || 0, u = r.width || 0, l = r.height || 0, r.fill && i.fill(e, r, a) && e.fillRect(o, s, u, l), r.stroke && i.stroke(e, r, a) && e.strokeRect(o, s, u, l)));
                }
                var i = e('./util');
                t.exports = {
                    draw: r,
                    pick: i.pick()
                };
            },
            { './util': 71 }
        ],
        68: [
            function (e, t, n) {
                function r(e, t, n) {
                    if (t.items && t.items.length)
                        for (var r, i, a, s, u, l, c = t.items, d = 0, f = c.length; d < f; ++d)
                            r = c[d], n && !n.intersects(r.bounds) || (i = null == r.opacity ? 1 : r.opacity, 0 !== i && (a = r.x || 0, s = r.y || 0, u = null != r.x2 ? r.x2 : a, l = null != r.y2 ? r.y2 : s, r.stroke && o.stroke(e, r, i) && (e.beginPath(), e.moveTo(a, s), e.lineTo(u, l), e.stroke())));
                }
                function i(e, t) {
                    var n = t.x || 0, r = t.y || 0, i = null != t.x2 ? t.x2 : n, a = null != t.y2 ? t.y2 : r, o = t.strokeWidth, s = t.strokeCap;
                    e.lineWidth = null != o ? o : 1, e.lineCap = null != s ? s : 'butt', e.beginPath(), e.moveTo(n, r), e.lineTo(i, a);
                }
                function a(e, t, n, r) {
                    return !!e.isPointInStroke && (i(e, t), e.isPointInStroke(n, r));
                }
                var o = e('./util');
                t.exports = {
                    draw: r,
                    pick: o.pick(a)
                };
            },
            { './util': 71 }
        ],
        69: [
            function (e, t, n) {
                function r(e, t) {
                    var n, r, a, c, d = null != t.size ? t.size : 100, f = t.x, h = t.y;
                    if (e.beginPath(), null == t.shape || 'circle' === t.shape)
                        return n = Math.sqrt(d / Math.PI), e.arc(f, h, n, 0, 2 * Math.PI, 0), void e.closePath();
                    switch (t.shape) {
                    case 'cross':
                        n = Math.sqrt(d / 5) / 2, r = 3 * n, e.moveTo(f - r, h - n), e.lineTo(f - n, h - n), e.lineTo(f - n, h - r), e.lineTo(f + n, h - r), e.lineTo(f + n, h - n), e.lineTo(f + r, h - n), e.lineTo(f + r, h + n), e.lineTo(f + n, h + n), e.lineTo(f + n, h + r), e.lineTo(f - n, h + r), e.lineTo(f - n, h + n), e.lineTo(f - r, h + n);
                        break;
                    case 'diamond':
                        c = Math.sqrt(d / (2 * l)), a = c * l, e.moveTo(f, h - c), e.lineTo(f + a, h), e.lineTo(f, h + c), e.lineTo(f - a, h);
                        break;
                    case 'square':
                        r = Math.sqrt(d), n = r / 2, e.rect(f - n, h - n, r, r);
                        break;
                    case 'triangle-down':
                        a = Math.sqrt(d / u), c = a * u / 2, e.moveTo(f, h + c), e.lineTo(f + a, h - c), e.lineTo(f - a, h - c);
                        break;
                    case 'triangle-up':
                        a = Math.sqrt(d / u), c = a * u / 2, e.moveTo(f, h - c), e.lineTo(f + a, h + c), e.lineTo(f - a, h + c);
                        break;
                    default:
                        var p = i(o(t.shape), d);
                        s(e, p, f, h);
                    }
                    e.closePath();
                }
                function i(e, t) {
                    var n, r, i, a, o, s = Math.sqrt(t);
                    for (n = 0, r = e.length; n < r; ++n)
                        for (o = e[n], i = 1, a = o.length; i < a; ++i)
                            o[i] *= s;
                    return e;
                }
                var a = e('./util'), o = e('../../../path/parse'), s = e('../../../path/render'), u = Math.sqrt(3), l = Math.tan(30 * Math.PI / 180);
                t.exports = {
                    draw: a.drawAll(r),
                    pick: a.pickPath(r)
                };
            },
            {
                '../../../path/parse': 53,
                '../../../path/render': 54,
                './util': 71
            }
        ],
        70: [
            function (e, t, n) {
                function r(e, t, n) {
                    if (t.items && t.items.length)
                        for (var r, i, a, o, l, c, d, f = t.items, h = 0, p = f.length; h < p; ++h)
                            r = f[h], n && !n.intersects(r.bounds) || (d = s.value(r.text), d && (i = null == r.opacity ? 1 : r.opacity, 0 !== i && (e.font = s.font(r), e.textAlign = r.align || 'left', a = r.x || 0, o = r.y || 0, (l = r.radius) && (c = (r.theta || 0) - Math.PI / 2, a += l * Math.cos(c), o += l * Math.sin(c)), r.angle && (e.save(), e.translate(a, o), e.rotate(r.angle * Math.PI / 180), a = o = 0), a += r.dx || 0, o += (r.dy || 0) + s.offset(r), r.fill && u.fill(e, r, i) && e.fillText(d, a, o), r.stroke && u.stroke(e, r, i) && e.strokeText(d, a, o), r.angle && e.restore())));
                }
                function i(e, t, n, r, i, a) {
                    if (t.fontSize <= 0)
                        return !1;
                    if (!t.angle)
                        return !0;
                    var s = o(t, l, !0), u = -t.angle * Math.PI / 180, c = Math.cos(u), d = Math.sin(u), f = t.x, h = t.y, p = c * i - d * a + (f - f * c + h * d), g = d * i + c * a + (h - f * d - h * c);
                    return s.contains(p, g);
                }
                var a = e('../../../util/Bounds'), o = e('../../../util/bound').text, s = e('../../../util/text'), u = e('./util'), l = new a();
                t.exports = {
                    draw: r,
                    pick: u.pick(i)
                };
            },
            {
                '../../../util/Bounds': 78,
                '../../../util/bound': 83,
                '../../../util/text': 88,
                './util': 71
            }
        ],
        71: [
            function (e, t, n) {
                function r(e, t, n, r) {
                    if (!e(t, r)) {
                        var i = null == n.opacity ? 1 : n.opacity;
                        0 !== i && (n.fill && c(t, n, i) && t.fill(), n.stroke && d(t, n, i) && t.stroke());
                    }
                }
                function i(e, t, n, i) {
                    var a, o, s;
                    for (a = 0, o = n.items.length; a < o; ++a)
                        s = n.items[a], i && !i.intersects(s.bounds) || r(e, t, s, s);
                }
                function a(e) {
                    return function (t, n, r) {
                        i(e, t, n, r);
                    };
                }
                function o(e) {
                    return function (t, n, i) {
                        n.items.length && (i && !i.intersects(n.bounds) || r(e, t, n.items[0], n.items));
                    };
                }
                function s(e) {
                    return e || (e = p), function (t, n, r, i, a, o) {
                        if (!n.items.length)
                            return null;
                        var s, u, l;
                        for (null != t.pixelratio && 1 !== t.pixelratio && (r *= t.pixelratio, i *= t.pixelratio), l = n.items.length; --l >= 0;)
                            if (s = n.items[l], u = s.bounds, (!u || u.contains(a, o)) && u && e(t, s, r, i, a, o))
                                return s;
                        return null;
                    };
                }
                function u(e, t) {
                    return function (n, r, i, a) {
                        var o, s, u = Array.isArray(r) ? r[0] : r, l = null == t ? u.fill : t, c = u.stroke && n.isPointInStroke;
                        return c && (o = u.strokeWidth, s = u.strokeCap, n.lineWidth = null != o ? o : 1, n.lineCap = null != s ? s : 'butt'), !e(n, r) && (l && n.isPointInPath(i, a) || c && n.isPointInStroke(i, a));
                    };
                }
                function l(e) {
                    return s(u(e));
                }
                function c(e, t, n) {
                    return n *= null == t.fillOpacity ? 1 : t.fillOpacity, n > 0 && (e.globalAlpha = n, e.fillStyle = f(e, t, t.fill), !0);
                }
                function d(e, t, n) {
                    var r, i = null != (i = t.strokeWidth) ? i : 1;
                    return !(i <= 0) && (n *= null == t.strokeOpacity ? 1 : t.strokeOpacity, n > 0 && (e.globalAlpha = n, e.strokeStyle = f(e, t, t.stroke), e.lineWidth = i, e.lineCap = null != (r = t.strokeCap) ? r : 'butt', e.vgLineDash(t.strokeDash || null), e.vgLineDashOffset(t.strokeDashOffset || 0), !0));
                }
                function f(e, t, n) {
                    return n.id ? h(e, n, t.bounds) : n;
                }
                function h(e, t, n) {
                    var r, i, a = n.width(), o = n.height(), s = n.x1 + t.x1 * a, u = n.y1 + t.y1 * o, l = n.x1 + t.x2 * a, c = n.y1 + t.y2 * o, d = e.createLinearGradient(s, u, l, c), f = t.stops;
                    for (r = 0, i = f.length; r < i; ++r)
                        d.addColorStop(f[r].offset, f[r].color);
                    return d;
                }
                var p = function () {
                    return !0;
                };
                t.exports = {
                    drawOne: o,
                    drawAll: a,
                    pick: s,
                    pickPath: l,
                    testPath: u,
                    stroke: d,
                    fill: c,
                    color: f,
                    gradient: h
                };
            },
            {}
        ],
        72: [
            function (e, t, n) {
                t.exports = {
                    canvas: e('./canvas'),
                    svg: e('./svg')
                };
            },
            {
                './canvas': 59,
                './svg': 76
            }
        ],
        73: [
            function (e, t, n) {
                function r() {
                    a.call(this);
                }
                var i = e('../../util/dom'), a = e('../Handler'), o = a.prototype, s = r.prototype = Object.create(o);
                s.constructor = r, s.initialize = function (e, t, n) {
                    return this._svg = i.find(e, 'svg'), o.initialize.call(this, e, t, n);
                }, s.svg = function () {
                    return this._svg;
                }, s.listener = function (e) {
                    var t = this;
                    return function (n) {
                        var r = n.target, i = r.__data__;
                        n.vegaType = n.type, i = Array.isArray(i) ? i[0] : i, e.call(t._obj, n, i);
                    };
                }, s.on = function (e, t) {
                    var n = this.eventName(e), r = this._svg, i = this._handlers, a = {
                            type: e,
                            handler: t,
                            listener: this.listener(t)
                        };
                    return (i[n] || (i[n] = [])).push(a), r.addEventListener(n, a.listener), this;
                }, s.off = function (e, t) {
                    var n, r = this.eventName(e), i = this._svg, a = this._handlers[r];
                    if (a) {
                        for (n = a.length; --n >= 0;)
                            (a[n].type === e && !t || a[n].handler === t) && (i.removeEventListener(r, a[n].listener), a.splice(n, 1));
                        return this;
                    }
                }, t.exports = r;
            },
            {
                '../../util/dom': 85,
                '../Handler': 55
            }
        ],
        74: [
            function (e, t, n) {
                function r(e) {
                    d.call(this), this._loader = new c(e), this._dirtyID = 0;
                }
                function i(e, t, n) {
                    var r, i, a;
                    for (e = h.child(e, n, 'linearGradient', g), e.setAttribute('id', t.id), e.setAttribute('x1', t.x1), e.setAttribute('x2', t.x2), e.setAttribute('y1', t.y1), e.setAttribute('y2', t.y2), r = 0, i = t.stops.length; r < i; ++r)
                        a = h.child(e, r, 'stop', g), a.setAttribute('offset', t.stops[r].offset), a.setAttribute('stop-color', t.stops[r].color);
                    h.clear(e, r);
                }
                function a(e, t, n) {
                    var r;
                    e = h.child(e, n, 'clipPath', g), e.setAttribute('id', t.id), r = h.child(e, 0, 'rect', g), r.setAttribute('x', 0), r.setAttribute('y', 0), r.setAttribute('width', t.width), r.setAttribute('height', t.height);
                }
                function o(e, t) {
                    for (; e && e.dirty !== t; e = e.mark.group) {
                        if (e.dirty = t, !e.mark || e.mark.dirty === t)
                            return;
                        e.mark.dirty = t;
                    }
                }
                function s(e, t, n, r, i) {
                    var a = h.child(e, r, t.tag, g, null, i);
                    if (a.__data__ = n, a.__values__ = { fill: 'default' }, 'g' === t.tag) {
                        var o = h.child(a, 0, 'rect', g, 'background');
                        o.__data__ = n;
                    }
                    return n._svg = a;
                }
                function u(e, t, n) {
                    t !== b[e] && (null != t ? n ? _.setAttributeNS(n, e, t) : _.setAttribute(e, t) : n ? _.removeAttributeNS(n, e) : _.removeAttribute(e), b[e] = t);
                }
                function l() {
                    return 'undefined' != typeof window ? window.location.href : '';
                }
                var c = e('../../util/ImageLoader'), d = e('../Renderer'), f = e('../../util/text'), h = e('../../util/dom'), p = e('../../util/svg'), g = p.metadata.xmlns, m = e('./marks'), v = d.prototype, y = r.prototype = Object.create(v);
                y.constructor = r, y.initialize = function (e, t, n, r) {
                    return e && (this._svg = h.child(e, 0, 'svg', g, 'marks'), h.clear(e, 1), this._root = h.child(this._svg, 0, 'g', g), h.clear(this._svg, 1)), this._defs = {
                        clip_id: 1,
                        gradient: {},
                        clipping: {}
                    }, this.background(this._bgcolor), v.initialize.call(this, e, t, n, r);
                }, y.background = function (e) {
                    return arguments.length && this._svg && this._svg.style.setProperty('background-color', e), v.background.apply(this, arguments);
                }, y.resize = function (e, t, n) {
                    if (v.resize.call(this, e, t, n), this._svg) {
                        var r = this._width, i = this._height, a = this._padding;
                        this._svg.setAttribute('width', r + a.left + a.right), this._svg.setAttribute('height', i + a.top + a.bottom), this._root.setAttribute('transform', 'translate(' + a.left + ',' + a.top + ')');
                    }
                    return this;
                }, y.svg = function () {
                    if (!this._svg)
                        return null;
                    var e = {
                        class: 'marks',
                        width: this._width + this._padding.left + this._padding.right,
                        height: this._height + this._padding.top + this._padding.bottom
                    };
                    for (var t in p.metadata)
                        e[t] = p.metadata[t];
                    return h.openTag('svg', e) + this._svg.innerHTML + h.closeTag('svg');
                }, y.imageURL = function (e) {
                    return this._loader.imageURL(e);
                }, y.render = function (e, t) {
                    return this._dirtyCheck(t) && (this._dirtyAll && this._resetDefs(), this.draw(this._root, e, -1), h.clear(this._root, 1)), this.updateDefs(), this;
                }, y.draw = function (e, t, n) {
                    this.drawMark(e, t, n, m[t.marktype]);
                }, y.updateDefs = function () {
                    var e, t = this._svg, n = this._defs, r = n.el, o = 0;
                    for (e in n.gradient)
                        r || (r = n.el = h.child(t, 0, 'defs', g)), i(r, n.gradient[e], o++);
                    for (e in n.clipping)
                        r || (r = n.el = h.child(t, 0, 'defs', g)), a(r, n.clipping[e], o++);
                    r && (0 === o ? (t.removeChild(r), n.el = null) : h.clear(r, o));
                }, y._resetDefs = function () {
                    var e = this._defs;
                    e.clip_id = 1, e.gradient = {}, e.clipping = {};
                }, y.isDirty = function (e) {
                    return this._dirtyAll || e.dirty === this._dirtyID;
                }, y._dirtyCheck = function (e) {
                    if (this._dirtyAll = !0, !e)
                        return !0;
                    var t, n, r, i, a, s, u, l = ++this._dirtyID;
                    for (a = 0, s = e.length; a < s; ++a)
                        t = e[a], n = t.mark, n.marktype !== r && (r = n.marktype, i = m[r]), 'exit' !== t.status ? (t = i.nest ? n.items[0] : t, t._update !== l && (t._svg ? this._update(i, t._svg, t) : (this._dirtyAll = !1, o(t, l)), t._update = l)) : t._svg && (i.nest && t.mark.items.length ? (this._update(i, t._svg, t.mark.items[0]), u = t.mark.items[0], u._svg = t._svg, u._update = l) : h.remove(t._svg), t._svg = null);
                    return !this._dirtyAll;
                }, y.drawMark = function (e, t, n, r) {
                    if (this.isDirty(t)) {
                        var i, a, o, u, l, c, d = r.nest ? t.items && t.items.length ? [t.items[0]] : [] : t.items || [], f = t.interactive === !1 ? 'none' : null, p = 'g' === r.tag, m = h.cssClass(t);
                        for (i = h.child(e, n + 1, 'g', g, m), i.setAttribute('class', m), t._svg = i, !p && f && i.style.setProperty('pointer-events', f), a = 0, o = d.length; a < o; ++a)
                            this.isDirty(l = d[a]) && (c = !(this._dirtyAll || l._svg), u = s(i, r, l, a, c), this._update(r, u, l), p && (c && (this._dirtyAll = !0), this._recurse(u, l), c && (this._dirtyAll = !1)));
                        return h.clear(i, a), i;
                    }
                }, y._recurse = function (e, t) {
                    var n, r, i = t.items || [], a = t.legendItems || [], o = t.axisItems || [], s = 0;
                    for (n = 0, r = o.length; n < r; ++n)
                        'back' === o[n].layer && this.drawMark(e, o[n], s++, m.group);
                    for (n = 0, r = i.length; n < r; ++n)
                        this.draw(e, i[n], s++);
                    for (n = 0, r = o.length; n < r; ++n)
                        'back' !== o[n].layer && this.drawMark(e, o[n], s++, m.group);
                    for (n = 0, r = a.length; n < r; ++n)
                        this.drawMark(e, a[n], s++, m.group);
                    h.clear(e, 1 + s);
                };
                var _ = null, b = null, x = {
                        group: function (e, t, n) {
                            _ = t.childNodes[0], b = t.__values__, e.background(u, n, this);
                            var r = n.mark.interactive === !1 ? 'none' : null;
                            r !== b.events && (_.style.setProperty('pointer-events', r), b.events = r);
                        },
                        text: function (e, t, n) {
                            var r = f.value(n.text);
                            r !== b.text && (t.textContent = r, b.text = r), r = f.font(n), r !== b.font && (t.style.setProperty('font', r), b.font = r);
                        }
                    };
                y._update = function (e, t, n) {
                    _ = t, b = t.__values__, e.attr(u, n, this);
                    var r = x[e.type];
                    r && r(e, t, n), this.style(_, n);
                }, y.style = function (e, t) {
                    if (null != t) {
                        var n, r, i, a, o;
                        for (n = 0, r = p.styleProperties.length; n < r; ++n)
                            i = p.styleProperties[n], o = t[i], o !== b[i] && (a = p.styles[i], null == o ? 'fill' === a ? e.style.setProperty(a, 'none') : e.style.removeProperty(a) : (o.id && (this._defs.gradient[o.id] = o, o = 'url(' + l() + '#' + o.id + ')'), e.style.setProperty(a, o + '')), b[i] = o);
                    }
                }, t.exports = r;
            },
            {
                '../../util/ImageLoader': 81,
                '../../util/dom': 85,
                '../../util/svg': 87,
                '../../util/text': 88,
                '../Renderer': 56,
                './marks': 77
            }
        ],
        75: [
            function (e, t, n) {
                function r(e) {
                    s.call(this), this._loader = new u(e), this._text = {
                        head: '',
                        root: '',
                        foot: '',
                        defs: '',
                        body: ''
                    }, this._defs = {
                        clip_id: 1,
                        gradient: {},
                        clipping: {}
                    };
                }
                function i(e, t, n, r) {
                    v[r || e] = t;
                }
                function a(e, t, n, r) {
                    if (null == e)
                        return '';
                    var i, a, o, s, u, d = '';
                    for ('bgrect' === n && t.interactive === !1 && (d += 'pointer-events: none;'), 'text' === n && (d += 'font: ' + c.font(e) + ';'), i = 0, a = l.styleProperties.length; i < a; ++i)
                        o = l.styleProperties[i], s = l.styles[o], u = e[o], null == u ? 'fill' === s && (d += (d.length ? ' ' : '') + 'fill: none;') : (u.id && (r.gradient[u.id] = u, u = 'url(#' + u.id + ')'), d += (d.length ? ' ' : '') + s + ': ' + u + ';');
                    return d ? 'style="' + d + '"' : null;
                }
                function o(e) {
                    return e.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                }
                var s = e('../Renderer'), u = e('../../util/ImageLoader'), l = e('../../util/svg'), c = e('../../util/text'), d = e('../../util/dom'), f = d.openTag, h = d.closeTag, p = e('./marks'), g = s.prototype, m = r.prototype = Object.create(g);
                m.constructor = r, m.resize = function (e, t, n) {
                    g.resize.call(this, e, t, n);
                    var r = this._padding, i = this._text, a = {
                            class: 'marks',
                            width: this._width + r.left + r.right,
                            height: this._height + r.top + r.bottom
                        };
                    for (var o in l.metadata)
                        a[o] = l.metadata[o];
                    return i.head = f('svg', a), i.root = f('g', { transform: 'translate(' + r.left + ',' + r.top + ')' }), i.foot = h('g') + h('svg'), this;
                }, m.svg = function () {
                    var e = this._text;
                    return e.head + e.defs + e.root + e.body + e.foot;
                }, m.render = function (e) {
                    return this._text.body = this.mark(e), this._text.defs = this.buildDefs(), this;
                }, m.reset = function () {
                    return this._defs.clip_id = 0, this;
                }, m.buildDefs = function () {
                    var e, t, n, r, i = this._defs, a = '';
                    for (t in i.gradient) {
                        for (n = i.gradient[t], r = n.stops, a += f('linearGradient', {
                                id: t,
                                x1: n.x1,
                                x2: n.x2,
                                y1: n.y1,
                                y2: n.y2
                            }), e = 0; e < r.length; ++e)
                            a += f('stop', {
                                offset: r[e].offset,
                                'stop-color': r[e].color
                            }) + h('stop');
                        a += h('linearGradient');
                    }
                    for (t in i.clipping)
                        n = i.clipping[t], a += f('clipPath', { id: t }), a += f('rect', {
                            x: 0,
                            y: 0,
                            width: n.width,
                            height: n.height
                        }) + h('rect'), a += h('clipPath');
                    return a.length > 0 ? f('defs') + a + h('defs') : '';
                }, m.imageURL = function (e) {
                    return this._loader.imageURL(e);
                };
                var v;
                m.attributes = function (e, t) {
                    return v = {}, e(i, t, this), v;
                }, m.mark = function (e) {
                    var t, n, r, i = p[e.marktype], s = i.tag, u = i.attr, l = i.nest || !1, g = l ? e.items && e.items.length ? [e.items[0]] : [] : e.items || [], m = this._defs, v = '';
                    for ('g' !== s && e.interactive === !1 && (t = 'style="pointer-events: none;"'), v += f('g', { class: d.cssClass(e) }, t), n = 0; n < g.length; ++n)
                        r = g[n], t = 'g' !== s ? a(r, e, s, m) : null, v += f(s, this.attributes(u, r), t), 'text' === s ? v += o(c.value(r.text)) : 'g' === s && (v += f('rect', this.attributes(i.background, r), a(r, e, 'bgrect', m)) + h('rect'), v += this.markGroup(r)), v += h(s);
                    return v + h('g');
                }, m.markGroup = function (e) {
                    var t, n, r = '', i = e.axisItems || [], a = e.items || [], o = e.legendItems || [];
                    for (t = 0, n = i.length; t < n; ++t)
                        'back' === i[t].layer && (r += this.mark(i[t]));
                    for (t = 0, n = a.length; t < n; ++t)
                        r += this.mark(a[t]);
                    for (t = 0, n = i.length; t < n; ++t)
                        'back' !== i[t].layer && (r += this.mark(i[t]));
                    for (t = 0, n = o.length; t < n; ++t)
                        r += this.mark(o[t]);
                    return r;
                }, t.exports = r;
            },
            {
                '../../util/ImageLoader': 81,
                '../../util/dom': 85,
                '../../util/svg': 87,
                '../../util/text': 88,
                '../Renderer': 56,
                './marks': 77
            }
        ],
        76: [
            function (e, t, n) {
                t.exports = {
                    Handler: e('./SVGHandler'),
                    Renderer: e('./SVGRenderer'),
                    string: { Renderer: e('./SVGStringRenderer') }
                };
            },
            {
                './SVGHandler': 73,
                './SVGRenderer': 74,
                './SVGStringRenderer': 75
            }
        ],
        77: [
            function (e, t, n) {
                function r(e) {
                    return i(e.x || 0, e.y || 0);
                }
                function i(e, t) {
                    return 'translate(' + e + ',' + t + ')';
                }
                var a = e('../../util/text'), o = e('../../util/svg'), s = o.symbolTypes, u = o.textAlign, l = o.path;
                t.exports = {
                    arc: {
                        tag: 'path',
                        type: 'arc',
                        attr: function (e, t) {
                            e('transform', r(t)), e('d', l.arc(t));
                        }
                    },
                    area: {
                        tag: 'path',
                        type: 'area',
                        nest: !0,
                        attr: function (e, t) {
                            var n = t.mark.items;
                            n.length && e('d', l.area(n));
                        }
                    },
                    group: {
                        tag: 'g',
                        type: 'group',
                        attr: function (e, t, n) {
                            var i, a, o = null;
                            e('transform', r(t)), t.clip && (i = n._defs, o = t.clip_id || (t.clip_id = 'clip' + i.clip_id++), a = i.clipping[o] || (i.clipping[o] = { id: o }), a.width = t.width || 0, a.height = t.height || 0), e('clip-path', o ? 'url(#' + o + ')' : null);
                        },
                        background: function (e, t) {
                            e('class', 'background'), e('width', t.width || 0), e('height', t.height || 0);
                        }
                    },
                    image: {
                        tag: 'image',
                        type: 'image',
                        attr: function (e, t, n) {
                            var r = t.x || 0, a = t.y || 0, o = t.width || 0, s = t.height || 0, u = n.imageURL(t.url);
                            r -= 'center' === t.align ? o / 2 : 'right' === t.align ? o : 0, a -= 'middle' === t.baseline ? s / 2 : 'bottom' === t.baseline ? s : 0, e('href', u, 'http://www.w3.org/1999/xlink', 'xlink:href'), e('transform', i(r, a)), e('width', o), e('height', s);
                        }
                    },
                    line: {
                        tag: 'path',
                        type: 'line',
                        nest: !0,
                        attr: function (e, t) {
                            var n = t.mark.items;
                            n.length && e('d', l.line(n));
                        }
                    },
                    path: {
                        tag: 'path',
                        type: 'path',
                        attr: function (e, t) {
                            e('transform', r(t)), e('d', t.path);
                        }
                    },
                    rect: {
                        tag: 'rect',
                        type: 'rect',
                        nest: !1,
                        attr: function (e, t) {
                            e('transform', r(t)), e('width', t.width || 0), e('height', t.height || 0);
                        }
                    },
                    rule: {
                        tag: 'line',
                        type: 'rule',
                        attr: function (e, t) {
                            e('transform', r(t)), e('x2', null != t.x2 ? t.x2 - (t.x || 0) : 0), e('y2', null != t.y2 ? t.y2 - (t.y || 0) : 0);
                        }
                    },
                    symbol: {
                        tag: 'path',
                        type: 'symbol',
                        attr: function (e, t) {
                            var n = !t.shape || s[t.shape] ? l.symbol(t) : l.resize(t.shape, t.size);
                            e('transform', r(t)), e('d', n);
                        }
                    },
                    text: {
                        tag: 'text',
                        type: 'text',
                        nest: !1,
                        attr: function (e, t) {
                            var n, r = t.dx || 0, o = (t.dy || 0) + a.offset(t), s = t.x || 0, l = t.y || 0, c = t.angle || 0, d = t.radius || 0;
                            d && (n = (t.theta || 0) - Math.PI / 2, s += d * Math.cos(n), l += d * Math.sin(n)), e('text-anchor', u[t.align] || 'start'), c ? (n = i(s, l) + ' rotate(' + c + ')', (r || o) && (n += ' ' + i(r, o))) : n = i(s + r, l + o), e('transform', n);
                        }
                    }
                };
            },
            {
                '../../util/svg': 87,
                '../../util/text': 88
            }
        ],
        78: [
            function (e, t, n) {
                function r(e) {
                    this.clear(), e && this.union(e);
                }
                var i = r.prototype;
                i.clone = function () {
                    return new r(this);
                }, i.clear = function () {
                    return this.x1 = +Number.MAX_VALUE, this.y1 = +Number.MAX_VALUE, this.x2 = -Number.MAX_VALUE, this.y2 = -Number.MAX_VALUE, this;
                }, i.set = function (e, t, n, r) {
                    return this.x1 = e, this.y1 = t, this.x2 = n, this.y2 = r, this;
                }, i.add = function (e, t) {
                    return e < this.x1 && (this.x1 = e), t < this.y1 && (this.y1 = t), e > this.x2 && (this.x2 = e), t > this.y2 && (this.y2 = t), this;
                }, i.expand = function (e) {
                    return this.x1 -= e, this.y1 -= e, this.x2 += e, this.y2 += e, this;
                }, i.round = function () {
                    return this.x1 = Math.floor(this.x1), this.y1 = Math.floor(this.y1), this.x2 = Math.ceil(this.x2), this.y2 = Math.ceil(this.y2), this;
                }, i.translate = function (e, t) {
                    return this.x1 += e, this.x2 += e, this.y1 += t, this.y2 += t, this;
                }, i.rotate = function (e, t, n) {
                    var r = Math.cos(e), i = Math.sin(e), a = t - t * r + n * i, o = n - t * i - n * r, s = this.x1, u = this.x2, l = this.y1, c = this.y2;
                    return this.clear().add(r * s - i * l + a, i * s + r * l + o).add(r * s - i * c + a, i * s + r * c + o).add(r * u - i * l + a, i * u + r * l + o).add(r * u - i * c + a, i * u + r * c + o);
                }, i.union = function (e) {
                    return e.x1 < this.x1 && (this.x1 = e.x1), e.y1 < this.y1 && (this.y1 = e.y1), e.x2 > this.x2 && (this.x2 = e.x2), e.y2 > this.y2 && (this.y2 = e.y2), this;
                }, i.encloses = function (e) {
                    return e && this.x1 <= e.x1 && this.x2 >= e.x2 && this.y1 <= e.y1 && this.y2 >= e.y2;
                }, i.alignsWith = function (e) {
                    return e && (this.x1 == e.x1 || this.x2 == e.x2 || this.y1 == e.y1 || this.y2 == e.y2);
                }, i.intersects = function (e) {
                    return e && !(this.x2 < e.x1 || this.x1 > e.x2 || this.y2 < e.y1 || this.y1 > e.y2);
                }, i.contains = function (e, t) {
                    return !(e < this.x1 || e > this.x2 || t < this.y1 || t > this.y2);
                }, i.width = function () {
                    return this.x2 - this.x1;
                }, i.height = function () {
                    return this.y2 - this.y1;
                }, t.exports = r;
            },
            {}
        ],
        79: [
            function (e, t, n) {
                t.exports = function (e) {
                    function t() {
                    }
                    function n(t, n) {
                        e.add(t, n);
                    }
                    return {
                        bounds: function (t) {
                            return arguments.length ? (e = t, this) : e;
                        },
                        beginPath: t,
                        closePath: t,
                        moveTo: n,
                        lineTo: n,
                        quadraticCurveTo: function (t, n, r, i) {
                            e.add(t, n), e.add(r, i);
                        },
                        bezierCurveTo: function (t, n, r, i, a, o) {
                            e.add(t, n), e.add(r, i), e.add(a, o);
                        }
                    };
                };
            },
            {}
        ],
        80: [
            function (e, t, n) {
                function r(e) {
                    this.id = 'gradient_' + i++, this.type = e || 'linear', this.stops = [], this.x1 = 0, this.x2 = 1, this.y1 = 0, this.y2 = 0;
                }
                var i = 0, a = r.prototype;
                a.stop = function (e, t) {
                    return this.stops.push({
                        offset: e,
                        color: t
                    }), this;
                }, t.exports = r;
            },
            {}
        ],
        81: [
            function (e, t, n) {
                (function (n) {
                    function r(e) {
                        this._pending = 0, this._config = e || r.Config;
                    }
                    function i(e, t) {
                        var n = o.sanitizeUrl(this.params(e));
                        if (!n)
                            return t && t(e, null), null;
                        var r = this, i = new Image();
                        return r._pending += 1, i.onload = function () {
                            r._pending -= 1, i.loaded = !0, t && t(null, i);
                        }, i.src = n, i;
                    }
                    function a(e, t) {
                        var r = this, i = new ('undefined' != typeof window ? window.canvas : 'undefined' != typeof n ? n.canvas : null).Image();
                        return r._pending += 1, o(this.params(e), function (e, n) {
                            return r._pending -= 1, e ? (t && t(e, null), null) : (i.src = n, i.loaded = !0, void (t && t(null, i)));
                        }), i;
                    }
                    var o = e('datalib/src/import/load');
                    r.Config = null;
                    var s = r.prototype;
                    s.pending = function () {
                        return this._pending;
                    }, s.params = function (e) {
                        var t, n = { url: e };
                        for (t in this._config)
                            n[t] = this._config[t];
                        return n;
                    }, s.imageURL = function (e) {
                        return o.sanitizeUrl(this.params(e));
                    }, s.loadImage = function (e, t) {
                        return o.useXHR ? i.call(this, e, t) : a.call(this, e, t);
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            { 'datalib/src/import/load': 23 }
        ],
        82: [
            function (e, t, n) {
                function r(e) {
                    this.mark = e;
                }
                var i = r.prototype;
                i.hasPropertySet = function (e) {
                    var t = this.mark.def.properties;
                    return t && null != t[e];
                }, i.cousin = function (e, t) {
                    if (0 === e)
                        return this;
                    e = e || -1;
                    var n = this.mark, r = n.group, i = null == t ? n.items.indexOf(this) : t, a = r.items.indexOf(n) + e;
                    return r.items[a].items[i];
                }, i.sibling = function (e) {
                    if (0 === e)
                        return this;
                    e = e || -1;
                    var t = this.mark, n = t.items.indexOf(this) + e;
                    return t.items[n];
                }, i.remove = function () {
                    var e = this, t = e.mark.items, n = t.indexOf(e);
                    return n >= 0 && (n === t.length - 1 ? t.pop() : t.splice(n, 1)), e;
                }, i.touch = function () {
                    this.pathCache && (this.pathCache = null);
                }, t.exports = r;
            },
            {}
        ],
        83: [
            function (e, t, n) {
                function r() {
                    return D || (D = b.instance(1, 1).getContext('2d'));
                }
                function i(e, t) {
                    return e.stroke && 0 !== e.opacity && 0 !== e.stokeOpacity && t.expand(null != e.strokeWidth ? e.strokeWidth : 1), t;
                }
                function a(e, t, n, r, a) {
                    return null == t ? n.set(0, 0, 0, 0) : (S(P.bounds(n), t, r, a), i(e, n)), n;
                }
                function o(e, t) {
                    var n = e.path ? e.pathCache || (e.pathCache = M(e.path)) : null;
                    return a(e, n, t, e.x, e.y);
                }
                function s(e, t) {
                    if (0 === e.items.length)
                        return t;
                    var n = e.items, r = n[0], i = r.pathCache || (r.pathCache = M(T(n)));
                    return a(r, i, t);
                }
                function u(e, t) {
                    if (0 === e.items.length)
                        return t;
                    var n = e.items, r = n[0], i = r.pathCache || (r.pathCache = M(E(n)));
                    return a(r, i, t);
                }
                function l(e, t) {
                    var n, r;
                    return i(e, t.set(n = e.x || 0, r = e.y || 0, n + e.width || 0, r + e.height || 0));
                }
                function c(e, t) {
                    var n = e.x || 0, r = e.y || 0, i = e.width || 0, a = e.height || 0;
                    return n -= 'center' === e.align ? i / 2 : 'right' === e.align ? i : 0, r -= 'middle' === e.baseline ? a / 2 : 'bottom' === e.baseline ? a : 0, t.set(n, r, n + i, r + a);
                }
                function d(e, t) {
                    var n, r;
                    return i(e, t.set(n = e.x || 0, r = e.y || 0, null != e.x2 ? e.x2 : n, null != e.y2 ? e.y2 : r));
                }
                function f(e, t) {
                    var n, r, a, o, s, u, l, c, d, f = e.x || 0, h = e.y || 0, p = e.innerRadius || 0, g = e.outerRadius || 0, m = (e.startAngle || 0) - A, v = (e.endAngle || 0) - A, y = 1 / 0, _ = -(1 / 0), b = 1 / 0, x = -(1 / 0), w = [
                            m,
                            v
                        ], k = m - m % A;
                    for (r = 0; r < 4 && k < v; ++r, k += A)
                        w.push(k);
                    for (r = 0, a = w.length; r < a; ++r)
                        n = w[r], o = Math.cos(n), u = p * o, c = g * o, s = Math.sin(n), l = p * s, d = g * s, y = Math.min(y, u, c), _ = Math.max(_, u, c), b = Math.min(b, l, d), x = Math.max(x, l, d);
                    return i(e, t.set(f + y, h + b, f + _, h + x));
                }
                function h(e, t) {
                    var n, r, a, o, s = null != e.size ? e.size : 100, u = e.x || 0, l = e.y || 0;
                    switch (e.shape) {
                    case 'cross':
                        r = 3 * Math.sqrt(s / 5) / 2, t.set(u - r, l - r, u + r, l + r);
                        break;
                    case 'diamond':
                        o = Math.sqrt(s / (2 * C)), a = o * C, t.set(u - a, l - o, u + a, l + o);
                        break;
                    case 'square':
                        r = Math.sqrt(s), n = r / 2, t.set(u - n, l - n, u + n, l + n);
                        break;
                    case 'triangle-down':
                        a = Math.sqrt(s / L), o = a * L / 2, t.set(u - a, l - o, u + a, l + o);
                        break;
                    case 'triangle-up':
                        a = Math.sqrt(s / L), o = a * L / 2, t.set(u - a, l - o, u + a, l + o);
                        break;
                    default:
                        n = Math.sqrt(s / Math.PI), t.set(u - n, l - n, u + n, l + n);
                    }
                    return i(e, t);
                }
                function p(e, t, n) {
                    var i, a, o = r(), s = w.size(e), u = e.align, l = e.radius || 0, c = e.x || 0, d = e.y || 0, f = e.dx || 0, h = (e.dy || 0) + w.offset(e) - Math.round(0.8 * s);
                    return l && (a = (e.theta || 0) - Math.PI / 2, c += l * Math.cos(a), d += l * Math.sin(a)), o.font = w.font(e), i = o.measureText(w.value(e.text)).width, 'center' === u ? f -= i / 2 : 'right' === u && (f -= i), t.set(f += c, h += d, f + i, h + s), e.angle && !n && t.rotate(e.angle * Math.PI / 180, c, d), t.expand(n ? 0 : 1);
                }
                function g(e, t, n) {
                    var r, a, o = e.axisItems || [], s = e.items || [], u = e.legendItems || [];
                    if (!e.clip) {
                        for (r = 0, a = o.length; r < a; ++r)
                            t.union(o[r].bounds);
                        for (r = 0, a = s.length; r < a; ++r)
                            s[r].bounds && t.union(s[r].bounds);
                        if (n)
                            for (r = 0, a = u.length; r < a; ++r)
                                t.union(u[r].bounds);
                    }
                    return (e.clip || e.width || e.height) && i(e, t.add(0, 0).add(e.width || 0, e.height || 0)), t.translate(e.x || 0, e.y || 0);
                }
                function m(e, t, n) {
                    var r = e.mark.marktype;
                    t = t || I[r], t.nest && (e = e.mark);
                    var i = e.bounds, a = e['bounds:prev'] || (e['bounds:prev'] = new _());
                    return i ? (a.clear().union(i), i.clear()) : e.bounds = new _(), t(e, e.bounds, n), i || a.clear().union(e.bounds), e.bounds;
                }
                function v(e, t, n) {
                    var r, i, a, o, s = e.marktype, u = I[s], l = e.items, c = l && l.length;
                    if (u.nest)
                        return a = c ? l[0] : (N.mark = e, N), o = m(a, u, n), t = t && t.union(o) || o;
                    if (t = t || e.bounds && e.bounds.clear() || new _(), c)
                        for (r = 0, i = l.length; r < i; ++r)
                            t.union(m(l[r], u, n));
                    return e.bounds = t;
                }
                var y = e('./BoundsContext'), _ = e('./Bounds'), b = e('./canvas'), x = e('./svg'), w = e('./text'), k = e('../path'), M = k.parse, S = k.render, T = x.path.area, E = x.path.line, A = Math.PI / 2, L = Math.sqrt(3), C = Math.tan(30 * Math.PI / 180), D = null, P = y(), I = {
                        group: g,
                        symbol: h,
                        image: c,
                        rect: l,
                        rule: d,
                        arc: f,
                        text: p,
                        path: o,
                        area: s,
                        line: u
                    };
                I.area.nest = !0, I.line.nest = !0;
                var N = { mark: null };
                t.exports = {
                    mark: v,
                    item: m,
                    text: p,
                    group: g
                };
            },
            {
                '../path': 52,
                './Bounds': 78,
                './BoundsContext': 79,
                './canvas': 84,
                './svg': 87,
                './text': 88
            }
        ],
        84: [
            function (e, t, n) {
                (function (e) {
                    function n(t, n) {
                        t = t || 1, n = n || 1;
                        var r;
                        if ('undefined' != typeof document && document.createElement)
                            r = document.createElement('canvas'), r.width = t, r.height = n;
                        else {
                            var i = 'undefined' != typeof window ? window.canvas : 'undefined' != typeof e ? e.canvas : null;
                            if (!i.prototype)
                                return null;
                            r = new i(t, n);
                        }
                        return a(r);
                    }
                    function r(e, t, n, r, a) {
                        var o = this._ctx = e.getContext('2d'), s = 1;
                        return e.width = t + r.left + r.right, e.height = n + r.top + r.bottom, a && 'undefined' != typeof HTMLElement && e instanceof HTMLElement && (o.pixelratio = s = i(e) || 1), o.setTransform(s, 0, 0, s, s * r.left, s * r.top), e;
                    }
                    function i(e) {
                        var t = e.getContext('2d'), n = window && window.devicePixelRatio || 1, r = t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1, i = n / r;
                        if (n !== r) {
                            var a = e.width, o = e.height;
                            e.width = a * i, e.height = o * i, e.style.width = a + 'px', e.style.height = o + 'px';
                        }
                        return i;
                    }
                    function a(e) {
                        var t = e.getContext('2d');
                        if (!t.vgLineDash) {
                            var n = function () {
                                }, r = [];
                            return t.setLineDash ? (t.vgLineDash = function (e) {
                                this.setLineDash(e || r);
                            }, t.vgLineDashOffset = function (e) {
                                this.lineDashOffset = e;
                            }) : void 0 !== t.webkitLineDash ? (t.vgLineDash = function (e) {
                                this.webkitLineDash = e || r;
                            }, t.vgLineDashOffset = function (e) {
                                this.webkitLineDashOffset = e;
                            }) : void 0 !== t.mozDash ? (t.vgLineDash = function (e) {
                                this.mozDash = e;
                            }, t.vgLineDashOffset = n) : (t.vgLineDash = n, t.vgLineDashOffset = n), e;
                        }
                    }
                    t.exports = {
                        instance: n,
                        resize: r,
                        lineDash: a
                    };
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {}
        ],
        85: [
            function (e, t, n) {
                function r(e, t, n) {
                    return n ? e.createElementNS(n, t) : e.createElement(t);
                }
                function i(e) {
                    if (e) {
                        var t = e.parentNode;
                        t && (t.removeChild(e), t.childNodes && t.childNodes.length || i(t));
                    }
                }
                t.exports = {
                    find: function (e, t) {
                        t = t.toLowerCase();
                        for (var n = 0, r = e.childNodes.length; n < r; ++n)
                            if (e.childNodes[n].tagName.toLowerCase() === t)
                                return e.childNodes[n];
                    },
                    child: function (e, t, n, i, a, o) {
                        var s, u;
                        return s = u = e.childNodes[t], (!s || o || s.tagName.toLowerCase() !== n.toLowerCase() || a && s.getAttribute('class') != a) && (s = r(e.ownerDocument, n, i), e.insertBefore(s, u || null), a && s.setAttribute('class', a)), s;
                    },
                    clear: function (e, t) {
                        for (var n = e.childNodes.length; n > t;)
                            e.removeChild(e.childNodes[--n]);
                        return e;
                    },
                    remove: i,
                    cssClass: function (e) {
                        return 'mark-' + e.marktype + (e.name ? ' ' + e.name : '');
                    },
                    openTag: function (e, t, n) {
                        var r, i, a = '<' + e;
                        if (t)
                            for (r in t)
                                i = t[r], null != i && (a += ' ' + r + '="' + i + '"');
                        return n && (a += ' ' + n), a + '>';
                    },
                    closeTag: function (e) {
                        return '</' + e + '>';
                    }
                };
            },
            {}
        ],
        86: [
            function (e, t, n) {
                function r(e, t) {
                    return JSON.stringify(e, u, t);
                }
                function i(e) {
                    var t = 'string' == typeof e ? JSON.parse(e) : e;
                    return a(t);
                }
                function a(e) {
                    var t, n, r, i, u, l = e.marktype;
                    for (r = 0, i = s.length; r < i; ++r)
                        if (u = e[s[r]])
                            for (t = 0, n = u.length; t < n; ++t)
                                u[t][l ? 'mark' : 'group'] = e, l && 'group' !== l || a(u[t]);
                    return l && o.mark(e), e;
                }
                var o = e('../util/bound'), s = [
                        'items',
                        'axisItems',
                        'legendItems'
                    ], u = [
                        'marktype',
                        'name',
                        'interactive',
                        'clip',
                        'items',
                        'axisItems',
                        'legendItems',
                        'layer',
                        'x',
                        'y',
                        'width',
                        'height',
                        'align',
                        'baseline',
                        'fill',
                        'fillOpacity',
                        'opacity',
                        'stroke',
                        'strokeOpacity',
                        'strokeWidth',
                        'strokeCap',
                        'strokeDash',
                        'strokeDashOffset',
                        'startAngle',
                        'endAngle',
                        'innerRadius',
                        'outerRadius',
                        'interpolate',
                        'tension',
                        'orient',
                        'url',
                        'path',
                        'x2',
                        'y2',
                        'size',
                        'shape',
                        'text',
                        'angle',
                        'theta',
                        'radius',
                        'dx',
                        'dy',
                        'font',
                        'fontSize',
                        'fontWeight',
                        'fontStyle',
                        'fontVariant'
                    ];
                t.exports = {
                    toJSON: r,
                    fromJSON: i
                };
            },
            { '../util/bound': 83 }
        ],
        87: [
            function (e, t, n) {
                (function (n) {
                    function r(e) {
                        return e.x || 0;
                    }
                    function i(e) {
                        return e.y || 0;
                    }
                    function a(e) {
                        return (e.x || 0) + (e.width || 0);
                    }
                    function o(e) {
                        return (e.y || 0) + (e.height || 0);
                    }
                    function s(e) {
                        return null == e.size ? 100 : e.size;
                    }
                    function u(e) {
                        return e.shape || 'circle';
                    }
                    var l = e('datalib'), c = ('undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null).svg, d = e('../path/parse'), f = c.area().x(r).y1(i).y0(o), h = c.area().y(i).x1(r).x0(a), p = c.line().x(r).y(i);
                    t.exports = {
                        metadata: {
                            version: '1.1',
                            xmlns: 'http://www.w3.org/2000/svg',
                            'xmlns:xlink': 'http://www.w3.org/1999/xlink'
                        },
                        path: {
                            arc: c.arc(),
                            symbol: c.symbol().type(u).size(s),
                            area: function (e) {
                                var t = e[0];
                                return ('horizontal' === t.orient ? h : f).interpolate(t.interpolate || 'linear').tension(t.tension || 0.7)(e);
                            },
                            line: function (e) {
                                var t = e[0];
                                return p.interpolate(t.interpolate || 'linear').tension(t.tension || 0.7)(e);
                            },
                            resize: function (e, t) {
                                var n, r, i, a, o, s, u, l = d(e), c = '';
                                for (t = Math.sqrt(t), a = 0, o = l.length; a < o; ++a)
                                    for (n = l[a], s = 0, u = n.length; s < u && 'Z' !== n[s]; ++s)
                                        (r = +n[s]) === r && (i = e.indexOf(r), c += e.substring(0, i) + r * t, e = e.substring(i + (r + '').length));
                                return c + 'Z';
                            }
                        },
                        symbolTypes: l.toMap(c.symbolTypes),
                        textAlign: {
                            left: 'start',
                            center: 'middle',
                            right: 'end'
                        },
                        textBaseline: {
                            top: 'before-edge',
                            bottom: 'after-edge',
                            middle: 'central'
                        },
                        styles: {
                            fill: 'fill',
                            fillOpacity: 'fill-opacity',
                            stroke: 'stroke',
                            strokeWidth: 'stroke-width',
                            strokeOpacity: 'stroke-opacity',
                            strokeCap: 'stroke-linecap',
                            strokeDash: 'stroke-dasharray',
                            strokeDashOffset: 'stroke-dashoffset',
                            opacity: 'opacity'
                        },
                        styleProperties: [
                            'fill',
                            'fillOpacity',
                            'stroke',
                            'strokeWidth',
                            'strokeOpacity',
                            'strokeCap',
                            'strokeDash',
                            'strokeDashOffset',
                            'opacity'
                        ]
                    };
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                '../path/parse': 53,
                datalib: 27
            }
        ],
        88: [
            function (e, t, n) {
                function r(e) {
                    return null != e.fontSize ? e.fontSize : 11;
                }
                t.exports = {
                    size: r,
                    value: function (e) {
                        return null != e ? String(e) : '';
                    },
                    font: function (e, t) {
                        var n = e.font;
                        return t && n && (n = String(n).replace(/\"/g, '\'')), '' + (e.fontStyle ? e.fontStyle + ' ' : '') + (e.fontVariant ? e.fontVariant + ' ' : '') + (e.fontWeight ? e.fontWeight + ' ' : '') + r(e) + 'px ' + (n || 'sans-serif');
                    },
                    offset: function (e) {
                        var t = e.baseline, n = r(e);
                        return Math.round('top' === t ? 0.93 * n : 'middle' === t ? 0.3 * n : 'bottom' === t ? -0.21 * n : 0);
                    }
                };
            },
            {}
        ],
        89: [
            function (e, t, n) {
                function r(e, t, n) {
                    s.call(this, e, t, n), this._type = 'canvas', this._renderers = {
                        canvas: a,
                        svg: o
                    };
                }
                var i = e('vega-scenegraph').render, a = i.canvas, o = i.svg.string, s = e('./View'), u = r.prototype = new s();
                u.renderer = function (e) {
                    return e && (this._type = e), s.prototype.renderer.apply(this, arguments);
                }, u.canvas = function () {
                    return 'canvas' === this._type ? this._renderer.canvas() : null;
                }, u.canvasAsync = function (e) {
                    function t() {
                        0 === n.pendingImages() ? (r.render(), e(r.canvas())) : setTimeout(t, 10);
                    }
                    var n = this._renderer, r = this;
                    return 'canvas' !== this._type ? null : void (n.pendingImages() > 0 ? t() : e(this.canvas()));
                }, u.svg = function () {
                    return 'svg' === this._type ? this._renderer.svg() : null;
                }, u.initialize = function () {
                    var e = this._width, t = this._height, n = this._bgcolor, r = this._padding, i = this.model().config();
                    return this._viewport && (e = this._viewport[0] - (r ? r.left + r.right : 0), t = this._viewport[1] - (r ? r.top + r.bottom : 0)), this._renderer = (this._renderer || new this._io.Renderer(i.load)).initialize(null, e, t, r).background(n), this._repaint = !0, this;
                }, t.exports = r;
            },
            {
                './View': 91,
                'vega-scenegraph': 50
            }
        ],
        90: [
            function (e, t, n) {
                function r(e) {
                    this._defs = {}, this._predicates = {}, this._scene = null, this._groups = null, this._node = null, this._builder = null, this._reset = {
                        axes: !1,
                        legends: !1
                    }, this.config(e), this.expr = f(this), u.init.call(this);
                }
                function i(e) {
                    var t = this, n = {};
                    return a.isArray(e) ? (e.forEach(function (e) {
                        n[e] = t._predicates[e];
                    }), n) : this._predicates[e];
                }
                var a = e('datalib'), o = e('vega-dataflow'), s = o.ChangeSet, u = o.Graph.prototype, l = o.Node, c = e('../scene/GroupBuilder'), d = e('../scene/visit'), f = e('../parse/expr'), h = e('./config'), p = r.prototype = Object.create(u);
                p.constructor = r, p.defs = function (e) {
                    return arguments.length ? (this._defs = e, this) : this._defs;
                }, p.config = function (e) {
                    if (!arguments.length)
                        return this._config;
                    this._config = Object.create(h);
                    for (var t in e) {
                        var n = e[t], r = this._config[t];
                        a.isObject(n) && a.isObject(r) ? this._config[t] = a.extend({}, r, n) : this._config[t] = n;
                    }
                    return this;
                }, p.width = function (e) {
                    return this._defs && (this._defs.width = e), this._defs && this._defs.marks && (this._defs.marks.width = e), this._scene && (this._scene.items[0].width = e, this._scene.items[0]._dirty = !0), this._reset.axes = !0, this;
                }, p.height = function (e) {
                    return this._defs && (this._defs.height = e), this._defs && this._defs.marks && (this._defs.marks.height = e), this._scene && (this._scene.items[0].height = e, this._scene.items[0]._dirty = !0), this._reset.axes = !0, this;
                }, p.node = function () {
                    return this._node || (this._node = new l(this));
                }, p.data = function () {
                    var e = u.data.apply(this, arguments);
                    return arguments.length > 1 && this.node().addListener(e.pipeline()[0]), e;
                }, p.predicate = function (e, t) {
                    return 1 === arguments.length ? i.call(this, e) : this._predicates[e] = t;
                }, p.predicates = function () {
                    return this._predicates;
                }, p.scene = function (e) {
                    if (!arguments.length)
                        return this._scene;
                    this._builder && (this.node().removeListener(this._builder), this._builder._groupBuilder.disconnect());
                    var t = this, n = this._builder = new l(this);
                    return n.evaluate = function (r) {
                        if (n._groupBuilder)
                            return r;
                        var i = n._groupBuilder = new c(t, t._defs.marks, t._scene = {}), a = i.pipeline();
                        return t._groups = {}, this.addListener(i.connect()), a[a.length - 1].addListener(e), r;
                    }, this.addListener(n), this;
                }, p.group = function (e, t) {
                    var n = this._groups;
                    return 1 === arguments.length ? n[e] : (n[e] = t, this);
                }, p.reset = function () {
                    return this._scene && this._reset.axes && (d(this._scene, function (e) {
                        e.axes && e.axes.forEach(function (e) {
                            e.reset();
                        });
                    }), this._reset.axes = !1), this._scene && this._reset.legends && (d(this._scene, function (e) {
                        e.legends && e.legends.forEach(function (e) {
                            e.reset();
                        });
                    }), this._reset.legends = !1), this;
                }, p.addListener = function (e) {
                    this.node().addListener(e);
                }, p.removeListener = function (e) {
                    this.node().removeListener(e);
                }, p.fire = function (e) {
                    e || (e = s.create()), this.propagate(e, this.node());
                }, t.exports = r;
            },
            {
                '../parse/expr': 97,
                '../scene/GroupBuilder': 113,
                '../scene/visit': 118,
                './config': 92,
                datalib: 27,
                'vega-dataflow': 42
            }
        ],
        91: [
            function (e, t, n) {
                (function (n) {
                    function r(e, t, n) {
                        this._el = null, this._model = null, this._width = this.__width = t || 500, this._height = this.__height = n || 300, this._bgcolor = null, this._cursor = !0, this._autopad = 1, this._padding = {
                            top: 0,
                            left: 0,
                            bottom: 0,
                            right: 0
                        }, this._viewport = null, this._renderer = null, this._handler = null, this._streamer = null, this._skipSignals = !1, this._changeset = null, this._repaint = !0, this._renderers = f, this._io = null, this._api = {};
                    }
                    function i(e) {
                        var t = this, n = this._model.data(e);
                        if (!n)
                            return p.error('Data source "' + e + '" is not defined.');
                        var r = n.pipeline()[0], i = this._streamer, a = {};
                        return this._api[e] ? this._api[e] : (a.insert = function (o) {
                            return n.insert(l.duplicate(o)), i.addListener(r), t._changeset.data[e] = 1, a;
                        }, a.update = function () {
                            return i.addListener(r), t._changeset.data[e] = 1, n.update.apply(n, arguments), a;
                        }, a.remove = function () {
                            return i.addListener(r), t._changeset.data[e] = 1, n.remove.apply(n, arguments), a;
                        }, a.values = function () {
                            return n.values();
                        }, this._api[e] = a);
                    }
                    function a(e, t) {
                        var n = this._changeset, r = this._model.signal(e);
                        return r ? (this._streamer.addListener(r.value(t)), n.signals[e] = 1, void (n.reflow = !0)) : p.error('Signal "' + e + '" is not defined.');
                    }
                    function o() {
                        var e, t, n = this.model().scene(), r = n.items[0].legendItems, i = 0, a = r.length;
                        if (this._strict) {
                            for (e = h.mark(n, null, !1); i < a; ++i)
                                t = r[i].bounds, e.add(t.x1, 0).add(t.x2, 0);
                            return e;
                        }
                        return n.bounds;
                    }
                    function s() {
                        var e = this;
                        return e._renderNode = new c.Node(e._model).router(!0), e._renderNode.evaluate = function (t) {
                            p.debug(t, ['rendering']);
                            var n = e._model.scene(), r = e._handler;
                            return r && r.scene && r.scene(n), t.trans ? t.trans.start(function (t) {
                                e._renderer.render(n, t);
                            }) : e._repaint ? e._renderer.render(n) : t.dirty.length && e._renderer.render(n, t.dirty), t.dirty.length && (t.dirty.forEach(function (e) {
                                e._dirty = !1;
                            }), n.items[0]._dirty = !1), e._repaint = e._skipSignals = !1, t;
                        }, e._model.scene(e._renderNode), !0;
                    }
                    var u = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, l = e('datalib'), c = e('vega-dataflow'), d = e('vega-scenegraph'), f = d.render, h = d.bound, p = e('vega-logging'), g = c.Dependencies, m = e('../parse/streams'), v = e('../scene/Encoder'), y = e('../scene/Transition'), _ = r.prototype;
                    _.model = function (e) {
                        return arguments.length ? (this._model !== e && (this._model = e, this._streamer = new c.Node(e), this._streamer._rank = -1, this._changeset = c.ChangeSet.create(), this._handler && this._handler.model(e)), this) : this._model;
                    }, _.data = function (e) {
                        var t = this;
                        return arguments.length ? l.isString(e) ? i.call(t, e) : (l.isObject(e) && l.keys(e).forEach(function (n) {
                            var r = i.call(t, n);
                            e[n](r);
                        }), this) : t._model.values();
                    };
                    var b = l.toMap([
                        'width',
                        'height',
                        'padding'
                    ]);
                    _.signal = function (e, t, n) {
                        var r, i, o = this._model;
                        if (!arguments.length)
                            return o.values(g.SIGNALS);
                        if (1 === arguments.length && l.isString(e))
                            return o.values(g.SIGNALS, e);
                        l.isObject(e) ? (i = e, n = t) : (i = {}, i[e] = t);
                        for (r in i)
                            b[r] ? this[r](i[r]) : a.call(this, r, i[r]);
                        return this._skipSignals = n, this;
                    }, _.width = function (e) {
                        return arguments.length ? (this.__width !== e && (this._width = this.__width = e, this.model().width(e), this.initialize(), this._strict && (this._autopad = 1), a.call(this, 'width', e)), this) : this.__width;
                    }, _.height = function (e) {
                        return arguments.length ? (this.__height !== e && (this._height = this.__height = e, this.model().height(e), this.initialize(), this._strict && (this._autopad = 1), a.call(this, 'height', e)), this) : this.__height;
                    }, _.background = function (e) {
                        return arguments.length ? (this._bgcolor !== e && (this._bgcolor = e, this.initialize()), this) : this._bgcolor;
                    }, _.padding = function (e) {
                        return arguments.length ? (this._padding !== e && (l.isString(e) ? (this._autopad = 1, this._padding = {
                            top: 0,
                            left: 0,
                            bottom: 0,
                            right: 0
                        }, this._strict = 'strict' === e) : (this._autopad = 0, this._padding = e, this._strict = !1), this._renderer && this._renderer.resize(this._width, this._height, this._padding), this._handler && this._handler.padding(this._padding), a.call(this, 'padding', this._padding)), this._repaint = !0, this) : this._padding;
                    }, _.autopad = function (e) {
                        if (this._autopad < 1)
                            return this;
                        this._autopad = 0;
                        var t = o.call(this), n = this._padding, r = this.model().config(), i = r.autopadInset, s = t.x1 < 0 ? Math.ceil(-t.x1) + i : 0, u = t.y1 < 0 ? Math.ceil(-t.y1) + i : 0, l = t.x2 > this._width ? Math.ceil(+t.x2 - this._width) + i : 0;
                        return t = t.y2 > this._height ? Math.ceil(+t.y2 - this._height) + i : 0, n = {
                            left: s,
                            top: u,
                            right: l,
                            bottom: t
                        }, this._strict ? (this._autopad = 0, this._padding = n, this._width = Math.max(0, this.__width - (s + l)), this._height = Math.max(0, this.__height - (u + t)), this._model.width(this._width).height(this._height).reset(), a.call(this, 'width', this._width), a.call(this, 'height', this._height), a.call(this, 'padding', n), this.initialize().update({ props: 'enter' }).update({ props: 'update' })) : this.padding(n).update(e), this;
                    }, _.viewport = function (e) {
                        return arguments.length ? (this._viewport !== e && (this._viewport = e, this.initialize()), this) : this._viewport;
                    }, _.renderer = function (e) {
                        if (!arguments.length)
                            return this._renderer;
                        if (this._renderers[e])
                            e = this._renderers[e];
                        else {
                            if (l.isString(e))
                                throw new Error('Unknown renderer: ' + e);
                            if (!e)
                                throw new Error('No renderer specified');
                        }
                        return this._io !== e && (this._io = e, this._renderer = null, this.initialize(), this._build && this.render()), this;
                    }, _.initialize = function (e) {
                        var t, n = this, r = n._width, i = n._height, a = n._padding, o = n._bgcolor, s = this.model().config();
                        return arguments.length && null !== e || (e = this._el ? this._el.parentNode : null) ? (u.select(e).select('div.vega').remove(), this._el = e = u.select(e).append('div').attr('class', 'vega').style('position', 'relative').node(), n._viewport && u.select(e).style('width', (n._viewport[0] || r) + 'px').style('height', (n._viewport[1] || i) + 'px').style('overflow', 'auto'), f.canvas.Renderer.RETINA = s.render.retina, n._renderer = (n._renderer || new this._io.Renderer(s.load)).initialize(e, r, i, a).background(o), t = n._handler, n._handler = new this._io.Handler().initialize(e, a, n), t ? t.handlers().forEach(function (e) {
                            n._handler.on(e.type, e.handler);
                        }) : n._detach = m(this), this._repaint = !0, this) : this;
                    }, _.destroy = function () {
                        this._detach && this._detach();
                    }, _.update = function (e) {
                        e = e || {};
                        var t = this, n = this._model, r = this._streamer, i = this._changeset, a = e.duration ? new y(e.duration, e.ease) : null;
                        if (a && (i.trans = a), void 0 !== e.props) {
                            if (l.keys(i.data).length > 0)
                                throw Error('New data values are not reflected in the visualization. Please call view.update() before updating a specified property set.');
                            i.reflow = !0, i.request = e.props;
                        }
                        var o = t._build;
                        return t._build = t._build || s.call(this), e.items && o ? (v.update(n, e.trans, e.props, e.items, i.dirty), t._renderNode.evaluate(i)) : r.listeners().length && o ? (this._repaint && r.addListener(n.node()), n.propagate(i, r, null, this._skipSignals), r.disconnect()) : n.fire(i), t._changeset = c.ChangeSet.create(), t.autopad(e);
                    }, _.toImageURL = function (e) {
                        var t, n = this;
                        switch (e || 'png') {
                        case 'canvas':
                        case 'png':
                            t = f.canvas.Renderer;
                            break;
                        case 'svg':
                            t = f.svg.string.Renderer;
                            break;
                        default:
                            throw Error('Unrecognized renderer type: ' + e);
                        }
                        var r = f.canvas.Renderer.RETINA;
                        f.canvas.Renderer.RETINA = !1;
                        var i = new t(n._model.config.load).initialize(null, n._width, n._height, n._padding).background(n._bgcolor).render(n._model.scene());
                        if (f.canvas.Renderer.RETINA = r, 'svg' === e) {
                            var a = new Blob([i.svg()], { type: 'image/svg+xml' });
                            return window.URL.createObjectURL(a);
                        }
                        return i.canvas().toDataURL('image/png');
                    }, _.render = function (e) {
                        return this._renderer.render(this._model.scene(), e), this;
                    }, _.on = function () {
                        return this._handler.on.apply(this._handler, arguments), this;
                    }, _.onSignal = function (e, t) {
                        var n = this._model.signal(e);
                        return n ? n.on(t) : p.error('Signal "' + e + '" is not defined.'), this;
                    }, _.off = function () {
                        return this._handler.off.apply(this._handler, arguments), this;
                    }, _.offSignal = function (e, t) {
                        var n = this._model.signal(e);
                        return n ? n.off(t) : p.error('Signal "' + e + '" is not defined.'), this;
                    }, r.factory = function (t) {
                        var n = e('./HeadlessView');
                        return function (e) {
                            e = e || {};
                            var i = t.defs(), a = (e.el ? new r() : new n()).model(t).renderer(e.renderer || 'canvas').width(i.width).height(i.height).background(i.background).padding(i.padding).viewport(i.viewport).initialize(e.el);
                            return e.data && a.data(e.data), e.el && (e.hover !== !1 && a.on('mouseover', function (e, t) {
                                t && t.hasPropertySet('hover') && this.update({
                                    props: 'hover',
                                    items: t
                                });
                            }).on('mouseout', function (e, t) {
                                t && t.hasPropertySet('hover') && this.update({
                                    props: 'update',
                                    items: t
                                });
                            }), e.cursor !== !1 && a.onSignal('cursor', function (e, t) {
                                var n = u.select('body');
                                l.isString(t) ? (a._cursor = 'default' === t, n.style('cursor', t)) : l.isObject(t) && a._cursor && n.style('cursor', t.default);
                            })), a;
                        };
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                '../parse/streams': 108,
                '../scene/Encoder': 112,
                '../scene/Transition': 115,
                './HeadlessView': 89,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49,
                'vega-scenegraph': 50
            }
        ],
        92: [
            function (e, t, n) {
                (function (e) {
                    var n = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof e ? e.d3 : null, r = {};
                    r.load = {
                        baseURL: '',
                        domainWhiteList: !1
                    }, r.autopadInset = 5, r.scale = {
                        time: n.time.scale,
                        utc: n.time.scale.utc
                    }, r.render = { retina: !0 }, r.scene = {
                        fill: void 0,
                        fillOpacity: void 0,
                        stroke: void 0,
                        strokeOpacity: void 0,
                        strokeWidth: void 0,
                        strokeDash: void 0,
                        strokeDashOffset: void 0
                    }, r.axis = {
                        layer: 'back',
                        ticks: 10,
                        padding: 3,
                        axisColor: '#000',
                        axisWidth: 1,
                        gridColor: '#000',
                        gridOpacity: 0.15,
                        tickColor: '#000',
                        tickLabelColor: '#000',
                        tickWidth: 1,
                        tickSize: 6,
                        tickLabelFontSize: 11,
                        tickLabelFont: 'sans-serif',
                        titleColor: '#000',
                        titleFont: 'sans-serif',
                        titleFontSize: 11,
                        titleFontWeight: 'bold',
                        titleOffset: 'auto',
                        titleOffsetAutoMin: 30,
                        titleOffsetAutoMax: 10000,
                        titleOffsetAutoMargin: 4
                    }, r.legend = {
                        orient: 'right',
                        offset: 20,
                        padding: 3,
                        margin: 2,
                        gradientStrokeColor: '#888',
                        gradientStrokeWidth: 1,
                        gradientHeight: 16,
                        gradientWidth: 100,
                        labelColor: '#000',
                        labelFontSize: 10,
                        labelFont: 'sans-serif',
                        labelAlign: 'left',
                        labelBaseline: 'middle',
                        labelOffset: 8,
                        symbolShape: 'circle',
                        symbolSize: 50,
                        symbolColor: '#888',
                        symbolStrokeWidth: 1,
                        titleColor: '#000',
                        titleFont: 'sans-serif',
                        titleFontSize: 11,
                        titleFontWeight: 'bold'
                    }, r.color = {
                        rgb: [
                            128,
                            128,
                            128
                        ],
                        lab: [
                            50,
                            0,
                            0
                        ],
                        hcl: [
                            0,
                            0,
                            50
                        ],
                        hsl: [
                            0,
                            0,
                            0.5
                        ]
                    }, r.range = {
                        category10: n.scale.category10().range(),
                        category20: n.scale.category20().range(),
                        category20b: n.scale.category20b().range(),
                        category20c: n.scale.category20c().range(),
                        shapes: [
                            'circle',
                            'cross',
                            'diamond',
                            'square',
                            'triangle-down',
                            'triangle-up'
                        ]
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {}
        ],
        93: [
            function (e, t, n) {
                function r(e, t, n) {
                    var r = e.schema;
                    r && (r.refs && i.extend(n.refs, r.refs), r.defs && i.extend(n.defs, r.defs));
                }
                var i = e('datalib'), a = e('../parse'), o = e('../scene/Scale'), s = e('./config');
                t.exports = function (e) {
                    var t = null;
                    return e = e || {}, e.url ? t = i.json(i.extend({ url: e.url }, s.load)) : (t = {
                        $schema: 'http://json-schema.org/draft-04/schema#',
                        title: 'Vega Visualization Specification Language',
                        defs: {},
                        refs: {},
                        $ref: '#/defs/spec'
                    }, i.keys(a).forEach(function (n) {
                        r(a[n], e, t);
                    }), r(o, e, t)), e.properties && i.keys(e.properties).forEach(function (n) {
                        t.defs.propset.properties[n] = { $ref: '#/refs/' + e.properties[n] + 'Value' };
                    }), e.propertySets && i.keys(e.propertySets).forEach(function (e) {
                        t.defs.mark.properties.properties.properties[e] = { $ref: '#/defs/propset' };
                    }), t;
                };
            },
            {
                '../parse': 98,
                '../scene/Scale': 114,
                './config': 92,
                datalib: 27
            }
        ],
        94: [
            function (e, t, n) {
                function r(e, t, n, r) {
                    var o = a(e);
                    (t || []).forEach(function (t, a) {
                        n[a] = n[a] || s(e, o[t.type]), i(o[t.type], t, a, n[a], r);
                    });
                }
                function i(e, t, n, r, i) {
                    var a;
                    void 0 !== t.scale && r.scale(a = i.scale(t.scale));
                    var s = e.grid;
                    o.isObject(s) && (e.grid = void 0 !== s[a.type] ? s[a.type] : s.default), r.orient(u(t, e, 'orient', l[t.type])), r.offset(u(t, e, 'offset', 0)), r.layer(u(t, e, 'layer', 'front')), r.grid(u(t, e, 'grid', !1)), r.title(t.title || null), r.titleOffset(u(t, e, 'titleOffset')), r.tickValues(t.values || null), r.tickFormat(t.format || null), r.tickFormatType(t.formatType || null), r.tickSubdivide(t.subdivide || 0), r.tickPadding(u(t, e, 'tickPadding', e.padding));
                    var c = u(t, e, 'tickSize'), d = [
                            c,
                            c,
                            c
                        ];
                    d[0] = u(t, e, 'tickSizeMajor', d[0]), d[1] = u(t, e, 'tickSizeMinor', d[1]), d[2] = u(t, e, 'tickSizeEnd', d[2]), d.length && r.tickSize.apply(r, d), r.tickCount(u(t, e, 'ticks'));
                    var f = t.properties;
                    f && f.ticks ? (r.majorTickProperties(f.majorTicks ? o.extend({}, f.ticks, f.majorTicks) : f.ticks), r.minorTickProperties(f.minorTicks ? o.extend({}, f.ticks, f.minorTicks) : f.ticks)) : (r.majorTickProperties(f && f.majorTicks || {}), r.minorTickProperties(f && f.minorTicks || {})), r.tickLabelProperties(f && f.labels || {}), r.titleProperties(f && f.title || {}), r.gridLineProperties(f && f.grid || {}), r.domainProperties(f && f.axis || {});
                }
                function a(e) {
                    var t = e.config(), n = t.axis;
                    return {
                        x: o.extend(o.duplicate(n), t.axis_x),
                        y: o.extend(o.duplicate(n), t.axis_y)
                    };
                }
                var o = e('datalib'), s = e('../scene/axis'), u = e('../util/theme-val'), l = {
                        x: 'bottom',
                        y: 'left',
                        top: 'top',
                        bottom: 'bottom',
                        left: 'left',
                        right: 'right'
                    };
                t.exports = r;
            },
            {
                '../scene/axis': 116,
                '../util/theme-val': 150,
                datalib: 27
            }
        ],
        95: [
            function (e, t, n) {
                (function (e) {
                    function n(e) {
                        return null == e ? null : r.rgb(e) + '';
                    }
                    var r = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof e ? e.d3 : null;
                    t.exports = n;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {}
        ],
        96: [
            function (e, t, n) {
                function r(e, t, n) {
                    function o(e, t) {
                        a.error('PARSE DATA FAILED: ' + t.name + ' ' + e), l = -1, n(e);
                    }
                    function s(t) {
                        return function (r, a) {
                            if (r)
                                o(r, t);
                            else if (l > 0)
                                try {
                                    e.data(t.name).values(i.read(a, t.format)), 0 === --l && n();
                                } catch (e) {
                                    o(e, t);
                                }
                        };
                    }
                    var u = e.config(), l = 0;
                    return (t || []).forEach(function (t) {
                        t.url && (l += 1, i.load(i.extend({ url: t.url }, u.load), s(t)));
                        try {
                            r.datasource(e, t);
                        } catch (e) {
                            o(e, t);
                        }
                    }), 0 === l && setTimeout(n, 1), t;
                }
                var i = e('datalib'), a = e('vega-logging'), o = e('./transforms'), s = e('./modify');
                r.datasource = function (e, t) {
                    var n = (t.transform || []).map(function (t) {
                            return o(e, t);
                        }), r = (t.modify || []).map(function (n) {
                            return s(e, n, t);
                        }), a = e.data(t.name, r.concat(n));
                    return t.values ? a.values(i.read(t.values, t.format)) : t.source && (a.source(t.source).addListener(a), e.removeListener(a.pipeline()[0])), a;
                }, t.exports = r;
            },
            {
                './modify': 102,
                './transforms': 109,
                datalib: 27,
                'vega-logging': 49
            }
        ],
        97: [
            function (e, t, n) {
                function r(e) {
                    return function (t) {
                        t = t.map(e);
                        var n = t.length;
                        if (n < 1 || n > 2)
                            throw Error('open takes exactly 1 or 2 arguments.');
                        return 'this.defs.open(this.model, ' + t[0] + (n > 1 ? ',' + t[1] : '') + ')';
                    };
                }
                function i(e, t, n) {
                    if ('undefined' == typeof window || !window || !window.open)
                        throw Error('Open function can only be invoked in a browser.');
                    var r = p.extend({
                            type: 'open',
                            url: t,
                            name: n
                        }, e.config().load), i = p.load.sanitizeUrl(r);
                    if (!i)
                        throw Error('Invalid URL: ' + r.url);
                    window.open(i, n);
                }
                function a(e, t) {
                    return function (n) {
                        n = n.map(e);
                        var r = n.length;
                        if (r < 2 || r > 3)
                            throw Error('scale takes exactly 2 or 3 arguments.');
                        return 'this.defs.scale(this.model, ' + t + ', ' + n[0] + ',' + n[1] + (r > 2 ? ',' + n[2] : '') + ')';
                    };
                }
                function o(e, t, n, r, i) {
                    if (i && i.scale || (i = i && i.mark ? i.mark.group : e.scene().items[0]), e.group(i._id) !== i)
                        throw Error('Scope for scale "' + n + '" is not a valid group item.');
                    var a = i.scale(n);
                    return a ? t ? a.invert(r) : a(r) : r;
                }
                function s(e, t, n, r) {
                    var i = t, a = n;
                    return t > n && (i = n, a = t), r ? i < e && a > e : i <= e && a >= e;
                }
                function u(e) {
                    return function (t, n, r, i) {
                        var a;
                        if (3 !== t.length)
                            throw Error('indata takes 3 arguments.');
                        if ('Literal' !== t[0].type)
                            throw Error('Data source name must be a literal for indata.');
                        return a = t[0].value, i[a] = 1, 'Literal' === t[2].type && u.model.requestIndex(a, t[2].value), t = t.map(e), 'this.defs.indata(this.model,' + t[0] + ',' + t[1] + ',' + t[2] + ')';
                    };
                }
                function l(e, t, n, r) {
                    var i = e.data(t), a = i.getIndex(r);
                    return a[n] > 0;
                }
                function c(e, t) {
                    return g.format(e, 'number')(t);
                }
                function d(e, t) {
                    return g.format(e, 'time')(t);
                }
                function f(e, t) {
                    return g.format(e, 'utc')(t);
                }
                function h(e) {
                    return function (t) {
                        u.model = e;
                        var n = y(t);
                        return n.model = e, n.sig = e ? e._signals : {}, n;
                    };
                }
                var p = e('datalib'), g = p.template, m = e('vega-expression'), v = [
                        'datum',
                        'parent',
                        'event',
                        'signals'
                    ], y = m.compiler(v, {
                        idWhiteList: v,
                        fieldVar: v[0],
                        globalVar: function (e) {
                            return 'this.sig[' + p.str(e) + ']._value';
                        },
                        functions: function (e) {
                            var t = m.functions(e);
                            return t.eventItem = 'event.vg.getItem', t.eventGroup = 'event.vg.getGroup', t.eventX = 'event.vg.getX', t.eventY = 'event.vg.getY', t.open = r(e), t.scale = a(e, !1), t.iscale = a(e, !0), t.inrange = 'this.defs.inrange', t.indata = u(e), t.format = 'this.defs.format', t.timeFormat = 'this.defs.timeFormat', t.utcFormat = 'this.defs.utcFormat', t;
                        },
                        functionDefs: function () {
                            return {
                                scale: o,
                                inrange: s,
                                indata: l,
                                format: c,
                                timeFormat: d,
                                utcFormat: f,
                                open: i
                            };
                        }
                    });
                h.scale = o, h.codegen = y.codegen, t.exports = h;
            },
            {
                datalib: 27,
                'vega-expression': 47
            }
        ],
        98: [
            function (e, t, n) {
                t.exports = {
                    axes: e('./axes'),
                    background: e('./background'),
                    data: e('./data'),
                    events: e('vega-event-selector'),
                    expr: e('./expr'),
                    legends: e('./legends'),
                    mark: e('./mark'),
                    marks: e('./marks'),
                    modify: e('./modify'),
                    padding: e('./padding'),
                    predicates: e('./predicates'),
                    properties: e('./properties'),
                    signals: e('./signals'),
                    spec: e('./spec'),
                    streams: e('./streams'),
                    transforms: e('./transforms')
                };
            },
            {
                './axes': 94,
                './background': 95,
                './data': 96,
                './expr': 97,
                './legends': 99,
                './mark': 100,
                './marks': 101,
                './modify': 102,
                './padding': 103,
                './predicates': 104,
                './properties': 105,
                './signals': 106,
                './spec': 107,
                './streams': 108,
                './transforms': 109,
                'vega-event-selector': 43
            }
        ],
        99: [
            function (e, t, n) {
                function r(e, t, n, r) {
                    (t || []).forEach(function (t, o) {
                        n[o] = n[o] || a(e), i(t, o, n[o], r);
                    });
                }
                function i(e, t, n, r) {
                    n.size(e.size ? r.scale(e.size) : null), n.shape(e.shape ? r.scale(e.shape) : null), n.fill(e.fill ? r.scale(e.fill) : null), n.stroke(e.stroke ? r.scale(e.stroke) : null), n.opacity(e.opacity ? r.scale(e.opacity) : null), e.orient && n.orient(e.orient), null != e.offset && n.offset(e.offset), n.title(e.title || null), n.values(e.values || null), n.format(void 0 !== e.format ? e.format : null), n.formatType(e.formatType || null);
                    var i = e.properties;
                    n.titleProperties(i && i.title || {}), n.labelProperties(i && i.labels || {}), n.legendProperties(i && i.legend || {}), n.symbolProperties(i && i.symbols || {}), n.gradientProperties(i && i.gradient || {});
                }
                var a = e('../scene/legend');
                t.exports = r;
            },
            { '../scene/legend': 117 }
        ],
        100: [
            function (e, t, n) {
                function r(e, t, n) {
                    var o = t.properties || n && (t.properties = {}), s = o.enter || n && (o.enter = {}), u = t.marks, l = e.config().marks || {};
                    if (n) {
                        'symbol' === t.type && !s.size && l.symbolSize && (s.size = { value: l.symbolSize });
                        var c = {
                                arc: 'fill',
                                area: 'fill',
                                rect: 'fill',
                                symbol: 'fill',
                                text: 'fill',
                                line: 'stroke',
                                path: 'stroke',
                                rule: 'stroke'
                            }, d = c[t.type];
                        !s[d] && l.color && (s[d] = { value: l.color });
                    }
                    return i.keys(o).forEach(function (n) {
                        o[n] = a(e, t.type, o[n]);
                    }), t.delay && (t.delay = a(e, t.type, { delay: t.delay })), u && (t.marks = u.map(function (t) {
                        return r(e, t, !0);
                    })), t;
                }
                var i = e('datalib'), a = e('./properties');
                t.exports = r;
            },
            {
                './properties': 105,
                datalib: 27
            }
        ],
        101: [
            function (e, t, n) {
                function r(e, t, n, r) {
                    return {
                        type: 'group',
                        width: n,
                        height: r,
                        properties: i(t.scene || {}, e),
                        scales: t.scales || [],
                        axes: t.axes || [],
                        legends: t.legends || [],
                        marks: (t.marks || []).map(function (t) {
                            return a(e, t, !0);
                        })
                    };
                }
                function i(e, t) {
                    var n, r, i, a, u, l = t.config().scene, c = {};
                    for (n = 0, r = i = s.length; n < r; ++n)
                        a = s[n], void 0 !== (u = e[a]) ? c[a] = u.signal ? u : { value: u } : l[a] ? c[a] = { value: l[a] } : --i;
                    return i ? { update: o(t, 'group', c) } : {};
                }
                var a = e('./mark'), o = e('./properties'), s = [
                        'fill',
                        'fillOpacity',
                        'stroke',
                        'strokeOpacity',
                        'strokeWidth',
                        'strokeDash',
                        'strokeDashOffset'
                    ];
                t.exports = r;
            },
            {
                './mark': 100,
                './properties': 105
            }
        ],
        102: [
            function (e, t, n) {
                function r(e, t, n, r) {
                    var i, a, o, s, u = !0, l = e.length;
                    for (i = n.length - 1; i >= 0; --i) {
                        for (a = 0; a < l; ++a)
                            if (o = e[a], s = t && o(t) || t, o(n[i]) !== s) {
                                u = !1;
                                break;
                            }
                        u && r.push.apply(r, n.splice(i, 1)), u = !0;
                    }
                }
                function i(e, t, n) {
                    var r = c.ingest(t);
                    e.add.push(r), n._data.push(r);
                }
                function a(e, t, n) {
                    var a = t.signal ? o.field(t.signal) : null, u = a ? a[0] : null, p = t.predicate ? e.predicate(t.predicate.name || t.predicate) : null, g = t.test ? e.expr(t.test) : null, m = null === p && null === g, v = t.type === f.CLEAR, y = o.array(t.field || 'data'), _ = y.map(o.accessor), b = y.map(o.mutator), x = new l(e).router(v);
                    return x.evaluate = function (l) {
                        var x, w;
                        if (null !== p && (x = e.values(d.DATA, p.data || h), w = e.values(d.SIGNALS, p.signals || h), m = p.call(p, {}, x, w, e._predicates)), null !== g && (w = e.values(d.SIGNALS, g.globals || h), m = g.fn()), s.debug(l, [
                                t.type + 'ing',
                                m
                            ]), !m || !v && !l.signals[u])
                            return l;
                        var k, M = a ? e.signalRef(t.signal) : null, S = e.data(n.name), T = null, E = [], A = [], L = 0;
                        return o.isObject(M) ? (k = M, t.field || (y = o.keys(k), _ = y.map(o.accessor), b = y.map(o.mutator))) : (k = {}, b.forEach(function (e) {
                            e(k, M);
                        })), t.type === f.INSERT ? i(l, k, S) : t.type === f.REMOVE ? (r(_, M, l.mod, l.rem), r(_, M, l.add, A), r(_, M, S._data, A)) : t.type === f.UPSERT ? (l.mod.forEach(function (e) {
                            var t = _.every(function (t) {
                                return t(e) === t(k);
                            });
                            t && (o.extend(e, k), L += 1);
                        }), 0 === L && i(l, k, S)) : t.type === f.TOGGLE ? (r(_, M, l.mod, A), l.rem.push.apply(l.rem, A), r(_, M, l.add, E), E.length || A.length ? S._data = S._data.filter(function (e) {
                            return A.indexOf(e) < 0 && E.indexOf(e) < 0;
                        }) : (l.add.push(T = c.ingest(k)), S._data.push(T))) : t.type === f.CLEAR && (l.rem.push.apply(l.rem, l.mod.splice(0)), l.add.splice(0), S._data.splice(0)), y.forEach(function (e) {
                            l.fields[e] = 1;
                        }), l;
                    }, u && x.dependency(d.SIGNALS, u), p && (x.dependency(d.DATA, p.data), x.dependency(d.SIGNALS, p.signals)), g && (x.dependency(d.SIGNALS, g.globals), x.dependency(d.DATA, g.dataSources)), x;
                }
                var o = e('datalib'), s = e('vega-logging'), u = e('vega-dataflow'), l = u.Node, c = u.Tuple, d = u.Dependencies, f = {
                        INSERT: 'insert',
                        REMOVE: 'remove',
                        UPSERT: 'upsert',
                        TOGGLE: 'toggle',
                        CLEAR: 'clear'
                    }, h = [];
                t.exports = a;
            },
            {
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        103: [
            function (e, t, n) {
                function r(e) {
                    return null == e ? 'auto' : i.isObject(e) ? e : i.isNumber(e) ? {
                        top: e,
                        left: e,
                        right: e,
                        bottom: e
                    } : 'strict' === e ? e : 'auto';
                }
                var i = e('datalib');
                t.exports = r;
            },
            { datalib: 27 }
        ],
        104: [
            function (e, t, n) {
                function r(e, t) {
                    return (t || []).forEach(function (t) {
                        var n = d[t.type](e, t), r = Function('args', 'db', 'signals', 'predicates', n.code);
                        r.root = function () {
                            return e.scene().items[0];
                        }, r.nullScale = f, r.isFunction = c.isFunction, r.signals = n.signals, r.data = n.data, e.predicate(t.name, r);
                    }), t;
                }
                function i(e, t) {
                    var n = c.field(e), r = 'signals[' + n.map(c.str).join('][') + ']';
                    return t[n[0]] = 1, r;
                }
                function a(e, t) {
                    function n(e) {
                        s[e] = 1;
                    }
                    function r(e) {
                        u[e] = 1;
                    }
                    var a = [], o = [], s = {}, u = {};
                    return c.array(t).forEach(function (t, u) {
                        var l = 'o' + u, d = '';
                        if (void 0 !== t.value)
                            d = c.str(t.value);
                        else if (t.arg)
                            d = 'args[' + c.str(t.arg) + ']';
                        else if (t.signal)
                            d = i(t.signal, s);
                        else if (t.predicate) {
                            var f = t.predicate, h = f && (f.name || f), p = e.predicate(h), g = 'predicates[' + c.str(h) + ']';
                            p.signals.forEach(n), p.data.forEach(r), c.isObject(f) && c.keys(f).forEach(function (e) {
                                if ('name' !== e) {
                                    var t = f[e];
                                    d += 'args[' + c.str(e) + '] = ', t.signal ? d += i(t.signal, s) : t.arg && (d += 'args[' + c.str(t.arg) + ']'), d += ', ';
                                }
                            }), d += g + '.call(' + g + ', args, db, signals, predicates)';
                        }
                        a.push(l), o.push(l + '=(' + d + ')');
                    }), {
                        code: 'var ' + a.join(', ') + ';\n' + o.join(';\n') + ';\n',
                        signals: c.keys(s),
                        data: c.keys(u)
                    };
                }
                function o(e, t) {
                    var n = a(e, t.operands);
                    return '=' === t.type && (t.type = '=='), n.code += 'o0 = o0 instanceof Date ? o0.getTime() : o0;\no1 = o1 instanceof Date ? o1.getTime() : o1;\n', {
                        code: n.code + 'return ' + [
                            'o0',
                            'o1'
                        ].join(t.type) + ';',
                        signals: n.signals,
                        data: n.data
                    };
                }
                function s(e, t) {
                    for (var n = a(e, t.operands), r = [], i = 0, o = t.operands.length; r.push('o' + i++) < o;);
                    return 'and' === t.type ? t.type = '&&' : 'or' === t.type && (t.type = '||'), {
                        code: n.code + 'return ' + r.join(t.type) + ';',
                        signals: n.signals,
                        data: n.data
                    };
                }
                function u(e, t) {
                    var n = [t.item], r = '';
                    t.range && n.push.apply(n, t.range), t.scale && (r = l(t.scale, n));
                    var i = a(e, n);
                    if (r = i.code + r + '\n  var ordSet = null;\n', t.data) {
                        var o = c.field(t.field).map(c.str);
                        r += 'var where = function(d) { return d[' + o.join('][') + '] == o0 };\n', r += 'return db[' + c.str(t.data) + '].filter(where).length > 0;';
                    } else
                        t.range && (t.scale && (r += 'if (scale.length == 2) {\n  ordSet = scale(o1, o2);\n} else {\n  o1 = scale(o1);\no2 = scale(o2);\n}'), r += 'return ordSet !== null ? ordSet.indexOf(o0) !== -1 :\n  o1 < o2 ? o1 <= o0 && o0 <= o2 : o2 <= o0 && o0 <= o1;');
                    return {
                        code: r,
                        signals: i.signals,
                        data: i.data.concat(t.data ? [t.data] : [])
                    };
                }
                function l(e, t) {
                    var n = 'var scale = ', r = t.length;
                    return c.isString(e) ? (t.push({ value: e }), n += 'this.root().scale(o' + r + ')') : e.arg ? (t.push(e), n += 'o' + r) : e.name && (t.push(c.isString(e.name) ? { value: e.name } : e.name), n += '(this.isFunction(o' + r + ') ? o' + r + ' : ', e.scope ? (t.push(e.scope), n += '((o' + (r + 1) + '.scale || this.root().scale)(o' + r + ') || this.nullScale)') : n += 'this.root().scale(o' + r + ')', n += ')'), e.invert === !0 && (n += '.invert'), n + ';\n';
                }
                var c = e('datalib'), d = {
                        '=': o,
                        '==': o,
                        '!=': o,
                        '>': o,
                        '>=': o,
                        '<': o,
                        '<=': o,
                        and: s,
                        '&&': s,
                        or: s,
                        '||': s,
                        in: u
                    }, f = function () {
                        return 0;
                    };
                f.invert = f, t.exports = r;
            },
            { datalib: 27 }
        ],
        105: [
            function (e, t, n) {
                (function (n) {
                    function r(e, t, n) {
                        function r(e) {
                            if (null != v[e]) {
                                var t, n, r = h.array(v[e]);
                                for (t = 0, n = r.length; t < n; ++t)
                                    k[e][r[t]] = 1;
                            }
                        }
                        function i(e) {
                            var t = (e.parent ? 'parent_' : 'group_') + e.level;
                            k._nRefs[t] = e;
                        }
                        var l, c, d, v, y = e.config(), _ = '', b = h.keys(n), x = [], w = {}, k = {
                                signals: {},
                                scales: {},
                                data: {},
                                fields: {},
                                nested: [],
                                _nRefs: {},
                                reflow: !1
                            };
                        for (_ += 'var o = trans ? {} : item, d=0, exprs=this.exprs, set=this.tpl.set, tmpl=signals||{}, t;\ntmpl.datum  = item.datum;\ntmpl.group  = group;\ntmpl.parent = group.datum;\n', o(e, y, n), l = 0, c = b.length; l < c; ++l)
                            v = n[d = b[l]], _ += l > 0 ? '\n  ' : '  ', v.rule ? (v = s(e, d, v.rule, x), _ += '\n  ' + v.code) : h.isArray(v) ? (v = s(e, d, v, x), _ += '\n  ' + v.code) : (v = u(y, d, v), _ += 'd += set(o, ' + h.str(d) + ', ' + v.val + ');'), w[d] = !0, m.forEach(r), k.reflow = k.reflow || v.reflow, v.nested.length && v.nested.forEach(i);
                        h.keys(k._nRefs).forEach(function (e) {
                            k.nested.push(k._nRefs[e]);
                        }), k.nested.sort(function (e, t) {
                            return e = e.level, t = t.level, e < t ? -1 : e > t ? 1 : e >= t ? 0 : NaN;
                        }), w.x2 && (w.x ? (_ += '\n  if (o.x > o.x2) { \n    t = o.x;\n    d += set(o, \'x\', o.x2);\n    d += set(o, \'x2\', t); \n  };', _ += '\n  d += set(o, \'width\', (o.x2 - o.x));') : _ += w.width ? '\n  d += set(o, \'x\', (o.x2 - o.width));' : '\n  d += set(o, \'x\', o.x2);'), w.xc && (_ += w.width ? '\n  d += set(o, \'x\', (o.xc - o.width/2));' : '\n  d += set(o, \'x\', o.xc);'), w.y2 && (w.y ? (_ += '\n  if (o.y > o.y2) { \n    t = o.y;\n    d += set(o, \'y\', o.y2);\n    d += set(o, \'y2\', t);\n  };', _ += '\n  d += set(o, \'height\', (o.y2 - o.y));') : _ += w.height ? '\n  d += set(o, \'y\', (o.y2 - o.height));' : '\n  d += set(o, \'y\', o.y2);'), w.yc && (_ += w.height ? '\n  d += set(o, \'y\', (o.yc - o.height/2));' : '\n  d += set(o, \'y\', o.yc);'), a(t, w) && (_ += '\n  d += (item.touch(), 1);'), _ += '\n  if (trans) trans.interpolate(item, o);', _ += '\n  return d > 0;';
                        try {
                            var M = Function('item', 'group', 'trans', 'db', 'signals', 'predicates', _);
                            return M.tpl = g, M.exprs = x, M.util = h, M.d3 = f, h.extend(M, h.template.context), {
                                encode: M,
                                signals: h.keys(k.signals),
                                scales: h.keys(k.scales),
                                data: h.keys(k.data),
                                fields: h.keys(k.fields),
                                nested: k.nested,
                                reflow: k.reflow
                            };
                        } catch (e) {
                            p.error(e), p.log(_);
                        }
                    }
                    function i(e, t) {
                        return h.isObject(e) || (e = {
                            reflow: !1,
                            nested: []
                        }, m.forEach(function (t) {
                            e[t] = [];
                        })), h.isObject(t) && (e.reflow = e.reflow || t.reflow, e.nested.push.apply(e.nested, t.nested), m.forEach(function (n) {
                            e[n].push.apply(e[n], t[n]);
                        })), e;
                    }
                    function a(e, t) {
                        return t.path || ('area' === e || 'line' === e) && (t.x || t.x2 || t.width || t.y || t.y2 || t.height || t.tension || t.interpolate);
                    }
                    function o(e, t, n) {
                        var r, i, a = n.shape, o = 0;
                        if (a && (r = a.value)) {
                            for (t.shape && t.shape[r] && (r = t.shape[r]), a = ''; null !== (i = v.exec(r));)
                                a += r.substring(o, i.index), a += e.expr(i[1]).fn(), o = v.lastIndex;
                            n.shape.value = a + r.substring(o);
                        }
                    }
                    function s(e, t, n, r) {
                        var a = e.config(), o = i(), s = [], l = '';
                        return (n || []).forEach(function (c, d) {
                            var f = u(a, t, c);
                            if (i(o, f), c.test) {
                                var p = e.expr(c.test);
                                o.signals.push.apply(o.signals, p.globals), o.data.push.apply(o.data, p.dataSources), l += 'if (exprs[' + r.length + '](item.datum, item.mark.group.datum, null)) {\n    d += set(o, ' + h.str(t) + ', ' + f.val + ');', l += n[d + 1] ? '\n  } else ' : '  }', r.push(p.fn);
                            } else {
                                var g = c.predicate, m = g && (g.name || g), v = e.predicate(m), y = 'predicates[' + h.str(m) + ']', _ = [], b = t + '_arg' + d;
                                h.isObject(g) && h.keys(g).forEach(function (e) {
                                    if ('name' !== e) {
                                        var t = u(a, d, g[e], !0);
                                        _.push(h.str(e) + ': ' + t.val), i(o, t);
                                    }
                                }), m ? (o.signals.push.apply(o.signals, v.signals), o.data.push.apply(o.data, v.data), s.push(b + ' = {\n    ' + _.join(',\n    ') + '\n  }'), l += 'if (' + y + '.call(' + y + ',' + b + ', db, signals, predicates)) {\n    d += set(o, ' + h.str(t) + ', ' + f.val + ');', l += n[d + 1] ? '\n  } else ' : '  }') : l += '{\n    d += set(o, ' + h.str(t) + ', ' + f.val + ');\n  }\n';
                            }
                        }), s.length && (l = 'var ' + s.join(',\n      ') + ';\n  ' + l), o.code = l, o;
                    }
                    function u(e, t, n, r) {
                        if (null == n)
                            return null;
                        if ('fill' === t || 'stroke' === t) {
                            if (n.c)
                                return l(e, 'hcl', n.h, n.c, n.l);
                            if (n.h || n.s)
                                return l(e, 'hsl', n.h, n.s, n.l);
                            if (n.l || n.a)
                                return l(e, 'lab', n.l, n.a, n.b);
                            if (n.r || n.g || n.b)
                                return l(e, 'rgb', n.r, n.g, n.b);
                        }
                        var a = null, o = null, s = i(), u = null, f = null, p = null, g = {};
                        return void 0 !== n.template && (a = h.template.source(n.template, 'tmpl', g), h.keys(g).forEach(function (e) {
                            var t = h.field(e), n = t.shift();
                            'parent' === n || 'group' === n ? s.nested.push({
                                parent: 'parent' === n,
                                group: 'group' === n,
                                level: 1
                            }) : 'datum' === n ? s.fields.push(t[0]) : s.signals.push(n);
                        })), void 0 !== n.value && (a = h.str(n.value)), void 0 !== n.signal && (u = h.field(n.signal), a = 'signals[' + u.map(h.str).join('][') + ']', s.signals.push(u.shift())), void 0 !== n.field && (n.field = h.isString(n.field) ? { datum: n.field } : n.field, f = c(n.field), a = f.val, i(s, f)), void 0 !== n.scale && (p = d(n.scale), o = p.val, i(s, p), s.scales.push(n.scale.name || n.scale), null !== a || n.band || n.mult || n.offset || !r ? a = o + (n.band ? '.rangeBand()' : '(' + (null !== a ? a : 'item.datum.data') + ')') : r && (a = o)), a = '(' + (n.mult ? h.number(n.mult) + ' * ' : '') + a + ')' + (n.offset ? ' + ' + h.number(n.offset) : ''), s.val = a, s;
                    }
                    function l(e, t, n, r, a) {
                        var o = n ? u(e, '', n) : e.color[t][0], s = r ? u(e, '', r) : e.color[t][1], l = a ? u(e, '', a) : e.color[t][2], c = i();
                        [
                            o,
                            s,
                            l
                        ].forEach(function (e) {
                            h.isArray || i(c, e);
                        });
                        var d = '(this.d3.' + t + '(' + [
                            o.val,
                            s.val,
                            l.val
                        ].join(',') + ') + "")';
                        return c.val = d, c;
                    }
                    function c(e) {
                        if (h.isString(e))
                            return { val: h.field(e).map(h.str).join('][') };
                        var t = e.level || 1, n = (e.group || e.parent) && t, r = n ? Array(t).join('group.mark.') : '', a = c(e.datum || e.group || e.parent || e.signal), o = a.val, s = i(null, a);
                        return e.datum ? (o = 'item.datum[' + o + ']', s.fields.push(e.datum)) : e.group ? (o = r + 'group[' + o + ']', s.nested.push({
                            level: t,
                            group: !0
                        })) : e.parent ? (o = r + 'group.datum[' + o + ']', s.nested.push({
                            level: t,
                            parent: !0
                        })) : e.signal && (o = 'signals[' + o + ']', s.signals.push(h.field(e.signal)[0]), s.reflow = !0), s.val = o, s;
                    }
                    function d(e) {
                        var t = null, n = null, r = i();
                        return t = h.isString(e) ? h.str(e) : e.name ? h.isString(e.name) ? h.str(e.name) : (n = c(e.name)).val : (n = c(e)).val, t = '(item.mark._scaleRefs[' + t + '] = 1, group.scale(' + t + '))', e.invert && (t += '.invert'), n && n.nested.forEach(function (e) {
                            e.scale = !0;
                        }), n ? (n.val = t, n) : (r.val = t, r);
                    }
                    var f = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, h = e('datalib'), p = e('vega-logging'), g = e('vega-dataflow').Tuple, m = [
                            'signals',
                            'scales',
                            'data',
                            'fields'
                        ], v = /{{(.*?)}}/g;
                    t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        106: [
            function (e, t, n) {
                function r(e, t) {
                    return (t || []).forEach(function (t) {
                        if (u.indexOf(t.name) !== -1)
                            throw Error('Signal name "' + t.name + '" is a reserved keyword (' + u.join(', ') + ').');
                        var n = e.signal(t.name, t.init).verbose(t.verbose);
                        t.init && t.init.expr && (t.init.expr = e.expr(t.init.expr), n.value(i(e, t.init))), t.expr && (t.expr = e.expr(t.expr), n.evaluate = function (r) {
                            var a = i(e, t), o = r.signals;
                            return (a !== n.value() || n.verbose()) && (n.value(a), o[t.name] = 1), o[t.name] ? r : e.doNotPropagate;
                        }, n.dependency(s, t.expr.globals), t.expr.globals.forEach(function (t) {
                            e.signal(t).addListener(n);
                        }));
                    }), t;
                }
                function i(e, t) {
                    var n = t.expr, i = n.fn();
                    return t.scale ? r.scale(e, t, i) : i;
                }
                var a = e('datalib'), o = e('./expr'), s = e('vega-dataflow').Dependencies.SIGNALS, u = [
                        'datum',
                        'event',
                        'signals',
                        'width',
                        'height',
                        'padding'
                    ].concat(a.keys(o.codegen.functions));
                r.scale = function (e, t, n, r, i) {
                    var s, u = t.scale, l = u.name || u.signal || u, c = u.scope;
                    return c && (c.signal ? c = e.signalRef(c.signal) : a.isString(c) && (s = u._expr = u._expr || e.expr(c), c = s.fn(r, i))), o.scale(e, u.invert, l, n, c);
                }, t.exports = r;
            },
            {
                './expr': 97,
                datalib: 27,
                'vega-dataflow': 42
            }
        ],
        107: [
            function (e, t, n) {
                function r(t) {
                    function n(t) {
                        try {
                            t = i.duplicate(t);
                            var n = e('./'), a = o(t, c, 'width', 500), s = o(t, c, 'height', 500), u = n.padding(o(t, c, 'padding')), d = o(t, c, 'background');
                            p.signal('width', a), p.signal('height', s), p.signal('padding', u), r(t), p.defs({
                                width: a,
                                height: s,
                                padding: u,
                                viewport: t.viewport || null,
                                background: n.background(d),
                                signals: n.signals(p, t.signals),
                                predicates: n.predicates(p, t.predicates),
                                marks: n.marks(p, t, a, s),
                                data: n.data(p, t.data, l)
                            });
                        } catch (e) {
                            l(e);
                        }
                    }
                    function r(e) {
                        var t, n = e.signals || (e.signals = []);
                        n.some(function (e) {
                            return 'cursor' === e.name && (t = e, !0);
                        }), t || n.push(t = {
                            name: 'cursor',
                            streams: []
                        }), t.init = t.init || {}, t.streams.unshift({
                            type: 'mousemove',
                            expr: 'eventItem().cursor === cursor.default ? cursor : {default: eventItem().cursor}'
                        });
                    }
                    function l(e) {
                        var t;
                        e ? a.error(e) : t = g(p.buildIndexes()), h && (h.length > 1 ? h(e, t) : e || h(t), h = null);
                    }
                    var c, d = arguments.length, f = 2, h = arguments[d - 1], p = new s(), g = u.factory;
                    if (d > f && i.isFunction(arguments[d - f]) && (g = arguments[d - f], ++f), d > f && i.isObject(arguments[d - f]) && p.config(arguments[d - f]), c = p.config(), i.isObject(t))
                        n(t);
                    else if (i.isString(t)) {
                        var m = i.extend({ url: t }, c.load);
                        i.json(m, function (e, t) {
                            e ? l('SPECIFICATION LOAD FAILED: ' + e) : n(t);
                        });
                    } else
                        l('INVALID SPECIFICATION: Must be a valid JSON object or URL.');
                }
                var i = e('datalib'), a = e('vega-logging'), o = e('../util/theme-val'), s = e('../core/Model'), u = e('../core/View');
                t.exports = r;
            },
            {
                '../core/Model': 90,
                '../core/View': 91,
                '../util/theme-val': 150,
                './': 98,
                datalib: 27,
                'vega-logging': 49
            }
        ],
        108: [
            function (e, t, n) {
                (function (n) {
                    function r(e) {
                        function t(t, n) {
                            var r, a, o, s = i.mouse((i.event = t, e.renderer().scene())), u = e.padding(), l = {};
                            if (n)
                                for (r = n.mark, a = 'group' === r.marktype ? n : r.group, o = n; null != o; o = o.mark.group)
                                    o.mark.def.name && (l[o.mark.def.name] = o);
                            l.root = e.model().scene().items[0], t.vg = Object.create(d), t.vg.group = a, t.vg.item = n || {}, t.vg.name = l, t.vg.x = s[0] - u.left, t.vg.y = s[1] - u.top;
                        }
                        function n(e, t, n, r, i) {
                            function a(e) {
                                return !e.fn(n, r, i);
                            }
                            var s, l, c, d, f = e.handlers[t], h = e.nodes[t], p = o.ChangeSet.create(null, !0), m = !1;
                            for (l = 0, c = f.length; l < c; ++l)
                                d = f[l], m = d.filters.some(a), m || (s = d.exp.fn(n, r, i), d.spec.scale && (s = u.scale(g, d.spec, s, n, i)), (s !== d.signal.value() || d.signal.verbose()) && (d.signal.value(s), p.signals[d.signal.name()] = 1));
                            g.propagate(p, h);
                        }
                        function r(e, t, n, i) {
                            t.forEach(function (t) {
                                t.event ? f(e, t, n, i) : t.signal ? h(e, t, n, i) : t.start ? p(e, t, n, i) : t.stream && (t.filters && t.stream.forEach(function (e) {
                                    e.filters = a.array(e.filters).concat(t.filters);
                                }), r(e, t.stream, n, i));
                            });
                        }
                        function f(e, t, n, r) {
                            var i = t.event, s = t.name, u = t.mark, l = t.target, c = a.array(t.filters), d = l ? x : b, f = l ? l + ':' + i : i, h = d.nodes[f] || (d.nodes[f] = new o.Node(g)), p = d.handlers[f] || (d.handlers[f] = []);
                            s ? c.push('!!event.vg.name["' + s + '"]') : u && c.push('event.vg.item.mark && event.vg.item.mark.marktype===' + a.str(u)), p.push({
                                signal: e,
                                exp: n,
                                spec: r,
                                filters: c.map(function (e) {
                                    return g.expr(e);
                                })
                            }), h.addListener(e);
                        }
                        function h(e, t, n, r) {
                            var i = e.name(), a = g.signal(i + c, null);
                            a.evaluate = function (a) {
                                if (!a.signals[t.signal])
                                    return g.doNotPropagate;
                                var o = n.fn();
                                return r.scale && (o = u.scale(g, r, o)), (o !== e.value() || e.verbose()) && (e.value(o), a.signals[i] = 1, a.reflow = !0), a;
                            }, a.dependency(o.Dependencies.SIGNALS, t.signal), a.addListener(e), g.signal(t.signal).addListener(a);
                        }
                        function p(e, t, n, i) {
                            var a = e.name(), o = a + l, s = t.middle, u = s.filters || (s.filters = []), c = g.signal(o) || g.signal(o, !1);
                            r(c, [t.start], m, {}), r(c, [t.end], v, {}), u.push(c.name()), r(e, [t.middle], n, i);
                        }
                        var g = e.model(), m = g.expr('true'), v = g.expr('false'), y = g.defs().signals, _ = {
                                handlers: {},
                                nodes: {}
                            }, b = a.duplicate(_), x = a.duplicate(_);
                        return a.array(y).forEach(function (e) {
                            var t = g.signal(e.name);
                            e.expr || a.array(e.streams).forEach(function (e) {
                                var n = s.parse(e.type), i = g.expr(e.expr);
                                r(t, n, i, e);
                            });
                        }), a.keys(b.handlers).forEach(function (r) {
                            e.on(r, function (e, i) {
                                e.preventDefault(), t(e, i), n(b, r, i && i.datum || {}, i && i.mark && i.mark.group && i.mark.group.datum || {}, e);
                            });
                        }), a.keys(x.handlers).forEach(function (e) {
                            function r(r) {
                                t(r), n(x, e, i.select(this).datum(), this.parentNode && i.select(this.parentNode).datum(), r);
                            }
                            if ('undefined' != typeof window) {
                                for (var a = x.handlers[e], o = e.split(':'), s = 'window' === o[0] ? [window] : window.document.querySelectorAll(o[0]), u = 0; u < s.length; ++u)
                                    s[u].addEventListener(o[1], r);
                                a.elements = s, a.listener = r;
                            }
                        }), x.detach = function () {
                            a.keys(x.handlers).forEach(function (e) {
                                for (var t = x.handlers[e], n = e.split(':'), r = a.array(t.elements), i = 0; i < r.length; ++i)
                                    r[i].removeEventListener(n[1], t.listener);
                            });
                        }, x.detach;
                    }
                    var i = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, a = e('datalib'), o = e('vega-dataflow'), s = e('vega-event-selector'), u = e('./signals'), l = '_vgGATEKEEPER', c = '_vgEVALUATOR', d = {
                            getItem: function () {
                                return this.item;
                            },
                            getGroup: function (e) {
                                var t = e ? this.name[e] : this.group, n = t && t.mark, r = n && (n.interactive || void 0 === n.interactive);
                                return r ? t : {};
                            },
                            getXY: function (e) {
                                var t = {
                                    x: this.x,
                                    y: this.y
                                };
                                for ('string' == typeof e && (e = this.name[e]); e; e = e.mark && e.mark.group)
                                    t.x -= e.x || 0, t.y -= e.y || 0;
                                return t;
                            },
                            getX: function (e) {
                                return this.getXY(e).x;
                            },
                            getY: function (e) {
                                return this.getXY(e).y;
                            }
                        };
                    t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './signals': 106,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-event-selector': 43
            }
        ],
        109: [
            function (e, t, n) {
                function r(e, t) {
                    var n, r = a[t.type];
                    if (!r)
                        throw new Error('"' + t.type + '" is not a valid transformation');
                    return n = new r(e), t.output && n.output(t.output), i.keys(t).forEach(function (e) {
                        'type' !== e && 'output' !== e && n.param(e, t[e]);
                    }), n;
                }
                var i = e('datalib'), a = e('../transforms/index');
                t.exports = r;
            },
            {
                '../transforms/index': 146,
                datalib: 27
            }
        ],
        110: [
            function (e, t, n) {
                function r(e, t) {
                    return this._mark = t, s.prototype.init.call(this, e).router(!0).reflows(!0).mutates(!0);
                }
                var i = e('datalib'), a = e('vega-dataflow'), o = e('vega-scenegraph'), s = a.Node, u = e('vega-logging'), l = o.bound, c = o.Bounds, d = e('./Encoder'), f = r.prototype = new s();
                f.evaluate = function (e) {
                    u.debug(e, [
                        'bounds',
                        this._mark.marktype
                    ]);
                    var t, n, r, o, s, f, h = this._mark, p = h.marktype, g = 'group' === p, m = h.items, v = i.array(h.def.legends).length > 0, y = h.bounds, _ = !y || e.rem.length;
                    if ('line' === p || 'area' === p)
                        l.mark(h, null, g && !v);
                    else if (e.add.forEach(function (e) {
                            l.item(e), _ = _ || y && !y.encloses(e.bounds);
                        }), e.mod.forEach(function (e) {
                            _ = _ || y && y.alignsWith(e.bounds), l.item(e);
                        }), _)
                        for (y = h.bounds && h.bounds.clear() || (h.bounds = new c()), t = 0, n = m.length; t < n; ++t)
                            y.union(m[t].bounds);
                    if (g && v) {
                        for (t = 0, n = m.length; t < n; ++t)
                            for (s = m[t], s._legendPositions = null, r = 0, o = s.legendItems.length; r < o; ++r)
                                f = s.legendItems[r], d.update(this._graph, e.trans, 'legendPosition', f.items, e.dirty), l.mark(f, null, !1);
                        l.mark(h, null, !0);
                    }
                    return a.ChangeSet.create(e, !0);
                }, t.exports = r;
            },
            {
                './Encoder': 112,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49,
                'vega-scenegraph': 50
            }
        ],
        111: [
            function (e, t, n) {
                function r() {
                    return arguments.length ? this.init.apply(this, arguments) : this;
                }
                function i() {
                    var e, t, n, r, i, a, o, s = this._def.from, u = s.mark;
                    if (u)
                        r = this.sibling(u), e = r._isSuper ? r : r._bounder, t = [
                            'vg',
                            this._parent_id,
                            u,
                            e.listeners(!0).length
                        ].join('_'), n = {
                            name: t,
                            transform: s.transform,
                            modify: s.modify
                        };
                    else {
                        if (e = this._graph.data(this._from), !e)
                            throw Error('Data source "' + this._from + '" is not defined.');
                        t = [
                            'vg',
                            this._from,
                            this._def.type,
                            e.listeners(!0).length
                        ].join('_'), n = {
                            name: t,
                            source: this._from,
                            transform: s.transform,
                            modify: s.modify
                        };
                    }
                    this._from = t, this._ds = _.datasource(this._graph, n), u ? (o = new f(this._graph).addListener(this._ds.listener()), o.evaluate = function (e) {
                        var t = g.create(e), n = r._output;
                        return t.add = n.add, t.mod = n.mod, t.rem = n.rem, t;
                    }, e.addListener(o)) : (i = this._ds.source().last(), a = g.create(i), a.add = i.add, a.mod = i.mod, a.rem = i.rem, a.stamp = null, this._graph.propagate(a, this._ds.listener(), i.stamp));
                }
                function a() {
                    var e = p.ingest(new c(this._mark));
                    return this._def.width && p.set(e, 'width', this._def.width), this._def.height && p.set(e, 'height', this._def.height), e;
                }
                function o(e, t, n, r, i) {
                    var o, u, l, c, d, f, h, g = s(this._def.key || (r ? '_id' : null)), m = this._mark.items || [], v = r ? e.rem : m, y = p.idMap(!r || i ? n : e.mod), _ = [];
                    for (o = 0, l = v.length; o < l; ++o)
                        c = v[o] === m[o] ? m[o] : g ? this._map[g(v[o])] : v[o], c.status = b.EXIT;
                    for (o = 0, l = n.length; o < l; ++o)
                        d = n[o], c = g ? this._map[u = g(d)] : m[o], f = !c && (c = a.call(this), !0), c.status = f ? b.ENTER : b.UPDATE, h = !f && c.datum !== d, c.datum = d, g && (p.set(c, 'key', u), this._map[u] = c), f ? t.add.push(c) : (h || y[d._id]) && t.mod.push(c), _.push(c);
                    for (o = 0, l = v.length; o < l; ++o)
                        c = v[o] === m[o] ? m[o] : g ? this._map[u = g(v[o])] : v[o], c.status === b.EXIT && (c._dirty = !0, e.dirty.push(c), _.push(c), t.rem.push(c), g && (this._map[u] = null));
                    return this._mark.items = _, t;
                }
                function s(e) {
                    if (null == e)
                        return null;
                    var t = u.array(e).map(u.accessor);
                    return function (e) {
                        for (var n = '', r = 0, i = t.length; r < i; ++r)
                            r > 0 && (n += '|'), n += String(t[r](e));
                        return n;
                    };
                }
                var u = e('datalib'), l = e('vega-logging'), c = e('vega-scenegraph').Item, d = e('vega-dataflow'), f = d.Node, h = d.Dependencies, p = d.Tuple, g = d.ChangeSet, m = {}, v = e('./Encoder'), y = e('./Bounder'), _ = e('../parse/data'), b = r.STATUS = {
                        ENTER: 'enter',
                        UPDATE: 'update',
                        EXIT: 'exit'
                    }, x = 1, w = 2, k = r.prototype = new f();
                k.init = function (e, t, n, r, a, o) {
                    return f.prototype.init.call(this, e).router(!0).collector(!0), this._def = t, this._mark = n, this._from = (t.from ? t.from.data : null) || o, this._ds = u.isString(this._from) ? e.data(this._from) : null, this._map = {}, this._status = null, n.def = t, n.marktype = t.type, n.interactive = t.interactive !== !1, n.items = [], u.isValid(t.name) && (n.name = t.name), this._parent = r, this._parent_id = a, t.from && (t.from.mark || t.from.transform || t.from.modify) && i.call(this), this._isSuper = 'group' !== this._def.type, this._encoder = new v(this._graph, this._mark, this), this._bounder = new y(this._graph, this._mark), this._output = null, this._ds && this._encoder.dependency(h.DATA, this._from), this.dependency(h.DATA, this._encoder.dependency(h.DATA)), this.dependency(h.SCALES, this._encoder.dependency(h.SCALES)), this.dependency(h.SIGNALS, this._encoder.dependency(h.SIGNALS)), this;
                }, k.ds = function () {
                    return this._ds;
                }, k.parent = function () {
                    return this._parent;
                }, k.encoder = function () {
                    return this._encoder;
                }, k.pipeline = function () {
                    return [this];
                }, k.connect = function () {
                    var e = this;
                    return this._graph.connect(this.pipeline()), this._encoder._scales.forEach(function (t) {
                        (t = e._parent.scale(t)) && t.addListener(e);
                    }), this._parent && (this._isSuper ? this.addListener(this._parent._collector) : this._bounder.addListener(this._parent._collector)), this._status = x, this;
                }, k.disconnect = function () {
                    function e(e) {
                        for (var n, r = 0, i = e.length; r < i; ++r)
                            (n = t._parent.scale(e[r])) && n.removeListener(t);
                    }
                    var t = this;
                    return this._listeners.length ? (f.prototype.disconnect.call(this), this._graph.disconnect(this.pipeline()), e(this._encoder._scales), e(u.keys(this._mark._scaleRefs)), this._status = w, this) : this;
                }, k.sibling = function (e) {
                    return this._parent.child(e, this._parent_id);
                }, k.evaluate = function (e) {
                    l.debug(e, [
                        'building',
                        this._from || this._def.from,
                        this._def.type
                    ]);
                    var t, n, r, i, a = this, s = this._mark.def, c = s.properties || {}, d = c.update || {}, f = g.create(e);
                    if (this._ds) {
                        if (r = f.data[i = this._ds.name()], f.data[i] = null, t = this._encoder.reevaluate(f), f.data[i] = r, n = this._ds.last(), !n)
                            throw Error('Builder evaluated before backing DataSource.');
                        n.stamp > this._stamp ? o.call(this, n, f, this._ds.values(), !0, t) : t && (f.mod = this._mark.items.slice());
                    } else
                        r = u.isFunction(this._def.from) ? this._def.from() : [m], o.call(this, e, f, r);
                    return this._output = f = this._graph.evaluate(f, this._encoder), d.nested && d.nested.length && this._status === x && u.keys(this._mark._scaleRefs).forEach(function (e) {
                        var t = a._parent.scale(e);
                        t && (t.addListener(a), a.dependency(h.SCALES, e), a._encoder.dependency(h.SCALES, e));
                    }), this._isSuper && (f.mod = f.mod.filter(function (e) {
                        return e._dirty;
                    }), f = this._graph.evaluate(f, this._bounder)), f;
                }, t.exports = r;
            },
            {
                '../parse/data': 96,
                './Bounder': 110,
                './Encoder': 112,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49,
                'vega-scenegraph': 50
            }
        ],
        112: [
            function (e, t, n) {
                function r(e, t, n) {
                    var r = t.def.properties || {}, i = r.enter, a = r.update, o = r.exit;
                    c.prototype.init.call(this, e), this._mark = t, this._builder = n;
                    var s = this._scales = [];
                    return i && s.push.apply(s, i.scales), a && (this.dependency(d.DATA, a.data), this.dependency(d.SIGNALS, a.signals), this.dependency(d.FIELDS, a.fields), this.dependency(d.SCALES, a.scales), s.push.apply(s, a.scales)), o && s.push.apply(s, o.scales), this.mutates(!0);
                }
                function i(e, t, n, r) {
                    var i, a, o, s = n.add.length;
                    return (i = r.enter) && (a = i[e]).length && s && (o = t.values(e, a, o = o || {})), (i = r.exit) && (a = i[e]).length && n.rem.length && (o = t.values(e, a, o = o || {})), (i = r.update) && (a = i[e]).length && (s || n.mod.length) && (o = t.values(e, a, o = o || {})), o || h;
                }
                function a(e, t, n, r, i, a, o) {
                    var s = e.encode, u = t._dirty, l = s.call(s, t, t.mark.group || t, n, r, i, a);
                    t._dirty = l || u, l && !u && o.push(t);
                }
                function o() {
                    for (var e, t, n, r = this._mark.def.properties.update.nested, i = this._builder, a = 0, o = 0, s = r.length; o < s; ++o)
                        if (e = r[o], !e.scale) {
                            for (; a < e.level; ++a)
                                i = i.parent(), t = i.ds();
                            if (n = (e.group ? i.encoder() : t.last())._stamp, n > this._stamp)
                                return !0;
                        }
                    return !1;
                }
                var s = e('datalib'), u = e('vega-logging'), l = e('vega-dataflow'), c = l.Node, d = l.Dependencies, f = e('vega-scenegraph').bound, h = {}, p = r.prototype = new c();
                p.evaluate = function (t) {
                    u.debug(t, [
                        'encoding',
                        this._mark.def.type
                    ]);
                    var n, r, o, s, l = this._graph, c = this._mark.def.properties || {}, f = this._mark.items, p = c.enter, g = c.update, m = c.exit, v = t.dirty, y = l.predicates(), _ = t.request, b = this._mark.group, x = b && (b.mark.axis || b.mark.legend), w = h, k = h;
                    if (_ && !x) {
                        if ((s = c[_]) && t.mod.length)
                            for (w = s.data ? l.values(d.DATA, s.data) : null, k = s.signals ? l.values(d.SIGNALS, s.signals) : null, n = 0, r = t.mod.length; n < r; ++n)
                                o = t.mod[n], a.call(this, s, o, t.trans, w, k, y, v);
                        return t;
                    }
                    for (w = i(d.DATA, l, t, c), k = i(d.SIGNALS, l, t, c), n = 0, r = t.rem.length; n < r; ++n)
                        o = t.rem[n], m && a.call(this, m, o, t.trans, w, k, y, v), t.trans && !m ? t.trans.interpolate(o, h) : t.trans || f.pop();
                    var M = e('./Builder').STATUS.UPDATE;
                    for (n = 0, r = t.add.length; n < r; ++n)
                        o = t.add[n], p && a.call(this, p, o, t.trans, w, k, y, v), g && a.call(this, g, o, t.trans, w, k, y, v), o.status = M;
                    if (g)
                        for (n = 0, r = t.mod.length; n < r; ++n)
                            o = t.mod[n], a.call(this, g, o, t.trans, w, k, y, v);
                    return t;
                }, p.reevaluate = function (e) {
                    var t = this._mark.def, n = t.properties || {}, r = s.isFunction(t.from) || t.orient || e.request || c.prototype.reevaluate.call(this, e);
                    return r || !!n.update && o.call(this);
                }, r.update = function (e, t, n, r, i) {
                    r = s.array(r);
                    var o, u, l, c, h, p = e.predicates(), g = e.values(d.DATA), m = e.values(d.SIGNALS);
                    for (o = 0, u = r.length; o < u; ++o)
                        l = r[o], c = l.mark.def.properties, h = c && c[n], h && (a.call(null, h, l, t, g, m, p, i), f.item(l));
                }, t.exports = r;
            },
            {
                './Builder': 111,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49,
                'vega-scenegraph': 50
            }
        ],
        113: [
            function (e, t, n) {
                function r() {
                    return this._children = {}, this._scaler = null, this._recursor = null, this._scales = {}, this.scale = a.bind(this), arguments.length ? this.init.apply(this, arguments) : this;
                }
                function i(e) {
                    function t(e) {
                        e.type != x.MARK || e.inline || void 0 === m._graph.data(e.from) || m._recursor.removeListener(e.builder);
                    }
                    function n(t) {
                        var n = t.scale();
                        e.scales[n.scaleName] && t.reset().def();
                    }
                    function r(t) {
                        var n = t.size() || t.shape() || t.fill() || t.stroke() || t.opacity();
                        e.scales[n.scaleName] && t.reset().def();
                    }
                    function i(e) {
                        m._recursor.removeListener(e.builder), e.builder.disconnect();
                    }
                    var a, o, d, f, h, p, g, m = this, v = c.array(this._def.marks).length > 0, y = c.array(this._def.axes).length > 0, _ = c.array(this._def.legends).length > 0, b = !1;
                    for (a = 0, f = e.add.length; a < f; ++a)
                        h = e.add[a], v && s.call(this, e, h), y && u.call(this, e, h), _ && l.call(this, e, h);
                    for (a = e.add.length - 1; a >= 0; --a)
                        for (h = e.add[a], o = this._children[h._id].length - 1; o >= 0; --o)
                            d = this._children[h._id][o], d.builder.connect(), p = d.builder.pipeline(), g = d.builder._def, b = g.type !== x.GROUP, b = b && void 0 !== this._graph.data(d.from), b = b && 1 === p[p.length - 1].listeners().length, b = b && g.from && !g.from.mark, d.inline = b, b ? this._graph.evaluate(e, d.builder) : this._recursor.addListener(d.builder);
                    for (a = 0, f = e.mod.length; a < f; ++a)
                        h = e.mod[a], v && m._children[h._id].forEach(t), y && h.axes.forEach(n), _ && h.legends.forEach(r);
                    for (a = 0, f = e.rem.length; a < f; ++a)
                        h = e.rem[a], m._children[h._id].forEach(i), delete m._children[h._id];
                    return e;
                }
                function a(e, t) {
                    var n = this, r = null;
                    if (2 === arguments.length)
                        return n._scales[e] = t, t;
                    for (; null == r && (r = n._scales[e], n = n.mark ? n.mark.group : n._parent););
                    return r;
                }
                function o(e, t) {
                    m.debug(e, [
                        'building group',
                        t._id
                    ]), t._scales = t._scales || {}, t.scale = a.bind(t), t.items = t.items || [], this._children[t._id] = this._children[t._id] || [], t.axes = t.axes || [], t.axisItems = t.axisItems || [], t.legends = t.legends || [], t.legendItems = t.legendItems || [], this._graph.group(t._id, t);
                }
                function s(e, t) {
                    m.debug(e, ['building children marks #' + t._id]);
                    var n, i, a, o, s, u, l = this._def.marks;
                    for (o = 0, s = l.length; o < s; ++o)
                        n = l[o], i = n.from || {}, a = t.datum._facetID, t.items[o] = {
                            group: t,
                            _scaleRefs: {}
                        }, u = n.type === x.GROUP ? new r() : new v(), u.init(this._graph, n, t.items[o], this, t._id, a), this._children[t._id].push({
                            builder: u,
                            from: i.data || (i.mark ? 'vg_' + t._id + '_' + i.mark : a),
                            type: x.MARK
                        });
                }
                function u(e, t) {
                    var n = t.axes, i = t.axisItems, a = this;
                    _(this._graph, this._def.axes, n, t), n.forEach(function (e, n) {
                        var o = a._def.axes[n].scale, s = e.def(), u = null;
                        i[n] = {
                            group: t,
                            axis: e,
                            layer: s.layer
                        }, u = s.type === x.GROUP ? new r() : new v(), u.init(a._graph, s, i[n], a).dependency(h.SCALES, o), a._children[t._id].push({
                            builder: u,
                            type: x.AXIS,
                            scale: o
                        });
                    });
                }
                function l(e, t) {
                    var n = t.legends, i = t.legendItems, a = this;
                    b(this._graph, this._def.legends, n, t), n.forEach(function (e, n) {
                        var o = e.size() || e.shape() || e.fill() || e.stroke() || e.opacity(), s = e.def(), u = null;
                        i[n] = {
                            group: t,
                            legend: e
                        }, u = s.type === x.GROUP ? new r() : new v(), u.init(a._graph, s, i[n], a).dependency(h.SCALES, o), a._children[t._id].push({
                            builder: u,
                            type: x.LEGEND,
                            scale: o
                        });
                    });
                }
                var c = e('datalib'), d = e('vega-dataflow'), f = d.Node, h = d.Dependencies, p = d.Tuple, g = d.Collector, m = e('vega-logging'), v = e('./Builder'), y = e('./Scale'), _ = e('../parse/axes'), b = e('../parse/legends'), x = r.TYPES = {
                        GROUP: 'group',
                        MARK: 'mark',
                        AXIS: 'axis',
                        LEGEND: 'legend'
                    }, w = r.prototype = new v();
                w.init = function (e, t) {
                    var n, r = this;
                    this._scaler = new f(e), (t.scales || []).forEach(function (t) {
                        t = r.scale(n = t.name, new y(e, t, r)), r.scale(n + ':prev', t), r._scaler.addListener(t);
                    }), this._recursor = new f(e), this._recursor.evaluate = i.bind(this);
                    var a = (t.axes || []).reduce(function (e, t) {
                        return e[t.scale] = 1, e;
                    }, {});
                    return a = (t.legends || []).reduce(function (e, t) {
                        return e[t.size || t.shape || t.fill || t.stroke || t.opacity] = 1, e;
                    }, a), this._recursor.dependency(h.SCALES, c.keys(a)), this._collector = new g(e), v.prototype.init.apply(this, arguments);
                }, w.evaluate = function () {
                    var e = v.prototype.evaluate.apply(this, arguments), t = this._graph, n = this, r = this._scales, i = this._mark.items;
                    if (e.mod.length < i.length) {
                        var a = c.keys(r).some(function (t) {
                            return r[t].reevaluate(e);
                        });
                        !a && this._def.axes && (a = this._def.axes.reduce(function (t, n) {
                            return t || e.scales[n.scale];
                        }, !1)), !a && this._def.legends && (a = this._def.legends.reduce(function (t, n) {
                            return t || e.scales[n.size || n.shape || n.fill || n.stroke];
                        }, !1)), a && (e.mod = e.mod.concat(p.idFilter(i, e.mod, e.add, e.rem)));
                    }
                    return e.add.forEach(function (t) {
                        o.call(n, e, t);
                    }), e.rem.forEach(function (e) {
                        t.group(e._id, null);
                    }), e;
                }, w.pipeline = function () {
                    return [
                        this,
                        this._scaler,
                        this._recursor,
                        this._collector,
                        this._bounder
                    ];
                }, w.disconnect = function () {
                    var e = this;
                    return c.keys(e._children).forEach(function (t) {
                        e._children[t].forEach(function (t) {
                            e._recursor.removeListener(t.builder), t.builder.disconnect();
                        });
                    }), e._children = {}, v.prototype.disconnect.call(this);
                }, w.child = function (e, t) {
                    for (var n, r = this._children[t], i = 0, a = r.length; i < a && (n = r[i], n.type != x.MARK || n.builder._def.name != e); ++i);
                    return n.builder;
                }, t.exports = r;
            },
            {
                '../parse/axes': 94,
                '../parse/legends': 99,
                './Builder': 111,
                './Scale': 114,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        114: [
            function (e, t, n) {
                (function (n) {
                    function r(e, t, n) {
                        return this._def = t, this._parent = n, this._updated = !1, k.prototype.init.call(this, e).reflows(!0);
                    }
                    function i(e) {
                        var t = this._def.name, n = t + ':prev', r = a.call(this, e.scale(t)), i = r.type === E.ORDINAL ? o : u, s = y.call(this, e);
                        return i.call(this, r, s, e), e.scale(t, r), e.scale(n, e.scale(n) || r), r;
                    }
                    function a(e) {
                        var t = this._graph.config(), n = this._def.type || E.LINEAR;
                        if (!e || n !== e.type) {
                            var r = t.scale[n] || _.scale[n];
                            if (!r)
                                throw Error('Unrecognized scale type: ' + n);
                            (e = r()).type = e.type || n, e.scaleName = this._def.name, e._prev = {};
                        }
                        return e;
                    }
                    function o(e, t, n) {
                        var r, i, a = this._def, o = e._prev, u = !1, l = m.call(this, a.padding) || 0, c = null == a.outerPadding ? l : m.call(this, a.outerPadding), d = a.points && m.call(this, a.points), f = m.call(this, a.round) || null == a.round, h = !0;
                        if (b.isObject(a.range) && !b.isArray(a.range) && (u = !0, t = g.call(this, A.RANGE, a.range, e, n)), r = g.call(this, A.DOMAIN, a.domain, e, n), r && !b.equal(o.domain, r) && (e.domain(r), o.domain = r, this._updated = !0), !b.equal(o.range, t)) {
                            if (a.bandSize) {
                                var p, v = m.call(this, a.bandSize), y = r.length, _ = a.points ? l * v : l * v * (y - 1) + 2 * c;
                                t[0] > t[1] ? (p = t[1] || 0, t = [
                                    p + (v * y + _),
                                    p
                                ]) : (p = t[0] || 0, t = [
                                    p,
                                    p + (v * y + _)
                                ]), a.reverse && (t = t.reverse());
                            }
                            i = 'string' == typeof t[0], i || t.length > 2 || 1 === t.length || u ? (e.range(t), h = !1) : d && f ? e.rangeRoundPoints(t, l) : d ? e.rangePoints(t, l) : f ? e.rangeRoundBands(t, l, c) : e.rangeBands(t, l, c), o.range = t, this._updated = !0;
                        }
                        !e.invert && h && s(e);
                    }
                    function s(e) {
                        e.invert = function (t, n) {
                            var r = e.range(), i = r[0] < r[1], a = i ? D : P;
                            if (1 === arguments.length) {
                                if (!b.isNumber(t))
                                    throw Error('Ordinal scale inversion is only supported for numeric input (' + t + ').');
                                return e.domain()[a(r, t)];
                            }
                            if (2 === arguments.length) {
                                if (!b.isNumber(t) || !b.isNumber(n))
                                    throw Error('Extents to ordinal invert are not numbers (' + t + ', ' + n + ').');
                                var o, s = e.domain(), u = a(r, t), l = a(r, n), c = r.length - 1;
                                return l < u && (o = u, u = l, l = u), u < 0 && (u = 0), l > c && (l = c), (i ? b.range(u, l + 1) : b.range(l, u - 1, -1)).map(function (e) {
                                    return s[e];
                                });
                            }
                        };
                    }
                    function u(e, t, n) {
                        var r, i, a = this._def, o = e._prev, s = m.call(this, a.round), u = m.call(this, a.exponent), l = m.call(this, a.clamp), c = m.call(this, a.nice);
                        r = a.type === E.QUANTILE ? g.call(this, A.DOMAIN, a.domain, e, n) : v.call(this, e, n), r && !b.equal(o.domain, r) && (e.domain(r), o.domain = r, this._updated = !0), 'height' === m.call(this, a.range) && (t = t.reverse()), t && !b.equal(o.range, t) && (e[s && e.rangeRound ? 'rangeRound' : 'range'](t), o.range = t, this._updated = !0), u && a.type === E.POWER && e.exponent(u), l && e.clamp(!0), c && (a.type === E.TIME ? (i = _.time[c], i || w.error('Unrecognized interval: ' + i), e.nice(i)) : e.nice());
                    }
                    function l(e) {
                        return e.type === E.ORDINAL || e.type === E.QUANTILE;
                    }
                    function c(e) {
                        return e.fields || b.array(e);
                    }
                    function d(e) {
                        return e.some(function (e) {
                            return !e.data || e.data && b.array(e.field).some(function (e) {
                                return e.parent;
                            });
                        });
                    }
                    function f(e, t) {
                        return b.array(e.field).map(function (e) {
                            return e.parent ? b.accessor(e.parent)(t.datum) : e;
                        });
                    }
                    function h(e, t) {
                        var n = c(e);
                        return 1 == n.length && 1 == b.array(n[0].field).length ? S.TYPES.TUPLE : l(t) && b.isObject(e.sort) ? S.TYPES.MULTI : S.TYPES.VALUE;
                    }
                    function p(e, t, n, r) {
                        var i = c(t), a = d(i), o = h(t, n), s = l(n), u = t.sort, p = '_' + e, g = f(i[0], r);
                        if (n[p] || this[p])
                            return n[p] || this[p];
                        var m, v, y = new S(this._graph).type(o);
                        return a ? n[p] = y : this[p] = y, s ? o === S.TYPES.VALUE ? (m = [{
                                name: A.GROUPBY,
                                get: b.identity
                            }], v = { '*': A.COUNT }) : o === S.TYPES.TUPLE ? (m = [{
                                name: A.GROUPBY,
                                get: b.$(g[0])
                            }], v = b.isObject(u) ? [{
                                field: A.VALUE,
                                get: b.$(u.field),
                                ops: [u.op]
                            }] : { '*': A.COUNT }) : (m = A.GROUPBY, v = [{
                                field: A.VALUE,
                                ops: [u.op]
                            }]) : (m = [], v = [{
                                field: A.VALUE,
                                get: o == S.TYPES.TUPLE ? b.$(g[0]) : b.identity,
                                ops: [
                                    A.MIN,
                                    A.MAX
                                ],
                                as: [
                                    A.MIN,
                                    A.MAX
                                ]
                            }]), y.param('groupby', m).param('summarize', v), y._lastUpdate = -1, y;
                    }
                    function g(e, t, n, r) {
                        function i(e) {
                            k.dependency(M.SIGNALS, e);
                        }
                        if (null == t)
                            return [];
                        if (b.isArray(t))
                            return t.map(m.bind(this));
                        var a, o, s, u, g, v, y, _, x, w, k = this, T = this._graph, E = c(t), L = d(E), C = h(t, n), D = p.apply(this, arguments), P = t.sort, I = l(n);
                        if (L || !L && D._lastUpdate < this._stamp) {
                            for (a = 0, o = E.length; a < o; ++a)
                                if (g = E[a], x = g.data || r.datum._facetID, _ = T.data(x).last(), !(_.stamp <= this._stamp)) {
                                    for (v = f(g, r), s = 0, u = v.length; s < u; ++s)
                                        y = v[s], C === S.TYPES.VALUE ? D.accessors(null, y) : C === S.TYPES.MULTI && D.accessors(y, g.sort || P.field), D.evaluate(_);
                                    this.dependency(M.DATA, x), D.dependency(M.SIGNALS).forEach(i);
                                }
                            D._lastUpdate = this._stamp, _ = D.aggr().result(), I ? (b.isObject(P) ? (w = P.op + '_' + A.VALUE, w = b.comparator(w)) : P === !0 && (w = b.comparator(A.GROUPBY)), w && (_ = _.sort(w)), D._values = _.map(function (e) {
                                return e[A.GROUPBY];
                            })) : (_ = _[0], D._values = b.isValid(_) ? [
                                _[A.MIN],
                                _[A.MAX]
                            ] : []);
                        }
                        return D._values;
                    }
                    function m(e) {
                        if (!e || !e.signal)
                            return e;
                        var t, n = e.signal;
                        return this.dependency(M.SIGNALS, (t = b.field(n))[0]), this._graph.signalRef(t);
                    }
                    function v(e, t) {
                        var n, r, i = this._def, a = [
                                null,
                                null
                            ];
                        return void 0 !== i.domain && (a = b.isObject(i.domain) ? g.call(this, A.DOMAIN, i.domain, e, t) : a), r = a.length - 1, void 0 !== i.domainMin && (b.isObject(i.domainMin) ? i.domainMin.signal ? a[0] = b.isValid(n = m.call(this, i.domainMin)) ? n : a[0] : a[0] = g.call(this, A.DOMAIN + A.MIN, i.domainMin, e, t)[0] : a[0] = i.domainMin), void 0 !== i.domainMax && (b.isObject(i.domainMax) ? i.domainMax.signal ? a[r] = b.isValid(n = m.call(this, i.domainMax)) ? n : a[r] : a[r] = g.call(this, A.DOMAIN + A.MAX, i.domainMax, e, t)[1] : a[r] = i.domainMax), i.type === E.LOG || i.type === E.TIME || i.type === E.TIME_UTC || !i.zero && void 0 !== i.zero || (a[0] = Math.min(0, a[0]), a[r] = Math.max(0, a[r])), a;
                    }
                    function y(e) {
                        var t = this._def, n = this._graph.config(), r = m.call(this, t.range), i = [
                                null,
                                null
                            ];
                        if (void 0 !== r)
                            if ('string' == typeof r)
                                if (T[r])
                                    i = [
                                        0,
                                        e[r]
                                    ];
                                else {
                                    if (!n.range[r])
                                        return w.error('Unrecogized range: ' + r), i;
                                    i = n.range[r];
                                }
                            else if (b.isArray(r))
                                i = b.duplicate(r).map(m.bind(this));
                            else {
                                if (b.isObject(r))
                                    return null;
                                i = [
                                    0,
                                    r
                                ];
                            }
                        if (void 0 !== t.rangeMin && (i[0] = t.rangeMin.signal ? m.call(this, t.rangeMin) : t.rangeMin), void 0 !== t.rangeMax && (i[i.length - 1] = t.rangeMax.signal ? m.call(this, t.rangeMax) : t.rangeMax), void 0 !== t.reverse) {
                            var a = m.call(this, t.reverse);
                            b.isObject(a) && (a = b.accessor(a.field)(e.datum)), a && (i = i.reverse());
                        }
                        var o = i[0], s = i[i.length - 1];
                        return (null === o && null !== s || null !== o && null === s) && w.error('Range is underspecified. Please ensure either the "range" property or both "rangeMin" and "rangeMax" are specified.'), i;
                    }
                    var _ = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, b = e('datalib'), x = e('vega-dataflow'), w = e('vega-logging'), k = x.Node, M = x.Dependencies, S = e('../transforms/Aggregate'), T = {
                            width: 1,
                            height: 1
                        }, E = {
                            LINEAR: 'linear',
                            ORDINAL: 'ordinal',
                            LOG: 'log',
                            POWER: 'pow',
                            SQRT: 'sqrt',
                            TIME: 'time',
                            TIME_UTC: 'utc',
                            QUANTILE: 'quantile',
                            QUANTIZE: 'quantize',
                            THRESHOLD: 'threshold'
                        }, A = {
                            DOMAIN: 'domain',
                            RANGE: 'range',
                            COUNT: 'count',
                            GROUPBY: 'groupby',
                            MIN: 'min',
                            MAX: 'max',
                            VALUE: 'value',
                            ASC: 'asc',
                            DESC: 'desc'
                        }, L = r.prototype = new k();
                    L.evaluate = function (e) {
                        var t = this, n = function (e) {
                                i.call(t, e);
                            };
                        return this._updated = !1, e.add.forEach(n), e.mod.forEach(n), this._updated && (e.scales[this._def.name] = 1, w.debug(e, [
                            'scale',
                            this._def.name
                        ])), x.ChangeSet.create(e, !0);
                    }, L.dependency = function (e, t) {
                        if (2 == arguments.length) {
                            var n = e === M.DATA ? 'data' : 'signal';
                            t = b.array(t);
                            for (var r = 0, i = t.length; r < i; ++r)
                                this._graph[n](t[r]).addListener(this._parent);
                        }
                        return k.prototype.dependency.call(this, e, t);
                    };
                    var C = _.bisector(b.numcmp).right, D = function (e, t) {
                            return C(e, t) - 1;
                        }, P = _.bisector(function (e, t) {
                            return -1 * b.numcmp(e, t);
                        }).left;
                    t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                '../transforms/Aggregate': 119,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        115: [
            function (e, t, n) {
                (function (n) {
                    function r(e, t) {
                        this.duration = e || 500, this.ease = t && a.ease(t) || a.ease('cubic-in-out'), this.updates = { next: null };
                    }
                    function i(e) {
                        for (var t, n, r, i, a, s, l = this.updates, c = l, d = c.next, f = this.duration, h = !0; null != d; c = d, d = c.next)
                            if (t = d.item, n = t.delay || 0, r = (e - n) / f, r < 0)
                                h = !1;
                            else {
                                for (r > 1 && (r = 1), i = d.ease(r), a = 0, s = d.length; a < s; ++a)
                                    t[d[a].property] = d[a](i);
                                t.touch(), o.item(t), 1 === r ? (d.remove && (t.status = u.EXIT, t.remove()), c.next = d.next, d = c) : h = !1;
                            }
                        return this.callback(), h;
                    }
                    var a = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, o = e('vega-scenegraph').bound, s = e('vega-dataflow').Tuple, u = e('./Builder').STATUS, l = r.prototype, c = {
                            text: 1,
                            url: 1
                        };
                    l.interpolate = function (e, t) {
                        var n, r, i, o, l = null;
                        for (n in t)
                            r = e[n], i = t[n], r !== i && (c[n] || void 0 === r ? s.set(e, n, i) : 'number' != typeof r || isFinite(r) ? (o = a.interpolate(r, i), o.property = n, (l || (l = [])).push(o)) : s.set(e, n, i));
                        return null === l && e.status === u.EXIT && (l = []), null != l && (l.item = e, l.ease = e.mark.ease || this.ease, l.next = this.updates.next, this.updates.next = l), this;
                    }, l.start = function (e) {
                        for (var t = this, n = t.updates, r = n.next; null != r; n = r, r = n.next)
                            r.item.status === u.EXIT && (r.item.status = u.UPDATE, r.remove = !0);
                        t.callback = e, a.timer(function (e) {
                            return i.call(t, e);
                        });
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './Builder': 111,
                'vega-dataflow': 42,
                'vega-scenegraph': 50
            }
        ],
        116: [
            function (e, t, n) {
                function r(e, t) {
                    function n() {
                        L.type = null;
                    }
                    function r(e) {
                        return { data: e };
                    }
                    function a(e) {
                        var t = z || (S.ticks ? S.ticks(q) : S.domain()), n = i(S, t, R).map(r);
                        return t = t.map(function (t) {
                            return t = r(t), t.label = e(t.data), t;
                        }), [
                            t,
                            n
                        ];
                    }
                    function k(e) {
                        var n = e.orient, r = e.marks[5].properties.update, i = r.encode, a = t.titleOffsetAutoMin, o = t.titleOffsetAutoMax, s = t.titleOffsetAutoMargin;
                        r.encode = function (e, t, r, u, l, c) {
                            var d = i.call(i, e, t, r, u, l, c), f = 'bottom' === n || 'top' === n ? 'y' : 'x';
                            if (null != Y[f])
                                return d;
                            b.clear().union(t.items[3].bounds).union(t.items[4].bounds);
                            var h = r ? {} : e, p = 'left' === n || 'right' === n ? 'width' : 'height', g = 'top' === n || 'left' === n ? -1 : 1, m = ~~(b[p]() + e.fontSize / 2 + s);
                            return v.set(h, f, g * Math.min(Math.max(a, m), o)), r && r.interpolate(e, h), !0;
                        };
                    }
                    function M(n) {
                        var r, i, a;
                        n.type === x ? (r = {
                            scale: n.scaleName,
                            offset: 0.5 + n.rangeBand() / 2
                        }, i = r) : (r = {
                            scale: n.scaleName,
                            offset: 0.5
                        }, i = {
                            scale: n.scaleName + ':prev',
                            offset: 0.5
                        }), a = o(n), m.extend(W.gridLines, f(t)), m.extend(W.majorTicks, f(t)), m.extend(W.minorTicks, f(t)), m.extend(W.tickLabels, h(t)), m.extend(W.domain, g(t)), m.extend(W.title, p(t)), W.gridLines.properties.enter.stroke = { value: t.gridColor }, W.gridLines.properties.enter.strokeOpacity = { value: t.gridOpacity }, W.gridLines.properties.enter.strokeWidth = { value: t.gridWidth }, W.gridLines.properties.enter.strokeDash = { value: t.gridDash }, u(T, W.gridLines, i, r, 1 / 0, n, t, E), u(T, W.majorTicks, i, r, I, n, t), u(T, W.minorTicks, i, r, N, n, t), s(T, W.tickLabels, i, r, I, j), c(T, W.domain, a, O), l(T, W.title, a, +A || -1), m.extend(W.gridLines.properties.update, B), m.extend(W.majorTicks.properties.update, $), m.extend(W.minorTicks.properties.update, H), m.extend(W.tickLabels.properties.update, G), m.extend(W.domain.properties.update, V), m.extend(W.title.properties.update, Y);
                        var v = [
                            W.gridLines,
                            W.majorTicks,
                            W.minorTicks,
                            W.tickLabels,
                            W.domain,
                            W.title
                        ];
                        m.extend(L, {
                            type: 'group',
                            interactive: !1,
                            properties: {
                                enter: {
                                    encode: d,
                                    scales: [n.scaleName],
                                    signals: [],
                                    data: []
                                },
                                update: {
                                    encode: d,
                                    scales: [n.scaleName],
                                    signals: [],
                                    data: []
                                }
                            }
                        }), L.marks = v.map(function (t) {
                            return y(e, t);
                        });
                    }
                    var S, T = t.orient, E = 0, A = t.titleOffset, L = {}, C = 'front', D = !1, P = null, I = t.tickSize, N = t.tickSize, O = t.tickSize, j = t.tickPadding || t.padding, z = null, U = null, F = null, R = 0, q = t.ticks, B = {}, G = {}, $ = {}, H = {}, Y = {}, V = {}, W = {
                            gridLines: {},
                            majorTicks: {},
                            minorTicks: {},
                            tickLabels: {},
                            domain: {},
                            title: {}
                        }, J = {};
                    return J.def = function () {
                        L.type || M(S);
                        var e = _.getTickFormat(S, q, F, U), t = a(e), n = P ? [P].map(r) : [];
                        return L.marks[0].from = function () {
                            return D ? t[0] : [];
                        }, L.marks[1].from = function () {
                            return t[0];
                        }, L.marks[2].from = function () {
                            return t[1];
                        }, L.marks[3].from = L.marks[1].from, L.marks[4].from = function () {
                            return [1];
                        }, L.marks[5].from = function () {
                            return n;
                        }, L.offset = E, L.orient = T, L.layer = C, 'auto' === A && k(L), L;
                    }, J.scale = function (e) {
                        return arguments.length ? (S !== e && (S = e, n()), J) : S;
                    }, J.orient = function (e) {
                        return arguments.length ? (T !== e && (T = e in w ? e + '' : t.orient, n()), J) : T;
                    }, J.title = function (e) {
                        return arguments.length ? (P !== e && (P = e, n()), J) : P;
                    }, J.tickCount = function (e) {
                        return arguments.length ? (q = e, J) : q;
                    }, J.tickValues = function (e) {
                        return arguments.length ? (z = e, J) : z;
                    }, J.tickFormat = function (e) {
                        return arguments.length ? (U !== e && (U = e, n()), J) : U;
                    }, J.tickFormatType = function (e) {
                        return arguments.length ? (F !== e && (F = e, n()), J) : F;
                    }, J.tickSize = function (e, t) {
                        if (!arguments.length)
                            return I;
                        var r = arguments.length - 1, i = +e, a = r > 1 ? +t : I, o = r > 0 ? +arguments[r] : I;
                        return I === i && N === a && O === o || n(), I = i, N = a, O = o, J;
                    }, J.tickSubdivide = function (e) {
                        return arguments.length ? (R = +e, J) : R;
                    }, J.offset = function (e) {
                        return arguments.length ? (E = m.isObject(e) ? e : +e, J) : E;
                    }, J.tickPadding = function (e) {
                        return arguments.length ? (j !== +e && (j = +e, n()), J) : j;
                    }, J.titleOffset = function (e) {
                        return arguments.length ? (A !== e && (A = e, n()), J) : A;
                    }, J.layer = function (e) {
                        return arguments.length ? (C !== e && (C = e, n()), J) : C;
                    }, J.grid = function (e) {
                        return arguments.length ? (D !== e && (D = e, n()), J) : D;
                    }, J.gridLineProperties = function (e) {
                        return arguments.length ? (B !== e && (B = e), J) : B;
                    }, J.majorTickProperties = function (e) {
                        return arguments.length ? ($ !== e && ($ = e), J) : $;
                    }, J.minorTickProperties = function (e) {
                        return arguments.length ? (H !== e && (H = e), J) : H;
                    }, J.tickLabelProperties = function (e) {
                        return arguments.length ? (G !== e && (G = e), J) : G;
                    }, J.titleProperties = function (e) {
                        return arguments.length ? (Y !== e && (Y = e), J) : Y;
                    }, J.domainProperties = function (e) {
                        return arguments.length ? (V !== e && (V = e), J) : V;
                    }, J.reset = function () {
                        return n(), J;
                    }, J;
                }
                function i(e, t, n) {
                    var r = [];
                    if (n && t.length > 1) {
                        for (var i, o, s = a(e.domain()), u = -1, l = t.length, c = (t[1] - t[0]) / ++n; ++u < l;)
                            for (i = n; --i > 0;)
                                (o = +t[u] - i * c) >= s[0] && r.push(o);
                        for (--u, i = 0; ++i < n && (o = +t[u] + i * c) < s[1];)
                            r.push(o);
                    }
                    return r;
                }
                function a(e) {
                    var t = e[0], n = e[e.length - 1];
                    return t < n ? [
                        t,
                        n
                    ] : [
                        n,
                        t
                    ];
                }
                function o(e) {
                    return e.rangeExtent ? e.rangeExtent() : a(e.range());
                }
                function s(e, t, n, r, i, a) {
                    i = Math.max(i, 0) + a, 'left' !== e && 'top' !== e || (i *= -1), 'top' === e || 'bottom' === e ? (m.extend(t.properties.enter, {
                        x: n,
                        y: { value: i }
                    }), m.extend(t.properties.update, {
                        x: r,
                        y: { value: i },
                        align: { value: 'center' },
                        baseline: { value: M[e] }
                    })) : (m.extend(t.properties.enter, {
                        x: { value: i },
                        y: n
                    }), m.extend(t.properties.update, {
                        x: { value: i },
                        y: r,
                        align: { value: k[e] },
                        baseline: { value: 'middle' }
                    }));
                }
                function u(e, t, n, r, i, a, o, s) {
                    var u = 'left' === e || 'top' === e ? -1 : 1;
                    if (i = i === 1 / 0 ? 'top' === e || 'bottom' === e ? {
                            field: {
                                group: 'height',
                                level: 2
                            },
                            mult: -u,
                            offset: s * -u
                        } : {
                            field: {
                                group: 'width',
                                level: 2
                            },
                            mult: -u,
                            offset: s * -u
                        } : {
                            value: u * i,
                            offset: s
                        }, 'between' === o.tickPlacement && a.type === x) {
                        var l = a.range(), c = 0.5 + (a.rangeBand() || (l[1] - l[0]) / 2);
                        r = n = m.duplicate(r), r.offset = n.offset = c;
                    }
                    'top' === e || 'bottom' === e ? (m.extend(t.properties.enter, {
                        x: n,
                        y: { value: 0 },
                        y2: i
                    }), m.extend(t.properties.update, {
                        x: r,
                        y: { value: 0 },
                        y2: i
                    }), m.extend(t.properties.exit, { x: r })) : (m.extend(t.properties.enter, {
                        x: { value: 0 },
                        x2: i,
                        y: n
                    }), m.extend(t.properties.update, {
                        x: { value: 0 },
                        x2: i,
                        y: r
                    }), m.extend(t.properties.exit, { y: r }));
                }
                function l(e, t, n, r) {
                    var i = t.properties.update, a = ~~((n[0] + n[1]) / 2), o = 'top' === e || 'left' === e ? -1 : 1;
                    'bottom' === e || 'top' === e ? (i.x = { value: a }, i.angle = { value: 0 }, r >= 0 && (i.y = { value: o * r })) : (i.y = { value: a }, i.angle = { value: 'left' === e ? -90 : 90 }, r >= 0 && (i.x = { value: o * r }));
                }
                function c(e, t, n, r) {
                    var i;
                    'top' !== e && 'left' !== e || (r *= -1), i = 'bottom' === e || 'top' === e ? 'M' + n[0] + ',' + r + 'V0H' + n[1] + 'V' + r : 'M' + r + ',' + n[0] + 'H0V' + n[1] + 'H' + r, t.properties.update.path = { value: i };
                }
                function d(e, t, n) {
                    var r = n ? {} : e, i = e.mark.def.offset, a = e.mark.def.orient, o = t.width, s = t.height;
                    if (m.isArray(i)) {
                        var u = i[0], l = i[1];
                        switch (a) {
                        case 'left':
                            v.set(r, 'x', -u), v.set(r, 'y', l);
                            break;
                        case 'right':
                            v.set(r, 'x', o + u), v.set(r, 'y', l);
                            break;
                        case 'bottom':
                            v.set(r, 'x', u), v.set(r, 'y', s + l);
                            break;
                        case 'top':
                            v.set(r, 'x', u), v.set(r, 'y', -l);
                            break;
                        default:
                            v.set(r, 'x', u), v.set(r, 'y', l);
                        }
                    } else
                        switch (m.isObject(i) && (i = -t.scale(i.scale)(i.value)), a) {
                        case 'left':
                            v.set(r, 'x', -i), v.set(r, 'y', 0);
                            break;
                        case 'right':
                            v.set(r, 'x', o + i), v.set(r, 'y', 0);
                            break;
                        case 'bottom':
                            v.set(r, 'x', 0), v.set(r, 'y', s + i);
                            break;
                        case 'top':
                            v.set(r, 'x', 0), v.set(r, 'y', -i);
                            break;
                        default:
                            v.set(r, 'x', 0), v.set(r, 'y', 0);
                        }
                    return n && n.interpolate(e, r), !0;
                }
                function f(e) {
                    return {
                        type: 'rule',
                        interactive: !1,
                        key: 'data',
                        properties: {
                            enter: {
                                stroke: { value: e.tickColor },
                                strokeWidth: { value: e.tickWidth },
                                opacity: { value: 0.000001 }
                            },
                            exit: { opacity: { value: 0.000001 } },
                            update: { opacity: { value: 1 } }
                        }
                    };
                }
                function h(e) {
                    return {
                        type: 'text',
                        interactive: !0,
                        key: 'data',
                        properties: {
                            enter: {
                                fill: { value: e.tickLabelColor },
                                font: { value: e.tickLabelFont },
                                fontSize: { value: e.tickLabelFontSize },
                                opacity: { value: 0.000001 },
                                text: { field: 'label' }
                            },
                            exit: { opacity: { value: 0.000001 } },
                            update: { opacity: { value: 1 } }
                        }
                    };
                }
                function p(e) {
                    return {
                        type: 'text',
                        interactive: !0,
                        properties: {
                            enter: {
                                font: { value: e.titleFont },
                                fontSize: { value: e.titleFontSize },
                                fontWeight: { value: e.titleFontWeight },
                                fill: { value: e.titleColor },
                                align: { value: 'center' },
                                baseline: { value: 'middle' },
                                text: { field: 'data' }
                            },
                            update: {}
                        }
                    };
                }
                function g(e) {
                    return {
                        type: 'path',
                        interactive: !1,
                        properties: {
                            enter: {
                                x: { value: 0.5 },
                                y: { value: 0.5 },
                                stroke: { value: e.axisColor },
                                strokeWidth: { value: e.axisWidth }
                            },
                            update: {}
                        }
                    };
                }
                var m = e('datalib'), v = e('vega-dataflow').Tuple, y = e('../parse/mark'), _ = e('../util'), b = new (e('vega-scenegraph')).Bounds(), x = 'ordinal', w = {
                        top: 1,
                        right: 1,
                        bottom: 1,
                        left: 1
                    }, k = {
                        bottom: 'center',
                        top: 'center',
                        left: 'right',
                        right: 'left'
                    }, M = {
                        bottom: 'top',
                        top: 'bottom',
                        left: 'middle',
                        right: 'middle'
                    };
                t.exports = r;
            },
            {
                '../parse/mark': 100,
                '../util': 149,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-scenegraph': 50
            }
        ],
        117: [
            function (e, t, n) {
                (function (n) {
                    function r(e) {
                        function t() {
                            $.type = null;
                        }
                        function n(e, t) {
                            return {
                                data: e,
                                index: t
                            };
                        }
                        function r(e) {
                            return 'ordinal' === e || 'quantize' === e || 'quantile' === e || 'threshold' === e;
                        }
                        function y(e) {
                            var t, r, i, a = _(w, k, M, S, T), o = (null == A ? e.ticks ? e.ticks.apply(e, j) : e.domain() : A).map(n), s = m.getTickFormat(e, o.length, C, L), u = 5, l = d.range(o.length);
                            w ? (r = o.map(function (e) {
                                return Math.sqrt(w(e.data));
                            }), i = d.max(r), r = r.reduce(function (e, t, n, r) {
                                return n > 0 && (e[n] = e[n - 1] + r[n - 1] / 2 + u), e[n] += t / 2, e;
                            }, [0]).map(Math.round)) : (i = Math.round(Math.sqrt(P.symbolSize)), r = E || (t = q.fontSize) && t.value + u || P.labelFontSize + u, r = l.map(function (e, t) {
                                return Math.round(i / 2 + t * r);
                            }));
                            var c, h = O;
                            D && (c = R.fontSize, h += 5 + (c && c.value || P.titleFontSize));
                            for (var p = 0, g = r.length; p < g; ++p)
                                r[p] += h;
                            a.scales = a.scales || [{}], f.extend(a.scales[0], {
                                name: 'legend',
                                type: 'ordinal',
                                points: !0,
                                domain: l,
                                range: r
                            });
                            var v = (D ? [D] : []).map(n);
                            return o.forEach(function (e) {
                                e.label = s(e.data), e.offset = i;
                            }), a.marks[0].from = function () {
                                return v;
                            }, a.marks[1].from = function () {
                                return o;
                            }, a.marks[2].from = a.marks[1].from, a;
                        }
                        function _(t, n, r, l, c) {
                            var d = f.extend(B.titles, o(P)), h = f.extend(B.symbols, s(P)), m = f.extend(B.labels, u(P));
                            return a(h, t, n, r, l, c), f.extend(d.properties.update, R), f.extend(h.properties.update, U), f.extend(m.properties.update, q), d.properties.enter.x.value += O, d.properties.enter.y.value += O, m.properties.enter.x.offset += O + 1, h.properties.enter.x.offset = O + 1, m.properties.update.x.offset += O + 1, h.properties.update.x.offset = O + 1, f.extend($, {
                                type: 'group',
                                interactive: !1,
                                properties: {
                                    enter: p(e, 'group', z),
                                    legendPosition: {
                                        encode: i.bind(null, P),
                                        signals: [],
                                        scales: [],
                                        data: [],
                                        fields: []
                                    }
                                }
                            }), $.marks = [
                                d,
                                h,
                                m
                            ].map(function (t) {
                                return g(e, t);
                            }), $;
                        }
                        function b(e) {
                            var t = x(e), r = e.domain(), i = (null == A ? r : A).map(n), a = F.width && F.width.value || P.gradientWidth, o = m.getTickFormat(e, i.length, C, L);
                            t.scales = t.scales || [{}];
                            var s = f.extend(t.scales[0], {
                                name: 'legend',
                                type: e.type,
                                round: !0,
                                zero: !1,
                                domain: [
                                    r[0],
                                    r[r.length - 1]
                                ],
                                range: [
                                    O,
                                    a + O
                                ]
                            });
                            'pow' === e.type && (s.exponent = e.exponent());
                            var u = (D ? [D] : []).map(n);
                            return i.forEach(function (e, t) {
                                e.label = o(e.data), e.align = t == i.length - 1 ? 'right' : 0 === t ? 'left' : 'center';
                            }), t.marks[0].from = function () {
                                return u;
                            }, t.marks[1].from = function () {
                                return [1];
                            }, t.marks[2].from = function () {
                                return i;
                            }, t;
                        }
                        function x(t) {
                            var n = f.extend(B.titles, o(P)), r = f.extend(B.gradient, l(P)), a = f.extend(B.labels, c(P)), s = new h(), u = t.domain(), d = u[0], m = u[u.length - 1], v = t.copy().domain([
                                    d,
                                    m
                                ]).range([
                                    0,
                                    1
                                ]), y = 'linear' !== t.type && t.ticks ? t.ticks.call(t, 15) : u;
                            d !== y[0] && y.unshift(d), m !== y[y.length - 1] && y.push(m);
                            for (var _ = 0, b = y.length; _ < b; ++_)
                                s.stop(v(y[_]), t(y[_]));
                            r.properties.enter.fill = { value: s }, f.extend(n.properties.update, R), f.extend(r.properties.update, F), f.extend(a.properties.update, q);
                            var x = r.properties, w = F.height, k = w && w.value || x.enter.height.value;
                            if (a.properties.enter.y.value = k, a.properties.update.y.value = k, D) {
                                var M = n.properties, S = R.fontSize, T = 4 + (S && S.value || M.enter.fontSize.value);
                                r.properties.enter.y.value += T, a.properties.enter.y.value += T, r.properties.update.y.value += T, a.properties.update.y.value += T;
                            }
                            return n.properties.enter.x.value += O, n.properties.enter.y.value += O, r.properties.enter.x.value += O, r.properties.enter.y.value += O, a.properties.enter.y.value += O, r.properties.update.x.value += O, r.properties.update.y.value += O, a.properties.update.y.value += O, f.extend($, {
                                type: 'group',
                                interactive: !1,
                                properties: {
                                    enter: p(e, 'group', z),
                                    legendPosition: {
                                        encode: i.bind(null, P),
                                        signals: [],
                                        scales: [],
                                        data: [],
                                        fields: []
                                    }
                                }
                            }), $.marks = [
                                n,
                                r,
                                a
                            ].map(function (t) {
                                return g(e, t);
                            }), $;
                        }
                        var w = null, k = null, M = null, S = null, T = null, E = null, A = null, L = null, C = null, D = null, P = e.config().legend, I = P.orient, N = P.offset, O = P.padding, j = [5], z = {}, U = {}, F = {}, R = {}, q = {}, B = {
                                titles: {},
                                symbols: {},
                                labels: {},
                                gradient: {}
                            }, G = {}, $ = {};
                        return G.def = function () {
                            var e = w || k || M || S || T;
                            return $.type || ($ = e !== M && e !== S || r(e.type) ? y(e) : b(e)), $.orient = I, $.offset = N, $.padding = O, $.margin = P.margin, $;
                        }, G.size = function (e) {
                            return arguments.length ? (w !== e && (w = e, t()), G) : w;
                        }, G.shape = function (e) {
                            return arguments.length ? (k !== e && (k = e, t()), G) : k;
                        }, G.fill = function (e) {
                            return arguments.length ? (M !== e && (M = e, t()), G) : M;
                        }, G.stroke = function (e) {
                            return arguments.length ? (S !== e && (S = e, t()), G) : S;
                        }, G.opacity = function (e) {
                            return arguments.length ? (T !== e && (T = e, t()), G) : T;
                        }, G.title = function (e) {
                            return arguments.length ? (D !== e && (D = e, t()), G) : D;
                        }, G.format = function (e) {
                            return arguments.length ? (L !== e && (L = e, t()), G) : L;
                        }, G.formatType = function (e) {
                            return arguments.length ? (C !== e && (C = e, t()), G) : C;
                        }, G.spacing = function (e) {
                            return arguments.length ? (E !== +e && (E = +e, t()), G) : E;
                        }, G.orient = function (e) {
                            return arguments.length ? (I = e in v ? e + '' : P.orient, G) : I;
                        }, G.offset = function (e) {
                            return arguments.length ? (N = +e, G) : N;
                        }, G.values = function (e) {
                            return arguments.length ? (A = e, G) : A;
                        }, G.legendProperties = function (e) {
                            return arguments.length ? (z = e, G) : z;
                        }, G.symbolProperties = function (e) {
                            return arguments.length ? (U = e, G) : U;
                        }, G.gradientProperties = function (e) {
                            return arguments.length ? (F = e, G) : F;
                        }, G.labelProperties = function (e) {
                            return arguments.length ? (q = e, G) : q;
                        }, G.titleProperties = function (e) {
                            return arguments.length ? (R = e, G) : R;
                        }, G.reset = function () {
                            return t(), G;
                        }, G;
                    }
                    function i(e, t, n, r, i, a, o) {
                        var s, u = r ? {} : t, l = t.mark.def, c = l.offset, d = l.orient, f = 2 * l.padding, h = 'left' === d ? 0 : n.width, p = ~~t.bounds.width() + (t.width ? 0 : f), g = ~~t.bounds.height() + (t.height ? 0 : f), m = n._legendPositions || (n._legendPositions = {
                                right: 0.5,
                                left: 0.5
                            });
                        if (u.x = 0.5, u.y = 0.5, u.width = p, u.height = g, 'left' === d || 'right' === d) {
                            u.y = m[d], m[d] += g + l.margin;
                            var y = n.axes, _ = n.axisItems, b = v[d];
                            for (s = 0; s < y.length; ++s)
                                y[s].orient() === d && (h = Math.max(h, Math.abs(_[s].bounds[b])));
                        }
                        switch (d) {
                        case 'left':
                            u.x -= h + c + p;
                            break;
                        case 'right':
                            u.x += h + c;
                            break;
                        case 'top-left':
                            u.x += c, u.y += c;
                            break;
                        case 'top-right':
                            u.x += n.width - p - c, u.y += c;
                            break;
                        case 'bottom-left':
                            u.x += c, u.y += n.height - g - c;
                            break;
                        case 'bottom-right':
                            u.x += n.width - p - c, u.y += n.height - g - c;
                        }
                        var x = e.baseline, w = 0;
                        for (s = 0; s < n.legendItems.length; s++) {
                            var k = n.legendItems[s];
                            w += k.bounds.height() + (t.height ? 0 : f);
                        }
                        'middle' === x ? u.y += c + n.height / 2 - w / 2 : 'bottom' === x && (u.y += c + n.height - w), r && r.interpolate(t, u);
                        var M = t.mark.def.properties.enter.encode;
                        return M.call(M, t, n, r, i, a, o), !0;
                    }
                    function a(e, t, n, r, i, a) {
                        var o = e.properties.enter, s = e.properties.update;
                        t && (o.size = s.size = {
                            scale: t.scaleName,
                            field: 'data'
                        }), n && (o.shape = s.shape = {
                            scale: n.scaleName,
                            field: 'data'
                        }), r && (o.fill = s.fill = {
                            scale: r.scaleName,
                            field: 'data'
                        }), i && (o.stroke = s.stroke = {
                            scale: i.scaleName,
                            field: 'data'
                        }), a && (s.opacity = {
                            scale: a.scaleName,
                            field: 'data'
                        });
                    }
                    function o(e) {
                        return {
                            type: 'text',
                            interactive: !1,
                            key: 'data',
                            properties: {
                                enter: {
                                    x: { value: 0 },
                                    y: { value: 0 },
                                    fill: { value: e.titleColor },
                                    font: { value: e.titleFont },
                                    fontSize: { value: e.titleFontSize },
                                    fontWeight: { value: e.titleFontWeight },
                                    baseline: { value: 'top' },
                                    text: { field: 'data' },
                                    opacity: { value: 0.000001 }
                                },
                                exit: { opacity: { value: 0.000001 } },
                                update: { opacity: { value: 1 } }
                            }
                        };
                    }
                    function s(e) {
                        return {
                            type: 'symbol',
                            interactive: !1,
                            key: 'data',
                            properties: {
                                enter: {
                                    x: {
                                        field: 'offset',
                                        mult: 0.5
                                    },
                                    y: {
                                        scale: 'legend',
                                        field: 'index'
                                    },
                                    shape: { value: e.symbolShape },
                                    size: { value: e.symbolSize },
                                    stroke: { value: e.symbolColor },
                                    strokeWidth: { value: e.symbolStrokeWidth },
                                    opacity: { value: 0.000001 }
                                },
                                exit: { opacity: { value: 0.000001 } },
                                update: {
                                    x: {
                                        field: 'offset',
                                        mult: 0.5
                                    },
                                    y: {
                                        scale: 'legend',
                                        field: 'index'
                                    },
                                    opacity: { value: 1 }
                                }
                            }
                        };
                    }
                    function u(e) {
                        return {
                            type: 'text',
                            interactive: !1,
                            key: 'data',
                            properties: {
                                enter: {
                                    x: {
                                        field: 'offset',
                                        offset: 5
                                    },
                                    y: {
                                        scale: 'legend',
                                        field: 'index'
                                    },
                                    fill: { value: e.labelColor },
                                    font: { value: e.labelFont },
                                    fontSize: { value: e.labelFontSize },
                                    align: { value: e.labelAlign },
                                    baseline: { value: e.labelBaseline },
                                    text: { field: 'label' },
                                    opacity: { value: 0.000001 }
                                },
                                exit: { opacity: { value: 0.000001 } },
                                update: {
                                    opacity: { value: 1 },
                                    x: {
                                        field: 'offset',
                                        offset: 5
                                    },
                                    y: {
                                        scale: 'legend',
                                        field: 'index'
                                    }
                                }
                            }
                        };
                    }
                    function l(e) {
                        return {
                            type: 'rect',
                            interactive: !1,
                            properties: {
                                enter: {
                                    x: { value: 0 },
                                    y: { value: 0 },
                                    width: { value: e.gradientWidth },
                                    height: { value: e.gradientHeight },
                                    stroke: { value: e.gradientStrokeColor },
                                    strokeWidth: { value: e.gradientStrokeWidth },
                                    opacity: { value: 0.000001 }
                                },
                                exit: { opacity: { value: 0.000001 } },
                                update: {
                                    x: { value: 0 },
                                    y: { value: 0 },
                                    opacity: { value: 1 }
                                }
                            }
                        };
                    }
                    function c(e) {
                        return {
                            type: 'text',
                            interactive: !1,
                            key: 'data',
                            properties: {
                                enter: {
                                    x: {
                                        scale: 'legend',
                                        field: 'data'
                                    },
                                    y: { value: 20 },
                                    dy: { value: 2 },
                                    fill: { value: e.labelColor },
                                    font: { value: e.labelFont },
                                    fontSize: { value: e.labelFontSize },
                                    align: { field: 'align' },
                                    baseline: { value: 'top' },
                                    text: { field: 'label' },
                                    opacity: { value: 0.000001 }
                                },
                                exit: { opacity: { value: 0.000001 } },
                                update: {
                                    x: {
                                        scale: 'legend',
                                        field: 'data'
                                    },
                                    y: { value: 20 },
                                    opacity: { value: 1 }
                                }
                            }
                        };
                    }
                    var d = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, f = e('datalib'), h = e('vega-scenegraph').Gradient, p = e('../parse/properties'), g = e('../parse/mark'), m = e('../util'), v = {
                            left: 'x1',
                            right: 'x2',
                            'top-left': 'x1',
                            'top-right': 'x2',
                            'bottom-left': 'x1',
                            'bottom-right': 'x2'
                        };
                    t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                '../parse/mark': 100,
                '../parse/properties': 105,
                '../util': 149,
                datalib: 27,
                'vega-scenegraph': 50
            }
        ],
        118: [
            function (e, t, n) {
                t.exports = function e(t, n) {
                    var r, i, a, o, s;
                    if (n(t))
                        return !0;
                    var u = [
                        'items',
                        'axisItems',
                        'legendItems'
                    ];
                    for (a = 0, o = u.length; a < o; ++a)
                        if (s = t[u[a]])
                            for (r = 0, i = s.length; r < i; ++r)
                                if (e(s[r], n))
                                    return !0;
                };
            },
            {}
        ],
        119: [
            function (e, t, n) {
                function r(e) {
                    return d.prototype.init.call(this, e), d.addParameters(this, {
                        groupby: { type: 'array<field>' },
                        summarize: {
                            type: 'custom',
                            set: function (e) {
                                function t(e) {
                                    e.signal && (l[e.signal] = 1);
                                }
                                var n, r, i, o, s, u, l = {}, d = this._transform;
                                if (!a.isArray(o = e)) {
                                    o = [];
                                    for (s in e)
                                        u = a.array(e[s]), o.push({
                                            field: s,
                                            ops: u
                                        });
                                }
                                for (n = 0, r = o.length; n < r; ++n)
                                    i = o[n], i.field.signal && (l[i.field.signal] = 1), a.array(i.ops).forEach(t), a.array(i.as).forEach(t);
                                return d._fields = o, d._aggr = null, d.dependency(c.SIGNALS, a.keys(l)), d;
                            }
                        }
                    }), this._aggr = null, this._input = null, this._args = null, this._fields = [], this._out = [], this._type = p.TUPLE, this._acc = {
                        groupby: a.true,
                        value: a.true
                    }, this.router(!0).produces(!0);
                }
                function i(e) {
                    var t, n, r, i, a, o, s, u = [];
                    for (a = e._dims, t = 0, n = a.length; t < n; ++t)
                        u.push(a[t].name);
                    for (o = e._aggr, t = 0, n = o.length; t < n; ++t)
                        for (s = o[t].measures.fields, r = 0, i = s.length; r < i; ++r)
                            u.push(s[r]);
                    return u;
                }
                var a = e('datalib'), o = e('vega-dataflow'), s = e('vega-logging'), u = o.ChangeSet, l = o.Tuple, c = o.Dependencies, d = e('./Transform'), f = e('./Facetor'), h = r.prototype = Object.create(d.prototype);
                h.constructor = r;
                var p = r.TYPES = {
                    VALUE: 1,
                    TUPLE: 2,
                    MULTI: 3
                };
                r.VALID_OPS = [
                    'values',
                    'count',
                    'valid',
                    'missing',
                    'distinct',
                    'sum',
                    'mean',
                    'average',
                    'variance',
                    'variancep',
                    'stdev',
                    'stdevp',
                    'median',
                    'q1',
                    'q3',
                    'modeskew',
                    'min',
                    'max',
                    'argmin',
                    'argmax'
                ], h.type = function (e) {
                    return this._type = e, this;
                }, h.accessors = function (e, t) {
                    var n = this._acc;
                    n.groupby = a.$(e) || a.true, n.value = a.$(t) || a.true;
                }, h.aggr = function () {
                    if (this._aggr)
                        return this._aggr;
                    var e = this._graph, t = !1, n = [], r = this.param('groupby').field, o = function (t) {
                            return t.signal ? e.signalRef(t.signal) : t;
                        }, s = this._fields.map(function (e) {
                            var r = {
                                name: o(e.field),
                                as: a.array(e.as),
                                ops: a.array(o(e.ops)).map(o),
                                get: e.get
                            };
                            return t = t || null != r.get, n.push(r.name), r;
                        });
                    r.forEach(function (e) {
                        e.get && (t = !0), n.push(e.name || e);
                    }), this._args = t || !s.length ? null : n, s.length || (s = { '*': 'values' });
                    var u = this._aggr = new f().groupby(r).stream(!0).summarize(s);
                    return this._out = i(u), this._type !== p.VALUE && u.key('_id'), u;
                }, h.transform = function (e, t) {
                    s.debug(e, ['aggregate']);
                    var n, r, i, a, o, c = u.create(e), d = this.aggr(), f = this._out, h = this._args, g = !0, m = l.prev;
                    if (t && (c.rem.push.apply(c.rem, d.result()), d.clear(), this._aggr = null, d = this.aggr()), this._type === p.TUPLE)
                        n = function (e) {
                            d._add(e), l.prev_init(e);
                        }, r = function (e) {
                            d._rem(m(e));
                        }, i = function (e) {
                            d._mod(e, m(e));
                        }, a = function (e) {
                            d._markMod(e, m(e));
                        };
                    else {
                        var v = this._acc.groupby, y = this._acc.value, _ = this._type === p.VALUE ? y : function (e) {
                                return {
                                    _id: e._id,
                                    groupby: v(e),
                                    value: y(e)
                                };
                            };
                        n = function (e) {
                            d._add(_(e)), l.prev_init(e);
                        }, r = function (e) {
                            d._rem(_(m(e)));
                        }, i = function (e) {
                            d._mod(_(e), _(m(e)));
                        }, a = function (e) {
                            d._mark(_(e), _(m(e)));
                        };
                    }
                    if (e.add.forEach(n), t)
                        e.mod.forEach(n);
                    else {
                        if (e.rem.forEach(r), h)
                            for (o = 0, g = !1; o < h.length; ++o)
                                if (e.fields[h[o]]) {
                                    g = !0;
                                    break;
                                }
                        e.mod.forEach(g ? i : a);
                    }
                    for (o = 0; o < f.length; ++o)
                        c.fields[f[o]] = 1;
                    return d._input = e, d.changes(c);
                }, t.exports = r;
            },
            {
                './Facetor': 125,
                './Transform': 141,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        120: [
            function (e, t, n) {
                function r() {
                    this._collector = null;
                }
                var i = e('./Transform').prototype, a = r.prototype = Object.create(i);
                a.constructor = r, a.init = function (e) {
                    return i.init.call(this, e), this.batch(!0);
                }, a.transform = function (e, t) {
                    return this.batchTransform(e, this._collector.data(), t);
                }, a.batchTransform = function () {
                }, t.exports = r;
            },
            { './Transform': 141 }
        ],
        121: [
            function (e, t, n) {
                function r(e) {
                    return u.prototype.init.call(this, e), s.addParameters(this, {
                        field: { type: 'field' },
                        min: { type: 'value' },
                        max: { type: 'value' },
                        base: {
                            type: 'value',
                            default: 10
                        },
                        maxbins: {
                            type: 'value',
                            default: 20
                        },
                        step: { type: 'value' },
                        steps: { type: 'value' },
                        minstep: { type: 'value' },
                        div: {
                            type: 'array<value>',
                            default: [
                                5,
                                2
                            ]
                        }
                    }), this._output = {
                        start: 'bin_start',
                        end: 'bin_end',
                        mid: 'bin_mid'
                    }, this.mutates(!0);
                }
                var i = e('datalib'), a = e('vega-dataflow').Tuple, o = e('vega-logging'), s = e('./Transform'), u = e('./BatchTransform'), l = r.prototype = Object.create(u.prototype);
                l.constructor = r, l.extent = function (e) {
                    var t, n = [
                            this.param('min'),
                            this.param('max')
                        ];
                    return null != n[0] && null != n[1] || (t = i.extent(e, this.param('field').accessor), null == n[0] && (n[0] = t[0]), null == n[1] && (n[1] = t[1])), n;
                }, l.batchTransform = function (e, t) {
                    function n(e) {
                        var t = d(e);
                        t = null == t ? null : h.start + p * ~~((t - h.start) / p), a.set(e, s.start, t), a.set(e, s.end, t + p), a.set(e, s.mid, t + p / 2);
                    }
                    o.debug(e, ['binning']);
                    var r = this.extent(t), s = this._output, u = this.param('step'), l = this.param('steps'), c = this.param('minstep'), d = this.param('field').accessor, f = {
                            min: r[0],
                            max: r[1],
                            base: this.param('base'),
                            maxbins: this.param('maxbins'),
                            div: this.param('div')
                        };
                    u && (f.step = u), l && (f.steps = l), c && (f.minstep = c);
                    var h = i.bins(f), p = h.step;
                    return e.add.forEach(n), e.mod.forEach(n), e.rem.forEach(n), e.fields[s.start] = 1, e.fields[s.end] = 1, e.fields[s.mid] = 1, e;
                }, t.exports = r;
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        122: [
            function (e, t, n) {
                function r(e) {
                    return s.prototype.init.call(this, e), s.addParameters(this, {
                        field: {
                            type: 'field',
                            default: 'data'
                        },
                        pattern: {
                            type: 'value',
                            default: '[\\w\']+'
                        },
                        case: {
                            type: 'value',
                            default: 'lower'
                        },
                        stopwords: {
                            type: 'value',
                            default: ''
                        }
                    }), this._output = {
                        text: 'text',
                        count: 'count'
                    }, this.router(!0).produces(!0);
                }
                var i = e('vega-dataflow'), a = i.Tuple, o = e('vega-logging'), s = e('./Transform'), u = r.prototype = Object.create(s.prototype);
                u.constructor = r, u.transform = function (e, t) {
                    function n(e) {
                        return a.prev_init(e), i(e);
                    }
                    function r(e) {
                        return i(a.prev(e));
                    }
                    o.debug(e, ['countpattern']);
                    var i = this.param('field').accessor, s = this.param('pattern'), u = this.param('stopwords'), l = !1;
                    return this._stop !== u && (this._stop = u, this._stop_re = new RegExp('^' + u + '$', 'i'), t = !0), this._pattern !== s && (this._pattern = s, this._match = new RegExp(this._pattern, 'g'), t = !0), t && (this._counts = {}), this._add(e.add, n), t || this._rem(e.rem, r), (t || (l = e.fields[i.field])) && (l && this._rem(e.mod, r), this._add(e.mod, n)), this._changeset(e);
                }, u._changeset = function (e) {
                    var t, n, r, o = this._counts, s = this._tuples || (this._tuples = {}), u = i.ChangeSet.create(e), l = this._output;
                    for (t in o)
                        n = s[t], r = o[t] || 0, !n && r ? (s[t] = n = a.ingest({}), n[l.text] = t, n[l.count] = r, u.add.push(n)) : 0 === r ? (n && u.rem.push(n), delete o[t], delete s[t]) : n[l.count] !== r && (a.set(n, l.count, r), u.mod.push(n));
                    return u;
                }, u._tokenize = function (e) {
                    switch (this.param('case')) {
                    case 'upper':
                        e = e.toUpperCase();
                        break;
                    case 'lower':
                        e = e.toLowerCase();
                    }
                    return e.match(this._match);
                }, u._add = function (e, t) {
                    var n, r, i, a, o = this._counts, s = this._stop_re;
                    for (i = 0; i < e.length; ++i)
                        for (n = this._tokenize(t(e[i])), r = 0; r < n.length; ++r)
                            s.test(a = n[r]) || (o[a] = 1 + (o[a] || 0));
                }, u._rem = function (e, t) {
                    var n, r, i, a, o = this._counts, s = this._stop_re;
                    for (i = 0; i < e.length; ++i)
                        for (n = this._tokenize(t(e[i])), r = 0; r < n.length; ++r)
                            s.test(a = n[r]) || (o[a] -= 1);
                }, t.exports = r;
            },
            {
                './Transform': 141,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        123: [
            function (e, t, n) {
                function r(e) {
                    return m.prototype.init.call(this, e), g.addParameters(this, {
                        with: { type: 'data' },
                        diagonal: {
                            type: 'value',
                            default: 'true'
                        },
                        filter: { type: 'expr' }
                    }), this._output = {
                        left: 'a',
                        right: 'b'
                    }, this._lastWith = null, this._cids = {}, this._cache = {}, this.router(!0).produces(!0);
                }
                function i(e, t) {
                    var n = this._cache, r = n[e._id] || (n[e._id] = {
                            c: [],
                            f: !1
                        });
                    r.c.push(t);
                }
                function a(e, t, n) {
                    return e ? t._id + '_' + n._id : n._id + '_' + t._id;
                }
                function o(e, t, n, r, o, s, u) {
                    for (var l, c, d = this._output, f = this._cache, p = this._cids, g = e.add, m = !1, v = 0, y = n.length, _ = {}; v < y; ++v)
                        l = n[v], c = a(t, u, l), p[c] || (u._id !== l._id || r) && (h.set(_, d.left, t ? u : l), h.set(_, d.right, t ? l : u), !o || o(_) ? (g.push(_ = h.ingest(_)), i.call(this, u, _), u._id !== l._id && i.call(this, l, _), s[_._id] = 1, p[c] = !0, _ = {}) : (f[l._id] && (f[l._id].f = !0), m = !0));
                    f[u._id] && (f[u._id].f = m);
                }
                function s(e, t, n, r, i, s, u, l) {
                    var c, d, f, h, p, g = this._output, m = this._cache, v = this._cids, y = m[l._id], _ = y && y.c, b = !y || y.f, x = e.mod, w = e.rem;
                    if (_)
                        for (c = _.length - 1; c >= 0; --c)
                            if (d = _[c], h = l === d[g.left], f = h ? d[g.right] : d[g.left], p = a(h, l, f), m[f._id])
                                if (!i || i(d)) {
                                    if (s[d._id])
                                        continue;
                                    x.push(d), s[d._id] = 1;
                                } else
                                    u[d._id] || w.push.apply(w, _.splice(c, 1)), u[d._id] = 1, v[p] = !1, y.f = !0;
                            else
                                v[p] = !1, _.splice(c, 1);
                    i && b && o.call(this, e, t, n, r, i, s, l);
                }
                function u(e, t, n, r) {
                    var i, o, s, u, l, c = this._output, d = this._cache[r._id], f = this._cids, h = e.rem;
                    if (d) {
                        for (i = 0, o = d.c.length; i < o; ++i)
                            s = d.c[i], l = r === s[c.left], u = l ? s[c.right] : s[c.left], f[a(l, r, u)] = !1, n[s._id] || (h.push(s), n[s._id] = 1);
                        this._cache[r._id] = null;
                    }
                }
                function l(e, t) {
                    var n, r, i, a, o, s, u = this._cache, l = c.keys(u), d = e.rem;
                    for (n = 0, r = l.length; n < r; ++n)
                        for (o = u[l[n]], i = 0, a = o.c.length; i < a; ++i)
                            s = o.c[i], t[s._id] || (d.push(s), t[s._id] = 1);
                    this._cache = {}, this._cids = {}, this._lastWith = null;
                }
                var c = e('datalib'), d = e('vega-dataflow'), f = d.ChangeSet, h = d.Tuple, p = e('vega-logging'), g = e('./Transform'), m = e('./BatchTransform'), v = r.prototype = Object.create(m.prototype);
                v.constructor = r, v.batchTransform = function (e, t, n) {
                    p.debug(e, ['crossing']);
                    var r = this.param('with'), i = this.param('diagonal'), a = this._output, c = this.param('filter') || null, d = !r.name, h = d ? e : r.source.last(), g = d ? t : r.source.values(), m = f.create(e), v = {}, y = {};
                    return n ? (l.call(this, m, y), t.forEach(o.bind(this, m, !0, g, i, c, v)), this._lastWith = h.stamp) : (e.rem.forEach(u.bind(this, m, !0, y)), e.add.forEach(o.bind(this, m, !0, g, i, c, v)), h.stamp > this._lastWith && (h.rem.forEach(u.bind(this, m, !1, y)), h.add.forEach(o.bind(this, m, !1, t, i, c, v)), h.mod.forEach(s.bind(this, m, !1, t, i, c, v, y)), this._lastWith = h.stamp), e.mod.forEach(s.bind(this, m, !0, g, i, c, v, y))), m.fields[a.left] = 1, m.fields[a.right] = 1, m;
                }, t.exports = r;
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        124: [
            function (e, t, n) {
                function r(t) {
                    return i.addParameters(this, {
                        transform: {
                            type: 'custom',
                            set: function (e) {
                                return this._transform._pipeline = e, this._transform;
                            },
                            get: function () {
                                var t = e('../parse/transforms'), n = this._transform;
                                return n._pipeline.map(function (e) {
                                    return t(n._graph, e);
                                });
                            }
                        }
                    }), this._pipeline = [], a.call(this, t);
                }
                var i = e('./Transform'), a = e('./Aggregate'), o = r.prototype = Object.create(a.prototype);
                o.constructor = r, o.aggr = function () {
                    return a.prototype.aggr.call(this).facet(this);
                }, o.transform = function (e, t) {
                    var n = a.prototype.transform.call(this, e, t);
                    return e.add.length && this.listeners()[0].rerank(), n;
                }, t.exports = r;
            },
            {
                '../parse/transforms': 109,
                './Aggregate': 119,
                './Transform': 141
            }
        ],
        125: [
            function (e, t, n) {
                function r() {
                    o.call(this), this._facet = null, this._facetID = ++d;
                }
                function i(e) {
                    c.debug({}, [
                        'disconnecting cell',
                        this.tuple._id
                    ]);
                    var t = this.ds.pipeline();
                    e.removeListener(t[0]), e._graph.removeListener(t[0]), e._graph.disconnect(t);
                }
                var a = e('datalib'), o = a.Aggregator, s = o.prototype, u = e('vega-dataflow'), l = u.Tuple, c = e('vega-logging'), d = 0, f = r.prototype = Object.create(s);
                f.constructor = r, f.facet = function (e) {
                    return arguments.length ? (this._facet = e, this) : this._facet;
                }, f._ingest = function (e) {
                    return l.ingest(e, null);
                }, f._assign = l.set, f._newcell = function (e, t) {
                    var n = s._newcell.call(this, e, t), r = this._facet;
                    if (r) {
                        var a = r._graph, o = n.tuple, u = r.param('transform');
                        n.ds = a.data(o._facetID, u, o), n.disconnect = i, r.addListener(u[0]);
                    }
                    return n;
                }, f._newtuple = function (e, t) {
                    var n = s._newtuple.call(this, e);
                    return this._facet && (l.set(n, 'key', t), l.set(n, '_facetID', this._facetID + '_' + t)), n;
                }, f.clear = function () {
                    if (this._facet)
                        for (var e in this._cells)
                            this._cells[e].disconnect(this._facet);
                    return s.clear.call(this);
                }, f._on_add = function (e, t) {
                    this._facet && t.ds._input.add.push(e);
                }, f._on_rem = function (e, t) {
                    this._facet && t.ds._input.rem.push(e);
                }, f._on_mod = function (e, t, n, r) {
                    this._facet && (n === r ? n.ds._input.mod.push(e) : (n.ds._input.rem.push(e), r.ds._input.add.push(e)));
                }, f._on_drop = function (e) {
                    this._facet && e.disconnect(this._facet);
                }, f._on_keep = function (e) {
                    this._facet && u.ChangeSet.copy(this._input, e.ds._input);
                }, t.exports = r;
            },
            {
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        126: [
            function (e, t, n) {
                function r(e) {
                    return o.prototype.init.call(this, e), o.addParameters(this, { test: { type: 'expr' } }), this._skip = {}, this.router(!0);
                }
                var i = e('vega-dataflow'), a = e('vega-logging'), o = e('./Transform'), s = r.prototype = Object.create(o.prototype);
                s.constructor = r, s.transform = function (e) {
                    a.debug(e, ['filtering']);
                    var t = i.ChangeSet.create(e), n = this._skip, r = this.param('test');
                    return e.rem.forEach(function (e) {
                        1 !== n[e._id] ? t.rem.push(e) : n[e._id] = 0;
                    }), e.add.forEach(function (e) {
                        r(e) ? t.add.push(e) : n[e._id] = 1;
                    }), e.mod.forEach(function (e) {
                        var i = r(e), a = 1 === n[e._id];
                        i && a ? (n[e._id] = 0, t.add.push(e)) : i && !a ? t.mod.push(e) : !i && a || (t.rem.push(e), n[e._id] = 1);
                    }), t;
                }, t.exports = r;
            },
            {
                './Transform': 141,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        127: [
            function (e, t, n) {
                function r(e) {
                    return s.prototype.init.call(this, e), s.addParameters(this, { fields: { type: 'array<field>' } }), this._output = {
                        key: 'key',
                        value: 'value'
                    }, this._cache = {}, this.router(!0).produces(!0);
                }
                var i = e('vega-dataflow'), a = i.Tuple, o = e('vega-logging'), s = e('./Transform'), u = r.prototype = Object.create(s.prototype);
                u.constructor = r, u._reset = function (e, t) {
                    for (var n in this._cache)
                        t.rem.push.apply(t.rem, this._cache[n]);
                    this._cache = {};
                }, u._tuple = function (e, t, n) {
                    var r = this._cache[e._id] || (this._cache[e._id] = Array(n));
                    return r[t] ? a.rederive(e, r[t]) : r[t] = a.derive(e);
                }, u._fn = function (e, t, n) {
                    var r, i, o, s, u, l;
                    for (r = 0, o = e.length; r < o; ++r)
                        for (u = e[r], i = 0, s = t.field.length; i < s; ++i)
                            l = this._tuple(u, i, s), a.set(l, this._output.key, t.field[i]), a.set(l, this._output.value, t.accessor[i](u)), n.push(l);
                }, u.transform = function (e, t) {
                    o.debug(e, ['folding']);
                    var n = this, r = this.param('fields'), a = i.ChangeSet.create(e);
                    return t && this._reset(e, a), this._fn(e.add, r, a.add), this._fn(e.mod, r, t ? a.add : a.mod), e.rem.forEach(function (e) {
                        a.rem.push.apply(a.rem, n._cache[e._id]), n._cache[e._id] = null;
                    }), (e.add.length || e.rem.length || r.field.some(function (t) {
                        return !!e.fields[t];
                    })) && (a.fields[this._output.key] = 1, a.fields[this._output.value] = 1), a;
                }, t.exports = r;
            },
            {
                './Transform': 141,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        128: [
            function (e, t, n) {
                (function (n) {
                    function r(t) {
                        return l.prototype.init.call(this, t), this._prev = null, this._interactive = !1, this._setup = !0, this._nodes = [], this._links = [], this._layout = i.layout.force(), l.addParameters(this, {
                            size: {
                                type: 'array<value>',
                                default: e('./screen').size
                            },
                            bound: {
                                type: 'value',
                                default: !0
                            },
                            links: { type: 'data' },
                            linkStrength: {
                                type: 'value',
                                default: 1
                            },
                            linkDistance: {
                                type: 'value',
                                default: 20
                            },
                            charge: {
                                type: 'value',
                                default: -30
                            },
                            chargeDistance: {
                                type: 'value',
                                default: 1 / 0
                            },
                            friction: {
                                type: 'value',
                                default: 0.9
                            },
                            theta: {
                                type: 'value',
                                default: 0.8
                            },
                            gravity: {
                                type: 'value',
                                default: 0.1
                            },
                            alpha: {
                                type: 'value',
                                default: 0.1
                            },
                            iterations: {
                                type: 'value',
                                default: 500
                            },
                            interactive: {
                                type: 'value',
                                default: this._interactive
                            },
                            active: {
                                type: 'value',
                                default: this._prev
                            },
                            fixed: { type: 'data' }
                        }), this._output = {
                            x: 'layout_x',
                            y: 'layout_y'
                        }, this.mutates(!0);
                    }
                    var i = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, a = e('vega-dataflow'), o = a.Tuple, s = a.ChangeSet, u = e('vega-logging'), l = e('./Transform'), c = r.prototype = Object.create(l.prototype);
                    c.constructor = r, c.transform = function (e, t) {
                        u.debug(e, ['force']), t -= e.signals.active ? 1 : 0;
                        var n = this.param('interactive'), r = this.param('links').source, i = r.last(), a = this.param('active'), s = this._output, l = this._layout, c = this._nodes, d = this._links;
                        if (i.stamp < e.stamp && (i = null), this.configure(e, i, n, t), !n) {
                            for (var f = this.param('iterations'), h = 0; h < f; ++h)
                                l.tick();
                            l.stop();
                        }
                        return this.update(a), (t || a !== this._prev && a && a.update) && l.alpha(this.param('alpha')), a !== this._prev && (this._prev = a), e.rem.length && l.nodes(this._nodes = o.idFilter(c, e.rem)), i && i.rem.length && l.links(this._links = o.idFilter(d, i.rem)), e.fields[s.x] = 1, e.fields[s.y] = 1, e;
                    }, c.configure = function (e, t, n, r) {
                        var i = this._layout, a = this._setup || e.add.length || t && t.add.length || n !== this._interactive || this.param('charge') !== i.charge() || this.param('linkStrength') !== i.linkStrength() || this.param('linkDistance') !== i.linkDistance();
                        if ((a || r) && i.size(this.param('size')).chargeDistance(this.param('chargeDistance')).theta(this.param('theta')).gravity(this.param('gravity')).friction(this.param('friction')), a) {
                            this._setup = !1, this._interactive = n;
                            var o, u, l = this, c = this._graph, d = this._nodes, f = this._links;
                            for (o = e.add, u = 0; u < o.length; ++u)
                                d.push({ tuple: o[u] });
                            if (t)
                                for (o = t.add, u = 0; u < o.length; ++u)
                                    f.push({
                                        tuple: o[u],
                                        source: d[o[u].source],
                                        target: d[o[u].target]
                                    });
                            var h = n ? function () {
                                c.propagate(s.create(null, !0), l);
                            } : null;
                            i.linkStrength(this.param('linkStrength')).linkDistance(this.param('linkDistance')).charge(this.param('charge')).nodes(d).links(f).on('tick', h).start().alpha(this.param('alpha'));
                        }
                    }, c.update = function (e) {
                        var t, n, r, i, a, s, u = this._output, l = this.param('bound'), c = this.param('fixed'), d = this.param('size'), f = this._nodes, h = {};
                        if (c && c.source)
                            for (c = c.source.values(), n = 0, r = c.length; n < r; ++n)
                                h[c[n].id] = 1;
                        for (n = 0; n < f.length; ++n)
                            r = f[n], i = r.tuple, t = i._id, e && e.id === t ? (r.fixed = 1, e.update && (r.x = r.px = e.x, r.y = r.py = e.y)) : r.fixed = h[t] || 0, a = l ? Math.max(0, Math.min(r.x, d[0])) : r.x, s = l ? Math.max(0, Math.min(r.y, d[1])) : r.y, o.set(i, u.x, a), o.set(i, u.y, s);
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './Transform': 141,
                './screen': 147,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        129: [
            function (e, t, n) {
                function r(e) {
                    return s.prototype.init.call(this, e), s.addParameters(this, {
                        field: { type: 'value' },
                        expr: { type: 'expr' }
                    }), this.mutates(!0);
                }
                var i = e('vega-dataflow'), a = i.Tuple, o = e('vega-logging'), s = e('./Transform'), u = r.prototype = Object.create(s.prototype);
                u.constructor = r, u.transform = function (e) {
                    function t(e) {
                        a.set(e, n, r(e)), i = !0;
                    }
                    o.debug(e, ['formulating']);
                    var n = this.param('field'), r = this.param('expr'), i = !1;
                    return e.add.forEach(t), this.reevaluate(e) && e.mod.forEach(t), i && (e.fields[n] = 1), e;
                }, t.exports = r;
            },
            {
                './Transform': 141,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        130: [
            function (e, t, n) {
                (function (n) {
                    function r(e) {
                        return u.prototype.init.call(this, e), u.addParameters(this, r.Parameters), u.addParameters(this, {
                            lon: { type: 'field' },
                            lat: { type: 'field' }
                        }), this._output = {
                            x: 'layout_x',
                            y: 'layout_y'
                        }, this.mutates(!0);
                    }
                    var i = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, a = e('datalib'), o = e('vega-dataflow').Tuple, s = e('vega-logging'), u = e('./Transform');
                    r.Parameters = {
                        projection: {
                            type: 'value',
                            default: 'mercator'
                        },
                        center: { type: 'array<value>' },
                        translate: {
                            type: 'array<value>',
                            default: e('./screen').center
                        },
                        rotate: { type: 'array<value>' },
                        scale: { type: 'value' },
                        precision: { type: 'value' },
                        clipAngle: { type: 'value' },
                        clipExtent: { type: 'value' }
                    }, r.d3Projection = function () {
                        var e, t, n, o = this.param('projection'), s = r.Parameters;
                        o !== this._mode && (this._mode = o, this._projection = i.geo[o]()), e = this._projection;
                        for (t in s)
                            'projection' !== t && e[t] && (n = this.param(t), void 0 === n || a.isArray(n) && 0 === n.length || n !== e[t]() && e[t](n));
                        return e;
                    };
                    var l = r.prototype = Object.create(u.prototype);
                    l.constructor = r, l.transform = function (e) {
                        function t(e) {
                            var t = [
                                    i(e),
                                    a(e)
                                ], r = u(t) || [
                                    null,
                                    null
                                ];
                            o.set(e, n.x, r[0]), o.set(e, n.y, r[1]);
                        }
                        s.debug(e, ['geo']);
                        var n = this._output, i = this.param('lon').accessor, a = this.param('lat').accessor, u = r.d3Projection.call(this);
                        return e.add.forEach(t), this.reevaluate(e) && (e.mod.forEach(t), e.rem.forEach(t)), e.fields[n.x] = 1, e.fields[n.y] = 1, e;
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './Transform': 141,
                './screen': 147,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        131: [
            function (e, t, n) {
                (function (n) {
                    function r(e) {
                        return l.prototype.init.call(this, e), l.addParameters(this, u.Parameters), l.addParameters(this, {
                            field: {
                                type: 'field',
                                default: null
                            }
                        }), this._output = { path: 'layout_path' }, this.mutates(!0);
                    }
                    var i = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, a = e('datalib'), o = e('vega-dataflow').Tuple, s = e('vega-logging'), u = e('./Geo'), l = e('./Transform'), c = r.prototype = Object.create(l.prototype);
                    c.constructor = r, c.transform = function (e) {
                        function t(e) {
                            o.set(e, n.path, c(r(e)));
                        }
                        s.debug(e, ['geopath']);
                        var n = this._output, r = this.param('field').accessor || a.identity, l = u.d3Projection.call(this), c = i.geo.path().projection(l);
                        return e.add.forEach(t), this.reevaluate(e) && (e.mod.forEach(t), e.rem.forEach(t)), e.fields[n.path] = 1, e;
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './Geo': 130,
                './Transform': 141,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        132: [
            function (e, t, n) {
                (function (n) {
                    function r(t) {
                        return l.prototype.init.call(this, t), u.addParameters(this, {
                            sort: {
                                type: 'array<field>',
                                default: null
                            },
                            children: {
                                type: 'field',
                                default: 'children'
                            },
                            parent: {
                                type: 'field',
                                default: 'parent'
                            },
                            field: {
                                type: 'value',
                                default: null
                            },
                            mode: {
                                type: 'value',
                                default: 'tidy'
                            },
                            size: {
                                type: 'array<value>',
                                default: e('./screen').size
                            },
                            nodesize: {
                                type: 'array<value>',
                                default: null
                            },
                            orient: {
                                type: 'value',
                                default: 'cartesian'
                            }
                        }), this._mode = null, this._output = {
                            x: 'layout_x',
                            y: 'layout_y',
                            width: 'layout_width',
                            height: 'layout_height',
                            depth: 'layout_depth'
                        }, this.mutates(!0);
                    }
                    var i = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, a = e('datalib'), o = e('vega-dataflow').Tuple, s = e('vega-logging'), u = e('./Transform'), l = e('./BatchTransform'), c = 'partition', d = {
                            cartesian: function (e, t) {
                                return e.parent === t.parent ? 1 : 2;
                            },
                            radial: function (e, t) {
                                return (e.parent === t.parent ? 1 : 2) / e.depth;
                            }
                        }, f = r.prototype = Object.create(l.prototype);
                    f.constructor = r, f.batchTransform = function (e, t) {
                        s.debug(e, ['hierarchy layout']);
                        var n = this._layout, r = this._output, u = this.param('mode'), l = this.param('sort'), f = this.param('nodesize'), h = this.param('parent').accessor, p = t.filter(function (e) {
                                return null === h(e);
                            })[0];
                        return u !== this._mode && (this._mode = u, 'tidy' === u && (u = 'tree'), n = this._layout = i.layout[u]()), e.fields[r.x] = 1, e.fields[r.y] = 1, e.fields[r.depth] = 1, u === c ? (e.fields[r.width] = 1, e.fields[r.height] = 1, n.value(this.param('field').accessor)) : n.separation(d[this.param('orient')]), f.length && u !== c ? n.nodeSize(f) : n.size(this.param('size')), n.sort(l.field.length ? a.comparator(l.field) : null).children(this.param('children').accessor).nodes(p), t.forEach(function (e) {
                            o.set(e, r.x, e.x), o.set(e, r.y, e.y), o.set(e, r.depth, e.depth), u === c && (o.set(e, r.width, e.dx), o.set(e, r.height, e.dy));
                        }), e;
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                './screen': 147,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        133: [
            function (e, t, n) {
                function r(e) {
                    return c.prototype.init.call(this, e), l.addParameters(this, {
                        groupby: { type: 'array<field>' },
                        orderby: { type: 'array<field>' },
                        field: { type: 'field' },
                        method: {
                            type: 'value',
                            default: 'value'
                        },
                        value: {
                            type: 'value',
                            default: 0
                        }
                    }), this.router(!0).produces(!0);
                }
                function i(e, t, n, r) {
                    var i, a = { _imputed: !0 };
                    for (i = 0; i < t.length; ++i)
                        a[e[i]] = t[i];
                    for (i = 0; i < r.length; ++i)
                        a[n[i]] = r[i];
                    return u.ingest(a);
                }
                function a(e, t, n) {
                    var r, i, a, s, u, l, c, d, f = [], h = function (e) {
                            return e(a);
                        }, p = function (e) {
                            return a = e, n.map(h);
                        };
                    for (l = f.domain = o.unique(e, p), d = l.length, c = l.reduce(function (e, t, n) {
                            return e[t] = {
                                value: t,
                                index: n
                            }, e;
                        }, {}), r = {}, i = 0; i < e.length; ++i)
                        a = e[i], s = null == t ? [] : t.map(h), u = r[s] || (f.push(r[s] = Array(d)), r[s].values = s, r[s]), u[c[p(a)].index] = a;
                    return f;
                }
                var o = e('datalib'), s = e('vega-logging'), u = e('vega-dataflow').Tuple, l = e('./Transform'), c = e('./BatchTransform'), d = r.prototype = Object.create(c.prototype);
                d.constructor = r, d.batchTransform = function (e, t) {
                    function n(e) {
                        return null == e ? null : y(e);
                    }
                    s.debug(e, ['imputing']);
                    var r, u, l, c, d, f, h = this.param('groupby'), p = this.param('orderby'), g = this.param('method'), m = this.param('value'), v = this.param('field'), y = v.accessor, _ = v.field, b = this._imputed || [], x = [], w = a(t, h.accessor, p.accessor), k = w.domain;
                    for (l = 0, d = w.length; l < d; ++l)
                        for (r = w[l], 'value' !== g && (m = o[g](r, n)), u = 0, c = r.length; u < c; ++u)
                            null == r[u] && (f = i(h.field, r.values, p.field, k[u]), f[_] = m, x.push(f));
                    for (u = 0, c = x.length; u < c; ++u)
                        e.add.push(x[u]);
                    for (u = 0, c = b.length; u < c; ++u)
                        e.rem.push(b[u]);
                    return this._imputed = x, e;
                }, t.exports = r;
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        134: [
            function (e, t, n) {
                function r(e) {
                    return p.prototype.init.call(this, e), p.addParameters(this, {
                        sourceX: {
                            type: 'field',
                            default: '_source.layout_x'
                        },
                        sourceY: {
                            type: 'field',
                            default: '_source.layout_y'
                        },
                        targetX: {
                            type: 'field',
                            default: '_target.layout_x'
                        },
                        targetY: {
                            type: 'field',
                            default: '_target.layout_y'
                        },
                        tension: {
                            type: 'value',
                            default: 0.2
                        },
                        shape: {
                            type: 'value',
                            default: 'line'
                        }
                    }), this._output = { path: 'layout_path' }, this.mutates(!0);
                }
                function i(e, t, n, r) {
                    return 'M' + e + ',' + t + 'L' + n + ',' + r;
                }
                function a(e, t, n, r, i) {
                    var a = n - e, o = r - t, s = i * (a + o), u = i * (o - a);
                    return 'M' + e + ',' + t + 'C' + (e + s) + ',' + (t + u) + ' ' + (n + u) + ',' + (r - s) + ' ' + n + ',' + r;
                }
                function o(e, t, n, r) {
                    return 'M' + e + ',' + t + 'V' + r + 'H' + n;
                }
                function s(e, t, n, r) {
                    return 'M' + e + ',' + t + 'H' + n + 'V' + r;
                }
                function u(e, t, n, r) {
                    var i = Math.cos(e), a = Math.sin(e), o = Math.cos(n), s = Math.sin(n), u = Math.abs(n - e) > Math.PI ? n <= e : n > e;
                    return 'M' + t * i + ',' + t * a + 'A' + t + ',' + t + ' 0 0,' + (u ? 1 : 0) + ' ' + t * o + ',' + t * s + 'L' + r * o + ',' + r * s;
                }
                function l(e, t, n, r) {
                    var i = (e + n) / 2;
                    return 'M' + e + ',' + t + 'C' + i + ',' + t + ' ' + i + ',' + r + ' ' + n + ',' + r;
                }
                function c(e, t, n, r) {
                    var i = (t + r) / 2;
                    return 'M' + e + ',' + t + 'C' + e + ',' + i + ' ' + n + ',' + i + ' ' + n + ',' + r;
                }
                function d(e, t, n, r) {
                    var i = Math.cos(e), a = Math.sin(e), o = Math.cos(n), s = Math.sin(n), u = (t + r) / 2;
                    return 'M' + t * i + ',' + t * a + 'C' + u * i + ',' + u * a + ' ' + u * o + ',' + u * s + ' ' + r * o + ',' + r * s;
                }
                var f = e('vega-dataflow').Tuple, h = e('vega-logging'), p = e('./Transform'), g = r.prototype = Object.create(p.prototype);
                g.constructor = r;
                var m = {
                    line: i,
                    curve: a,
                    cornerX: o,
                    cornerY: s,
                    cornerR: u,
                    diagonalX: l,
                    diagonalY: c,
                    diagonalR: d
                };
                g.transform = function (e) {
                    function t(e) {
                        var t = r(i(e), a(e), o(e), s(e), u);
                        f.set(e, n.path, t);
                    }
                    h.debug(e, ['linkpath']);
                    var n = this._output, r = m[this.param('shape')] || m.line, i = this.param('sourceX').accessor, a = this.param('sourceY').accessor, o = this.param('targetX').accessor, s = this.param('targetY').accessor, u = this.param('tension');
                    return e.add.forEach(t), this.reevaluate(e) && (e.mod.forEach(t), e.rem.forEach(t)), e.fields[n.path] = 1, e;
                }, t.exports = r;
            },
            {
                './Transform': 141,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        135: [
            function (e, t, n) {
                function r(e) {
                    return o.prototype.init.call(this, e), o.addParameters(this, {
                        on: { type: 'data' },
                        onKey: {
                            type: 'field',
                            default: null
                        },
                        as: { type: 'array<value>' },
                        keys: {
                            type: 'array<field>',
                            default: ['data']
                        },
                        default: { type: 'value' }
                    }), this.mutates(!0);
                }
                var i = e('vega-dataflow').Tuple, a = e('vega-logging'), o = e('./Transform'), s = r.prototype = Object.create(o.prototype);
                s.constructor = r, s.transform = function (e, t) {
                    function n(e) {
                        for (var t = 0; t < h.length; ++t) {
                            var n = m[h[t](e)] || g;
                            i.set(e, p[t], n);
                        }
                    }
                    a.debug(e, ['lookup']);
                    var r, o, s = this.param('on'), u = s.source.last(), l = s.source.values(), c = this.param('onKey'), d = c.field, f = this.param('keys'), h = f.accessor, p = this.param('as'), g = this.param('default'), m = this._lut;
                    if (null == m || this._on !== d || d && u.fields[d] || u.add.length || u.rem.length) {
                        if (d)
                            for (c = c.accessor, m = {}, r = 0; r < l.length; ++r)
                                m[c(o = l[r])] = o;
                        else
                            m = l;
                        this._lut = m, this._on = d, t = !0;
                    }
                    e.add.forEach(n);
                    var v = f.field.some(function (t) {
                        return e.fields[t];
                    });
                    return (v || t) && (e.mod.forEach(n), e.rem.forEach(n)), p.forEach(function (t) {
                        e.fields[t] = 1;
                    }), e;
                }, t.exports = r;
            },
            {
                './Transform': 141,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        136: [
            function (e, t, n) {
                function r(e, t, n) {
                    this._name = e, this._type = t, this._transform = n, this._value = [], this._accessors = [], this._resolution = !1, this._signals = [];
                }
                function i() {
                    var e = s.test(this._type), t = u.test(this._type), n = l.test(this._type), r = e ? this._value : this._value[0], i = e ? this._accessors : this._accessors[0];
                    return !a.isValid(i) && d.test(this._type) ? r : t ? {
                        name: r,
                        source: i
                    } : n ? {
                        field: r,
                        accessor: i
                    } : r;
                }
                var a = e('datalib'), o = e('vega-dataflow').Dependencies, s = /array/i, u = /data/i, l = /field/i, c = /expr/i, d = /value/i, f = r.prototype;
                f.get = function () {
                    var e, t, n, r, o, s = this._transform._graph, c = u.test(this._type), d = l.test(this._type);
                    if (!this._resolution)
                        return i.call(this);
                    if (c)
                        return this._accessors = this._value.map(function (e) {
                            return s.data(e);
                        }), i.call(this);
                    for (e = 0, t = this._signals.length; e < t; ++e)
                        n = this._signals[e], r = n.index, o = n.value(s), d && (this._accessors[r] = this._value[r] != o ? a.accessor(o) : this._accessors[r]), this._value[r] = o;
                    return i.call(this);
                }, f.set = function (e) {
                    var t = this, n = t._transform._graph, r = c.test(this._type), i = u.test(this._type), s = l.test(this._type);
                    return t._signals = [], this._value = a.array(e).map(function (e, u) {
                        var l;
                        return a.isString(e) ? r ? (l = n.expr(e), t._transform.dependency(o.FIELDS, l.fields), t._transform.dependency(o.SIGNALS, l.globals), t._transform.dependency(o.DATA, l.dataSources), l.fn) : (s ? (t._accessors[u] = a.accessor(e), t._transform.dependency(o.FIELDS, a.field(e))) : i && (t._resolution = !0, t._transform.dependency(o.DATA, e)), e) : void 0 !== e.value ? e.value : void 0 !== e.field ? (t._accessors[u] = a.accessor(e.field), t._transform.dependency(o.FIELDS, a.field(e.field)), e.field) : void 0 !== e.signal ? (t._resolution = !0, t._transform.dependency(o.SIGNALS, a.field(e.signal)[0]), t._signals.push({
                            index: u,
                            value: function (t) {
                                return t.signalRef(e.signal);
                            }
                        }), e.signal) : void 0 !== e.expr ? (t._resolution = !0, l = n.expr(e.expr), t._transform.dependency(o.SIGNALS, l.globals), t._signals.push({
                            index: u,
                            value: function () {
                                return l.fn();
                            }
                        }), e.expr) : e;
                    }), t._transform;
                }, t.exports = r;
            },
            {
                datalib: 27,
                'vega-dataflow': 42
            }
        ],
        137: [
            function (e, t, n) {
                function r(e) {
                    return l.prototype.init.call(this, e), u.addParameters(this, {
                        field: {
                            type: 'field',
                            default: null
                        },
                        startAngle: {
                            type: 'value',
                            default: 0
                        },
                        endAngle: {
                            type: 'value',
                            default: 2 * Math.PI
                        },
                        sort: {
                            type: 'value',
                            default: !1
                        }
                    }), this._output = {
                        start: 'layout_start',
                        end: 'layout_end',
                        mid: 'layout_mid'
                    }, this.mutates(!0);
                }
                function i() {
                    return 1;
                }
                var a = e('datalib'), o = e('vega-dataflow').Tuple, s = e('vega-logging'), u = e('./Transform'), l = e('./BatchTransform'), c = r.prototype = Object.create(l.prototype);
                c.constructor = r, c.batchTransform = function (e, t) {
                    s.debug(e, ['pie']);
                    var n, r, u, l = this._output, c = this.param('field').accessor || i, d = this.param('startAngle'), f = this.param('endAngle'), h = this.param('sort'), p = t.map(c), g = d, m = (f - d) / a.sum(p), v = a.range(t.length);
                    for (h && v.sort(function (e, t) {
                            return p[e] - p[t];
                        }), n = 0; n < v.length; ++n)
                        r = t[v[n]], u = p[v[n]], o.set(r, l.start, g), o.set(r, l.mid, g + 0.5 * u * m), o.set(r, l.end, g += u * m);
                    return e.fields[l.start] = 1, e.fields[l.end] = 1, e.fields[l.mid] = 1, e;
                }, t.exports = r;
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        138: [
            function (e, t, n) {
                function r(e) {
                    return s.prototype.init.call(this, e), o.addParameters(this, {
                        field: {
                            type: 'field',
                            default: null
                        },
                        normalize: {
                            type: 'value',
                            default: !1
                        }
                    }), this._output = { rank: 'rank' }, this.mutates(!0);
                }
                var i = e('vega-dataflow').Tuple, a = e('vega-logging'), o = e('./Transform'), s = e('./BatchTransform'), u = r.prototype = Object.create(s.prototype);
                u.constructor = r, u.batchTransform = function (e, t) {
                    a.debug(e, ['rank']);
                    var n, r, o, s, u = this._output.rank, l = this.param('normalize'), c = this.param('field').accessor, d = {}, f = t.length;
                    if (c)
                        for (n = 0, r = 0; n < f; ++n)
                            o = t[n], d[s = c(o)] = d[s] || (d[s] = ++r);
                    for (n = 0; n < f && (o = t[n]); ++n)
                        c && (s = c(o)) ? i.set(o, u, l ? d[s] / r : d[s]) : i.set(o, u, l ? (n + 1) / f : n + 1);
                    return e.fields[u] = 1, e;
                }, t.exports = r;
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        139: [
            function (e, t, n) {
                function r(e) {
                    o.prototype.init.call(this, e), o.addParameters(this, { by: { type: 'array<field>' } }), this.router(!0);
                }
                var i = e('datalib'), a = e('vega-logging'), o = e('./Transform'), s = r.prototype = Object.create(o.prototype);
                s.constructor = r, s.transform = function (e) {
                    return a.debug(e, ['sorting']), (e.add.length || e.mod.length || e.rem.length) && (e.sort = i.comparator(this.param('by').field)), e;
                }, t.exports = r;
            },
            {
                './Transform': 141,
                datalib: 27,
                'vega-logging': 49
            }
        ],
        140: [
            function (e, t, n) {
                function r(e) {
                    return l.prototype.init.call(this, e), u.addParameters(this, {
                        groupby: { type: 'array<field>' },
                        sortby: { type: 'array<field>' },
                        field: { type: 'field' },
                        offset: {
                            type: 'value',
                            default: 'zero'
                        }
                    }), this._output = {
                        start: 'layout_start',
                        end: 'layout_end',
                        mid: 'layout_mid'
                    }, this.mutates(!0);
                }
                function i(e, t, n, r) {
                    var i, a, o, s, u, l, c, d = [], f = function (e) {
                            return e(o);
                        };
                    if (null == t)
                        d.push(e.slice());
                    else
                        for (i = {}, a = 0; a < e.length; ++a)
                            o = e[a], s = t.map(f), u = i[s] || (d.push(i[s] = []), i[s]), u.push(o);
                    for (s = 0, c = 0; s < d.length; ++s) {
                        for (u = d[s], a = 0, l = 0; a < u.length; ++a)
                            l += r(u[a]);
                        u.sum = l, l > c && (c = l), null != n && u.sort(n);
                    }
                    return d.max = c, d;
                }
                var a = e('datalib'), o = e('vega-dataflow').Tuple, s = e('vega-logging'), u = e('./Transform'), l = e('./BatchTransform'), c = r.prototype = Object.create(l.prototype);
                c.constructor = r, c.batchTransform = function (e, t) {
                    s.debug(e, ['stacking']);
                    for (var n = this.param('groupby').accessor, r = a.comparator(this.param('sortby').field), u = this.param('field').accessor, l = this.param('offset'), c = this._output, d = i(t, n, r, u), f = 0, h = d.max; f < d.length; ++f) {
                        var p, g, m, v = d[f], y = v.sum, _ = 'center' === l ? (h - y) / 2 : 0, b = 'normalize' === l ? 1 / y : 1, x = _, w = 0;
                        for (p = 0; p < v.length; ++p)
                            g = v[p], m = x, w += u(g), x = b * w + _, o.set(g, c.start, m), o.set(g, c.end, x), o.set(g, c.mid, 0.5 * (m + x));
                    }
                    return e.fields[c.start] = 1, e.fields[c.end] = 1, e.fields[c.mid] = 1, e;
                }, t.exports = r;
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        141: [
            function (e, t, n) {
                function r(e) {
                    e && a.init.call(this, e);
                }
                var i = e('vega-dataflow'), a = i.Node.prototype, o = i.Dependencies, s = e('./Parameter');
                r.addParameters = function (e, t) {
                    e._parameters = e._parameters || {};
                    for (var n in t) {
                        var r = t[n], i = new s(n, r.type, e);
                        e._parameters[n] = i, 'custom' === r.type && (r.set && (i.set = r.set.bind(i)), r.get && (i.get = r.get.bind(i))), r.hasOwnProperty('default') && i.set(r.default);
                    }
                };
                var u = r.prototype = Object.create(a);
                u.constructor = r, u.param = function (e, t) {
                    var n = this._parameters[e];
                    return void 0 === n ? this : 1 === arguments.length ? n.get() : n.set(t);
                }, u.transform = function (e) {
                    return e;
                }, u.evaluate = function (e) {
                    var t = this._stamp < e.stamp && this.dependency(o.SIGNALS).reduce(function (t, n) {
                        return t += e.signals[n] ? 1 : 0;
                    }, 0);
                    return this.transform(e, t);
                }, u.output = function (e) {
                    for (var t in this._output)
                        void 0 !== e[t] && (this._output[t] = e[t]);
                    return this;
                }, t.exports = r;
            },
            {
                './Parameter': 136,
                'vega-dataflow': 42
            }
        ],
        142: [
            function (e, t, n) {
                function r(e) {
                    return u.prototype.init.call(this, e), s.addParameters(this, { groupby: { type: 'array<field>' } }), this._output = {
                        children: 'children',
                        parent: 'parent'
                    }, this.router(!0).produces(!0);
                }
                var i = e('datalib'), a = e('vega-dataflow').Tuple, o = e('vega-logging'), s = e('./Transform'), u = e('./BatchTransform'), l = r.prototype = Object.create(u.prototype);
                l.constructor = r, l.batchTransform = function (e, t) {
                    function n(e, t, r) {
                        var i = f[e].execute(r);
                        t[l] = i, i.forEach(function (r) {
                            r[c] = t, p.push(a.ingest(r)), e + 1 < u.length ? n(e + 1, r, r[l]) : r[l].forEach(function (e) {
                                e[c] = r;
                            });
                        });
                    }
                    o.debug(e, ['treeifying']);
                    var r, s, u = this.param('groupby').field, l = this._output.children, c = this._output.parent, d = [{
                                name: '*',
                                ops: ['values'],
                                as: [l]
                            }], f = u.map(function (e) {
                            return i.groupby(e).summarize(d);
                        }), h = this._internal || [], p = [], g = a.ingest({});
                    for (g[c] = null, p.push(g), n(0, g, t), r = 0, s = p.length; r < s; ++r)
                        e.add.push(p[r]);
                    for (r = 0, s = h.length; r < s; ++r)
                        e.rem.push(h[r]);
                    return this._internal = p, e;
                }, t.exports = r;
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        143: [
            function (e, t, n) {
                (function (n) {
                    function r(t) {
                        return l.prototype.init.call(this, t), u.addParameters(this, {
                            sort: {
                                type: 'array<field>',
                                default: ['-value']
                            },
                            children: {
                                type: 'field',
                                default: 'children'
                            },
                            parent: {
                                type: 'field',
                                default: 'parent'
                            },
                            field: {
                                type: 'field',
                                default: 'value'
                            },
                            size: {
                                type: 'array<value>',
                                default: e('./screen').size
                            },
                            round: {
                                type: 'value',
                                default: !0
                            },
                            sticky: {
                                type: 'value',
                                default: !1
                            },
                            ratio: {
                                type: 'value',
                                default: c
                            },
                            padding: {
                                type: 'value',
                                default: null
                            },
                            mode: {
                                type: 'value',
                                default: 'squarify'
                            }
                        }), this._layout = i.layout.treemap(), this._output = {
                            x: 'layout_x',
                            y: 'layout_y',
                            width: 'layout_width',
                            height: 'layout_height',
                            depth: 'layout_depth'
                        }, this.mutates(!0);
                    }
                    var i = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, a = e('datalib'), o = e('vega-dataflow').Tuple, s = e('vega-logging'), u = e('./Transform'), l = e('./BatchTransform'), c = 0.5 * (1 + Math.sqrt(5)), d = r.prototype = Object.create(l.prototype);
                    d.constructor = r, d.batchTransform = function (e, t) {
                        s.debug(e, ['treemap']);
                        var n = this._layout, r = this._output, i = this.param('sticky'), u = this.param('parent').accessor, l = t.filter(function (e) {
                                return null === u(e);
                            })[0];
                        return n.sticky() !== i && n.sticky(i), n.sort(a.comparator(this.param('sort').field)).children(this.param('children').accessor).value(this.param('field').accessor).size(this.param('size')).round(this.param('round')).ratio(this.param('ratio')).padding(this.param('padding')).mode(this.param('mode')).nodes(l), t.forEach(function (e) {
                            o.set(e, r.x, e.x), o.set(e, r.y, e.y), o.set(e, r.width, e.dx), o.set(e, r.height, e.dy), o.set(e, r.depth, e.depth);
                        }), e.fields[r.x] = 1, e.fields[r.y] = 1, e.fields[r.width] = 1, e.fields[r.height] = 1, e.fields[r.depth] = 1, e;
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                './screen': 147,
                datalib: 27,
                'vega-dataflow': 42,
                'vega-logging': 49
            }
        ],
        144: [
            function (e, t, n) {
                (function (n) {
                    function r(t) {
                        return u.prototype.init.call(this, t), s.addParameters(this, {
                            clipExtent: {
                                type: 'array<value>',
                                default: e('./screen').extent
                            },
                            x: {
                                type: 'field',
                                default: 'layout_x'
                            },
                            y: {
                                type: 'field',
                                default: 'layout_y'
                            }
                        }), this._layout = i.geom.voronoi(), this._output = { path: 'layout_path' }, this.mutates(!0);
                    }
                    var i = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, a = e('vega-dataflow/src/Tuple'), o = e('vega-logging'), s = e('./Transform'), u = e('./BatchTransform'), l = r.prototype = Object.create(u.prototype);
                    l.constructor = r, l.batchTransform = function (e, t) {
                        o.debug(e, ['voronoi']);
                        for (var n = this._output.path, r = this._layout.clipExtent(this.param('clipExtent')).x(this.param('x').accessor).y(this.param('y').accessor)(t), i = 0; i < t.length; ++i)
                            r[i] && a.set(t[i], n, 'M' + r[i].join('L') + 'Z');
                        return e.fields[n] = 1, e;
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                './screen': 147,
                'vega-dataflow/src/Tuple': 41,
                'vega-logging': 49
            }
        ],
        145: [
            function (e, t, n) {
                (function (n) {
                    function r(t) {
                        return h.prototype.init.call(this, t), f.addParameters(this, {
                            size: {
                                type: 'array<value>',
                                default: e('./screen').size
                            },
                            text: {
                                type: 'field',
                                default: 'data'
                            },
                            rotate: {
                                type: 'field|value',
                                default: 0
                            },
                            font: {
                                type: 'field|value',
                                default: { value: 'sans-serif' }
                            },
                            fontSize: {
                                type: 'field|value',
                                default: 14
                            },
                            fontStyle: {
                                type: 'field|value',
                                default: { value: 'normal' }
                            },
                            fontWeight: {
                                type: 'field|value',
                                default: { value: 'normal' }
                            },
                            fontScale: {
                                type: 'array<value>',
                                default: [
                                    10,
                                    50
                                ]
                            },
                            padding: {
                                type: 'value',
                                default: 1
                            },
                            spiral: {
                                type: 'value',
                                default: 'archimedean'
                            }
                        }), this._layout = u().canvas(l.instance), this._output = {
                            x: 'layout_x',
                            y: 'layout_y',
                            font: 'layout_font',
                            fontSize: 'layout_fontSize',
                            fontStyle: 'layout_fontStyle',
                            fontWeight: 'layout_fontWeight',
                            rotate: 'layout_rotate'
                        }, this.mutates(!0);
                    }
                    function i(e) {
                        return e && e.accessor || e;
                    }
                    function a(e) {
                        var t = Object.create(e);
                        return t._tuple = e, t;
                    }
                    var o = e('datalib'), s = 'undefined' != typeof window ? window.d3 : 'undefined' != typeof n ? n.d3 : null, u = 'undefined' != typeof window ? window.d3.layout.cloud : 'undefined' != typeof n ? n.d3.layout.cloud : null, l = e('vega-scenegraph').canvas, c = e('vega-dataflow/src/Tuple'), d = e('vega-logging'), f = e('./Transform'), h = e('./BatchTransform'), p = r.prototype = Object.create(h.prototype);
                    p.constructor = r, p.batchTransform = function (e, t) {
                        d.debug(e, ['wordcloud']);
                        var n, r, u = this._layout, l = this._output, f = this.param('fontSize'), h = f.accessor && this.param('fontScale');
                        f = f.accessor || s.functor(f), h.length && (r = s.scale.sqrt().domain(o.extent(t, n = f)).range(h), f = function (e) {
                            return r(n(e));
                        }), u.size(this.param('size')).text(i(this.param('text'))).padding(this.param('padding')).spiral(this.param('spiral')).rotate(i(this.param('rotate'))).font(i(this.param('font'))).fontStyle(i(this.param('fontStyle'))).fontWeight(i(this.param('fontWeight'))).fontSize(f).words(t.map(a)).on('end', function (e) {
                            var t, n, r, i, a = u.size(), o = a[0] >> 1, s = a[1] >> 1;
                            for (r = 0, i = e.length; r < i; ++r)
                                t = e[r], n = t._tuple, c.set(n, l.x, t.x + o), c.set(n, l.y, t.y + s), c.set(n, l.font, t.font), c.set(n, l.fontSize, t.size), c.set(n, l.fontStyle, t.style), c.set(n, l.fontWeight, t.weight), c.set(n, l.rotate, t.rotate);
                        }).start();
                        for (var p in l)
                            e.fields[l[p]] = 1;
                        return e;
                    }, t.exports = r;
                }.call(this, 'undefined' != typeof global ? global : 'undefined' != typeof self ? self : 'undefined' != typeof window ? window : {}));
            },
            {
                './BatchTransform': 120,
                './Transform': 141,
                './screen': 147,
                datalib: 27,
                'vega-dataflow/src/Tuple': 41,
                'vega-logging': 49,
                'vega-scenegraph': 50
            }
        ],
        146: [
            function (e, t, n) {
                t.exports = {
                    aggregate: e('./Aggregate'),
                    bin: e('./Bin'),
                    cross: e('./Cross'),
                    countpattern: e('./CountPattern'),
                    linkpath: e('./LinkPath'),
                    facet: e('./Facet'),
                    filter: e('./Filter'),
                    fold: e('./Fold'),
                    force: e('./Force'),
                    formula: e('./Formula'),
                    geo: e('./Geo'),
                    geopath: e('./GeoPath'),
                    hierarchy: e('./Hierarchy'),
                    impute: e('./Impute'),
                    lookup: e('./Lookup'),
                    pie: e('./Pie'),
                    rank: e('./Rank'),
                    sort: e('./Sort'),
                    stack: e('./Stack'),
                    treeify: e('./Treeify'),
                    treemap: e('./Treemap'),
                    voronoi: e('./Voronoi'),
                    wordcloud: e('./Wordcloud')
                };
            },
            {
                './Aggregate': 119,
                './Bin': 121,
                './CountPattern': 122,
                './Cross': 123,
                './Facet': 124,
                './Filter': 126,
                './Fold': 127,
                './Force': 128,
                './Formula': 129,
                './Geo': 130,
                './GeoPath': 131,
                './Hierarchy': 132,
                './Impute': 133,
                './LinkPath': 134,
                './Lookup': 135,
                './Pie': 137,
                './Rank': 138,
                './Sort': 139,
                './Stack': 140,
                './Treeify': 142,
                './Treemap': 143,
                './Voronoi': 144,
                './Wordcloud': 145
            }
        ],
        147: [
            function (e, t, n) {
                t.exports = {
                    size: [
                        { signal: 'width' },
                        { signal: 'height' }
                    ],
                    mid: [
                        { expr: 'width/2' },
                        { expr: 'height/2' }
                    ],
                    extent: [
                        { expr: '[-padding.left, -padding.top]' },
                        { expr: '[width+padding.right, height+padding.bottom]' }
                    ]
                };
            },
            {}
        ],
        148: [
            function (e, t, n) {
                function r(e, t, n, r) {
                    var a = n || i(e);
                    return o(e, t, a, r);
                }
                function i(e) {
                    switch (e.type) {
                    case u:
                        return u;
                    case l:
                        return l;
                    case d:
                        return c;
                    default:
                        return f;
                    }
                }
                function a(e, t, n, r) {
                    function i(e) {
                        return (t[0] < 0 ? -Math.log(e > 0 ? 0 : -e) : Math.log(e < 0 ? 0 : e)) / Math.log(s);
                    }
                    function a(e) {
                        return t[0] < 0 ? -Math.pow(s, -e) : Math.pow(s, e);
                    }
                    if (null == n)
                        return r;
                    var o, s = e.base(), u = Math.min(s, e.ticks().length / n), l = t[0] > 0 ? (o = 1e-12, Math.ceil) : (o = -1e-12, Math.floor);
                    return function (e) {
                        return a(l(i(e) + o)) / e >= u ? r(e) : '';
                    };
                }
                function o(e, t, n, r) {
                    var i, o = s.format, c = 'log' === e.type;
                    switch (n) {
                    case f:
                        return i = e.domain(), c ? a(e, i, t, o.auto.number(r || null)) : o.auto.linear(i, t, r || null);
                    case u:
                        return (r ? o : o.auto).time(r);
                    case l:
                        return (r ? o : o.auto).utc(r);
                    default:
                        return String;
                    }
                }
                var s = e('datalib'), u = 'time', l = 'utc', c = 'string', d = 'ordinal', f = 'number';
                t.exports = { getTickFormat: r };
            },
            { datalib: 27 }
        ],
        149: [
            function (e, t, n) {
                var r = e('datalib'), i = {};
                r.extend(i, e('./format')), t.exports = r.extend(i, r);
            },
            {
                './format': 148,
                datalib: 27
            }
        ],
        150: [
            function (e, t, n) {
                t.exports = function (e, t, n, r) {
                    return void 0 !== e[n] ? e[n] : void 0 !== t && void 0 !== t[n] ? t[n] : void 0 !== r ? r : void 0;
                };
            },
            {}
        ]
    }, {}, [1])(1);
});
/*systemjs-plugin-json@0.1.0#json*/
define('systemjs-plugin-json@0.1.0#json', [], function(){ return {}; });
/*mev-network-graph@0.0.1#src/main/view/mevNetwork.vegaspec.json!systemjs-plugin-json@0.1.0#json*/
define('mev-network-graph@0.0.1#src/main/view/mevNetwork.vegaspec.json!systemjs-plugin-json@0.1.0#json', function (require, exports, module) {
    module.exports = {
        'width': 600,
        'height': 450,
        'padding': {
            'top': 10,
            'bottom': 30,
            'left': 10,
            'right': 200
        },
        'data': [
            { 'name': 'edges' },
            {
                'name': 'nodes',
                'transform': [{
                        'type': 'force',
                        'links': 'edges',
                        'linkDistance': 70,
                        'charge': -80,
                        'iterations': 1000
                    }]
            },
            { 'name': 'selections' }
        ],
        'signals': [
            {
                'name': 'hoverNode',
                'init': {},
                'streams': [
                    {
                        'type': '@node:mouseover',
                        'expr': '{ datum: eventItem().datum, x: eventX(), y: eventY() }'
                    },
                    {
                        'type': '@node:mouseout',
                        'expr': '{}'
                    }
                ]
            },
            {
                'name': 'hoverEdge',
                'init': {},
                'streams': [
                    {
                        'type': '@edge:mouseover',
                        'expr': '{ datum: eventItem().datum, x: eventX(), y: eventY() }'
                    },
                    {
                        'type': '@edge:mouseout',
                        'expr': '{}'
                    }
                ]
            }
        ],
        'scales': [{
                'name': 'selections',
                'type': 'ordinal',
                'domain': {
                    'data': 'selections',
                    'field': 'name'
                },
                'range': {
                    'data': 'selections',
                    'field': 'color'
                }
            }],
        'legends': [{
                'fill': 'selections',
                'orient': 'right'
            }],
        'marks': [
            {
                'name': 'edge',
                'type': 'path',
                'from': {
                    'data': 'edges',
                    'transform': [
                        {
                            'type': 'lookup',
                            'on': 'nodes',
                            'keys': [
                                'source',
                                'target'
                            ],
                            'as': [
                                '_source',
                                '_target'
                            ]
                        },
                        {
                            'type': 'linkpath',
                            'shape': 'line'
                        }
                    ]
                },
                'properties': {
                    'update': {
                        'path': { 'field': 'layout_path' },
                        'stroke': { 'value': '#999' }
                    },
                    'hover': { 'stroke': { 'value': '#000' } }
                }
            },
            {
                'name': 'node',
                'type': 'symbol',
                'from': { 'data': 'nodes' },
                'properties': {
                    'enter': {
                        'shape': { 'value': 'circle' },
                        'stroke': { 'value': 'steelblue' },
                        'fill': { 'value': 'steelblue' },
                        'fillOpacity': { 'value': 0.8 }
                    },
                    'update': {
                        'x': { 'field': 'layout_x' },
                        'y': { 'field': 'layout_y' },
                        'fillOpacity': { 'value': 0.8 }
                    },
                    'hover': { 'fillOpacity': { 'value': 1 } }
                }
            }
        ]
    };
});
/*mev-network-graph@0.0.1#src/main/view/mevNetwork.tpl.html!system-text@0.1.0#text*/
define('mev-network-graph@0.0.1#src/main/view/mevNetwork.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="chart">\n    <div class="body">\n        <div class="vega-container"></div>\n    </div>\n    <div class="controls">\n\n        <label class="break">Save</label>\n        <div class="btn-group">\n            <label class="btn btn-info btn-sm">\n                <a mev-svg-save-as="vm.saveAsConfig">\n                    <span class="glyphicon glyphicon-floppy-save" mev-glyph-alt="png"></span>\n                </a>\n            </label>\n        </div>\n\n        <label class="break">Selections</label>\n        <table class="table table-condensed" ng-if="config.selections && config.selections.length>0">\n            <tr ng-repeat="selection in config.selections">\n                <td>\n                    <input type="checkbox" ng-model="selection.checked" ng-change="vm.updateSelection(selection)" ng-true-value="true" ng-false-value="false">\n                    {{selection.name}}\n                </td>\n                <td style="width: 20px" bgcolor="{{selection.properties.selectionColor}}">&nbsp;</td>\n                <td>{{selection.properties.selectionDescription}}</td>\n            </tr>\n        </table>\n    </div>\n    <div class="footer">\n    </div>\n    <div class="mev-network-graph-tooltip" ng-style="{display: (vm.tooltip.item.datum ? \'block\' : \'none\'),  top: vm.tooltip.position.top, left: vm.tooltip.position.left}">\n        <div class="mev-tooltip-field" ng-repeat="field in vm.tooltip.config.fields">\n            <label>{{field.label || field.name}}</label>\n            <span>{{vm.tooltip.item.datum[field.name]}}</span>\n        </div>\n    </div>\n</div>';
});
/*mev-network-graph@0.0.1#src/main/view/mevNetworkDirective*/
define('mev-network-graph@0.0.1#src/main/view/mevNetworkDirective', [
    'lodash',
    'd3',
    'vega',
    './mevNetwork.vegaspec.json',
    './mevNetwork.tpl.html',
    './mevNetwork.less'
], function (_, d3, vg, specJson, template) {
    var randomColor = function () {
        var golden_ratio_conjugate = 0.618033988749895;
        var h = Math.random();
        var hslToRgb = function (h, s, l) {
            var r, g, b;
            if (s == 0) {
                r = g = b = l;
            } else {
                function hue2rgb(p, q, t) {
                    if (t < 0)
                        t += 1;
                    if (t > 1)
                        t -= 1;
                    if (t < 1 / 6)
                        return p + (q - p) * 6 * t;
                    if (t < 1 / 2)
                        return q;
                    if (t < 2 / 3)
                        return p + (q - p) * (2 / 3 - t) * 6;
                    return p;
                }
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1 / 3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1 / 3);
            }
            return '#' + Math.round(r * 255).toString(16) + Math.round(g * 255).toString(16) + Math.round(b * 255).toString(16);
        };
        return function () {
            h += golden_ratio_conjugate;
            h %= 1;
            return hslToRgb(h, 0.5, 0.6);
        };
    }();
    var directive = function mevNetworkDirective() {
        return {
            restrict: 'AEC',
            scope: { config: '=mevNetworkGraph' },
            template: template,
            controller: [
                '$scope',
                function (scope) {
                    if (!scope.config.renderer)
                        scope.config.renderer = 'canvas';
                    var defaults = {
                        edge: {
                            field: 'edges',
                            source: { field: 'from' },
                            target: { field: 'to' },
                            weight: {
                                field: 'value',
                                scale: {
                                    'name': 'weight',
                                    'type': 'linear',
                                    'domain': {
                                        'data': 'edges',
                                        'field': 'weight'
                                    },
                                    'range': [
                                        1,
                                        2
                                    ]
                                }
                            },
                            tooltip: {
                                fields: [{
                                        name: 'weight',
                                        label: 'Weight'
                                    }]
                            }
                        },
                        node: {
                            field: 'nodes',
                            key: { field: 'name' },
                            color: {
                                field: 'group',
                                value: 'steelblue',
                                legend: {
                                    'fill': 'color',
                                    'orient': 'right'
                                }
                            },
                            tooltip: {
                                fields: [{
                                        'name': 'name',
                                        'label': 'Name'
                                    }]
                            }
                        },
                        selections: []
                    };
                    if (scope.config.node && scope.config.node.color && scope.config.node.color.field) {
                        if (scope.config.node.color.field === 'group') {
                            defaults.node.color.scale = {
                                'name': 'color',
                                'type': 'ordinal',
                                'domain': ['none'],
                                'range': [defaults.node.color.value]
                            };
                            defaults.node.color.value = undefined;
                        } else {
                            defaults.node.color.value = undefined;
                            defaults.node.color.scale = {
                                'name': 'color',
                                'type': 'ordinal',
                                'domain': {
                                    'data': 'nodes',
                                    'field': 'color'
                                },
                                'range': 'category10'
                            };
                        }
                    }
                    _.defaultsDeep(scope.config, _.cloneDeep(defaults));
                    function buildSpec() {
                        var spec = _.cloneDeep(specJson);
                        spec.height = scope.config.height || spec.height;
                        spec.width = scope.config.width || spec.width;
                        spec.padding = scope.config.padding || spec.padding;
                        var edges = scope.config.data[scope.config.edge.field];
                        var nodes = scope.config.data[scope.config.node.field];
                        var hasNodes = nodes ? true : false;
                        if (scope.config.edge.source.field === 'source' && hasNodes) {
                            var errorEdge = edges.find(function (edge) {
                                return !_.isInteger(edge.source);
                            });
                            if (errorEdge)
                                throw new Error('Edge\'s source must be an index in the nodes array: ' + JSON.stringify(errorEdge));
                        }
                        if (scope.config.edge.target.field === 'target' && hasNodes) {
                            var errorEdge = edges.find(function (edge) {
                                return !_.isInteger(edge.target);
                            });
                            if (errorEdge)
                                throw new Error('Edge\'s target must be an index in the nodes array: ' + JSON.stringify(errorEdge));
                        }
                        var data = _.transform(edges, function (data, edge, key, edges) {
                            var sourceFieldName = scope.config.edge.source.field;
                            var targetFieldName = scope.config.edge.target.field;
                            var sourceKey = edge[sourceFieldName];
                            var targetKey = edge[targetFieldName];
                            function getNodeIndex(data, edge, key, field) {
                                var index = data.nodeMap[key];
                                if (_.isUndefined(index)) {
                                    index = _.findIndex(data.nodes, function (node) {
                                        return node.name === key;
                                    });
                                    if (index === -1)
                                        throw new Error(field + ' node not found for edge: ' + JSON.stringify(edge));
                                    edge[field] = index;
                                    data.nodeMap[key] = index;
                                } else {
                                    edge[field] = index;
                                }
                            }
                            function addNode(data, edge, key, field) {
                                var index = data.nodeMap[key];
                                if (_.isUndefined(index)) {
                                    data.nodes.push({ name: key });
                                    data.nodeMap[key] = data.nodes.length - 1;
                                    edge[field] = data.nodes.length - 1;
                                } else {
                                    edge[field] = index;
                                }
                            }
                            if (hasNodes && (!_.isInteger(edge.source) || !_.isInteger(edge.target))) {
                                getNodeIndex(data, edge, sourceKey, 'source');
                                getNodeIndex(data, edge, targetKey, 'target');
                            } else if (!hasNodes) {
                                addNode(data, edge, sourceKey, 'source');
                                addNode(data, edge, targetKey, 'target');
                            }
                            if (scope.config.edge.weight && _.isUndefined(edge.weight))
                                Object.defineProperty(edge, 'weight', {
                                    enumerable: true,
                                    get: function () {
                                        return this[scope.config.edge.weight.field];
                                    },
                                    set: function (val) {
                                        return this[scope.config.edge.weight.field] = val;
                                    }
                                });
                            return edge;
                        }, {
                            edges: edges,
                            nodes: nodes || [],
                            nodeMap: {}
                        });
                        _.assign(spec.data.find(function (item) {
                            return item.name === 'edges';
                        }), { values: data.edges });
                        spec.scales.push(scope.config.edge.weight.scale);
                        _.assign(spec.marks.find(function (mark) {
                            return mark.name === 'edge';
                        }).properties.update, {
                            'strokeWidth': {
                                'scale': 'weight',
                                'field': 'weight'
                            }
                        });
                        var checkedSelections = getCheckedSelections(scope.config.selections);
                        data.selections = [{
                                name: 'none',
                                color: 'steelblue'
                            }];
                        data.nodes.forEach(function (node) {
                            var groups = _.cloneDeep(checkedSelections);
                            node.groups = node.groups || [];
                            if (groups.length > 0) {
                                groups.forEach(function (group) {
                                    group.keyMap = group.keyMap || {};
                                    if (group.keyMap[node.name]) {
                                        node.groups.push(group.name);
                                    } else {
                                        if (group.keys.find(function (key) {
                                                return key === node.name;
                                            })) {
                                            group.keyMap[node.name] = true;
                                            node.groups.push(group.name);
                                        }
                                    }
                                });
                            }
                            if (node.groups.length === 0) {
                                node.group = 'none';
                                node.color = 'steelblue';
                            } else {
                                node.group = _.orderBy(node.groups).join('+');
                                if (!scope.config.node.color.scale.domain.find(function (groupName) {
                                        return groupName === node.group;
                                    })) {
                                    if (node.groups.length === 1) {
                                        var group = groups.find(function (group) {
                                            return group.name === node.groups[0];
                                        });
                                        scope.config.node.color.scale.domain.unshift(node.group);
                                        scope.config.node.color.scale.range.unshift(group.properties.selectionColor);
                                        data.selections.unshift({
                                            name: node.group,
                                            color: group.properties.selectionColor
                                        });
                                    } else {
                                        var color = randomColor();
                                        scope.config.node.color.scale.domain.unshift(node.group);
                                        scope.config.node.color.scale.range.unshift(color);
                                        data.selections.unshift({
                                            name: node.group,
                                            color: color
                                        });
                                    }
                                }
                                if (node.groups.length === 1) {
                                    var group = groups.find(function (group) {
                                        return group.name === node.groups[0];
                                    });
                                    node.group = node.groups[0];
                                    node.color = group.properties.selectionColor;
                                } else {
                                    var existingGroupIndex = _.findIndex(scope.config.node.color.scale.domain, function (groupName) {
                                        return groupName === node.group;
                                    });
                                    node.color = scope.config.node.color.scale.range[existingGroupIndex];
                                }
                            }
                            if (scope.config.node.shape && _.isUndefined(node.shape))
                                Object.defineProperty(node, 'shape', {
                                    enumerable: true,
                                    get: function () {
                                        return this[scope.config.node.shape.field];
                                    },
                                    set: function (val) {
                                        this[scope.config.node.shape.field] = val;
                                    }
                                });
                            if (scope.config.node.size && _.isUndefined(node.size))
                                Object.defineProperty(node, 'size', {
                                    enumerable: true,
                                    get: function () {
                                        return this[scope.config.node.size.field];
                                    },
                                    set: function (val) {
                                        this[scope.config.node.size.field] = val;
                                    }
                                });
                            return node;
                        });
                        _.assign(spec.data.find(function (item) {
                            return item.name === 'nodes';
                        }), { values: data.nodes });
                        _.assign(spec.data.find(function (item) {
                            return item.name === 'selections';
                        }), {
                            values: _.orderBy(data.selections, function (selection) {
                                if (selection.name === 'none')
                                    return 'zzzzzzzzzzzzzzz';
                                else
                                    return selection.name;
                            })
                        });
                        if (scope.config.node.color.scale) {
                            spec.scales.push(scope.config.node.color.scale);
                        }
                        _.assign(spec.marks.find(function (mark) {
                            return mark.name === 'node';
                        }).properties.update, {
                            'stroke': { 'field': 'color' },
                            'fill': { 'field': 'color' }
                        });
                        _.assign(spec.data.find(function (data) {
                            return data.name === 'tooltip';
                        }), { 'values': scope.config.node.tooltip.fields });
                        return spec;
                    }
                    function getCheckedSelections(selections) {
                        if (!_.isArray(selections))
                            return [];
                        return _.filter(selections, function (s) {
                            return s.checked;
                        });
                    }
                    scope.vm = {
                        defaults: defaults,
                        buildSpec: buildSpec,
                        saveAsConfig: {
                            name: scope.config.name ? scope.config.name : 'mev-network-graph.png',
                            selector: '.vega svg'
                        },
                        getCheckedSelections: getCheckedSelections
                    };
                    console.debug('spec', scope.vm.spec);
                }
            ],
            link: function (scope, elm, attr, ctrl) {
                function parse(spec, renderer) {
                    var vgElm = elm.find('.vega-container');
                    vgElm.empty();
                    vg.parse.spec(spec, function (error, chart) {
                        var view = scope.vm.view = chart({
                            el: vgElm[0],
                            renderer: renderer || 'canvas'
                        }).update();
                        view.onSignal('hoverNode', function (signal, item) {
                            console.debug(event, item);
                            scope.$apply(function (scope) {
                                if (scope.config.edge.tooltip)
                                    scope.$emit('mev:network:node:active:toggle', signal, item, view);
                            });
                        });
                        view.onSignal('hoverEdge', function (signal, item) {
                            console.debug(event, item);
                            scope.$apply(function (scope) {
                                if (scope.config.edge.tooltip)
                                    scope.$emit('mev:network:edge:active:toggle', signal, item, view);
                            });
                        });
                        scope.vm.view.update();
                    });
                }
                parse(scope.vm.buildSpec(), scope.config.renderer);
                scope.$on('mev:network:edge:active:toggle', function (event, signal, item, view) {
                    scope.vm.tooltip = {
                        item: item,
                        position: {
                            top: item.y + view._el.offsetTop + 10,
                            left: item.x + view._el.offsetLeft + 10
                        },
                        config: scope.config.edge.tooltip
                    };
                    var tooltip = elm.find('.mev-network-graph-tooltip');
                });
                scope.$on('mev:network:node:active:toggle', function (event, signal, item, view) {
                    scope.vm.tooltip = {
                        item: item,
                        position: {
                            top: item.y + view._el.offsetTop + 10,
                            left: item.x + view._el.offsetLeft + 10
                        },
                        config: scope.config.node.tooltip
                    };
                    var tooltip = elm.find('.mev-network-graph-tooltip');
                });
                scope.vm.updateSelection = function () {
                    scope.config.node.color.scale = _.cloneDeep(scope.vm.defaults.node.color.scale);
                    var spec = scope.vm.buildSpec();
                    scope.vm.view.data('nodes').update(function (node) {
                        return true;
                    }, 'color', function (node) {
                        var newNode = _.find(_.find(spec.data, { 'name': 'nodes' }).values, function (newNode) {
                            return node.name === newNode.name;
                        });
                        return newNode.color;
                    });
                    scope.vm.view.data('selections').remove(function (selection) {
                        return true;
                    }).insert(_.find(spec.data, { 'name': 'selections' }).values);
                    scope.vm.view.update();
                };
            }
        };
    };
    directive.$name = 'mevNetworkGraph';
    directive.$provider = 'directive';
    directive.$inject = [];
    return directive;
});
/*mev-network-graph@0.0.1#src/main/mev-network-graph*/
define('mev-network-graph@0.0.1#src/main/mev-network-graph', [
    'mui',
    'mev-chart-utils',
    './view/mevNetworkDirective'
], function (ng) {
    return ng.module('mev-network-graph', arguments, arguments);
});
/*mev-wgcna@0.0.1#src/main/router/WgcnaState.tpl.html!system-text@0.1.0#text*/
define('mev-wgcna@0.0.1#src/main/router/WgcnaState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="column-wrapper">\n    <ul class="nav nav-tabs column-header" id="importTabs">\n        <li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body">\n        <div class="tab-pane active results-wrapper" id="table" >\n            <div class="results-header clearfix">\n                <!--      \t<div class="btn-toolbar" role="toolbar" mui-yank="action-menu"> -->\n                <div class="btn-toolbar" role="toolbar" >\n                    <div class="btn-group">\n                        <btn-create-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis"\n                                              mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.getSelection()" mui-key-name="id" mui-dimension="row">\n                        </btn-create-selection><!--\n\t\t\t            --><btn-export-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis"\n                                                 mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.getSelection()" mui-key-name="id" mui-dimension="row">\n                    </btn-export-selection>\n                    </div>\n                </div>\n            </div>\n            <div class="results-body">\n                <div >\n                    <div mev-network-graph="DatasetAnalysisVM.mevNetworkWgcna" ></div>\n                </div>\n                <div >\n                    <mev-results-table data="DatasetAnalysisVM.analysis.result.edges"\n                                       headers="DatasetAnalysisVM.headers"\n                                       ordering="pValue"\n                                       mev-save-as="{name: analysis.name}"\n                                       on-filter="DatasetAnalysisVM.getFilteredEdges(filteredResults)"\n                                       mev-out-filtered-results="DatasetAnalysisVM.filteredResultsTop"></mev-results-table>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n';
});
/*mev-wgcna@0.0.1#src/main/model/WgcnaInfo.tpl.html!system-text@0.1.0#text*/
define('mev-wgcna@0.0.1#src/main/model/WgcnaInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div>\n    <p>Weighted Correlation Network Analysis to generate weighted network from high-dimensional data.</p>\n    <p>Reference: <a href="https://cran.r-project.org/web/packages/WGCNA/index.html">https://cran.r-project.org/web/packages/WGCNA/index.html</a></p>\n</div>\n';
});
/*mev-wgcna@0.0.1#src/main/model/WgcnaAnalysisType*/
define('mev-wgcna@0.0.1#src/main/model/WgcnaAnalysisType', [
    'lodash',
    '../router/WgcnaState.tpl.html',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/decimal/DecimalParam',
    'mev-analysis/src/params/model/integer/IntegerParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    './WgcnaInfo.tpl.html'
], function (_, template, AnalsysType, AnalysisParamsFactory, SelectParam, DecimalParam, IntegerParam, selectionSetParam, infoTemplate) {
    'use strict';
    function component(MevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        var wgcnaType = new MevAnalysisType({
            id: 'wgcna',
            name: 'WGCNA',
            viewModel: 'WgcnaVM',
            template: template,
            params: mevAnalysisParams([
                new SelectParam({
                    'id': 'distMethod',
                    'displayName': 'Distance',
                    'options': [
                        'euclidean',
                        'maximum',
                        'manhattan',
                        'canberra',
                        'binary',
                        'minkowski'
                    ],
                    'value': 'euclidean'
                }),
                new DecimalParam({
                    'id': 'WeightFilter',
                    'displayName': 'Weight Filter',
                    'min': 0,
                    'max': 1,
                    'value': 0.9,
                    'precision': 3
                }),
                new IntegerParam({
                    'id': 'sizeLimit',
                    'displayName': 'Size Limit',
                    'min': 0,
                    'max': 1000,
                    'value': 1000
                }),
                new mevSelectionSetParam({
                    'id': 'sampleList',
                    'dimension': 'column',
                    'displayName': 'Sample Set',
                    'display': 'name',
                    'bound': 'keys',
                    'required': true,
                    'allowAll': 'root'
                }),
                new mevSelectionSetParam({
                    'id': 'geneList',
                    'dimension': 'row',
                    'displayName': 'Gene Set',
                    'display': 'name',
                    'bound': 'keys',
                    'required': true,
                    'allowAll': 'root',
                    'max': 1000
                })
            ]),
            info: { template: infoTemplate }
        });
        wgcnaType.start = function () {
            var paramValues = this.params.getValues();
            this.parent.start.call(this, this, paramValues, { analysisName: paramValues.name }, 'put');
        };
        return wgcnaType;
    }
    component.$name = 'mevWgcnaAnalysisType';
    component.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    component.$provider = 'factory';
    return component;
});
/*mev-wgcna@0.0.1#src/main/router/WgcnaState*/
define('mev-wgcna@0.0.1#src/main/router/WgcnaState', ['./WgcnaState.tpl.html'], function (template) {
    'use strict';
    function WgcnaState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.wgcna', {
            parent: 'root.dataset.analysisType',
            url: 'wgcna/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'WgcnaVMFactory',
                function (scope, project, analysis, WgcnaVMFactory, mevAnalysisTypes, BoxPlotService) {
                    scope.DatasetAnalysisVM = this;
                    return WgcnaVMFactory.call(this, scope, project, analysis, mevAnalysisTypes, BoxPlotService);
                }
            ],
            controllerAs: 'WgcnaVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    WgcnaState.inject = ['$stateProvider'];
    WgcnaState.provider = 'config';
    return WgcnaState;
});
/*mev-wgcna@0.0.1#src/main/router/WgcnaVM*/
define('mev-wgcna@0.0.1#src/main/router/WgcnaVM', ['lodash'], function (_) {
    'use strict';
    function WgcnaVM(mevAnalysisTypes) {
        function factory($scope, project, analysis) {
            var _self = this;
            _self.project = project;
            _self.analysis = analysis;
            var nodes = _.reduce(_self.analysis.result.edges, function (result, item) {
                if (!result.map[item.from]) {
                    result.map[item.from] = { id: item.from };
                    result.list.push(result.map[item.from]);
                }
                if (!result.map[item.to]) {
                    result.map[item.to] = { id: item.to };
                    result.list.push(result.map[item.to]);
                }
                return result;
            }, {
                map: {},
                list: []
            });
            _self.mevNetworkWgcna = {
                renderer: 'svg',
                edge: {
                    field: 'edges',
                    source: { field: 'from' },
                    target: { field: 'to' }
                },
                node: {
                    color: {
                        field: 'group',
                        scale: { name: 'color' }
                    },
                    tooltip: {
                        fields: [{
                                'name': 'name',
                                'label': 'Gene'
                            }]
                    }
                },
                selections: project.dataset.row.selections,
                data: _self.analysis.result
            };
            _self.filteredGenes = [];
            _self.getSelection = function () {
                return _self.filteredGenes || nodes.list;
            };
            function getFilteredGenes(edges) {
                return _.values(_.transform(edges, function (hash, item, key, edges) {
                    if (!hash[item.to])
                        hash[item.to] = { id: item.to };
                    if (!hash[item.from])
                        hash[item.from] = { id: item.from };
                    return hash;
                }, {}));
            }
            _self.getFilteredEdges = function (filteredResults) {
                _self.filteredGenes.length = 0;
                getFilteredGenes(filteredResults).map(function (gene) {
                    _self.filteredGenes.push(gene);
                });
            };
            _self.headers = [
                {
                    'name': 'From',
                    'field': 'from',
                    'icon': 'search'
                },
                {
                    'name': 'To',
                    'field': 'to',
                    'icon': 'search'
                },
                {
                    'name': 'Method',
                    'field': 'method',
                    'icon': 'search'
                },
                {
                    'name': 'Weight',
                    'field': 'weight',
                    'icon': [
                        '<=',
                        '>='
                    ]
                }
            ];
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    WgcnaVM.$inject = ['mevAnalysisTypes'];
    WgcnaVM.$name = 'WgcnaVMFactory';
    WgcnaVM.$provider = 'factory';
    return WgcnaVM;
});
/*mev-wgcna@0.0.1#src/main/mev-wgcna*/
define('mev-wgcna@0.0.1#src/main/mev-wgcna', [
    'mui',
    'mev-analysis',
    'mev-network-graph',
    'mev-results-table',
    './model/WgcnaAnalysisType',
    './router/WgcnaState',
    './router/WgcnaVM'
], function (ng) {
    return ng.module('mev-wgcna', arguments, arguments);
});
/*mev-boxplot@0.0.1#src/main/view/d3Boxplot.module*/
define('mev-boxplot@0.0.1#src/main/view/d3Boxplot.module', [
    'mui',
    'd3',
    '../style/boxplot.less',
    'save-svg-as-png'
], function (ng, d3, style, saveSvgAsPng) {
    return angular.module('mev-d3-boxplot', []).controller('mevBoxplotTestCtrl', [
        '$scope',
        'mevBoxplotService',
        function ($scope, mevBoxplotService) {
            var numberOfGroups = [
                0,
                1,
                2,
                3,
                4
            ];
            var numberOfValues = [
                0,
                1,
                2,
                3,
                1,
                2,
                3,
                1,
                2,
                3,
                1,
                2,
                3,
                1,
                2,
                3,
                1,
                2,
                3,
                1,
                2,
                3
            ];
            $scope.groups = {
                'data': numberOfGroups.map(function (d, i) {
                    return {
                        'control': {
                            'values': numberOfValues.map(function (d, j) {
                                return {
                                    'row': i,
                                    'column': j,
                                    'value': Math.random()
                                };
                            })
                        },
                        'experiment': {
                            'values': numberOfValues.map(function (d, j) {
                                return {
                                    'row': i,
                                    'column': numberOfValues.length + j,
                                    'value': Math.random()
                                };
                            })
                        },
                        'geneName': i,
                        'pValue': 2
                    };
                }),
                'min': 0,
                'max': 1,
                'id': 'cool-Name'
            };
        }
    ]).service('D3Service', [function () {
            return d3;
        }]).service('quantileGenerator', [
        'greaterThan',
        'extractValues',
        'extractQuantiles',
        function (gT, eV, eQ) {
            return function (data, params) {
                var quantiles = Object.keys(data.groups).map(function (groupName) {
                    var group = data.groups[groupName];
                    var sortedGroup = group.values.sort(gT);
                    var extractedGroupValues = eV(sortedGroup);
                    var groupQuantile = eQ(extractedGroupValues);
                    groupQuantile.name = groupName;
                    groupQuantile.outliers = group.values.filter(function (value) {
                        return value.value >= groupQuantile.ninetyseventh || value.value <= groupQuantile.zerothird ? true : false;
                    });
                    groupQuantile.color = group.color;
                    return groupQuantile;
                });
                var errs = [];
                quantiles.map(function (quantile) {
                    if (params.max < quantile.max) {
                        errs.push('A quantile max outside of data max!\n ' + 'Quantile Max: ' + quantile.max + '\n' + 'Absolute Max: ' + params.max);
                    }
                    if (params.min > quantile.min) {
                        errs.push('A quantile min outside of data min!\n ' + 'Quantile Min: ' + quantile.min + '\n' + 'Absolute Min: ' + params.min);
                    }
                    ;
                });
                if (errs.length > 0) {
                    for (i = 0; i < errs.length; i++) {
                        console.log(errs[i]);
                        throw new RangeError(errs[i]);
                    }
                    return;
                }
                ;
                return quantiles;
            };
        }
    ]).service('D3BoxPlots', [
        'D3Service',
        'quantileGenerator',
        function (d3, quantileGenerator) {
            return function (id, element) {
                var width = 8, padding = 2, geneSpacing = 10, height = 300, margin = {
                        top: 60,
                        bottom: 30,
                        left: 75,
                        right: 20
                    }, geneWidth = undefined;
                return {
                    draw: function (params) {
                        console.debug('boxplot.draw', params, itemsPerGroup);
                        var groupNames = Object.keys(params.data[0].groups);
                        var itemsPerGroup = groupNames.length;
                        geneWidth = padding * 2 * itemsPerGroup + itemsPerGroup * width + geneSpacing;
                        this.clear();
                        element.append('svg').attr({
                            'width': params.data.length * geneWidth + margin.left + margin.right,
                            'height': height + margin.top + margin.bottom,
                            'id': 'svg-' + id
                        });
                        var svg = d3.select('svg#svg-' + id);
                        svg.append('g').attr('id', 'quantiles' + id);
                        var quantiles = d3.select('g#quantiles' + id);
                        yScale = d3.scale.linear().domain([
                            params.min,
                            params.max
                        ]).range([
                            height - margin.bottom,
                            margin.top
                        ]);
                        params.data.map(function (item, index) {
                            quantiles.append('g').attr('id', 'quantile-' + index);
                            var box = quantiles.select('g#quantile-' + index);
                            drawQuantile(yScale, item, box, index * geneWidth + margin.left, params);
                        });
                        this.drawAxis(yScale, params, svg, params.data.length * geneSpacing);
                        this.drawLabels(svg, params.data[0].groups);
                        this.drawTools(svg);
                    },
                    drawTools: function (svg) {
                        var fo = svg.append('foreignObject').attr({
                            x: svg.attr('width') - 30,
                            y: 0,
                            height: 50,
                            width: 50
                        });
                        var divSave = fo.append('xhtml:div');
                        var link = divSave.append('div').append('a').html('<span class="glyphicon glyphicon-floppy-save"></span>');
                        divSave.on('click', function (d, i) {
                            console.debug(element, ng.element(element[0][0]).scope());
                            var name = ng.element(element[0][0]).scope ? ng.element(element[0][0]).scope().analysis ? ng.element(element[0][0]).scope().analysis.name + '-boxplot.png' : 'mev-boxplot.png' : 'mev-boxplot.png';
                            saveSvgAsPng.saveSvgAsPng(svg[0][0], name, {
                                selectorRemap: function (s) {
                                    return s.replace('mev-boxplot ', '');
                                }
                            });
                        });
                        var linkDom = link[0][0];
                        if (linkDom.offsetWidth === 0 || linkDom.offsetHeight === 0)
                            link.text('save');
                    },
                    clear: function () {
                        element.selectAll('*').remove();
                    },
                    drawLabels: function (svg, groups) {
                        svg.append('g').attr('class', 'legend');
                        var legend = svg.select('g.legend');
                        var arGroups = Object.keys(groups).map(function (groupName) {
                            return groups[groupName];
                        });
                        legend.selectAll('rect').data(arGroups).enter().append('rect').attr({
                            'x': 5,
                            'y': function (d, i) {
                                return 10 + 15 * i;
                            },
                            'width': 15,
                            'height': 15
                        }).attr('style', function (d, i) {
                            return 'fill:' + d.color + ';' + 'fill-opacity:.25;stroke:black;stroke-width:1.5;';
                        });
                        legend.selectAll('text').data(arGroups).enter().append('text').attr({
                            'x': 23,
                            'y': function (d, i) {
                                return 22 + 15 * i;
                            }
                        }).text(function (d, i) {
                            return ' - ' + d.name;
                        });
                    },
                    drawAxis: function (yscale, groups, svg, width) {
                        svg.append('g').attr('class', 'y axis').attr('id', 'svg-yaxis-' + id).attr('transform', 'translate(' + margin.left + ',0)');
                        var yAxis = svg.select('g#svg-yaxis-' + id);
                        var yaxis = d3.svg.axis().scale(yscale).orient('left').ticks(10);
                        yAxis.call(yaxis);
                        svg.append('g').attr('class', 'x axis').attr('id', 'svg-xaxis-' + id);
                        var xAxis = svg.select('g#svg-xaxis-' + id);
                        xAxis.append('line').attr({
                            'x1': margin.left,
                            'x2': groups.data.length * geneWidth + width,
                            'y1': yscale.range()[0],
                            'y2': yscale.range()[0]
                        }).attr('style', 'stroke-width:1;');
                    },
                    data: undefined
                };
                function drawQuantile(scale, data, element, xposition, params) {
                    var quantiles = quantileGenerator(data, params);
                    quantiles.map(function (quantile, index) {
                        element.append('g').attr('id', quantile.name + '-outliers');
                        outliers = element.select('g#' + quantile.name + '-outliers');
                        outliers.selectAll('circle').data(quantile.outliers).enter().append('circle').attr({
                            cx: xposition + padding + width * index + padding * 2 * index + width / 2,
                            cy: function (d) {
                                return scale(d.value);
                            },
                            r: 2,
                            fill: 'red'
                        });
                    });
                    element.append('g').attr('id', 'median-line');
                    medianLine = element.select('g#median-line');
                    element.append('g').attr('id', 'max-lines');
                    maxLines = element.select('g#max-lines');
                    element.append('g').attr('id', 'min-lines');
                    minLines = element.select('g#min-lines');
                    element.append('g').attr('id', 'first-third-lines');
                    firstThirdQuantileBox = element.select('g#first-third-lines');
                    element.append('g').attr('id', 'int-bottom-lines');
                    intBottomLines = element.select('g#int-bottom-lines');
                    element.append('g').attr('id', 'int-top-lines');
                    intTopLines = element.select('g#int-top-lines');
                    element.append('g').attr('id', 'label');
                    label = element.select('g#label');
                    medianLine.selectAll('line').data(quantiles.map(function (quantile) {
                        return quantile.second;
                    })).enter().append('line').attr('class', 'median').attr('x1', function (d, i) {
                        return xposition + padding + i * (width + padding * 2);
                    }).attr('y1', function (d) {
                        return scale(d);
                    }).attr('x2', function (d, i) {
                        return xposition + padding + width + i * (width + padding * 2);
                    }).attr('y2', function (d) {
                        return scale(d);
                    }).attr('value', function (d) {
                        return d;
                    });
                    firstThirdQuantileBox.selectAll('rect').data(quantiles).enter().append('rect').attr('class', 'first-third').attr('x', function (d, i) {
                        return xposition + padding + i * (width + padding * 2);
                    }).attr('y', function (d) {
                        return scale(d.third);
                    }).attr('height', function (d) {
                        return scale(d.first) - scale(d.third);
                    }).attr('width', width).attr('value', function (d) {
                        return d.first + ',' + d.third + ':' + scale(d.first) + ',' + scale(d.third);
                    }).attr('style', function (d, i) {
                        return 'fill:' + d.color + ';' + 'fill-opacity:.25;stroke:black;stroke-width:1;';
                    });
                    minLines.selectAll('line').data(quantiles).enter().append('line').attr('class', 'min-Lines').attr('x1', function (d, i) {
                        return xposition + padding + i * (width + padding * 2);
                    }).attr('y1', function (d) {
                        return scale(d.zerothird);
                    }).attr('x2', function (d, i) {
                        return xposition + padding + width + i * (width + padding * 2);
                    }).attr('y2', function (d) {
                        return scale(d.zerothird);
                    }).attr('value', function (d) {
                        return d.min + ':' + scale(d.min);
                    });
                    maxLines.selectAll('line').data(quantiles).enter().append('line').attr('class', 'max-Lines').attr('x1', function (d, i) {
                        return xposition + padding + i * (width + padding * 2);
                    }).attr('y1', function (d) {
                        return scale(d.ninetyseventh);
                    }).attr('x2', function (d, i) {
                        return xposition + padding + width + i * (width + padding * 2);
                    }).attr('y2', function (d) {
                        return scale(d.ninetyseventh);
                    }).attr('value', function (d) {
                        return d;
                    });
                    intBottomLines.selectAll('line').data(quantiles).enter().append('line').attr('class', 'int-bottom-lines').attr('x1', function (d, i) {
                        return xposition + padding + width / 2 + i * (width + padding * 2);
                    }).attr('y1', function (d) {
                        return scale(d.first);
                    }).attr('x2', function (d, i) {
                        return xposition + padding + width / 2 + i * (width + padding * 2);
                    }).attr('y2', function (d) {
                        return scale(d.zerothird);
                    }).attr('value', function (d) {
                        return d.first + ' , ' + d.min + ' : ' + scale(d.first) + ' , ' + scale(d.min);
                    });
                    intTopLines.selectAll('line').data(quantiles).enter().append('line').attr('class', 'int-top-lines').attr('x1', function (d, i) {
                        return xposition + padding + width / 2 + i * (width + padding * 2);
                    }).attr('y1', function (d) {
                        return scale(d.third);
                    }).attr('x2', function (d, i) {
                        return xposition + padding + width / 2 + i * (width + padding * 2);
                    }).attr('y2', function (d) {
                        return scale(d.ninetyseventh);
                    }).attr('value', function (d) {
                        return d.third + ' , ' + d.max + ' : ' + scale(d.third) + ' , ' + scale(d.max);
                    });
                    var x = xposition + geneWidth / 3 - 15;
                    var y = scale(params.min) + 10;
                    label.selectAll('text').data([data.name]).enter().append('text').attr({
                        x: x,
                        y: y
                    }).text(data.geneName).attr('font-family', 'sans-serif').attr('text-anchor', 'left').attr('font-size', '14px').attr('fill', 'red').attr('transform', 'rotate(35,' + x + ',' + y + ')');
                }
                ;
            };
        }
    ]).service('extractQuantiles', [function () {
            return function (extractedValues) {
                return {
                    ninetyseventh: d3.quantile(extractedValues, 0.97),
                    zerothird: d3.quantile(extractedValues, 0.03),
                    max: d3.quantile(extractedValues, 1),
                    min: d3.quantile(extractedValues, 0),
                    first: d3.quantile(extractedValues, 0.25),
                    second: d3.quantile(extractedValues, 0.5),
                    third: d3.quantile(extractedValues, 0.75)
                };
            };
        }]).service('extractValues', [function () {
            return function (arr) {
                return arr.map(function (elem) {
                    return elem.value;
                });
            };
        }]).service('greaterThan', [function () {
            return function (a, b) {
                return parseFloat(a.value) > parseFloat(b.value) ? 1 : -1;
            };
        }]).directive('mevBoxplot', [
        'D3BoxPlots',
        'D3Service',
        function (D3BoxPlots, D3Service) {
            return {
                scope: { data: '=' },
                restrict: 'E',
                template: '<div>Loading ...</div>',
                link: function (scope, elems, attrs) {
                    scope.$watch('data', function (dataPromise, olddata) {
                        if (dataPromise) {
                            dataPromise.then(function (data) {
                                var svg = D3BoxPlots(data.id, D3Service.select(elems[0]));
                                svg.draw(data);
                            });
                            ;
                        }
                    });
                }
            };
        }
    ]);
});
/*mev-boxplot@0.0.1#src/main/model/BoxplotService*/
define('mev-boxplot@0.0.1#src/main/model/BoxplotService', [
    'mui',
    'lodash'
], function (ng, _) {
    var service = function ($q) {
        this.prepareBoxPlotData = function (dataset, genes, selections, randomId, keyColumnName) {
            var max = Number.NEGATIVE_INFINITY, min = Number.POSITIVE_INFINITY;
            var key = keyColumnName || 'id';
            function test(d) {
                if (d.value > max) {
                    max = d.value;
                }
                ;
                if (d.value < min) {
                    min = d.value;
                }
                ;
            }
            ;
            var coords = [];
            genes.map(function (gene, i) {
                selections.map(function (selection) {
                    if (typeof selection === 'string')
                        selection = _.find(dataset.column.selections, { name: selection });
                    selection.keys.map(function (sampleId) {
                        return coords.push({
                            row: gene[key],
                            column: sampleId
                        });
                    });
                });
            });
            return $q.when(dataset.expression.getDict(coords)).then(function (dict) {
                return {
                    'data': genes.map(function (gene, i) {
                        var retGene = {
                            'geneName': gene[key],
                            'pValue': gene.pValue,
                            'groups': {}
                        };
                        selections.map(function (selection) {
                            if (typeof selection === 'string')
                                selection = _.find(dataset.column.selections, { name: selection });
                            retGene.groups[selection.name] = {
                                'values': selection.keys.map(function (label) {
                                    var datapoint = dict[gene[key]][label];
                                    test(datapoint, max, min);
                                    return datapoint;
                                }),
                                'color': selection.properties.selectionColor,
                                'name': selection.name
                            };
                        });
                        return retGene;
                    }),
                    'min': min - (max - min) * 0.05,
                    'max': max + (max - min) * 0.05,
                    'id': randomId
                };
            })['catch'](function (e) {
                console.error('ERROR', e);
            });
        };
    };
    service.$name = 'mevBoxplotService';
    service.$provider = 'service';
    service.$inject = ['$q'];
    return service;
});
/*mev-boxplot@0.0.1#src/main/mev-boxplot*/
define('mev-boxplot@0.0.1#src/main/mev-boxplot', [
    'mui',
    './view/d3Boxplot.module',
    './model/BoxplotService',
    './style/boxplot.less'
], function (ng) {
    return ng.module('mev-boxplot', arguments, arguments);
});
/*mev-limma@0.0.1#src/main/model/LimmaInfo.tpl.html!system-text@0.1.0#text*/
define('mev-limma@0.0.1#src/main/model/LimmaInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>LIMMA: Linear Model for Microarray Analysis</p>\n<p>LIMMA is a library for the analysis of gene expression microarray data, especially the use of linear models for\n    analysing designed experiments and the assessment of differential expression.</p>\n<p>Reference: <a href="https://bioconductor.org/packages/release/bioc/html/limma.html">https://bioconductor.org/packages/release/bioc/html/limma.html</a></p>';
});
/*mev-limma@0.0.1#src/main/model/LimmaAnalysisType*/
define('mev-limma@0.0.1#src/main/model/LimmaAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    './LimmaInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, SelectionSetParam, infoTemplate) {
    'use strict';
    function LimmaAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        var limmaType = new mevAnalysisType({
            id: 'limma',
            name: 'LIMMA',
            viewModel: 'LimmaVM',
            params: mevAnalysisParams([
                new mevSelectionSetParam({
                    'id': 'experiment',
                    'displayName': 'Experiment',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true,
                    'disjoint': 'control'
                }),
                new mevSelectionSetParam({
                    'id': 'control',
                    'displayName': 'Control',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true
                })
            ]),
            info: { template: infoTemplate }
        });
        limmaType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            _self.parent.start.call(_self, _self, params, {}, 'put');
        };
        return limmaType;
    }
    LimmaAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    LimmaAnalysisType.$name = 'mevLimmaAnalysisType';
    LimmaAnalysisType.$provider = 'factory';
    return LimmaAnalysisType;
});
/*mev-limma@0.0.1#src/main/router/LimmaState.tpl.html!system-text@0.1.0#text*/
define('mev-limma@0.0.1#src/main/router/LimmaState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="column-wrapper">\n    <ul class="nav nav-tabs column-header">\n        <li class="active">\n            <a id="annotationsTabLink" href="{{\'#limma-\' + analysis.randomId + \'-limmaTable\'}}"\n               data-toggle="tab"\n               target="_self">{{analysis.name}}</a>\n        </li>\n        <li>\n            <a id="heatmapTabLink" href="{{\'#limma-\' + analysis.randomId + \'-heatmap\'}}"\n               data-toggle="tab"\n               target="_self">Heatmap</a>\n        </li>\n        <li>\n            <a id="scatterPlotTab" href="{{\'#limma-\' + analysis.randomId + \'-scatterPlot\'}}"\n               data-toggle="tab"\n               target="_self" ng-click="LimmaVM.resize()">Volcano Plot</a>\n        </li>\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body" id="">\n    <div class="tab-pane active" id="{{\'limma-\' + analysis.randomId + \'-limmaTable\'}}">\n        <div  class="results-wrapper">\n            <div class="results-header clearfix">\n\n                <h3 class="analysis-results-title">{{analysis.name}} Results</h3>\n                <div class="btn-toolbar pull-right" role="toolbar" >\n                    <div class="btn-group">\n                        <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'gsea\']" mev-context-level="bottom">GSEA</a>\n                        <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'pca\']" mev-context-level="bottom" >PCA</a>\n                        <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'hcl\']" mev-context-level="bottom">HCL</a>\n                        <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'wgcna\']" mev-context-level="bottom">WGCNA</a>\n                        <a class="btn" href="/dataset/{{project.dataset.datasetName}}/analysis/{{analysis.name}}?format=tsv">\n                            <i class="icon-white icon-download"></i> Download\n                        </a>\n                        <btn-create-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                              mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" >\n                        </btn-create-selection><!--\n\t\t            --><btn-export-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                             mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" >\n                        </btn-export-selection>\n                    </div>\n                </div>\n\n            </div>\n            <div class="results-body">\n                <div class="results-top">\n                    <mev-boxplot data="boxPlotGenes"></mev-boxplot>\n                </div>\n                <div class="results-bottom">\n                    <mev-results-table data="analysis.results"\n                                       headers="headers"\n                                       ordering="pValue"\n                                       on-filter="viewGenes(filteredResults)"\n                                       mev-save-as="{name: analysis.name}"\n                                       mev-out-filtered-results="DatasetAnalysisVM.filteredResults"></mev-results-table>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="tab-pane" id="{{\'limma-\' + analysis.randomId + \'-heatmap\'}}">\n        <div id="{{\'limma-\' + analysis.randomId + \'-svg-holder\'}}" class="results-wrapper">\n            <div class="results-header clearfix">\n\n                <h3 class="analysis-results-title">{{analysis.name}} Results</h3>\n                <div class="btn-toolbar pull-right" role="toolbar" >\n                    <div class="btn-group">\n                        <a class="btn" href="/dataset/{{project.dataset.datasetName}}/analysis/{{analysis.name}}?format=tsv">\n                            <i class="icon-white icon-download"></i> Download\n                        </a>\n                        <btn-create-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                              mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" >\n                        </btn-create-selection><!--\n\t\t            --><btn-export-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                             mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" >\n                    </div>\n                </div>\n\n            </div>\n            <div class="results-body">\n                <mev-heatmap mev-dataset=\'project.dataset\' mev-heatmap-view=\'project.views\'></mev-heatmap>\n            </div>\n        </div>\n    </div>\n    <div class="tab-pane" id="{{\'limma-\' + analysis.randomId + \'-scatterPlot\'}}">\n        <div id="{{\'limma-\' + analysis.randomId + \'-scatter-holder\'}}" class="results-wrapper">\n\n            <div class="results-header clearfix">\n\n                <h3 class="analysis-results-title">{{analysis.name}} Results</h3>\n                <div class="btn-toolbar pull-right" role="toolbar" >\n                    <div class="btn-group">\n                        <btn-create-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                              mui-dataset="DatasetAnalysisVM.project.dataset"\n                                              mui-items="DatasetAnalysisVM.scatterVm.selected.items"\n                                              mui-target="Volcano">\n                        </btn-create-selection><!--\n\t\t            --><btn-export-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                             mui-dataset="DatasetAnalysisVM.project.dataset"\n                                             mui-items="DatasetAnalysisVM.scatterVm.selected.items"\n                                             mui-target="Volcano">\n                    </div>\n                </div>\n\n            </div>\n            <div class="results-body">\n\n                <div mev-scatter-plot="{name: analysis.name}" drag-action="\'select\'"\n                     mev-input="analysis.results"\n                     mev-x-field="logFoldChange"\n                     mev-y-field="averageExpression"\n                     mev-fields="fields"\n                     log-scale-x="scatterVm.logScaleX"\n                     log-scale-y="scatterVm.logScaleY"\n                     mev-selections="project.dataset.row.selections"\n                     mev-id-field="id" >\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n</div>\n\n\n\n';
});
/*mev-limma@0.0.1#src/main/router/LimmaState*/
define('mev-limma@0.0.1#src/main/router/LimmaState', ['./LimmaState.tpl.html'], function (template) {
    'use strict';
    function LimmaState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.limma', {
            parent: 'root.dataset.analysisType',
            url: 'limma/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'LimmaVMFactory',
                function (scope, project, analysis, LimmaVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return LimmaVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'LimmaVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    LimmaState.inject = ['$stateProvider'];
    LimmaState.provider = 'config';
    return LimmaState;
});
/*mev-limma@0.0.1#src/main/router/LimmaVM*/
define('mev-limma@0.0.1#src/main/router/LimmaVM', ['lodash'], function (_) {
    'use strict';
    function LimmaVM(mevBoxplotService, mevAnalysisTypes, mevGseaAnalysisType, mevPcaAnalysisType, mevHclAnalysisType, mevWgcnaAnalysisType, $timeout, $window) {
        function factory($scope, project, analysis) {
            var projection = {
                ids: function (row) {
                    return row.id;
                }
            };
            var _self = this;
            var scope = $scope;
            $scope.project = project;
            $scope.analysis = analysis;
            $scope.analysisTypes = mevAnalysisTypes.all();
            this.analysis = analysis;
            this.project = project;
            $scope.fields = [
                'logFoldChange',
                'averageExpression',
                'logPValue'
            ];
            $scope.headers = [
                {
                    'name': 'ID',
                    'field': 'id',
                    'icon': 'search'
                },
                {
                    'name': 'Log-Fold-Change',
                    'field': 'logFoldChange',
                    'icon': [
                        '>=',
                        '<='
                    ]
                },
                {
                    'name': 'Average Expression',
                    'field': 'averageExpression',
                    'icon': [
                        '>=',
                        '<='
                    ]
                },
                {
                    'name': 'P-Value',
                    'field': 'pValue',
                    'icon': [
                        '<=',
                        '>='
                    ],
                    'default': 0.05
                },
                {
                    'name': 'q-Value',
                    'field': 'qValue',
                    'icon': [
                        '<=',
                        '>='
                    ]
                }
            ];
            $scope.filteredResults = [];
            _self.filteredResults = $scope.filteredResults;
            $scope.$on('ui:resultsTable:filteredResults', function ($event, filteredResults) {
                $scope.applyToHeatmap(filteredResults);
            });
            $scope.$on('ui:resultsTable:pageChanged', function ($event, pageResults) {
                $scope.boxPlotGenes = mevBoxplotService.prepareBoxPlotData($scope.project.dataset, pageResults, [
                    $scope.analysis.params.control,
                    $scope.analysis.params.experiment
                ], $scope.analysis.randomId);
            });
            $scope.viewGenes = function (filteredResults) {
                scope.applyToHeatmap(filteredResults);
            };
            $scope.applyToHeatmap = function (filteredResults) {
                var labels = filteredResults.map(projection.ids);
                $scope.heatmapView = $scope.project.generateView({
                    viewType: 'heatmapView',
                    note: $scope.analysis.name,
                    labels: {
                        column: { keys: $scope.project.dataset.column.keys },
                        row: { keys: labels }
                    }
                });
            };
            scope.analysis.getFilteredKeys = function (dimension) {
                if (dimension === 'row')
                    return scope.filteredResults.map(function (item) {
                        return item.id;
                    });
            };
            scope.analysis.getOriginalInputKeys = function (dimension) {
                if (dimension === 'column') {
                    var selectionNames = _.isObject(scope.analysis.params.control) ? [
                        scope.analysis.params.experiment.name,
                        scope.analysis.params.control.name
                    ] : [
                        scope.analysis.params.experiment,
                        scope.analysis.params.control
                    ];
                    var keys = project.dataset.selections.unionByName('column', selectionNames);
                    keys.displayName = selectionNames.join('+');
                    return keys;
                }
            };
            scope.selectionParams = {
                name: undefined,
                color: '#' + Math.floor(Math.random() * 16777215 << 0).toString(16)
            };
            _self.scatterVm = { selected: { items: [] } };
            scope.$on('mev.scatterPlot.selection', function ($event, selected) {
                _self.scatterVm.selected = selected;
            });
            scope.exportParams = {
                name: undefined,
                color: '#ffffff'
            };
            this.resize = function () {
                $timeout(function () {
                    var evt;
                    if ($window.document.createEvent) {
                        evt = $window.document.createEvent('UIEvents');
                        evt.initUIEvent('resize', true, false, $window, 0);
                    } else {
                        evt = new Event('resize');
                    }
                    $window.dispatchEvent(evt);
                });
            };
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    LimmaVM.$inject = [
        'mevBoxplotService',
        'mevAnalysisTypes',
        'mevGseaAnalysisType',
        'mevPcaAnalysisType',
        'mevHclAnalysisType',
        'mevWgcnaAnalysisType',
        '$timeout',
        '$window'
    ];
    LimmaVM.$name = 'LimmaVMFactory';
    LimmaVM.$provider = 'factory';
    return LimmaVM;
});
/*mev-limma@0.0.1#src/main/mev-limma*/
define('mev-limma@0.0.1#src/main/mev-limma', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-gsea',
    'mev-pca',
    'mev-hcl',
    'mev-wgcna',
    'mev-results-table',
    'mev-boxplot',
    './model/LimmaAnalysisType',
    './router/LimmaState',
    './router/LimmaVM'
], function (ng) {
    'use strict';
    return ng.module('mev-limma', arguments, arguments);
});
/*mev-edger@0.0.1#src/main/model/EdgerInfo.tpl.html!system-text@0.1.0#text*/
define('mev-edger@0.0.1#src/main/model/EdgerInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>edgeR is a package for the analysis of digital gene expression data arising from RNA sequencing technologies such\nas SAGE, CAGE, Tag-seq or RNA-seq, with emphasis on testing for differential expression.</p>\n<p>Reference: <a href="https://bioconductor.org/packages/release/bioc/html/edgeR.html">https://bioconductor.org/packages/release/bioc/html/edgeR.html</a></p>';
});
/*mev-edger@0.0.1#src/main/model/EdgerAnalysisType*/
define('mev-edger@0.0.1#src/main/model/EdgerAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    './EdgerInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, SelectionSetParam, infoTemplate) {
    'use strict';
    function EdgerAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        var edgerType = new mevAnalysisType({
            id: 'edger',
            name: 'EdgeR',
            viewModel: 'EdgerVM',
            params: mevAnalysisParams([
                new mevSelectionSetParam({
                    'id': 'experiment',
                    'displayName': 'Experiment',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true,
                    'disjoint': 'control'
                }),
                new mevSelectionSetParam({
                    'id': 'control',
                    'displayName': 'Control',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true
                }),
                new SelectParam({
                    'id': 'method',
                    'displayName': 'Method',
                    'options': [
                        'fdr',
                        'holm',
                        'hochberg',
                        'BH',
                        'BY',
                        'bonferroni',
                        'none'
                    ],
                    'value': 'fdr'
                })
            ]),
            info: { template: infoTemplate }
        });
        edgerType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            _self.parent.start.call(_self, _self, params, {}, 'put');
        };
        return edgerType;
    }
    EdgerAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    EdgerAnalysisType.$name = 'mevEdgerAnalysisType';
    EdgerAnalysisType.$provider = 'factory';
    return EdgerAnalysisType;
});
/*mev-edger@0.0.1#src/main/router/EdgerState.tpl.html!system-text@0.1.0#text*/
define('mev-edger@0.0.1#src/main/router/EdgerState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<!-- <project-analysis-parameters parameters="DatasetAnalysisVM.analysis.params"></project-analysis-parameters> -->\n<div class="column-wrapper">\n\t<ul class="nav nav-tabs column-header" id="importTabs">\n\t\t<li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n\t\t<li id="heatmap_tab"><a href="#heatmap" class="pull-left" data-toggle="tab" target="_self">Heatmap</a></li>\n\t\t<div class="action-menu" mui-paste="action-menu"></div>\n\t</ul>\n\n\t<div class="tab-content column-body results-wrapper">\n\t\t<div class="results-header clearfix">\n\t\t\t<div class="btn-toolbar" role="toolbar" mui-yank="action-menu">\n\t\t\t\t<div class="btn-group">\n\t\t\t\t\t<a class="btn" mev-analysis-start-button mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'gsea\']" mev-context-level="bottom">GSEA</a>\n\t\t\t\t\t<a class="btn" mev-analysis-start-button mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'pca\']" mev-context-level="bottom" >PCA</a>\n\t\t\t\t\t<a class="btn" mev-analysis-start-button mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'hcl\']" mev-context-level="bottom">HCL</a>\n\t\t\t\t\t<a class="btn" mev-analysis-start-button mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'wgcna\']" mev-context-level="bottom">WGCNA</a>\n\t\t\t\t\t<btn-create-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis"\n\t\t\t\t\t\t\t\t\t\t  mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" mui-key-name="_row">\n\t\t\t\t\t</btn-create-selection><!--\n\t\t            --><btn-export-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis"\n\t\t\t\t\t\t\t\t\t\t\t mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" mui-key-name="_row">\n\t\t\t\t</btn-export-selection>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class="tab-pane active results-body" id="table" >\n\t\t\t<div class="results-top" id="{{\'edger-\' + analysis.randomId + \'-svg-holder\'}}">\n\t\t\t\t<mev-boxplot data="DatasetAnalysisVM.boxPlotGenes"></mev-boxplot>\n\t\t\t</div>\n\t\t\t<div class="results-bottom">\n\t\t\t\t<mev-results-table id="DatasetAnalysisVM.heatmapView.id" data="DatasetAnalysisVM.analysis.results" headers="DatasetAnalysisVM.headers" ordering="-value"\n\t\t\t\t\t\t\t\t   on-filter="DatasetAnalysisVM.udpateFilteredView(filteredResults)"\n\t\t\t\t\t\t\t\t   on-paged="DatasetAnalysisVM.updatePageView(pageResults)"\n\t\t\t\t\t\t\t\t   mev-pagination="{itemsPerPage: 20}"\n\t\t\t\t\t\t\t\t   mev-save-as="{name: DatasetAnalysisVM.analysis.name}"\n\t\t\t\t\t\t\t\t   mev-out-filtered-results="DatasetAnalysisVM.filteredResults"\n\t\t\t\t                   ></mev-results-table>\n\t\t\t</div>\n\n\t\t</div>\n\t\t<div class="tab-pane" id="heatmap">\n\t\t\t<mev-heatmap mev-dataset=\'DatasetAnalysisVM.project.dataset\' mev-heatmap-view=\'DatasetAnalysisVM.heatmapView\'></mev-heatmap>\n\t\t</div>\n\n\t</div>\n</div>\n';
});
/*mev-edger@0.0.1#src/main/router/EdgerState*/
define('mev-edger@0.0.1#src/main/router/EdgerState', ['./EdgerState.tpl.html'], function (template) {
    'use strict';
    function EdgerState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.edger', {
            parent: 'root.dataset.analysisType',
            url: 'edger/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'EdgerVMFactory',
                function (scope, project, analysis, EdgerVMFactory, mevAnalysisTypes, BoxPlotService) {
                    scope.DatasetAnalysisVM = this;
                    return EdgerVMFactory.call(this, scope, project, analysis, mevAnalysisTypes, BoxPlotService);
                }
            ],
            controllerAs: 'EdgerVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    EdgerState.inject = ['$stateProvider'];
    EdgerState.provider = 'config';
    return EdgerState;
});
/*mev-edger@0.0.1#src/main/router/EdgerVM.js*/
define('mev-edger@0.0.1#src/main/router/EdgerVM.js', ['lodash'], function (_) {
    'use strict';
    function EdgerVM(mevBoxplotService, mevAnalysisTypes, mevGseaAnalysisType, mevPcaAnalysisType, mevHclAnalysisType, mevWgcnaAnalysisType) {
        function factory($scope, project, analysis) {
            var _self = this;
            this.analysisId = analysis.name;
            this.analysis = analysis;
            this.project = project;
            this.analysisTypes = mevAnalysisTypes.all();
            this.heatmapView = project.generateView({
                viewType: 'heatmapView',
                note: analysis.name,
                labels: {
                    row: { keys: project.dataset.row.keys },
                    column: { keys: project.dataset.column.keys }
                }
            });
            this.analysis.getFilteredKeys = function (dimension) {
                if (dimension === 'row')
                    return _self.filteredResults.map(function (item) {
                        return item._row;
                    });
            };
            this.analysis.results;
            this.analysis.results.getIdField = function () {
                return '_row';
            };
            this.analysis.results.getLogFoldChangeField = function () {
                return 'logFC';
            };
            this.analysis.getOriginalInputKeys = function (dimension) {
                if (dimension === 'column') {
                    var selectionNames = [
                        _self.analysis.params.experiment.name,
                        _self.analysis.params.control.name
                    ];
                    var keys = _self.project.dataset.selections.unionByName('column', selectionNames);
                    keys.displayName = selectionNames.join('+');
                    return keys;
                }
            };
            this.headers = [
                {
                    'name': 'ID',
                    'field': '_row',
                    'icon': 'search'
                },
                {
                    'name': 'Log-Fold-Change',
                    'field': 'logFC',
                    'icon': [
                        '>=',
                        '<='
                    ]
                },
                {
                    'name': 'Log-Counts-per-Mill',
                    'field': 'logCPM',
                    'icon': [
                        '>=',
                        '<='
                    ]
                },
                {
                    'name': 'P-Value',
                    'field': 'PValue',
                    'icon': '<=',
                    'default': 0.05,
                    'max': 0.05,
                    'min': 0,
                    'step': 0.01
                }
            ];
            if (this.analysis.results && this.analysis.results.length > 0)
                if (!_.isUndefined(this.analysis.results[0].FWER))
                    this.headers.push({
                        'name': 'P-Adjust (FWER)',
                        'field': 'FWER',
                        'icon': [
                            '<=',
                            '>='
                        ]
                    });
                else if (!_.isUndefined(this.analysis.results[0].FDR))
                    this.headers.push({
                        'name': 'P-Adjust (FDR)',
                        'field': 'FDR',
                        'icon': [
                            '<=',
                            '>='
                        ]
                    });
            this.filteredResults = [];
            this.udpateFilteredView = function (filteredResults) {
                var labels = filteredResults.map(function (item) {
                    return item._row;
                });
                _self.heatmapView = _self.heatmapView.applyFilter('row', labels);
            };
            this.updatePageView = function (pageResults) {
                _self.boxPlotGenes = mevBoxplotService.prepareBoxPlotData(_self.project.dataset, pageResults, [
                    _self.analysis.params.control,
                    _self.analysis.params.experiment
                ], _self.analysis.randomId, '_row');
            };
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    EdgerVM.$inject = [
        'mevBoxplotService',
        'mevAnalysisTypes',
        'mevGseaAnalysisType',
        'mevPcaAnalysisType',
        'mevHclAnalysisType',
        'mevWgcnaAnalysisType'
    ];
    EdgerVM.$name = 'EdgerVMFactory';
    EdgerVM.$provider = 'factory';
    return EdgerVM;
});
/*mev-edger@0.0.1#src/main/mev-edger*/
define('mev-edger@0.0.1#src/main/mev-edger', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-gsea',
    'mev-pca',
    'mev-hcl',
    'mev-wgcna',
    'mev-results-table',
    'mev-boxplot',
    './model/EdgerAnalysisType',
    './router/EdgerState',
    './router/EdgerVM.js'
], function (ng) {
    return ng.module('mev-edger', arguments, arguments);
});
/*mev-voom@0.0.1#src/main/model/VoomInfo.tpl.html!system-text@0.1.0#text*/
define('mev-voom@0.0.1#src/main/model/VoomInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>LIMMA: Linear Model for Microarray Analysis</p>\n<p>LIMMA is a library for the analysis of gene expression microarray data, especially the use of linear models for\n    analysing designed experiments and the assessment of differential expression.</p>\n<p>Reference: <a href="https://bioconductor.org/packages/release/bioc/html/limma.html">https://bioconductor.org/packages/release/bioc/html/limma.html</a></p>';
});
/*mev-voom@0.0.1#src/main/model/VoomAnalysisType*/
define('mev-voom@0.0.1#src/main/model/VoomAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    './VoomInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, SelectionSetParam, infoTemplate) {
    'use strict';
    function VoomAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        var voomType = new mevAnalysisType({
            id: 'voom',
            name: 'VOOM',
            viewModel: 'VoomVM',
            params: mevAnalysisParams([
                new mevSelectionSetParam({
                    'id': 'experiment',
                    'displayName': 'Experiment',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true,
                    'disjoint': 'control'
                }),
                new mevSelectionSetParam({
                    'id': 'control',
                    'displayName': 'Control',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true
                })
            ]),
            info: { template: infoTemplate }
        });
        voomType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            _self.parent.start.call(_self, _self, params, {}, 'put');
        };
        return voomType;
    }
    VoomAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    VoomAnalysisType.$name = 'mevVoomAnalysisType';
    VoomAnalysisType.$provider = 'factory';
    return VoomAnalysisType;
});
/*mev-voom@0.0.1#src/main/router/VoomState.tpl.html!system-text@0.1.0#text*/
define('mev-voom@0.0.1#src/main/router/VoomState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<!-- <project-analysis-parameters parameters="DatasetAnalysisVM.analysis.params"></project-analysis-parameters> -->\n<div class="column-wrapper">\n    <ul class="nav nav-tabs column-header" id="importTabs">\n        <li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n        <li id="heatmap_tab"><a href="#heatmap" class="pull-left" data-toggle="tab" target="_self">Heatmap</a></li>\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body results-wrapper">\n        <div class="results-header clearfix">\n            <div class="btn-toolbar" role="toolbar" mui-yank="action-menu">\n                <div class="btn-group">\n                    <a class="btn" mev-analysis-start-button mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'gsea\']" mev-context-level="bottom">GSEA</a>\n                    <a class="btn" mev-analysis-start-button mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'pca\']" mev-context-level="bottom" >PCA</a>\n                    <a class="btn" mev-analysis-start-button mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'hcl\']" mev-context-level="bottom">HCL</a>\n                    <a class="btn" mev-analysis-start-button mev-analysis-type="DatasetAnalysisVM.analysisTypes[\'wgcna\']" mev-context-level="bottom">WGCNA</a>\n                    <btn-create-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis"\n                                          mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" mui-key-name="_row">\n                    </btn-create-selection><!--\n\t\t            --><btn-export-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis"\n                                             mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" mui-key-name="_row">\n                </btn-export-selection>\n                </div>\n            </div>\n        </div>\n        <div class="tab-pane active results-body" id="table" >\n            <div class="results-top" id="{{\'voom-\' + analysis.randomId + \'-svg-holder\'}}">\n                <mev-boxplot data="DatasetAnalysisVM.boxPlotGenes"></mev-boxplot>\n            </div>\n            <div class="results-bottom">\n                <mev-results-table data="DatasetAnalysisVM.analysis.results" headers="DatasetAnalysisVM.headers" ordering="P.Value"\n                                   on-filter="DatasetAnalysisVM.udpateFilteredView(filteredResults)"\n                                   on-paged="DatasetAnalysisVM.updatePageView(pageResults)"\n                                   mev-save-as="{name: DatasetAnalysisVM.analysis.name}"\n                                   mev-out-filtered-results="DatasetAnalysisVM.filteredResults"></mev-results-table>\n            </div>\n\n        </div>\n        <div class="tab-pane" id="heatmap">\n            <mev-heatmap mev-dataset=\'DatasetAnalysisVM.project.dataset\' mev-heatmap-view=\'DatasetAnalysisVM.heatmapView\'></mev-heatmap>\n        </div>\n\n    </div>\n</div>\n';
});
/*mev-voom@0.0.1#src/main/router/VoomState*/
define('mev-voom@0.0.1#src/main/router/VoomState', ['./VoomState.tpl.html'], function (template) {
    'use strict';
    function VoomState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.voom', {
            parent: 'root.dataset.analysisType',
            url: 'voom/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'VoomVMFactory',
                function (scope, project, analysis, VoomVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return VoomVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'VoomVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    VoomState.inject = ['$stateProvider'];
    VoomState.provider = 'config';
    return VoomState;
});
/*mev-voom@0.0.1#src/main/router/VoomVM*/
define('mev-voom@0.0.1#src/main/router/VoomVM', ['lodash'], function (_) {
    'use strict';
    function VoomVM(mevBoxplotService, mevAnalysisTypes, mevGseaAnalysisType, mevPcaAnalysisType, mevHclAnalysisType, mevWgcnaAnalysisType, $timeout, $window) {
        function factory($scope, project, analysis) {
            var _self = this;
            this.analysisId = analysis.name;
            this.analysis = analysis;
            this.project = project;
            this.analysisTypes = mevAnalysisTypes.all();
            this.heatmapView = project.generateView({
                viewType: 'heatmapView',
                note: analysis.name,
                labels: {
                    row: { keys: project.dataset.row.keys },
                    column: { keys: project.dataset.column.keys }
                }
            });
            this.analysis.getFilteredKeys = function (dimension) {
                if (dimension === 'row')
                    return _self.filteredResults.map(function (item) {
                        return item._row;
                    });
            };
            this.analysis.results;
            this.analysis.results.getIdField = function () {
                return '_row';
            };
            this.analysis.results.getLogFoldChangeField = function () {
                return 'logFC';
            };
            this.analysis.getOriginalInputKeys = function (dimension) {
                if (dimension === 'column') {
                    var selectionNames = _.isObject(_self.analysis.params.$$experiment) ? [
                        _self.analysis.params.$$experiment.name,
                        _self.analysis.params.$$control.name
                    ] : [
                        _self.analysis.params.control.name,
                        _self.analysis.params.experiment.name
                    ];
                    var keys = _self.project.dataset.selections.unionByName('column', selectionNames);
                    keys.displayName = selectionNames.join('+');
                    return keys;
                }
            };
            this.headers = [
                {
                    'name': 'ID',
                    'field': '_row',
                    'icon': 'search'
                },
                {
                    'name': 'Log-Fold-Change',
                    'field': 'logFC',
                    'icon': [
                        '>=',
                        '<='
                    ]
                },
                {
                    'name': 'Average Expression',
                    'field': 'AveExpr',
                    'icon': [
                        '>=',
                        '<='
                    ]
                },
                {
                    'name': 'P-Value',
                    'field': 'P.Value',
                    'icon': '<=',
                    'default': 0.05,
                    'max': 0.05,
                    'min': 0,
                    'step': 0.01
                },
                {
                    'name': 'q-Value',
                    'field': 'adj.P.Val',
                    'icon': '<='
                },
                {
                    'name': 't',
                    'field': 't',
                    'icon': '<='
                },
                {
                    'name': 'B',
                    'field': 'B',
                    'icon': '<='
                }
            ];
            _self.filteredResults = [];
            this.udpateFilteredView = function (filteredResults) {
                var labels = filteredResults.map(function (item) {
                    return item._row;
                });
                _self.heatmapView = _self.heatmapView.applyFilter('row', labels);
            };
            this.updatePageView = function (pageResults) {
                var selections = _.isObject(_self.analysis.params.$$control) ? [
                    _self.analysis.params.$$control,
                    _self.analysis.params.$$experiment
                ] : [
                    _self.analysis.params.control,
                    _self.analysis.params.experiment
                ];
                _self.boxPlotGenes = mevBoxplotService.prepareBoxPlotData(_self.project.dataset, pageResults, selections, _self.analysis.randomId, '_row');
            };
            $scope.$on('ui:resultsTable:pageChanged', function ($event, results) {
            });
            $scope.$on('ui:resultsTable:filteredResults', function ($event, results) {
            });
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    VoomVM.$inject = [
        'mevBoxplotService',
        'mevAnalysisTypes',
        'mevGseaAnalysisType',
        'mevPcaAnalysisType',
        'mevHclAnalysisType',
        'mevWgcnaAnalysisType',
        '$timeout',
        '$window'
    ];
    VoomVM.$name = 'VoomVMFactory';
    VoomVM.$provider = 'factory';
    return VoomVM;
});
/*mev-voom@0.0.1#src/main/mev-voom*/
define('mev-voom@0.0.1#src/main/mev-voom', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-gsea',
    'mev-pca',
    'mev-hcl',
    'mev-wgcna',
    'mev-results-table',
    'mev-boxplot',
    './model/VoomAnalysisType',
    './router/VoomState',
    './router/VoomVM'
], function (ng) {
    'use strict';
    return ng.module('mev-voom', arguments, arguments);
});
/*mev-deseq@0.0.1#src/main/model/DeseqInfo.tpl.html!system-text@0.1.0#text*/
define('mev-deseq@0.0.1#src/main/model/DeseqInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>Differential expression analysis based on the Negative Binomial (a.k.a. Gamma-Poisson) distribution</p>\n<p>Reference: <a href="https://bioconductor.org/packages/release/bioc/html/DESeq.html">https://bioconductor.org/packages/release/bioc/html/DESeq.html</a></p>';
});
/*mev-deseq@0.0.1#src/main/model/DeseqAnalysisType*/
define('mev-deseq@0.0.1#src/main/model/DeseqAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    './DeseqInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, SelectionSetParam, infoTemplate) {
    'use strict';
    function DeseqAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        var DeseqType = new mevAnalysisType({
            id: 'deseq',
            name: 'DESeq',
            viewModel: 'DeseqVM',
            params: mevAnalysisParams([
                new mevSelectionSetParam({
                    'id': 'experiment',
                    'displayName': 'Experiment',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true,
                    'disjoint': 'control'
                }),
                new mevSelectionSetParam({
                    'id': 'control',
                    'displayName': 'Control',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true
                })
            ]),
            info: { template: infoTemplate }
        });
        DeseqType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            _self.parent.start.call(_self, _self, params, {}, 'put');
        };
        return DeseqType;
    }
    DeseqAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    DeseqAnalysisType.$name = 'mevDeseqAnalysisType';
    DeseqAnalysisType.$provider = 'factory';
    return DeseqAnalysisType;
});
/*mev-deseq@0.0.1#src/main/router/DeseqState.tpl.html!system-text@0.1.0#text*/
define('mev-deseq@0.0.1#src/main/router/DeseqState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="column-wrapper">\n    <ul class="nav nav-tabs column-header" id="importTabs">\n        <li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}} Result</a></li>\n        <li id="heatmap]_tab"><a href="#heatmap" data-toggle="tab" target="_self">Heatmap</a></li>\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body">\n        <div class="tab-pane active" id="table" >\n\n            <div  class="results-wrapper">\n                <div class="results-header clearfix">\n\n                    <h3 class="analysis-results-title">{{analysis.name}} Results</h3>\n                    <div class="btn-toolbar" role="toolbar" mui-yank="action-menu">\n                        <div class="btn-group">\n                            <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'pca\']" mev-context-level="bottom" >PCA</a>\n                            <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'hcl\']" mev-context-level="bottom">HCL</a>\n                            <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'wgcna\']" mev-context-level="bottom">WGCNA</a>\n                            <btn-create-selection mui-analysis="analysis"\n                                                  mui-dataset="project.dataset" mui-items="filteredResults" >\n                            </btn-create-selection><!--\n\t\t\t\t--><btn-export-selection mui-target="" mui-analysis="analysis"\n                                         mui-dataset="project.dataset" mui-items="filteredResults">\n                        </btn-export-selection>\n                        </div>\n                    </div>\n\n                </div>\n                <div class="results-body">\n                    <div class="results-top" id="{{\'deseq-\' + analysis.randomId + \'-svg-holder\'}}">\n                        <mev-boxplot data="boxPlotGenes"></mev-boxplot>\n                    </div>\n                    <div class="results-bottom">\n                        <mev-results-table data="analysis.results"\n                                           headers="headers"\n                                           ordering="pValue"\n                                           on-filter="viewGenes(filteredResults)" on-paged="viewPage(pageResults)"\n                                           mev-save-as="{name: analysis.name}"\n                                           mev-out-filtered-results="filteredResults"></mev-results-table>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <div class="tab-pane" id="heatmap">\n            <mev-heatmap mev-dataset=\'DatasetAnalysisVM.project.dataset\' mev-heatmap-view=\'DatasetAnalysisVM.heatmapView\'></mev-heatmap>\n        </div>\n    </div>\n</div>\n';
});
/*mev-deseq@0.0.1#src/main/router/DeseqState*/
define('mev-deseq@0.0.1#src/main/router/DeseqState', ['./DeseqState.tpl.html'], function (template) {
    'use strict';
    function DeseqState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.deseq', {
            parent: 'root.dataset.analysisType',
            url: 'deseq/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'DeseqVMFactory',
                function (scope, project, analysis, DeseqVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return DeseqVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'DeseqVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    DeseqState.inject = ['$stateProvider'];
    DeseqState.provider = 'config';
    return DeseqState;
});
/*mev-deseq@0.0.1#src/main/router/DeseqVM*/
define('mev-deseq@0.0.1#src/main/router/DeseqVM', ['lodash'], function (_) {
    'use strict';
    function DeseqVM(mevBoxplotService, mevAnalysisTypes, mevPcaAnalysisType, mevHclAnalysisType, mevWgcnaAnalysisType, $timeout, $window) {
        function factory($scope, project, analysis) {
            var projection = {
                ids: function (row) {
                    return row.id;
                }
            };
            var _self = this;
            var scope = $scope;
            $scope.project = project;
            $scope.analysis = analysis;
            this.analysis = analysis;
            this.project = project;
            scope.analysisTypes = mevAnalysisTypes.all();
            scope.analysis.getFilteredKeys = function (dimension) {
                if (dimension === 'row')
                    return scope.filteredResults.map(function (item) {
                        return item.id;
                    });
            };
            scope.analysis.getOriginalInputKeys = function (dimension) {
                if (dimension === 'column') {
                    var selectionNames = _.isObject(scope.analysis.params.control) ? [
                        scope.analysis.params.experiment.name,
                        scope.analysis.params.control.name
                    ] : [
                        scope.analysis.params.experiment,
                        scope.analysis.params.control
                    ];
                    var keys = scope.project.dataset.selections.unionByName('column', selectionNames);
                    keys.displayName = selectionNames.join('+');
                    return keys;
                }
            };
            this.heatmapView = scope.heatmapView = project.generateView({
                viewType: 'heatmapView',
                note: analysis.name,
                labels: {
                    row: { keys: project.dataset.row.keys },
                    column: { keys: project.dataset.column.keys }
                },
                expression: {
                    min: project.dataset.expression.min,
                    max: project.dataset.expression.max,
                    avg: project.dataset.expression.avg
                }
            });
            scope.headers = [
                {
                    'name': 'ID',
                    'field': 'id',
                    'icon': 'search'
                },
                {
                    'name': 'Log-Fold-Change',
                    'field': 'logFoldChange',
                    'icon': [
                        '>=',
                        '<='
                    ]
                },
                {
                    'name': 'Mean Expression Control',
                    'field': 'meanExpressionControl',
                    'icon': 'none'
                },
                {
                    'name': 'Mean Expression Experimental',
                    'field': 'meanExpressionExperimental',
                    'icon': 'none'
                },
                {
                    'name': 'P-Value',
                    'field': 'pValue',
                    'icon': [
                        '<=',
                        '>='
                    ],
                    'default': 0.05
                },
                {
                    'name': 'q-Value',
                    'field': 'qValue',
                    'icon': [
                        '<=',
                        '>='
                    ]
                }
            ];
            scope.filteredResults = [];
            scope.viewGenes = function (filteredResults) {
                scope.applyToHeatmap(filteredResults);
            };
            scope.viewPage = function (pageResults) {
                var control = _.isObject(scope.analysis.params.control) ? scope.analysis.params.control : _.find(scope.project.dataset.column.selections, function (selection) {
                    return selection.name === scope.analysis.params.control;
                });
                var experiment = _.isObject(scope.analysis.params.experiment) ? scope.analysis.params.experiment : _.find(scope.project.dataset.column.selections, function (selection) {
                    return selection.name === scope.analysis.params.experiment;
                });
                scope.boxPlotGenes = mevBoxplotService.prepareBoxPlotData(scope.project.dataset, pageResults, [
                    control,
                    experiment
                ], scope.analysis.randomId);
            };
            scope.selectionParams = {
                name: undefined,
                color: '#' + Math.floor(Math.random() * 16777215 << 0).toString(16)
            };
            scope.applyToHeatmap = function (filteredResults) {
                var labels = filteredResults.map(projection.ids);
                ;
                _self.heatmapView = scope.heatmapView = scope.heatmapView.applyFilter('row', labels);
            };
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    DeseqVM.$inject = [
        'mevBoxplotService',
        'mevAnalysisTypes',
        'mevPcaAnalysisType',
        'mevHclAnalysisType',
        'mevWgcnaAnalysisType',
        '$timeout',
        '$window'
    ];
    DeseqVM.$name = 'DeseqVMFactory';
    DeseqVM.$provider = 'factory';
    return DeseqVM;
});
/*mev-deseq@0.0.1#src/main/mev-deseq*/
define('mev-deseq@0.0.1#src/main/mev-deseq', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-pca',
    'mev-hcl',
    'mev-wgcna',
    'mev-results-table',
    'mev-boxplot',
    './model/DeseqAnalysisType',
    './router/DeseqState',
    './router/DeseqVM'
], function (ng) {
    'use strict';
    return ng.module('mev-deseq', arguments, arguments);
});
/*mev-analysis@0.0.1#src/params/model/boolean/BooleanParam*/
define('mev-analysis@0.0.1#src/params/model/boolean/BooleanParam', [
    'lodash',
    '../BaseParam'
], function (_, BaseParam) {
    function BooleanParam(spec) {
        _.assign(this, { type: 'boolean' }, spec);
    }
    BooleanParam.prototype = new BaseParam();
    return BooleanParam;
});
/*mev-ttest@0.0.1#src/main/model/tTestInfo.tpl.html!system-text@0.1.0#text*/
define('mev-ttest@0.0.1#src/main/model/tTestInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>Performs one and two sample t-tests on vectors of data.</p>\n<p>Reference: <a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/t.test.html">\n    https://stat.ethz.ch/R-manual/R-devel/library/stats/html/t.test.html</a>\n</p>';
});
/*mev-ttest@0.0.1#src/main/model/tTestAnalysisType*/
define('mev-ttest@0.0.1#src/main/model/tTestAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    'mev-analysis/src/params/model/decimal/DecimalParam',
    'mev-analysis/src/params/model/boolean/BooleanParam',
    './tTestInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, SelectionSetParam, DecimalParam, BooleanParam, infoTemplate) {
    'use strict';
    function tTestAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        var oneSampleParamsConstraint = {
            paramId: 'type',
            value: 'one sample'
        };
        var twoSampleParamsConstraint = {
            paramId: 'type',
            value: 'two sample'
        };
        var tTestType = new mevAnalysisType({
            id: 'ttest',
            name: 't-Test',
            viewModel: 'tTestVM',
            params: mevAnalysisParams([
                new SelectParam({
                    'id': 'type',
                    'displayName': 'Type',
                    'options': ['two sample'],
                    'value': 'two sample'
                }),
                new mevSelectionSetParam({
                    'id': 'experiment',
                    'displayName': 'Experiment',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true,
                    'disjoint': 'control'
                }),
                new mevSelectionSetParam({
                    'id': 'control',
                    'displayName': 'Control',
                    'dimension': 'column',
                    'display': 'name',
                    'required': true,
                    'constraint': twoSampleParamsConstraint
                }),
                new DecimalParam({
                    'id': 'pValue',
                    'displayName': 'pValue',
                    'min': 0,
                    'max': 1,
                    'value': 0.05,
                    'precision': 3
                }),
                new DecimalParam({
                    'id': 'userMean',
                    'displayName': 'Mean',
                    'constraint': oneSampleParamsConstraint
                }),
                new BooleanParam({
                    'id': 'multTestCorrection',
                    'displayName': 'Multitest correction',
                    'value': false
                }),
                new BooleanParam({
                    'id': 'assumeEqualVariance',
                    'displayName': 'Equal Variance',
                    'value': false,
                    'constraint': twoSampleParamsConstraint
                })
            ]),
            info: { template: infoTemplate }
        });
        tTestType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            params.type = undefined;
            var urlParams = { analysisType: params.type === 'one sample' ? 'one_sample_ttest' : 'two_sample_ttest' };
            _self.parent.start.call(_self, _self, params, urlParams, 'put');
        };
        return tTestType;
    }
    tTestAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    tTestAnalysisType.$name = 'mevtTestAnalysisType';
    tTestAnalysisType.$provider = 'factory';
    return tTestAnalysisType;
});
/*mev-ttest@0.0.1#src/main/router/tTestState.tpl.html!system-text@0.1.0#text*/
define('mev-ttest@0.0.1#src/main/router/tTestState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<!-- <project-analysis-parameters parameters="DatasetAnalysisVM.analysis.params"></project-analysis-parameters> -->\n<div class="column-wrapper">\n    <ul class="nav nav-tabs column-header" id="importTabs">\n        <li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n        <li id="heatmap_tab"><a href="#heatmap" class="pull-left" data-toggle="tab" target="_self">Heatmap</a></li>\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body">\n        <div class="tab-pane active" id="table" >\n            <!--<t-Test-Accordion analysis="DatasetAnalysisVM.analysis" project="DatasetAnalysisVM.project" heatmap-view=\'DatasetAnalysisVM.heatmapView\' is-it-open="isOpen"></t-Test-Accordion>-->\n            <div  class="results-wrapper" id="tTestResultsTable" >\n                <div class="results-header clearfix">\n                    <!--      \t<div class="btn-toolbar" role="toolbar" > -->\n                    <div class="btn-toolbar" role="toolbar" mui-yank="action-menu">\n                        <div class="btn-group">\n                            <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'gsea\']" mev-context-level="bottom">GSEA</a>\n                            <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'pca\']" mev-context-level="bottom" >PCA</a>\n                            <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'hcl\']" mev-context-level="bottom">HCL</a>\n                            <a class="btn" mev-analysis-start-button mev-analysis-type="analysisTypes[\'wgcna\']" mev-context-level="bottom">WGCNA</a>\n                            <a class="btn" href="/dataset/{{project.dataset.datasetName}}/analysis/{{analysis.name}}?format=tsv">\n                                <i class="icon-white icon-download"></i> Download\n                            </a>\n                            <btn-create-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                                  mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" >\n                            </btn-create-selection><!--\n                        --><btn-export-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                                 mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResults" >\n                            </btn-export-selection>\n                        </div>\n                    </div>\n\n                </div>\n                <div class="results-body">\n                    <div class="results-top">\n                        <mev-boxplot data="boxPlotGenes"></mev-boxplot>\n                    </div>\n                    <div class="results-bottom">\n                        <mev-results-table data="analysis.results" headers="headers" ordering="pValue"\n                                           mev-save-as="{name: analysis.name}" mev-out-filtered-results="DatasetAnalysisVM.filteredResults"></mev-results-table>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="tab-pane" id="heatmap">\n            <mev-heatmap mev-dataset=\'DatasetAnalysisVM.project.dataset\' mev-heatmap-view=\'DatasetAnalysisVM.heatmapView\'></mev-heatmap>\n        </div>\n    </div>\n</div>\n\n\n';
});
/*mev-ttest@0.0.1#src/main/router/tTestState*/
define('mev-ttest@0.0.1#src/main/router/tTestState', ['./tTestState.tpl.html'], function (template) {
    'use strict';
    function tTestState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.ttest', {
            parent: 'root.dataset.analysisType',
            url: 'tTest/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'tTestVMFactory',
                function (scope, project, analysis, tTestVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return tTestVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'tTestVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    tTestState.inject = ['$stateProvider'];
    tTestState.provider = 'config';
    return tTestState;
});
/*mev-ttest@0.0.1#src/main/router/tTestVM*/
define('mev-ttest@0.0.1#src/main/router/tTestVM', ['lodash'], function (_) {
    'use strict';
    function tTestVM(mevBoxplotService, mevAnalysisTypes, mevGseaAnalysisType, mevPcaAnalysisType, mevHclAnalysisType, mevWgcnaAnalysisType) {
        function factory(scope, project, analysis) {
            var _self = this;
            var projection = {
                ids: function (row) {
                    return row.id;
                }
            };
            scope.analysisTypes = mevAnalysisTypes.all();
            this.analysisId = analysis.name;
            scope.project = project;
            scope.analysis = analysis;
            this.project = project;
            this.analysis = analysis;
            scope.heatmapView = this.heatmapView = project.generateView({
                viewType: 'heatmapView',
                note: analysis.name,
                labels: {
                    row: { keys: project.dataset.row.keys },
                    column: { keys: project.dataset.column.keys }
                },
                expression: {
                    min: project.dataset.expression.min,
                    max: project.dataset.expression.max,
                    avg: project.dataset.expression.avg
                }
            });
            scope.$on('ui:resultsTable:pageChanged', function ($event, pageResults) {
                var control = _.isObject(analysis.params.control) ? analysis.params.control : _.find(project.dataset.column.selections, function (selection) {
                    return selection.name === analysis.params.controlName;
                });
                var experiment = _.isObject(analysis.params.experiment) ? analysis.params.experiment : _.find(project.dataset.column.selections, function (selection) {
                    return selection.name === analysis.params.experimentName;
                });
                scope.boxPlotGenes = mevBoxplotService.prepareBoxPlotData(project.dataset, pageResults, [
                    control,
                    experiment
                ], analysis.randomId);
            });
            scope.headers = [
                {
                    'name': 'ID',
                    'field': 'id',
                    'icon': 'search'
                },
                {
                    'name': 'P-Value',
                    'field': 'pValue',
                    'icon': [
                        '<=',
                        '>='
                    ],
                    'default': 0.05,
                    'max': 0.05,
                    'min': 0,
                    'step': 0.01
                },
                {
                    'name': 'Log-Fold-Change',
                    'field': 'logFoldChange',
                    'icon': [
                        '>=',
                        '<='
                    ]
                }
            ];
            _self.filteredResults = [];
            scope.filteredResults = _self.filteredResults;
            scope.$on('ui:resultsTable:filteredResults', function ($event, filteredResults) {
                scope.applyToHeatmap(filteredResults);
            });
            scope.selectionParams = {
                name: undefined,
                color: '#' + Math.floor(Math.random() * 16777215 << 0).toString(16)
            };
            analysis.getFilteredKeys = function (dimension) {
                if (dimension === 'row')
                    return scope.filteredResults.map(function (item) {
                        return item.id;
                    });
            };
            analysis.getOriginalInputKeys = function (dimension) {
                if (dimension === 'column') {
                    var selectionNames = [
                        analysis.params.experimentName,
                        analysis.params.controlName
                    ];
                    var keys = project.dataset.selections.unionByName('column', selectionNames);
                    keys.displayName = selectionNames.join('+');
                    return keys;
                }
            };
            scope.applyToHeatmap = function (filteredResults) {
                var labels = filteredResults.map(projection.ids);
                scope.heatmapView = scope.heatmapView.applyFilter('row', labels);
            };
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    tTestVM.$inject = [
        'mevBoxplotService',
        'mevAnalysisTypes',
        'mevGseaAnalysisType',
        'mevPcaAnalysisType',
        'mevHclAnalysisType',
        'mevWgcnaAnalysisType'
    ];
    tTestVM.$name = 'tTestVMFactory';
    tTestVM.$provider = 'factory';
    return tTestVM;
});
/*mev-ttest@0.0.1#src/main/mev-ttest*/
define('mev-ttest@0.0.1#src/main/mev-ttest', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-gsea',
    'mev-pca',
    'mev-hcl',
    'mev-wgcna',
    'mev-results-table',
    'mev-boxplot',
    './model/tTestAnalysisType',
    './router/tTestState',
    './router/tTestVM'
], function (ng) {
    'use strict';
    return ng.module('mev-ttest', arguments, arguments);
});
/*mev-anova@0.0.1#src/main/model/AnovaInfo.tpl.html!system-text@0.1.0#text*/
define('mev-anova@0.0.1#src/main/model/AnovaInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>Compute analysis of variance (or deviance) tables for one or more fitted model objects.</p>\n<p>Reference: <a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/anova.html">https://stat.ethz.ch/R-manual/R-devel/library/stats/html/anova.html</a></p>';
});
/*mev-anova@0.0.1#src/main/model/AnovaAnalysisType*/
define('mev-anova@0.0.1#src/main/model/AnovaAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    'mev-analysis/src/params/model/decimal/DecimalParam',
    'mev-analysis/src/params/model/boolean/BooleanParam',
    './AnovaInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, SelectionSetParam, DecimalParam, BooleanParam, infoTemplate) {
    'use strict';
    function AnovaAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        var AnovaType = new mevAnalysisType({
            id: 'anova',
            name: 'ANOVA',
            viewModel: 'AnovaVM',
            params: mevAnalysisParams([
                new DecimalParam({
                    'id': 'pValue',
                    'displayName': 'pValue',
                    'min': 0,
                    'max': 1,
                    'value': 0.05,
                    'precision': 3
                }),
                new BooleanParam({
                    'id': 'multTestCorrection',
                    'displayName': 'Multitest correction',
                    'value': false
                }),
                new mevSelectionSetParam({
                    'id': 'selections',
                    'displayName': 'Selections',
                    'dimension': 'column',
                    'display': 'name',
                    'multiselect': true,
                    'disjoint': true
                })
            ]),
            info: { template: infoTemplate }
        });
        AnovaType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            var selectionNames = params.selections.map(function (selection) {
                return selection.name;
            });
            params.selections = selectionNames;
            params.type = undefined;
            _self.parent.start.call(_self, _self, params, {}, 'put');
        };
        return AnovaType;
    }
    AnovaAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    AnovaAnalysisType.$name = 'mevAnovaAnalysisType';
    AnovaAnalysisType.$provider = 'factory';
    return AnovaAnalysisType;
});
/*mev-anova@0.0.1#src/main/router/AnovaState.tpl.html!system-text@0.1.0#text*/
define('mev-anova@0.0.1#src/main/router/AnovaState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<!-- <project-analysis-parameters parameters="DatasetAnalysisVM.analysis.params"></project-analysis-parameters> -->\n<div class="column-wrapper">\n    <ul class="nav nav-tabs column-header" id="importTabs">\n        <li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n        <li id="heatmap_tab"><a href="#heatmap" data-toggle="tab" target="_self">Heatmap</a></li>\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body">\n        <div class="tab-pane active" id="table" >\n            <div  class="results-wrapper">\n                <div class="results-header clearfix">\n\n                    <h3 class="analysis-results-title">{{analysis.name}} Results</h3>\n                    <div class="btn-toolbar pull-right" role="toolbar" mui-yank="action-menu">\n                        <div class="btn-group">\n                            <a class="btn btn-success " href="/dataset/{{project.dataset.datasetName}}/analysis/{{analysis.name}}?format=tsv">\n                                <i class="icon-white icon-download"></i> Download\n                            </a>\n                            <btn-create-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                                      mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResultsUniq" >\n                            </btn-create-selection><!--\n                            --><btn-export-selection mui-analysis="DatasetAnalysisVM.analysis"\n                                                     mui-dataset="DatasetAnalysisVM.project.dataset" mui-items="DatasetAnalysisVM.filteredResultsUniq" >\n                            </btn-export-selection>\n                        </div>\n                    </div>\n\n                </div>\n                <div class="results-body">\n                    <div class="results-top">\n                        <mev-boxplot data="boxPlotGenes"></mev-boxplot>\n                    </div>\n                    <div class="results-bottom">\n                        <mev-results-table data="cleanData" headers="headers" ordering="pValue" on-filter="viewGenes(filteredResults)" on-paged="viewPage(pageResults)"\n                                           mev-save-as="{name: analysis.name}"></mev-results-table>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="tab-pane" id="heatmap">\n            <mev-heatmap mev-dataset=\'DatasetAnalysisVM.project.dataset\' mev-heatmap-view=\'DatasetAnalysisVM.heatmapView\'></mev-heatmap>\n        </div>\n    </div>\n</div>\n';
});
/*mev-anova@0.0.1#src/main/router/AnovaState*/
define('mev-anova@0.0.1#src/main/router/AnovaState', ['./AnovaState.tpl.html'], function (template) {
    'use strict';
    function AnovaState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.anova', {
            parent: 'root.dataset.analysisType',
            url: 'anova/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'AnovaVMFactory',
                function (scope, project, analysis, AnovaVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return AnovaVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'AnovaVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    AnovaState.inject = ['$stateProvider'];
    AnovaState.provider = 'config';
    return AnovaState;
});
/*mev-anova@0.0.1#src/main/router/AnovaVM*/
define('mev-anova@0.0.1#src/main/router/AnovaVM', ['lodash'], function (_) {
    'use strict';
    function AnovaVM(mevBoxplotService, mevAnalysisTypes) {
        function factory(scope, project, analysis) {
            var _self = this;
            var projection = {
                ids: function (row) {
                    return row.id;
                }
            };
            scope.analysisTypes = mevAnalysisTypes.all();
            this.analysisId = analysis.name;
            scope.project = project;
            scope.analysis = analysis;
            this.project = project;
            this.analysis = analysis;
            this.heatmapView = project.generateView({
                viewType: 'heatmapView',
                note: analysis.name,
                labels: {
                    row: { keys: project.dataset.row.keys },
                    column: { keys: project.dataset.column.keys }
                },
                expression: {
                    min: project.dataset.expression.min,
                    max: project.dataset.expression.max,
                    avg: project.dataset.expression.avg
                }
            });
            scope.filteredResults = undefined;
            scope.cleanData = expandEmbedded(scope.analysis.results);
            scope.headers = [
                {
                    'name': 'ID',
                    'field': 'id',
                    'icon': 'search'
                },
                {
                    'name': 'Partner A',
                    'field': 'partnerA',
                    'icon': 'search'
                },
                {
                    'name': 'Partner B',
                    'field': 'partnerB',
                    'icon': 'search'
                },
                {
                    'name': 'P-Value',
                    'field': 'pValue',
                    'icon': [
                        '<=',
                        '>='
                    ],
                    'default': 0.05
                },
                {
                    'name': 'Pairwise LFC',
                    'field': 'lfc',
                    'icon': [
                        '>=',
                        '<='
                    ]
                }
            ];
            _self.filteredResults = [];
            scope.filteredResults = _self.filteredResults;
            _self.filteredResultsUniq = [];
            scope.viewGenes = function (filteredResults) {
                console.debug('anova viewGenes', filteredResults);
                _self.filteredResults = filteredResults;
                _self.filteredResultsUniq.length = 0;
                traverse(_self.filteredResults).map(function (geneId) {
                    _self.filteredResultsUniq.push({ id: geneId });
                });
                scope.$emit('ui:anova:filteredResults', _.uniq(filteredResults, 'id'));
                scope.applyToHeatmap(filteredResults);
            };
            scope.viewPage = function (pageResults) {
                var selectionNames = scope.analysis.params.selections || scope.analysis.params.data;
                var groups = selectionNames.map(function (selectionName) {
                    return _.find(scope.project.dataset.column.selections, function (selection) {
                        return selection.name === selectionName;
                    });
                });
                var pageResultsUniq = _.uniq(pageResults, 'id');
                scope.$emit('ui:anova:pageResults', pageResultsUniq);
                scope.boxPlotGenes = mevBoxplotService.prepareBoxPlotData(scope.project.dataset, pageResultsUniq, groups, scope.analysis.randomId);
            };
            scope.selectionParams = {
                name: undefined,
                color: '#' + Math.floor(Math.random() * 16777215 << 0).toString(16),
                dimension: 'row'
            };
            function traverse(results) {
                return results.map(projection.ids).filter(function (value, index, array) {
                    return array.indexOf(value) === index;
                });
            }
            scope.applyToHeatmap = function (filteredResults) {
                var labels = traverse(filteredResults);
                _self.heatmapView = scope.project.generateView({
                    viewType: 'heatmapView',
                    labels: {
                        column: { keys: scope.project.dataset.column.keys },
                        row: { keys: labels }
                    },
                    expression: {
                        min: scope.project.dataset.expression.min,
                        max: scope.project.dataset.expression.max,
                        avg: scope.project.dataset.expression.avg
                    }
                });
            };
            function expandEmbedded(data) {
                var expanded = [];
                for (var gene = 0; gene < data.length; gene++) {
                    for (var pair = 0; pair < data[gene]['pairwise_log_fold_change'].length; pair++) {
                        var cleanRow = {
                            'id': data[gene]['id'],
                            'pValue': data[gene]['pValue'],
                            'lfc': data[gene]['pairwise_log_fold_change'][pair]['ratio'],
                            'partnerA': data[gene]['pairwise_log_fold_change'][pair]['partnerA'],
                            'partnerB': data[gene]['pairwise_log_fold_change'][pair]['partnerB']
                        };
                        expanded.push(cleanRow);
                    }
                }
                return expanded;
            }
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    AnovaVM.$inject = [
        'mevBoxplotService',
        'mevAnalysisTypes'
    ];
    AnovaVM.$name = 'AnovaVMFactory';
    AnovaVM.$provider = 'factory';
    return AnovaVM;
});
/*mev-anova@0.0.1#src/main/mev-anova*/
define('mev-anova@0.0.1#src/main/mev-anova', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-heatmap',
    'mev-results-table',
    'mev-boxplot',
    './model/AnovaAnalysisType',
    './router/AnovaState',
    './router/AnovaVM'
], function (ng) {
    'use strict';
    return ng.module('mev-anova', arguments, arguments);
});
/*mev-pca@0.0.0#src/pca.module*/
define('mev-pca@0.0.0#src/pca.module', [
    'mui',
    'mev-scatter-plot',
    './view/pcaAnalysisDirective',
    './model/PcaAnalysisType',
    './router/PcaState',
    './router/PcaStateVM',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-limma',
    'mev-edger',
    'mev-voom',
    'mev-deseq',
    'mev-ttest',
    'mev-anova'
], function (ng) {
    return ng.module('mev-pca', arguments, arguments);
});
/*app/views/dataset/analysis/views.dataset.analysis.module*/
define('app/views/dataset/analysis/views.dataset.analysis.module', [
    'ng',
    'lodash',
    './kmeans/views.dataset.analysis.kmeans.module',
    './nmf/views.dataset.analysis.nmf.module',
    './histogram/views.dataset.analysis.histogram.module',
    './genesd/views.dataset.analysis.genesd.module',
    'mev-pca'
], function (ng, _) {
    var module = ng.module('mui.views.dataset.analysis', [
        'mui.widgets.analysis',
        'mui.views.dataset.analysis.kmeans',
        'mui.views.dataset.analysis.nmf',
        'mui.views.dataset.analysis.histogram',
        'mui.views.dataset.analysis.genesd',
        'mev-pca'
    ]);
    module.config([
        '$stateProvider',
        '$urlRouterProvider',
        'AnalysisTypes',
        function ($stateProvider, $urlRouterProvider, AnalysisTypes) {
            $stateProvider.state('root.dataset.analysis', {
                url: 'analysis/{analysisType}/{analysisId}/',
                parent: 'root.dataset',
                displayName: '{{analysis.name}} analysis',
                templateProvider: [
                    '$stateParams',
                    '$http',
                    'analysis',
                    function ($stateParams, $http, analysis) {
                        console.debug('root.dataset.analysis templateProvider ', $stateParams.analysisType, analysis);
                        var templateUrl = 'app/views/dataset/analysis/default/view.analysis.default.tpl.html';
                        if (analysis.status !== 'ERROR') {
                            var analysisType = AnalysisTypes[$stateParams.analysisType];
                            if (analysisType && analysisType.shortName) {
                                templateUrl = templateUrl.replace('default', analysisType.shortName).replace('default', analysisType.shortName);
                            }
                        }
                        console.debug('analysis templateUrl:', templateUrl);
                        return $http.get(templateUrl).then(function (response) {
                            console.debug('analysis templateProvider response:', templateUrl, response);
                            return response.data;
                        });
                    }
                ],
                controllerProvider: [
                    '$state',
                    '$stateParams',
                    'analysis',
                    function ($state, $stateParams, analysis) {
                        console.debug('DatasetAnalysisVM', $state, $state.is('root.dataset.analysis'), AnalysisTypes[$stateParams.analysisType]);
                        if (analysis.status !== 'ERROR') {
                            return AnalysisTypes[$stateParams.analysisType].viewModel;
                        } else {
                            return 'AnalysisDefaultVM';
                        }
                    }
                ],
                controllerAs: 'DatasetAnalysisVM',
                resolve: {
                    analysis: [
                        '$stateParams',
                        'project',
                        'dataset',
                        function ($stateParams, project, dataset) {
                            console.debug('root.dataset.analysis resolve', $stateParams, project, dataset);
                            var analysis = _.find(dataset.analyses, function (analysis) {
                                return analysis.name === $stateParams.analysisId;
                            });
                            console.debug('root.dataset.analysis resolve analyis', analysis);
                            return analysis;
                        }
                    ]
                }
            }).state('root.dataset.analysis.result', {
                url: 'result/:resultId',
                parent: 'root.dataset.analysis',
                template: '<div>Result: {{AnalysisResultVM.resultId}}' + '<project-analysis-result result-item="AnalysisResultVM.result" result-name="{{AnalysisResultVM.result.name}}"></project-analysis-result>' + '</div>',
                controller: [
                    '$stateParams',
                    'result',
                    function ($stateParams, result) {
                        this.resultId = $stateParams.resultId;
                        this.result = result;
                    }
                ],
                controllerAs: 'AnalysisResultVM',
                resolve: {
                    result: [
                        '$stateParams',
                        'analysis',
                        function ($stateParams, analysis) {
                            console.debug('root.dataset.analysis.result resolve', $stateParams, analysis);
                            var result = _.find(analysis.result, function (result) {
                                return result.name === $stateParams.resultId;
                            });
                            console.debug('root.dataset.analysis.result resolved', result);
                            return result;
                        }
                    ]
                }
            });
        }
    ]);
    module.controller('AnalysisDefaultVM', [
        '$scope',
        'analysis',
        function ($scope, analysis) {
            this.analysis = analysis;
        }
    ]);
    module.directive('mevAnalysis', [
        '$compile',
        function ($compile) {
            return {
                restrict: 'AE',
                scope: { analysis: '=mevAnalysis' },
                template: '<div mev-analysis-result></div>',
                controller: function () {
                },
                controllerAs: 'MevAnalysisVM',
                link: function (scope, elm, attr, ctrl) {
                }
            };
        }
    ]).directive('mevAnalysisResult', [
        '$compile',
        function ($compile) {
            return {
                restrict: 'AE',
                scope: { analysis: '=mevAnalysisResult' },
                template: '<div></div>',
                controller: function () {
                },
                controllerAs: 'MevAnalysisResultVM',
                link: function (scope, elm, attr, ctrl) {
                }
            };
        }
    ]);
    return module;
});
/*app/views/dataset/analyses/views.dataset.analyses.module*/
define('app/views/dataset/analyses/views.dataset.analyses.module', [
    'ng',
    'lodash'
], function (ng, _) {
    var module = ng.module('mui.views.dataset.analyses', []);
    module.config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            $stateProvider.state('root.dataset.analyses', {
                url: 'analyses',
                parent: 'root.dataset',
                templateUrl: 'app/views/dataset/analyses/templates/views.dataset.analyses.tpl.html',
                controller: 'AnalysesVM',
                controllerAs: 'AnalysesVM',
                displayName: 'analyses'
            });
        }
    ]);
    return module;
});
/*app/views/dataset/session/timeout/sessionTimeoutModal.tpl.html!system-text@0.1.0#text*/
define('app/views/dataset/session/timeout/sessionTimeoutModal.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">\n\n    <div class="modal-content">\n        <div class="modal-header">\n            <button type="button" class="close" ng-click="dismiss()" aria-hidden="true">\xD7</button>\n            <h3 id="myModalLabel">Session Timeout</h3>\n        </div>\n        <div class="modal-body">\n\n            <form role="form">\n                <div class="btn-group">\n                    <label>Your session has timed out.</label>\n                </div>\n                <a class="btn btn-success btn-block" ng-click="stay()" aria-hidden="true">OK</a>\n                <a class="btn btn-info btn-block" ng-click="leave()" aria-hidden="true">Start Over</a>\n            </form>\n\n        </div>\n    </div>\n\n</div>\n';
});
/*app/views/dataset/session/timeout/SessionTimeoutState*/
define('app/views/dataset/session/timeout/SessionTimeoutState', ['./sessionTimeoutModal.tpl.html'], function (template) {
    var config = function ($stateProvider) {
        $stateProvider.state('root.dataset.home.sessionTimeout', {
            parent: 'root.dataset.home',
            displayName: 'Session Timeout',
            onEnter: [
                '$state',
                '$stateParams',
                '$uibModal',
                'dataset',
                function ($state, $stateParams, $modal, dataset) {
                    $modal.open({
                        template: template,
                        resolve: {},
                        controller: [
                            '$scope',
                            function (scope) {
                                scope.stay = function () {
                                    scope.$dismiss();
                                };
                                scope.leave = function () {
                                    scope.$close(true);
                                };
                            }
                        ]
                    }).result.then(function () {
                        $state.go('root.datasets');
                    });
                }
            ]
        });
    };
    config.$inject = ['$stateProvider'];
    config.$provider = 'config';
    return config;
});
/*app/views/dataset/session/views.dataset.session.module*/
define('app/views/dataset/session/views.dataset.session.module', [
    'mui',
    './timeout/SessionTimeoutState'
], function (ng) {
    return ng.module('views.session', arguments, arguments);
});
/*js/project/lib/HeatmapViewClass*/
define('js/project/lib/HeatmapViewClass', ['lodash'], function (_) {
    'use strict';
    function getStats(params) {
        var stats = {
            min: Infinity,
            max: -Infinity,
            sum: 0,
            count: 0
        };
        _.transform(params.labels.column.keys, function (result, column, index) {
            _.transform(params.labels.row.keys, function (result, row, index) {
                var value = params.dataset.expression.tryGet([
                    row,
                    column
                ]);
                if (!isNaN(value)) {
                    if (value < result.min)
                        result.min = value;
                    if (value > result.max)
                        result.max = value;
                    result.sum += value;
                    result.count++;
                }
            }, result);
        }, stats);
        stats.avg = stats.sum / stats.count;
        return stats;
    }
    return function (params, dataset) {
        var self = this;
        self.dataset = dataset;
        this.viewType = 'heatmapView';
        this.index2labels = function (indexPair) {
            return [
                self.row[indexPair[0]],
                self.column[indexPair[1]]
            ];
        };
        this.id = Math.random().toString(36).substring(7);
        this.applyFilter = function (dimension, keys) {
            if (!_.isEqual(self.labels[dimension].keys, keys)) {
                self.labels[dimension].keys = keys;
                var stats = getStats(this);
                _.assign(self.expression, stats);
            }
            return _.assign({}, self);
        };
        function getStats(params) {
            var stats = {
                min: Infinity,
                max: -Infinity,
                sum: 0,
                count: 0
            };
            _.transform(params.labels.column.keys, function (result, column, index) {
                _.transform(params.labels.row.keys, function (result, row, index) {
                    var value = self.dataset.expression.tryGet([
                        row,
                        column
                    ]);
                    if (!isNaN(value)) {
                        if (value < result.min)
                            result.min = value;
                        if (value > result.max)
                            result.max = value;
                        result.sum += value;
                        result.count++;
                    }
                }, result);
            }, stats);
            stats.avg = stats.sum / stats.count;
            return stats;
        }
        if (params.labels.column.keys.length < self.dataset.column.keys.length || params.labels.row.keys.length < self.dataset.row.keys.length) {
            var stats = getStats(params);
            _.assign(params.expression, stats);
        } else if (!_.isNumber(dataset.expression.avg) || isNaN(dataset.expression.avg) || !_.isNumber(dataset.expression.min) || isNaN(dataset.expression.min) || !_.isNumber(dataset.expression.max || isNaN(dataset.expression.max))) {
            var stats = getStats(params);
            _.assign(params.expression, stats);
            _.assign(dataset.expression, stats);
        }
        self.refresh = function () {
            var stats = getStats(self);
            _.assign(self.expression, stats);
        };
        _.assign(self, params);
    };
});
/*js/project/lib/generateView*/
define('js/project/lib/generateView', ['./HeatmapViewClass'], function (HeatmapViewClass) {
    return function (params) {
        var self = this;
        if (params.viewType == 'heatmapView') {
            if (params.panel) {
                params.selectionParams = {
                    row: {
                        name: undefined,
                        color: '#' + Math.floor(Math.random() * 16777215 << 0).toString(16),
                        labels: []
                    },
                    column: {
                        name: undefined,
                        color: '#' + Math.floor(Math.random() * 16777215 << 0).toString(16),
                        labels: []
                    }
                };
            }
            if (!params.expression) {
                params.expression = {
                    min: self.dataset.expression.min,
                    max: self.dataset.expression.max,
                    avg: self.dataset.expression.avg
                };
            }
            if (params.labels && !params.labels.column) {
                params.labels.column = { keys: self.dataset.column.keys };
            }
            if (params.labels && !params.labels.row) {
                params.labels.row = { keys: self.dataset.row.keys };
            }
            if (params.merge) {
                if (params.panel && params.panel.side && self.views.panel && self.views.panel.top) {
                    params.panel.top = self.views.panel.top;
                    params.labels.column.keys = self.views.labels.column.keys;
                } else if (params.panel && params.panel.top && self.views.panel && self.views.panel.side) {
                    params.panel.side = self.views.panel.side;
                    params.labels.row.keys = self.views.labels.row.keys;
                }
            }
            if (self.views.viewType && _.isEqual(self.views.expression, params.expression) && _.isEqual(self.views.labels.column.keys, params.labels.column.keys) && _.isEqual(self.views.labels.row.keys, params.labels.row.keys) && _.isEqual(self.views.note, params.note)) {
                return self.views;
            }
            self.views = new HeatmapViewClass(params, self.dataset);
            return self.views;
        }
        return null;
    };
});
/*js/project/lib/ProjectClass*/
define('js/project/lib/ProjectClass', [], function () {
    return function (dataset, generateView) {
        this.dataset = dataset;
        this.generateView = generateView;
        this.views = [];
    };
});
/*dataset/lib/datasetStatistics*/
define('dataset/lib/datasetStatistics', [], function () {
    return function () {
        var self = this;
        return {
            percentile: function (percent) {
                var f = Math.floor((self.sortedValues.length - 1) * 0.01 * parseFloat(percent)), c = Math.ceil((self.sortedValues.length - 1) * 0.01 * parseFloat(percent));
                return (self.values[self.sortedValues[f]].value + self.values[self.sortedValues[c]].value) / 2;
            },
            max: function () {
                return this.percentile(100);
            },
            min: function () {
                return this.percentile(0);
            },
            median: function () {
                return this.percentile(50);
            },
            quartile: function (q) {
                return this.percentile(q * 25);
            },
            contingency: function (experiment) {
                if (!experiment.groups || !experiment.dimension || experiment.threshold == undefined || !experiment.population) {
                    throw new TypeError('Missing experment attribute.' + ' Groups: ' + experiment.groups + ' Dimension: ' + experiment.dimension + ' Threshold: ' + experiment.threshold);
                    return;
                }
                if (experiment.groups.length > 2 || experiment.groups.length < 2) {
                    throw new RangeError('Group length incorrect. Expected: 2. Received: ' + experiment.groups.length);
                    return;
                }
                for (group in experiment.groups) {
                    if (experiment.groups[group].length < 1) {
                        throw new RangeError('Group with no elements found! Requires at least one element.');
                    }
                }
                for (element in experiment.groups[0]) {
                    if (experiment.groups[1].indexOf(experiment.groups[0][element]) >= 0) {
                        throw new TypeError('Intersection of groups is not null. Element in both groups: ' + experiment.groups[0][element]);
                    }
                }
                var table = [
                    {
                        above: 0,
                        below: 0
                    },
                    {
                        above: 0,
                        below: 0
                    }
                ];
                for (group in experiment.groups) {
                    for (member in experiment.groups[group]) {
                        if (experiment.dimension == 'column') {
                            if (self.get([
                                    experiment.groups[group][member],
                                    experiment.population
                                ]).value >= experiment.threshold) {
                                table[group].above++;
                            } else {
                                table[group].below++;
                            }
                        }
                        if (experiment.dimension == 'row') {
                            if (self.get([
                                    experiment.population,
                                    experiment.groups[group][member]
                                ]).value >= experiment.threshold) {
                                table[group].above++;
                            } else {
                                table[group].below++;
                            }
                        }
                    }
                }
                return table;
            }
        };
    };
});
/*dataset/lib/selectionSort*/
define('dataset/lib/selectionSort', [], function () {
    function exchange(arr, i, j) {
        var hold = arr[j];
        arr[j] = arr[i];
        arr[i] = hold;
    }
    function randomize(arr) {
        for (var i = 0; i < arr.length; i++) {
            arr[i];
        }
    }
    return function (keyF) {
        var self = this;
        var keyf = function (j) {
            return parseFloat(j.value);
        };
        if (keyF) {
            keyf = keyF;
        }
        var pivot = 0;
        while (pivot < self.values.length) {
            var leader = {
                value: Number.POSITIVE_INFINITY,
                index: undefined,
                place: undefined
            };
            for (var ind = pivot; ind < self.sortedValues.length; ind++) {
                if (keyf(self.values[self.sortedValues[ind]]) < leader.value) {
                    leader.index = ind;
                    leader.value = keyf(self.values[self.sortedValues[ind]]);
                    leader.place = self.sortedValues[ind];
                }
            }
            self.sortedValues[leader.index] = self.sortedValues[pivot];
            self.sortedValues[pivot] = leader.place;
            pivot++;
        }
        ;
    };
});
/*dataset/lib/selectionHelpers*/
define('dataset/lib/selectionHelpers', ['lodash'], function (_) {
    return {
        selectionIntersect: function (params) {
            var self = this;
            var set1, set2;
            self.selections[params.dimension].map(function (selection) {
                if (selection.name == params.selection1) {
                    set1 = selection;
                }
                if (selection.name == params.selection2) {
                    set2 = selection;
                }
            });
            if (!set1 || !set2) {
                return [];
            } else {
                var intersection = [];
                for (var i = 0; i < set1.keys.length; i++) {
                    for (var j = 0; j < set2.keys.length; j++) {
                        if (set1.keys[i] == set2.keys[j]) {
                            intersection.push(set1.keys[i]);
                        }
                    }
                }
                return intersection;
            }
        },
        union: function (selections) {
            var keySets = selections.map(function (item) {
                return item.keys;
            });
            return _.union.apply(this, keySets);
        },
        unionByName: function (dimension, names) {
            self = this;
            var selections = _.filter(self.selections[dimension], function (item) {
                return _.includes(names, item.name);
            });
            return this.selections.union(selections);
        }
    };
});
/*dataset/lib/expressionModule*/
(function () {
    define('dataset/lib/expressionModule', [], function () {
        return {
            'retrieve': function (searchValue) {
                var self = this;
                if (searchValue['row'] && !searchValue['column']) {
                    return self.column.keys.map(function (col) {
                        return self.expression.get([
                            searchValue['row'],
                            col
                        ]);
                    }).filter(function (exp) {
                        return typeof exp != 'undefined';
                    });
                } else if (searchValue['column'] && !searchValue['row']) {
                    return self.row.keys.map(function (row) {
                        return self.expression.get([
                            row,
                            searchValue['column']
                        ]);
                    }).filter(function (exp) {
                        return typeof exp != 'undefined';
                    });
                } else if (searchValue['column'] && searchValue['row']) {
                    var elem = [self.expression.get([
                            searchValue['row'],
                            searchValue['column']
                        ])];
                    return elem.filter(function (exp) {
                        return typeof exp != 'undefined';
                    });
                } else {
                    return [];
                }
            }
        };
    });
}());
/*dataset/lib/DatasetValues32*/
define('dataset/lib/DatasetValues32', [
    'lodash',
    'q'
], function (_, q) {
    return function ValueStore(dataset, source, $rootScope, mevSettings, mevDb) {
        var self = this;
        var dataPromise = init();
        function init() {
            return fetchDataValues();
        }
        function fetchDataValues() {
            var valuesPromise = source.get().then(function (values) {
                var ab = values.data;
                var dataview = new DataView(ab);
                console.debug('swap: array', ab.byteLength);
                dataset.valuesBuffer = ab;
                dataset.dataview = dataview;
                $rootScope.$broadcast('mui:model:dataset:values:loaded');
                return ab;
            })['catch'](function (e) {
                throw e;
            });
            if (mevSettings.db.enabled)
                fetchDataValues64();
            return valuesPromise;
        }
        function fetchDataValues64() {
            var deferred = q.defer();
            var worker = new Worker('/container/javascript/dataset/lib/DatasetValuesWorker.js');
            worker.postMessage({ id: dataset.id });
            mevDb.firePutStarted(dataset.id, 'values64');
            worker.onmessage = function (e) {
                console.debug('worker done', e);
                self.ready = true;
                deferred.resolve(e);
                mevDb.firePutCompleted(dataset.id, 'values64');
            };
            worker.onerror = function (e) {
                console.debug('worker error', e);
                self.ready = true;
                deferred.reject(e);
                mevDb.firePutCompleted(dataset.id, 'values64');
            };
            return deferred.promise.done(function () {
                mevDb.firePutCompleted(dataset.id, 'values64');
            });
        }
        function getItemIndex(r, c) {
            return dataset.column.keys.length * r + c;
        }
        function keyToIndex(row, column) {
            var r = dataset.rowLabels2Indexes[row];
            var c = dataset.columnLabels2Indexes[column];
            return getItemIndex(r, c);
        }
        function getByIndex(index) {
            if (dataset.dataview) {
                return dataset.dataview.getFloat32(index * Float32Array.BYTES_PER_ELEMENT, false);
            }
        }
        function getByKey(labelPair) {
            if (dataset.dataview) {
                var index = keyToIndex(labelPair[0], labelPair[1]);
                return getByIndex(index);
            }
        }
        function getSome(shownCells) {
            if (dataset.dataview) {
                for (var i = 0; i < shownCells.length; i++) {
                    var index = keyToIndex(shownCells[i].row, shownCells[i].column);
                    shownCells[i].index = index;
                    shownCells[i].value = getByIndex(index);
                }
            }
            return q.when(shownCells);
        }
        function getDict(shownCells) {
            return dataPromise.then(function () {
                var dict = {};
                for (var i = 0; i < shownCells.length; i++) {
                    var rowName = shownCells[i].row;
                    var columnName = shownCells[i].column;
                    if (!dict[rowName]) {
                        dict[rowName] = {};
                    }
                    if (!dict[rowName][columnName]) {
                        dict[rowName][columnName] = {
                            value: getByKey([
                                rowName,
                                columnName
                            ])
                        };
                    }
                }
                ;
                return dict;
            });
        }
        return _.assign(this, {
            getByKey: getByKey,
            getSome: getSome,
            getDict: getDict
        });
    };
});
/*dataset/lib/DatasetValuesSourceHttp*/
define('dataset/lib/DatasetValuesSourceHttp', ['lodash'], function (_) {
    return function DatasetValueSourceHttp($http, id) {
        var source = {
            get: $http.get.bind(this, '/dataset/' + id + '/data/values', {
                params: { format: 'binary' },
                responseType: 'arraybuffer',
                headers: { 'Accept': 'application/octet-stream' }
            }),
            id: id
        };
        _.assign(this, source);
    };
});
/*dataset/lib/DatasetValuesCache*/
define('dataset/lib/DatasetValuesCache', [
    'lodash',
    'pouchdb',
    'blob-util',
    'mev-domain-common'
], function (_, PouchDB, blobUtil) {
    return function DatasetValueSourceCache(source, mevDb) {
        var cache = {
            get: function () {
                return mevDb.getDatasetValues(source.id)['catch'](function (e) {
                    if (e.status === 404 || e.status === 501) {
                        return source.get().then(function (response) {
                            setTimeout(function () {
                                mevDb.putDatasetValues(new Blob([response.data]), source.id);
                            }, 10000);
                            return response;
                        })['catch'](function (e) {
                            throw e;
                        });
                    } else {
                        throw e;
                    }
                }).then(function (values) {
                    if (values instanceof Blob)
                        return blobUtil.blobToArrayBuffer(values).then(function (ab) {
                            return { data: ab };
                        })['catch'](function (e) {
                            throw e;
                        });
                    else
                        return values;
                })['catch'](function (e) {
                    throw e;
                });
            }
        };
        _.assign(this, cache);
    };
});
/*dataset/lib/DatasetClass*/
define('dataset/lib/DatasetClass', [
    './datasetStatistics',
    './selectionSort',
    './selectionHelpers',
    './expressionModule',
    './DatasetValues32',
    './DatasetValuesSourceHttp',
    './DatasetValuesCache'
], function (datasetStatistics, selectionSort, selectionHelpers, expressionModule, DatasetValues, DatasetValuesSourceHttp, DatasetValuesCache) {
    'use strict';
    function inversion() {
        var self = this;
        var obj = Object.create(null);
        self.map(function (label, index) {
            obj[label] = index;
        });
        return obj;
    }
    function ranger(n) {
        var r = [];
        for (var i = 0; i < n; i++) {
            r.push(i);
        }
        return r;
    }
    return function (datasetName, datasetRespObj, $http, $rootScope, mevDb, mevSettings) {
        if (!datasetName) {
            throw TypeError('datasetName parameter not defined');
            return null;
        }
        if (!datasetRespObj) {
            throw TypeError('datasetRespObj parameter not defined');
            return null;
        }
        var self = this;
        this.id = datasetName;
        this.datasetName = datasetName;
        this.valueStore = new DatasetValues(this, new DatasetValuesCache(new DatasetValuesSourceHttp($http, this.id), mevDb), $rootScope, mevSettings, mevDb);
        this.expression = {
            values: datasetRespObj.values,
            data: {
                getRow: function (index) {
                    var row = [];
                    for (var c = 0; c < self.column.keys.length; c++) {
                        row.push({
                            value: datasetRespObj.dataview.getFloat64((index + c) * Float64Array.BYTES_PER_ELEMENT, false),
                            row: self.row.keys[index],
                            column: self.column.keys[c]
                        });
                    }
                    return row;
                }
            },
            max: datasetRespObj.max,
            min: datasetRespObj.min,
            avg: datasetRespObj.avg,
            tryGet: this.valueStore.getByKey,
            getSome: this.valueStore.getSome,
            getDict: this.valueStore.getDict,
            get: function (labelPair) {
                var r = self.rowLabels2Indexes[labelPair[0]];
                var c = self.columnLabels2Indexes[labelPair[1]];
                return {
                    value: datasetRespObj.dataview.getFloat64((r * self.column.keys.length + c) * Float64Array.BYTES_PER_ELEMENT, false),
                    row: labelPair[0],
                    column: labelPair[1]
                };
            },
            statistics: datasetStatistics,
            ranger: ranger
        };
        for (var k = 0; k < datasetRespObj.values.length; k++) {
            if (datasetRespObj.values[k].value % 1 != 0) {
                self.expression.hasNonIntegerValues = true;
                break;
            }
        }
        this.expression.retrieve = function (input) {
            return expressionModule.retrieve.call(self, input);
        };
        this.expression.sort = selectionSort;
        this.column = datasetRespObj.column;
        this.row = datasetRespObj.row;
        this.columnLabels2Indexes = inversion.call(datasetRespObj.column.keys);
        this.rowLabels2Indexes = inversion.call(datasetRespObj.row.keys);
        this.column.indexOf = function (label) {
            return self.columnLabels2Indexes[label];
        };
        this.row.indexOf = function (label) {
            return self.columnLabels2Indexes[label];
        };
        this.selections = {
            column: datasetRespObj.column.selections,
            row: datasetRespObj.row.selections,
            intersection: function (params) {
                return selectionHelpers.selectionIntersect.call(self, params);
            },
            union: selectionHelpers.union,
            unionByName: selectionHelpers.unionByName.bind(this)
        };
        this.analyses = datasetRespObj.analyses || [];
        this.close = function () {
            delete this.valuesBuffer;
            delete this.dataview;
            delete this.valueStore;
            delete this.expression;
        };
    };
});
/*dataset/lib/AnalysisClass*/
define('dataset/lib/AnalysisClass', ['lodash'], function (_) {
    return function (initialData) {
        var self = this;
        var internalViewTypes = { 'Hierarchical Clustering': 'tree' };
        self.randomId = Math.random().toString(36).substring(7);
        self.viewType = internalViewTypes[initialData.type];
        _.assign(self, initialData);
    };
});
/*dataset/lib/loadAnalyses*/
define('dataset/lib/loadAnalyses', [
    './AnalysisClass',
    'lodash'
], function (AnalysisClass, _) {
    'use strict';
    return function () {
        var self = this;
        self.analyses = [];
        var defaultAnalyses = [];
        return self.analysis.getAll({ datasetName: self.datasetName }).$promise.then(function (response) {
            var requests = [];
            var analyses = [];
            response.names.map(function (name) {
                var request = self.analysis.get({
                    datasetName: self.datasetName,
                    analysisName: name
                }, function (res) {
                    var analysis = new AnalysisClass(res);
                    var sessionStorageKey = self.datasetName + '.' + name;
                    console.debug('sessionStorageKey get', sessionStorageKey);
                    var params = JSON.parse(sessionStorage.getItem(self.datasetName + '.' + name));
                    if (params) {
                        if (analysis.params)
                            _.extend(analysis.params, params);
                        else
                            analysis.params = params;
                    }
                    console.debug('LoadAnalysis', analysis.name, analysis);
                    analyses.push(analysis);
                });
                requests.push(request.$promise);
            });
            return self.$q.all(requests).then(function (response) {
                self.analyses.length = 0;
                console.debug('qall', response);
                analyses.map(function (analysis) {
                    self.analyses.push(analysis);
                });
                return self.analyses;
            });
        }).then(function (response) {
            console.debug('qall2', response);
            self.analysisEventBus.analysisLoadedAll(self.analyses);
        });
        ;
    };
});
/*dataset/lib/setSelections*/
define('dataset/lib/setSelections', [], function () {
    return function (dimension, selections) {
        var self = this;
        self[dimension].selections = selections;
        self.selections[dimension] = selections;
        self.mevDb.putDataset(self);
        return null;
    };
});
/*dataset/lib/resetSelections*/
define('dataset/lib/resetSelections', [], function () {
    return function (dimension) {
        var self = this;
        if (dimension) {
            return self.selection.getAll({
                'datasetName': self.datasetName,
                'dimension': dimension
            }, function (response) {
                self.setSelections(dimension, response.selections);
                return response.selections;
            });
        } else {
            var row = self.selection.getAll({
                'datasetName': self.datasetName,
                'dimension': 'row'
            }, function (response) {
                self.setSelections('row', response.selections);
                return response.selections;
            });
            return row.$promnise.then(function () {
                self.selection.getAll({
                    'datasetName': self.datasetName,
                    'dimension': 'column'
                }, function (response) {
                    self.setSelections('column', response.selections);
                    return response.selections;
                });
            });
        }
        ;
    };
});
/*dataset/Dataset*/
define('dataset/Dataset', [
    'angular',
    './lib/DatasetClass',
    './lib/loadAnalyses',
    './lib/setSelections',
    './lib/resetSelections',
    'mev-domain-common'
], function (angular, DatasetClass, loadAnalyses, setSelections, resetSelections) {
    'use strict';
    return angular.module('Mev.Dataset', []).factory('DatasetFactory', [
        'mevAnalysisRest',
        'mevSelectionRest',
        '$q',
        '$http',
        '$rootScope',
        'mevAnalysisEventBus',
        'DashboardItems',
        'mevAnnotationRepository',
        'mevDatasetRest',
        'mevDb',
        'mevSettings',
        function (AnalysisResourceService, SelectionResourceService, $q, $http, $rootScope, analysisEventBus, DashboardItems, MevAnnotationRepository, DatasetResourceService, mevDb, mevSettings) {
            return function (datasetName, datasetResponseObj) {
                var dataset = new DatasetClass(datasetName, datasetResponseObj, $http, $rootScope, mevDb, mevSettings);
                dataset.analysis = AnalysisResourceService;
                console.debug('api:AnalysisResourceService', AnalysisResourceService, dataset.analysis);
                dataset.selection = SelectionResourceService;
                dataset.deleteSelection = function (dimension, name) {
                    _.remove(dataset[dimension].selections, function (selection) {
                        return name === selection.name;
                    });
                    dataset.selection.delete({
                        datasetName: dataset.id,
                        dimension: dimension,
                        selectionName: name
                    }).$promise.then(function () {
                        dataset.resetSelections(dimension);
                    });
                };
                dataset.mevDb = mevDb;
                dataset.$q = $q;
                dataset.analysisEventBus = analysisEventBus;
                analysisEventBus.onAnalysisSuccess($rootScope, function (analysis) {
                });
                dataset.dashboardItems = new DashboardItems();
                dataset.loadAnalyses = loadAnalyses;
                dataset.setSelections = setSelections;
                dataset.resetSelections = resetSelections;
                dataset.subset = DatasetResourceService.subset;
                dataset.getAll = DatasetResourceService.getAll;
                dataset.getIsActive = function () {
                    var _self = this;
                    return DatasetResourceService.getAll().$promise.then(function (datasetNames) {
                        return datasetNames.find(function (dataseName) {
                            return dataseName === dataset.id;
                        });
                    });
                };
                dataset.getAnnotations = function (dimension) {
                    if (!this._annotations)
                        this._annotations = {};
                    if (!this._annotations[dimension])
                        this._annotations[dimension] = new MevAnnotationRepository(dimension);
                    return this._annotations[dimension];
                };
                return dataset;
            };
        }
    ]);
});
/*js/project/Project*/
define('js/project/Project', [
    'mui',
    './lib/generateView',
    './lib/ProjectClass',
    'dataset/Dataset'
], function (angular, generateView, ProjectClass) {
    return angular.module('Mev.Project', ['Mev.Dataset']).factory('ProjectFactory', [
        'DatasetFactory',
        function (DatasetFactory) {
            return function (datasetName, datasetResponseObj) {
                if (!datasetResponseObj) {
                    throw new TypeError('datasetReponseObject not given!');
                }
                if (!datasetName) {
                    throw new TypeError('datasetName not given!');
                }
                var project = new ProjectClass(DatasetFactory(datasetName, datasetResponseObj), generateView);
                project.name = datasetName;
                return project;
            };
        }
    ]);
});
/*app/widgets/analysis/default/directives/defaultParameters.directive*/
define('app/widgets/analysis/default/directives/defaultParameters.directive', ['ng'], function (ng) {
    var ProjectAnalysisParametersDirective = function ProjectAnalysisParametersDirective() {
        return {
            scope: { parameters: '=' },
            restrict: 'AE',
            templateUrl: 'app/widgets/analysis/default/templates/defaultParameters.tpl.html'
        };
    };
    ProjectAnalysisParametersDirective.$inject = [];
    return ProjectAnalysisParametersDirective;
});
/*app/widgets/analysis/default/widgets.analysis.default.module*/
define('app/widgets/analysis/default/widgets.analysis.default.module', [
    'ng',
    './directives/defaultParameters.directive'
], function (ng, DefaultParametersDirective) {
    var module = ng.module('mui.widgets.analysis.default', []);
    module.directive('defaultParameters', DefaultParametersDirective);
    return module;
});
/*app/widgets/analysis/analysisModal/directives/analysisModal.directive*/
define('app/widgets/analysis/analysisModal/directives/analysisModal.directive', ['ng'], function (ng) {
    var AnalysisModalDirective = function AnalysisModalDirective() {
        return {
            scope: { parameters: '=' },
            restrict: 'AE',
            templateUrl: 'app/widgets/analysis/default/templates/analysisModal.tpl.html'
        };
    };
    AnalysisModalDirective.$inject = [];
    return AnalysisModalDirective;
});
/*app/widgets/analysis/analysisModal/widgets.analysis.modal.module*/
define('app/widgets/analysis/analysisModal/widgets.analysis.modal.module', [
    'ng',
    './directives/analysisModal.directive'
], function (ng, AnalsysModalDirective, AnalysisEventBus) {
    var module = ng.module('mui.widgets.analysis.modal', []);
    module.directive('analysisModal', AnalsysModalDirective);
    return module;
});
/*app/widgets/analysis/analysisLog/directives/analysisLog.tpl.html!system-text@0.1.0#text*/
define('app/widgets/analysis/analysisLog/directives/analysisLog.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div>\n<span class="logline {{line.type}}" ng-repeat="line in vm.log">\n{{line.message}}\n</span>\n</div>';
});
/*app/widgets/analysis/analysisLog/directives/analysisLog.directive*/
define('app/widgets/analysis/analysisLog/directives/analysisLog.directive', ['./analysisLog.tpl.html'], function (template) {
    var AnalysisLogDirective = function AnalysisLogDirective(AnalysisEventBus, alertService) {
        return {
            scope: { showAlerts: '@' },
            restrict: 'AE',
            template: template,
            link: function (scope, elem, attrs, ctrl) {
                function newLogline(message, type) {
                    return {
                        message: message,
                        type: type
                    };
                }
                function log(message, level) {
                    scope.vm.log.unshift(newLogline(message, level));
                }
                scope.vm = { log: [newLogline('Session log initialized', 'info')] };
                AnalysisEventBus.onAnalysisStarted(scope, function (type, name, eventData) {
                    console.debug('onAnalysisStarted handler', type, name, eventData);
                    var message = 'Started ' + type + ' analysis ' + name;
                    ;
                    log(message, 'info');
                    if (scope.showAlerts)
                        alertService.info(message, type);
                });
                AnalysisEventBus.onAnalysisSuccess(scope, function (type, name, data) {
                    console.debug('onAnalysisSuccess handler', type, name, data);
                    var message = 'Completed ' + type + ' analysis ' + name;
                    log(message, 'success');
                    if (scope.showAlerts)
                        alertService.success(message, type);
                });
                AnalysisEventBus.onAnalysisFailure(scope, function (type, params) {
                    console.debug('onAnalysisFailure handler', type, params);
                    var message = 'Error while processing ' + type + ' analysis ' + params.name;
                    log(message, 'error');
                    if (scope.showAlerts)
                        alertService.error(message, type);
                });
                scope.$on('ui:analysisLog.append', function ($event, level, message) {
                    log(message, level);
                });
            }
        };
    };
    AnalysisLogDirective.$name = 'analysisLog';
    AnalysisLogDirective.$inject = [
        'mevAnalysisEventBus',
        'mevAlertService'
    ];
    AnalysisLogDirective.$provider = 'directive';
    return AnalysisLogDirective;
});
/*app/widgets/analysis/analysisLog/widgets.analysis.log.module*/
define('app/widgets/analysis/analysisLog/widgets.analysis.log.module', [
    'mui',
    './directives/analysisLog.directive'
], function (ng, AnalsysLogDirective) {
    var module = ng.module('mui.widgets.analysis.log', arguments, arguments);
    return module;
});
/*app/widgets/analysis/analysisMenu/btnCreateSelection/btnCreateSelectionDirective*/
define('app/widgets/analysis/analysisMenu/btnCreateSelection/btnCreateSelectionDirective', ['lodash'], function (_) {
    'use strict';
    var BtnCreateSelectionDirective = function BtnCreateSelectionDirective(alertService) {
        function BtnCreateSelectionVM(scope) {
            var self = this;
            this.target = scope.muiTarget;
            this.analysis = scope.muiAnalysis;
            this.dataset = scope.muiDataset;
            this.items = scope.muiItems;
            this.key = scope.muiKeyName || 'id';
            this.dimension = scope.muiDimension || 'row';
            this.getId = function () {
                return ('selectionAdd' + self.analysis.name + self.target).replace(/.*(?=#[^\s]+$)/, '').replace(/\./, '');
            };
            this.displayItemsLimit = 5;
            this.getDisplayItems = function () {
                var displayItems = self.items.slice(0, self.displayItemsLimit);
                if (self.items.length > self.displayItemsLimit) {
                    displayItems[self.displayItemsLimit - 1] = self.items[self.items.length - 1];
                }
                return displayItems;
            };
            this.getDisplayKey = function (item) {
                return _.isObject(item) ? item[self.key] : item;
            };
            this.selectionParams = {};
            this.addSelections = function (filteredResults) {
                var keys = _.isObject(filteredResults[0]) ? filteredResults.map(function (item) {
                    return item[self.key];
                }) : filteredResults;
                var selectionData = {
                    name: self.selectionParams.name,
                    properties: {
                        selectionDescription: '',
                        selectionColor: '#' + Math.floor(Math.random() * 16777215 << 0).toString(16)
                    },
                    keys: keys
                };
                self.dataset.selection.post({
                    datasetName: self.dataset.datasetName,
                    dimension: self.dimension
                }, selectionData, function (response) {
                    self.dataset.resetSelections(self.dimension);
                    var message = 'Added ' + self.selectionParams.name + ' as new Selection!';
                    var header = 'Heatmap Selection Addition';
                    alertService.success(message, header);
                }, function (data, status, headers, config) {
                    var message = 'Couldn\'t add new selection. If ' + 'problem persists, please contact us.';
                    var header = 'Selection Addition Problem (Error Code: ' + status + ')';
                    alertService.error(message, header);
                });
            };
        }
        return {
            restrict: 'AE',
            scope: {
                muiTarget: '@',
                muiAnalysis: '=',
                muiDataset: '=',
                muiItems: '=',
                muiKeyName: '@',
                muiDimension: '@'
            },
            templateUrl: 'app/widgets/analysis/analysisMenu/btnCreateSelection/btnCreateSelection.tpl.html',
            controller: [
                '$scope',
                function (scope) {
                    scope.vm = new BtnCreateSelectionVM(scope);
                }
            ]
        };
    };
    BtnCreateSelectionDirective.$name = 'BtnCreateSelectionDirective';
    BtnCreateSelectionDirective.$inject = ['mevAlertService'];
    return BtnCreateSelectionDirective;
});
/*app/widgets/analysis/analysisMenu/btnExportSelection/btnExportSelectionDirective*/
define('app/widgets/analysis/analysisMenu/btnExportSelection/btnExportSelectionDirective', [], function () {
    'use strict';
    var BtnExportSelectionDirective = function BtnExportSelectionDirective(alertService, mevSelectionLocator) {
        function BtnExportSelectionVM(scope) {
            var self = this;
            this.target = scope.muiTarget;
            this.analysis = scope.muiAnalysis;
            this.dataset = scope.muiDataset;
            this.items = scope.muiItems;
            this.key = scope.muiKeyName || 'id';
            this.dimension = scope.muiDimension || 'row';
            this.contextLevel = scope.contextLevel || 'bottom';
            this.getId = function () {
                return ('selectionExport' + self.analysis.name + self.target).replace(/.*(?=#[^\s]+$)/, '').replace(/\./, '');
                ;
            };
            this.displayItemsLimit = 5;
            this.getDisplayItems = function () {
                var displayItems = self.items.slice(0, self.displayItemsLimit);
                if (self.items.length > self.displayItemsLimit) {
                    displayItems[self.displayItemsLimit - 1] = self.items[self.items.length - 1];
                }
                return displayItems;
            };
            this.getDisplayKey = function (item) {
                return _.isObject(item) ? item[self.key] : item;
            };
            this.exportParams = {
                name: undefined,
                color: '#ffffff'
            };
            this.exportSelection = function (filteredResults) {
                var keys = filteredResults.map(function (item) {
                    return item[self.key];
                });
                var selectionData = {
                    name: self.exportParams.name,
                    properties: {
                        selectionDescription: '',
                        selectionColor: self.exportParams.color
                    },
                    keys: keys
                };
                var subsetData = { name: self.exportParams.name };
                subsetData[this.dimension + 's'] = keys;
                var otherDimension = this.dimension === 'row' ? 'column' : 'row';
                var selections = mevSelectionLocator.find(otherDimension, scope.contextLevel);
                if (selections.length === 1)
                    subsetData[otherDimension + 's'] = selections[0].keys;
                self.dataset.subset({ datasetName: self.dataset.datasetName }, subsetData, function (response) {
                    self.dataset.resetSelections(self.dimension);
                    var message = 'Added ' + self.exportParams.name + ' as new Dataset!';
                    var header = 'New Dataset Export';
                    alertService.success(message, header);
                }, function (data, status, headers, config) {
                    var message = 'Couldn\'t export new dataset. If ' + 'problem persists, please contact us.';
                    var header = 'New Dataset Export Problem (Error Code: ' + status + ')';
                    alertService.error(message, header);
                });
            };
        }
        return {
            restrict: 'AE',
            scope: {
                muiTarget: '@',
                muiAnalysis: '=',
                muiDataset: '=',
                muiItems: '=',
                muiKeyName: '@',
                muiDimension: '@',
                contextLevel: '@mevContextLevel'
            },
            templateUrl: 'app/widgets/analysis/analysisMenu/btnExportSelection/btnExportSelection.tpl.html',
            controller: [
                '$scope',
                function (scope) {
                    scope.vm = new BtnExportSelectionVM(scope);
                }
            ]
        };
    };
    BtnExportSelectionDirective.$name = 'BtnExportSelectionDirective';
    BtnExportSelectionDirective.$inject = [
        'mevAlertService',
        'mevSelectionLocator'
    ];
    return BtnExportSelectionDirective;
});
/*app/widgets/analysis/analysisMenu/widgets.analysis.menu.module*/
define('app/widgets/analysis/analysisMenu/widgets.analysis.menu.module', [
    'ng',
    './btnCreateSelection/btnCreateSelectionDirective',
    './btnExportSelection/btnExportSelectionDirective'
], function (ng) {
    return ng.module('mui.widgets.analysis.menu', arguments, arguments);
});
/*app/widgets/analysis/any/directives/anyAnalysisDirective*/
define('app/widgets/analysis/any/directives/anyAnalysisDirective', [
    'mui',
    'lodash'
], function (ng, _) {
    'use strict';
    var AnyAnalysisDirective = function AnyAnalysisDirective(AnalysisTypes, $state, $resolve, $injector, AnalysisEventBus, mevAnalysisTypes, $compile) {
        function resolveProject($state) {
            return $state.$current.locals['@root.dataset'].project;
        }
        function resolveAnalysis(analysisName) {
            var project = resolveProject($state);
            var analysis = _.find(project.dataset.analyses, function (analysis) {
                return analysis.name === analysisName;
            });
            return analysis;
        }
        function getAnalysisType(analysis, $scope) {
            if (_.isString(analysis)) {
                return mevAnalysisTypes.get(analysis) || AnalysisTypes[analysis];
            } else if (_.isObject(analysis)) {
                if (analysis.params && analysis.params.analysisType && mevAnalysisTypes.get(analysis.params.analysisType))
                    return mevAnalysisTypes.get(analysis.params.analysisType);
                else
                    return mevAnalysisTypes.get(analysis.type) || AnalysisTypes[analysis.type];
            } else if ($scope && $scope.anyAnalysisLaunch && $scope.anyAnalysisLaunch.analysisType) {
                return mevAnalysisTypes.get($scope.anyAnalysisLaunch.analysisType) || AnalysisTypes[AnalysisTypes.reverseLookup[$scope.anyAnalysisLaunch.analysisType]];
            }
        }
        return {
            restrict: 'AE',
            scope: {
                anyAnalysis: '@',
                anyTemplateUrl: '@',
                anyViewModel: '@',
                anyAnalysisLaunch: '='
            },
            template: function (tElement, tAttrs) {
                console.debug('anyAnalysis template', tAttrs);
                return '<div ng-if=\'!mevAnalysisType.template\'\' ng-include="getTemplateUrl()" onload="processAnalysis()">' + tAttrs.anyAnalysis + '</div>' + '<div ng-if=\'mevAnalysisType.template\' ng-init=\'paste()\'></div>';
            },
            controllerAs: 'DatasetAnalysisVM',
            controller: [
                '$scope',
                'mevAnalysisEventBus',
                function ($scope, AnalysisEventBus) {
                    console.debug('anyAnalysis ctrl:', $scope);
                    var project = resolveProject($state);
                    var analysis = resolveAnalysis($scope.anyAnalysis);
                    var analysisType = getAnalysisType(analysis, $scope);
                    var ctrlName;
                    if ($scope.anyViewModel) {
                        ctrlName = $scope.anyViewModel;
                    } else {
                        ctrlName = analysisType.viewModel + 'Factory';
                        console.debug('anyAnalysis ctrlName:', ctrlName, analysisType, $state, resolveProject($state), analysis);
                    }
                    $scope.DatasetAnalysisVM.project = project;
                    $scope.DatasetAnalysisVM.analysis = analysis;
                    $scope.mevAnalysisType = analysisType;
                    $scope.getTemplateUrl = function () {
                        if ($scope.anyTemplateUrl) {
                            return $scope.anyTemplateUrl;
                        }
                        var templateUrl = 'app/views/dataset/analysis/default/view.analysis.default.tpl.html';
                        if ($scope.DatasetAnalysisVM.analysis) {
                            var analysis = $scope.DatasetAnalysisVM.analysis;
                            if (analysis.status && (analysis.status === 'IN_PROGRESS' || analysis.status === 'ERROR')) {
                            } else {
                                var analysisType = AnalysisTypes[$scope.DatasetAnalysisVM.analysis.type];
                                templateUrl = templateUrl.replace('default', analysisType.shortName).replace('default', analysisType.shortName);
                            }
                        }
                        return templateUrl;
                    };
                    AnalysisEventBus.onAnalysisSuccess($scope, function (type, name, data) {
                        if ($scope.anyAnalysisLaunch) {
                            var analysis = data.response;
                            if (analysis.name === $scope.anyAnalysisLaunch.analysisName) {
                                $scope.DatasetAnalysisVM.analysis = analysis;
                                var analysisType = getAnalysisType($scope.DatasetAnalysisVM.analysis.type);
                                var ctrlName = analysisType.viewModel + 'Factory';
                                if ($injector.has(ctrlName)) {
                                    var ctrl = $injector.get(ctrlName);
                                    $injector.invoke(ctrl, $scope.DatasetAnalysisVM, {
                                        $scope: $scope,
                                        project: project,
                                        analysis: analysis
                                    });
                                }
                            }
                        }
                    });
                    AnalysisEventBus.onAnalysisFailure($scope, function (type, name, data) {
                        if ($scope.anyAnalysisLaunch) {
                            var analysis = data.response;
                            if (analysis.name === $scope.anyAnalysisLaunch.analysisName) {
                                $scope.DatasetAnalysisVM.analysis = analysis;
                                var analysisType = getAnalysisType($scope.DatasetAnalysisVM.analysis.type);
                            }
                        }
                    });
                    AnalysisEventBus.onAnalysisLoadedAll($scope, function () {
                        if ($scope.anyAnalysisLaunch) {
                            var analysis = _.find(project.dataset.analyses, function (analysis) {
                                return analysis.name === $scope.anyAnalysisLaunch.analysisName;
                            });
                            if (analysis) {
                                $scope.DatasetAnalysisVM.analysis = analysis;
                                var analysisType = getAnalysisType($scope.DatasetAnalysisVM.analysis.type);
                                var ctrlName = analysisType.viewModel + 'Factory';
                                if ($injector.has(ctrlName)) {
                                    var ctrl = $injector.get(ctrlName);
                                    $injector.invoke(ctrl, $scope.DatasetAnalysisVM, {
                                        $scope: $scope,
                                        project: project,
                                        analysis: analysis
                                    });
                                }
                            }
                        }
                    });
                    if ($scope.DatasetAnalysisVM.analysis || $scope.anyViewModel) {
                        if ($scope.DatasetAnalysisVM.analysis.status === 'SUCCESS') {
                            if ($injector.has(ctrlName)) {
                                var ctrl = $injector.get(ctrlName);
                                console.debug('any controller', ctrlName, ctrl, $scope.$id);
                                $injector.invoke(ctrl, $scope.DatasetAnalysisVM, {
                                    $scope: $scope,
                                    project: project,
                                    analysis: analysis
                                });
                            }
                        }
                    }
                }
            ],
            compile: function (tElm, tAttr) {
                console.debug('anyAnalysis compile', tElm, tAttr);
                return function (scope, elm, attr, controller) {
                    console.debug('anyAnalysis link', scope, attr);
                    scope.paste = function () {
                        var analysis = scope.DatasetAnalysisVM.analysis;
                        var template;
                        if (!analysis || analysis && analysis.status && (analysis.status === 'IN_PROGRESS' || analysis.status === 'ERROR')) {
                            template = scope.mevAnalysisType.defaultTemplate;
                        } else {
                            template = scope.mevAnalysisType.template;
                        }
                        elm.html($compile(template)(scope));
                        scope.processAnalysis();
                    };
                    scope.$watch('DatasetAnalysisVM.analysis', function (newv) {
                        if (newv && scope.mevAnalysisType.template)
                            scope.paste();
                    });
                    scope.processAnalysis = function () {
                        if (!controller.analysis) {
                            console.debug('anyAnalysis: not found');
                            return;
                        }
                        console.debug('processAnalysis', elm);
                        elm.find('[href]').each(function () {
                            var href = this.attributes.getNamedItem('href').value;
                            if (href && href.indexOf('#') === 0) {
                                var newId = controller.analysis.name.replace(' ', '_') + '-' + href.substr(1);
                                console.debug('id ...', href, newId);
                                this.href = '#' + newId;
                                elm.find(href).each(function () {
                                    console.debug('... changing', this.id, newId);
                                    this.id = newId;
                                });
                            }
                        });
                    };
                };
            }
        };
    };
    AnyAnalysisDirective.$name = 'anyAnalysisDirective';
    AnyAnalysisDirective.$inject = [
        'AnalysisTypes',
        '$state',
        '$resolve',
        '$injector',
        'mevAnalysisEventBus',
        'mevAnalysisTypes',
        '$compile'
    ];
    return AnyAnalysisDirective;
});
/*app/widgets/analysis/any/widgets.analysis.any.module*/
define('app/widgets/analysis/any/widgets.analysis.any.module', [
    'ng',
    './directives/anyAnalysisDirective',
    './style/widgets.analysis.any.less'
], function (ng, anyAnalysisDirective) {
    return ng.module('mui.widgets.analysis.any', ['mui.widgets.analysis'], arguments);
});
/*app/widgets/analysis/analysisNode/directives/analysisNode.directive*/
define('app/widgets/analysis/analysisNode/directives/analysisNode.directive', ['lodash'], function (_) {
    var AnalysisNode = function ($rootScope, $state, DashboardItems) {
        return {
            scope: { node: '=' },
            restrict: 'AE',
            templateUrl: 'app/widgets/analysis/analysisNode/directives/analysisNode.tpl.html',
            link: function (scope, elm, attrs, ctrl) {
                console.debug('AnalysisNode link', scope.node);
                scope.AnalysisNodeVM = {
                    onClick: function (e) {
                        console.debug('AnalysisNode onClick', e);
                        $rootScope.$broadcast('ui:dashboard:addItem', { name: scope.node.nodeData.name });
                        e.stopPropagation();
                    },
                    isDashboardState: function () {
                        return $state.includes('root.dataset.home');
                    },
                    existsInDashboard: function () {
                        return _.find(new DashboardItems(), { name: scope.node.nodeData.name }) ? true : false;
                    },
                    getDisplayName: function () {
                        if (scope.node.parent)
                            return scope.node.nodeData.name.replace(scope.node.parent.nodeData.name + '.', '');
                        return scope.node.nodeData.name;
                    },
                    delete: function (e) {
                        console.debug('selectionSetNode onClick', e);
                        if (confirm('Delete analysis \'' + scope.node.nodeData.name + '\'?'))
                            $rootScope.$broadcast('root.dataset.analysis.delete', scope.node.nodeData);
                        e.stopPropagation();
                    }
                };
            }
        };
    };
    AnalysisNode.$name = 'AnalysisNodeDirective';
    AnalysisNode.$inject = [
        '$rootScope',
        '$state',
        'DashboardItems'
    ];
    return AnalysisNode;
});
/*app/widgets/analysis/analysisNode/widgets.analysis.analysisNode.module*/
define('app/widgets/analysis/analysisNode/widgets.analysis.analysisNode.module', [
    'ng',
    './directives/analysisNode.directive'
], function (ng) {
    return module = ng.module('mui.widgets.dataset.AnalysisNode', [], arguments);
});
/*app/widgets/analysis/genesd/directives/geneSdDirective*/
define('app/widgets/analysis/genesd/directives/geneSdDirective', [
    'module',
    '@loader'
], function (module, loader) {
    loader.get('@@global-helpers').prepareGlobal(module.id, []);
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**\n * \n */';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*app/widgets/analysis/genesd/widgets.analysis.genesd.module*/
define('app/widgets/analysis/genesd/widgets.analysis.genesd.module', [
    'ng',
    './directives/geneSdDirective'
], function (ng, genesdModalDirective) {
    var module = ng.module('mui.widgets.analysis.genesd', []);
    return module;
});
/*d3-tip@0.6.8#index*/
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('d3-tip@0.6.8#index', ['d3'], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = function (d3) {
            d3.tip = factory(d3);
            return d3.tip;
        };
    } else {
        root.d3.tip = factory(root.d3);
    }
}(this, function (d3) {
    return function () {
        var direction = d3_tip_direction, offset = d3_tip_offset, html = d3_tip_html, node = initNode(), svg = null, point = null, target = null;
        function tip(vis) {
            svg = getSVGNode(vis);
            point = svg.createSVGPoint();
            document.body.appendChild(node);
        }
        tip.show = function () {
            var args = Array.prototype.slice.call(arguments);
            if (args[args.length - 1] instanceof SVGElement)
                target = args.pop();
            var content = html.apply(this, args), poffset = offset.apply(this, args), dir = direction.apply(this, args), nodel = getNodeEl(), i = directions.length, coords, scrollTop = document.documentElement.scrollTop || document.body.scrollTop, scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;
            nodel.html(content).style({
                opacity: 1,
                'pointer-events': 'all'
            });
            while (i--)
                nodel.classed(directions[i], false);
            coords = direction_callbacks.get(dir).apply(this);
            nodel.classed(dir, true).style({
                top: coords.top + poffset[0] + scrollTop + 'px',
                left: coords.left + poffset[1] + scrollLeft + 'px'
            });
            return tip;
        };
        tip.hide = function () {
            var nodel = getNodeEl();
            nodel.style({
                opacity: 0,
                'pointer-events': 'none'
            });
            return tip;
        };
        tip.attr = function (n, v) {
            if (arguments.length < 2 && typeof n === 'string') {
                return getNodeEl().attr(n);
            } else {
                var args = Array.prototype.slice.call(arguments);
                d3.selection.prototype.attr.apply(getNodeEl(), args);
            }
            return tip;
        };
        tip.style = function (n, v) {
            if (arguments.length < 2 && typeof n === 'string') {
                return getNodeEl().style(n);
            } else {
                var args = Array.prototype.slice.call(arguments);
                d3.selection.prototype.style.apply(getNodeEl(), args);
            }
            return tip;
        };
        tip.direction = function (v) {
            if (!arguments.length)
                return direction;
            direction = v == null ? v : d3.functor(v);
            return tip;
        };
        tip.offset = function (v) {
            if (!arguments.length)
                return offset;
            offset = v == null ? v : d3.functor(v);
            return tip;
        };
        tip.html = function (v) {
            if (!arguments.length)
                return html;
            html = v == null ? v : d3.functor(v);
            return tip;
        };
        tip.destroy = function () {
            if (node) {
                getNodeEl().remove();
                node = null;
            }
            return tip;
        };
        function d3_tip_direction() {
            return 'n';
        }
        function d3_tip_offset() {
            return [
                0,
                0
            ];
        }
        function d3_tip_html() {
            return ' ';
        }
        var direction_callbacks = d3.map({
                n: direction_n,
                s: direction_s,
                e: direction_e,
                w: direction_w,
                nw: direction_nw,
                ne: direction_ne,
                sw: direction_sw,
                se: direction_se
            }), directions = direction_callbacks.keys();
        function direction_n() {
            var bbox = getScreenBBox();
            return {
                top: bbox.n.y - node.offsetHeight,
                left: bbox.n.x - node.offsetWidth / 2
            };
        }
        function direction_s() {
            var bbox = getScreenBBox();
            return {
                top: bbox.s.y,
                left: bbox.s.x - node.offsetWidth / 2
            };
        }
        function direction_e() {
            var bbox = getScreenBBox();
            return {
                top: bbox.e.y - node.offsetHeight / 2,
                left: bbox.e.x
            };
        }
        function direction_w() {
            var bbox = getScreenBBox();
            return {
                top: bbox.w.y - node.offsetHeight / 2,
                left: bbox.w.x - node.offsetWidth
            };
        }
        function direction_nw() {
            var bbox = getScreenBBox();
            return {
                top: bbox.nw.y - node.offsetHeight,
                left: bbox.nw.x - node.offsetWidth
            };
        }
        function direction_ne() {
            var bbox = getScreenBBox();
            return {
                top: bbox.ne.y - node.offsetHeight,
                left: bbox.ne.x
            };
        }
        function direction_sw() {
            var bbox = getScreenBBox();
            return {
                top: bbox.sw.y,
                left: bbox.sw.x - node.offsetWidth
            };
        }
        function direction_se() {
            var bbox = getScreenBBox();
            return {
                top: bbox.se.y,
                left: bbox.e.x
            };
        }
        function initNode() {
            var node = d3.select(document.createElement('div'));
            node.style({
                position: 'absolute',
                top: 0,
                opacity: 0,
                'pointer-events': 'none',
                'box-sizing': 'border-box'
            });
            return node.node();
        }
        function getSVGNode(el) {
            el = el.node();
            if (el.tagName.toLowerCase() === 'svg')
                return el;
            return el.ownerSVGElement;
        }
        function getNodeEl() {
            if (node === null) {
                node = initNode();
                document.body.appendChild(node);
            }
            ;
            return d3.select(node);
        }
        function getScreenBBox() {
            var targetel = target || d3.event.target;
            while ('undefined' === typeof targetel.getScreenCTM && 'undefined' === targetel.parentNode) {
                targetel = targetel.parentNode;
            }
            var bbox = {}, matrix = targetel.getScreenCTM(), tbbox = targetel.getBBox(), width = tbbox.width, height = tbbox.height, x = tbbox.x, y = tbbox.y;
            point.x = x;
            point.y = y;
            bbox.nw = point.matrixTransform(matrix);
            point.x += width;
            bbox.ne = point.matrixTransform(matrix);
            point.y += height;
            bbox.se = point.matrixTransform(matrix);
            point.x -= width;
            bbox.sw = point.matrixTransform(matrix);
            point.y -= height / 2;
            bbox.w = point.matrixTransform(matrix);
            point.x += width;
            bbox.e = point.matrixTransform(matrix);
            point.x -= width / 2;
            point.y -= height / 2;
            bbox.n = point.matrixTransform(matrix);
            point.y += height;
            bbox.s = point.matrixTransform(matrix);
            return bbox;
        }
        return tip;
    };
}));
/*app/widgets/analysis/histogram/plot/rhistPlotDirective*/
define('app/widgets/analysis/histogram/plot/rhistPlotDirective', [
    'ng',
    'd3',
    'd3-tip'
], function (ng, d3) {
    'use strict';
    var RHistPlotDirective = function RHistPlotDirective() {
        return {
            restrict: 'AE',
            scope: {
                data: '=',
                muiXLabel: '@',
                yLabel: '@'
            },
            template: '<div class=\'rhistPlot\'><svg></svg></div>',
            link: function (scope, elem, attrs) {
                function AspectRatio(curWidth, curHeight, targetRatio) {
                    var _self = this;
                    _self.targetRatio = targetRatio || 5 / 3;
                    _self.curRatio = curWidth / curHeight;
                    if (_self.curRatio > _self.targetRatio)
                        _self.targetWidth = _self.targetRatio * curHeight;
                    else if (_self.curRatio < _self.targetRatio)
                        _self.targetHeight = curWidth / _self.targetRatio;
                    _self.height = function () {
                        return _self.targetHeight || curHeight;
                    };
                    _self.width = function () {
                        return _self.targetWidth || curWidth;
                    };
                }
                ;
                console.debug('histogram', ng.element(elem[0]));
                var root = elem.find('.rhistPlot');
                var d3root = d3.select(root[0]);
                var svg = d3root.select('svg');
                d3root.on('resize', function () {
                });
                var margin = {
                    top: 10,
                    right: 30,
                    bottom: 50,
                    left: 60
                };
                var width = root.width() - margin.left - margin.right;
                var height = root.height() - margin.top - margin.bottom;
                var aspectRatio = new AspectRatio(width, height);
                width = aspectRatio.width();
                height = aspectRatio.height();
                var binsize = scope.data.breaks[1] - scope.data.breaks[0];
                var leftoffset = 0;
                var binmargin = 0.025;
                var xmin = scope.data.breaks[0] - leftoffset;
                var xmax = scope.data.breaks[scope.data.breaks.length - 1];
                var histdata = scope.data.counts;
                var x = d3.scale.linear().domain([
                    0,
                    xmax - xmin
                ]).range([
                    0,
                    width
                ]);
                var x2 = d3.scale.linear().domain([
                    xmin,
                    xmax
                ]).range([
                    0,
                    width
                ]);
                var y = d3.scale.linear().domain([
                    0,
                    d3.max(histdata, function (d) {
                        return d;
                    })
                ]).range([
                    height,
                    0
                ]);
                var xAxis = d3.svg.axis().scale(x2).tickValues(scope.data.breaks).tickFormat(d3.format('s')).orient('bottom');
                var yAxis = d3.svg.axis().scale(y).ticks(8).tickFormat(d3.format('s')).orient('left');
                var canvas = svg.attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
                var bar = canvas.selectAll('.bar').data(histdata).enter().append('g').attr('class', 'bar').attr('transform', function (d, i) {
                    return 'translate(' + x2(scope.data.breaks[i]) + ',' + y(d) + ')';
                });
                bar.append('rect').attr('x', x(binmargin)).attr('width', x(binsize - 2 * binmargin)).attr('height', function (d) {
                    return height - y(d);
                });
                canvas.append('g').attr('class', 'x axis').attr('transform', 'translate(0,' + height + ')').call(xAxis);
                svg.append('text').attr('class', 'x label').attr('text-anchor', 'middle').attr('x', width / 2).attr('y', height + margin.bottom).text(scope.muiXLabel);
                canvas.append('g').attr('class', 'y axis').attr('transform', 'translate(' + x(leftoffset) + ',0)').call(yAxis);
                svg.append('text').attr('class', 'ylabel').attr('y', 0).attr('x', -(height / 2)).attr('dy', '1em').attr('transform', 'rotate(-90)').style('text-anchor', 'middle').text(scope.yLabel);
                scope.sizeChanged = function ($event, element) {
                    console.debug('histogram wxh', root.width(), root.height());
                    var el = root;
                    console.debug('ANIMATE histogram sizeChanged', el.width(), el.height());
                    var width = el.width() - margin.left - margin.right;
                    var height = root.height() - margin.top - margin.bottom;
                    var aspectRatio = new AspectRatio(width, height);
                    width = aspectRatio.width();
                    height = aspectRatio.height();
                    svg.attr('width', el.width());
                    svg.attr('height', el.height());
                    x.range([
                        0,
                        width
                    ]);
                    x2.range([
                        0,
                        width
                    ]);
                    y.range([
                        height,
                        0
                    ]);
                    canvas.select('.x.axis').attr('transform', 'translate(0,' + height + ')').call(xAxis);
                    canvas.select('.y.axis').call(yAxis);
                    canvas.selectAll('.bar').attr('transform', function (d, i) {
                        return 'translate(' + x2(scope.data.breaks[i]) + ',' + y(d) + ')';
                    });
                    canvas.selectAll('rect').attr('x', x(binmargin)).attr('width', x(binsize - 2 * binmargin)).attr('height', function (d) {
                        return height - y(d);
                    });
                };
                scope.$on('mui:dashboard:panel:rowMax', scope.sizeChanged);
                scope.$on('mui:dashboard:panel:rowMin', scope.sizeChanged);
                scope.$on('mui:dashboard:panel:max', scope.sizeChanged);
                scope.$on('mui:dashboard:panel:min', scope.sizeChanged);
            }
        };
    };
    RHistPlotDirective.$inject = [];
    RHistPlotDirective.$name = 'rHistPlotDirective';
    return RHistPlotDirective;
});
/*app/widgets/analysis/histogram/widgets.analysis.histogram.module*/
define('app/widgets/analysis/histogram/widgets.analysis.histogram.module', [
    'ng',
    './plot/rhistPlotDirective'
], function (ng) {
    return ng.module('mui.widgets.analysis.Histogram', arguments, arguments).directive('onSizeChanged', [
        '$window',
        function ($window) {
            return {
                restrict: 'A',
                scope: { onSizeChanged: '&' },
                link: function (scope, $element, attr) {
                    var element = $element[0];
                    cacheElementSize(scope, element);
                    $window.addEventListener('resize', onWindowResize);
                    function cacheElementSize(scope, element) {
                        scope.cachedElementWidth = element.offsetWidth;
                        scope.cachedElementHeight = element.offsetHeight;
                    }
                    function onWindowResize() {
                        var isSizeChanged = scope.cachedElementWidth != element.offsetWidth || scope.cachedElementHeight != element.offsetHeight;
                        if (isSizeChanged) {
                            var expression = scope.onSizeChanged();
                            expression();
                        }
                    }
                    ;
                }
            };
        }
    ]);
});
/*app/widgets/analysis/widgets.analysis.module*/
define('app/widgets/analysis/widgets.analysis.module', [
    'ng',
    './default/widgets.analysis.default.module',
    './analysisModal/widgets.analysis.modal.module',
    './analysisLog/widgets.analysis.log.module',
    './analysisMenu/widgets.analysis.menu.module',
    './any/widgets.analysis.any.module',
    './analysisNode/widgets.analysis.analysisNode.module',
    './genesd/widgets.analysis.genesd.module',
    './histogram/widgets.analysis.histogram.module'
], function (ng, AnalyisEventBus) {
    var module = ng.module('mui.widgets.analysis', arguments, arguments).constant('AnalysisTypes', {
        'Hierarchical Clustering': {
            shortName: 'hcl',
            viewModel: 'HclVM'
        },
        'LIMMA Differential Expression Analysis': {
            shortName: 'limma',
            viewModel: 'LimmaVM'
        },
        'K-means Clustering': {
            shortName: 'kmeans',
            viewModel: 'KMeansVM'
        },
        't-Test Analysis': {
            shortName: 'ttest',
            viewModel: 'tTestVM'
        },
        'Fisher test': {
            shortName: 'fisher',
            viewModel: 'FisherVM'
        },
        'Anova Analysis': {
            shortName: 'anova',
            viewModel: 'AnovaVM'
        },
        'DESeq Differential Expression Analysis': {
            shortName: 'deseq',
            viewModel: 'DESeqVM'
        },
        'Survival Analysis': {
            shortName: 'survival',
            viewModel: 'SurvivalVM'
        },
        'Non-Negative Matrix Factorization': {
            shortName: 'nmf',
            viewModel: 'NmfVM'
        },
        'TopGO Analysis': {
            shortName: 'topgo',
            viewModel: 'TopGoVM'
        },
        'Histogram Analysis': {
            shortName: 'histogram',
            viewModel: 'HistogramVM'
        },
        'Gene SD Analysis': {
            shortName: 'genesd',
            viewModel: 'GeneSDVM'
        },
        'Gene MAD Analysis': {
            shortName: 'genemad',
            viewModel: 'GeneMADVM'
        },
        'voom': {
            shortName: 'voom',
            viewModel: 'VoomVM'
        },
        reverseLookup: {
            hcl: 'Hierarchical Clustering',
            limma: 'LIMMA Differential Expression Analysis',
            kmeans: 'K-means Clustering',
            one_sample_ttest: 't-Test Analysis',
            two_sample_ttest: 't-Test Analysis',
            fisher: 'Fisher test',
            anova: 'Anova Analysis',
            deseq: 'DESeq Differential Expression Analysis',
            nmf: 'Non-Negative Matrix Factorization',
            survival: 'Survival Analysis',
            topgo: 'TopGO Analysis',
            histogram: 'Histogram Analysis',
            genesd: 'Gene SD Analysis',
            genemad: 'Gene MAD Analysis',
            voom: 'voom',
            pca: 'pca'
        }
    });
    return module;
});
/*ag-grid@2.3.7#dist/ag-grid.min*/
define('ag-grid@2.3.7#dist/ag-grid.min', function (require, exports, module) {
    (function (global) {
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function t(e) {
                        this.type = e;
                    }
                    return t.prototype.toString = function () {
                        var e = 'ColumnChangeEvent {type: ' + this.type;
                        return this.column && (e += ', column: ' + this.column.colId), this.columnGroup && (e += ', columnGroup: ' + this.columnGroup.name), this.fromIndex && (e += ', fromIndex: ' + this.fromIndex), this.toIndex && (e += ', toIndex: ' + this.toIndex), this.pinnedColumnCount && (e += ', pinnedColumnCount: ' + this.pinnedColumnCount), 'boolean' == typeof this.finished && (e += ', finished: ' + this.finished), e += '}';
                    }, t.prototype.withColumn = function (e) {
                        return this.column = e, this;
                    }, t.prototype.withFinished = function (e) {
                        return this.finished = e, this;
                    }, t.prototype.withColumnGroup = function (e) {
                        return this.columnGroup = e, this;
                    }, t.prototype.withFromIndex = function (e) {
                        return this.fromIndex = e, this;
                    }, t.prototype.withPinnedColumnCount = function (e) {
                        return this.pinnedColumnCount = e, this;
                    }, t.prototype.withToIndex = function (e) {
                        return this.toIndex = e, this;
                    }, t.prototype.getFromIndex = function () {
                        return this.fromIndex;
                    }, t.prototype.getToIndex = function () {
                        return this.toIndex;
                    }, t.prototype.getPinnedColumnCount = function () {
                        return this.pinnedColumnCount;
                    }, t.prototype.getType = function () {
                        return this.type;
                    }, t.prototype.getColumn = function () {
                        return this.column;
                    }, t.prototype.getColumnGroup = function () {
                        return this.columnGroup;
                    }, t.prototype.isPivotChanged = function () {
                        return this.type === e.Events.EVENT_COLUMN_PIVOT_CHANGE || this.type === e.Events.EVENT_COLUMN_EVERYTHING_CHANGED;
                    }, t.prototype.isValueChanged = function () {
                        return this.type === e.Events.EVENT_COLUMN_VALUE_CHANGE || this.type === e.Events.EVENT_COLUMN_EVERYTHING_CHANGED;
                    }, t.prototype.isIndividualColumnResized = function () {
                        return this.type === e.Events.EVENT_COLUMN_RESIZED && void 0 !== this.column && null !== this.column;
                    }, t.prototype.isFinished = function () {
                        return this.finished;
                    }, t;
                }();
                e.ColumnChangeEvent = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm, i = /([^\s,]+)/g, o = function () {
                        function e() {
                        }
                        return e.iterateObject = function (e, t) {
                            for (var i = Object.keys(e), o = 0; o < i.length; o++) {
                                var n = i[o], r = e[n];
                                t(n, r);
                            }
                        }, e.cloneObject = function (e) {
                            for (var t = {}, i = Object.keys(e), o = 0; o < i.length; o++) {
                                var n = i[o], r = e[n];
                                t[n] = r;
                            }
                            return t;
                        }, e.map = function (e, t) {
                            for (var i = [], o = 0; o < e.length; o++) {
                                var n = e[o], r = t(n);
                                i.push(r);
                            }
                            return i;
                        }, e.forEach = function (e, t) {
                            if (e)
                                for (var i = 0; i < e.length; i++) {
                                    var o = e[i];
                                    t(o, i);
                                }
                        }, e.filter = function (e, t) {
                            var i = [];
                            return e.forEach(function (e) {
                                t(e) && i.push(e);
                            }), i;
                        }, e.assign = function (t, i) {
                            e.iterateObject(i, function (e, i) {
                                t[e] = i;
                            });
                        }, e.getFunctionParameters = function (e) {
                            var o = e.toString().replace(t, ''), n = o.slice(o.indexOf('(') + 1, o.indexOf(')')).match(i);
                            return null === n ? [] : n;
                        }, e.find = function (e, t, i) {
                            if (null === e || void 0 === e)
                                return null;
                            for (var o = 0; o < e.length; o++)
                                if (e[o][t] === i)
                                    return e[o];
                            return null;
                        }, e.toStrings = function (e) {
                            return this.map(e, function (e) {
                                return void 0 !== e && null !== e && e.toString ? e.toString() : null;
                            });
                        }, e.iterateArray = function (e, t) {
                            for (var i = 0; i < e.length; i++) {
                                var o = e[i];
                                t(o, i);
                            }
                        }, e.isNode = function (e) {
                            return 'object' == typeof Node ? e instanceof Node : e && 'object' == typeof e && 'number' == typeof e.nodeType && 'string' == typeof e.nodeName;
                        }, e.isElement = function (e) {
                            return 'object' == typeof HTMLElement ? e instanceof HTMLElement : e && 'object' == typeof e && null !== e && 1 === e.nodeType && 'string' == typeof e.nodeName;
                        }, e.isNodeOrElement = function (e) {
                            return this.isNode(e) || this.isElement(e);
                        }, e.addChangeListener = function (e, t) {
                            e.addEventListener('changed', t), e.addEventListener('paste', t), e.addEventListener('input', t), e.addEventListener('keydown', t), e.addEventListener('keyup', t);
                        }, e.makeNull = function (e) {
                            return null === e || void 0 === e || '' === e ? null : e;
                        }, e.removeAllChildren = function (e) {
                            if (e)
                                for (; e.hasChildNodes();)
                                    e.removeChild(e.lastChild);
                        }, e.removeElement = function (e, t) {
                            this.removeFromParent(e.querySelector(t));
                        }, e.removeFromParent = function (e) {
                            e && e.parentNode && e.parentNode.removeChild(e);
                        }, e.isVisible = function (e) {
                            return null !== e.offsetParent;
                        }, e.loadTemplate = function (e) {
                            var t = document.createElement('div');
                            return t.innerHTML = e, t.firstChild;
                        }, e.querySelectorAll_addCssClass = function (e, t, i) {
                            for (var o = e.querySelectorAll(t), n = 0; n < o.length; n++)
                                this.addCssClass(o[n], i);
                        }, e.querySelectorAll_removeCssClass = function (e, t, i) {
                            for (var o = e.querySelectorAll(t), n = 0; n < o.length; n++)
                                this.removeCssClass(o[n], i);
                        }, e.querySelectorAll_replaceCssClass = function (e, t, i, o) {
                            for (var n = e.querySelectorAll(t), r = 0; r < n.length; r++)
                                this.removeCssClass(n[r], i), this.addCssClass(n[r], o);
                        }, e.addOrRemoveCssClass = function (e, t, i) {
                            i ? this.addCssClass(e, t) : this.removeCssClass(e, t);
                        }, e.addCssClass = function (e, t) {
                            if (e.className && e.className.length > 0) {
                                var i = e.className.split(' ');
                                i.indexOf(t) < 0 && (i.push(t), e.className = i.join(' '));
                            } else
                                e.className = t;
                        }, e.offsetHeight = function (e) {
                            return e && e.clientHeight ? e.clientHeight : 0;
                        }, e.offsetWidth = function (e) {
                            return e && e.clientWidth ? e.clientWidth : 0;
                        }, e.removeCssClass = function (e, t) {
                            if (e.className && e.className.length > 0) {
                                var i = e.className.split(' '), o = i.indexOf(t);
                                o >= 0 && (i.splice(o, 1), e.className = i.join(' '));
                            }
                        }, e.removeFromArray = function (e, t) {
                            e.indexOf(t) >= 0 && e.splice(e.indexOf(t), 1);
                        }, e.defaultComparator = function (e, t) {
                            var i = null === e || void 0 === e, o = null === t || void 0 === t;
                            return i && o ? 0 : i ? -1 : o ? 1 : t > e ? -1 : e > t ? 1 : 0;
                        }, e.formatWidth = function (e) {
                            return 'number' == typeof e ? e + 'px' : e;
                        }, e.useRenderer = function (e, t, i) {
                            var o = t(i);
                            if ('string' == typeof o) {
                                var n = document.createElement('span');
                                n.innerHTML = o, e.appendChild(n);
                            } else
                                this.isNodeOrElement(o) && e.appendChild(o);
                        }, e.createIcon = function (e, t, i, o) {
                            var n, r = document.createElement('span');
                            if (i && i.colDef.icons && (n = i.colDef.icons[e]), !n && t.getIcons() && (n = t.getIcons()[e]), n) {
                                var s;
                                if ('function' == typeof n)
                                    s = n();
                                else {
                                    if ('string' != typeof n)
                                        throw 'icon from grid options needs to be a string or a function';
                                    s = n;
                                }
                                if ('string' == typeof s)
                                    r.innerHTML = s;
                                else {
                                    if (!this.isNodeOrElement(s))
                                        throw 'iconRenderer should return back a string or a dom object';
                                    r.appendChild(s);
                                }
                            } else
                                r.appendChild(o());
                            return r;
                        }, e.addStylesToElement = function (e, t) {
                            Object.keys(t).forEach(function (i) {
                                e.style[i] = t[i];
                            });
                        }, e.getScrollbarWidth = function () {
                            var e = document.createElement('div');
                            e.style.visibility = 'hidden', e.style.width = '100px', e.style.msOverflowStyle = 'scrollbar', document.body.appendChild(e);
                            var t = e.offsetWidth;
                            e.style.overflow = 'scroll';
                            var i = document.createElement('div');
                            i.style.width = '100%', e.appendChild(i);
                            var o = i.offsetWidth;
                            return e.parentNode.removeChild(e), t - o;
                        }, e.isKeyPressed = function (e, t) {
                            var i = e.which || e.keyCode;
                            return i === t;
                        }, e.setVisible = function (e, t) {
                            t ? e.style.display = 'inline' : e.style.display = 'none';
                        }, e.isBrowserIE = function () {
                            return this.isIE;
                        }, e.isBrowserSafari = function () {
                            return this.isSafari;
                        }, e.isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0, e.isIE = !!document.documentMode, e;
                    }();
                e.Utils = o;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                    }
                    return e.STEP_EVERYTHING = 0, e.STEP_FILTER = 1, e.STEP_SORT = 2, e.STEP_MAP = 3, e.ASC = 'asc', e.DESC = 'desc', e.ROW_BUFFER_SIZE = 20, e.MIN_COL_WIDTH = 10, e.SUM = 'sum', e.MIN = 'min', e.MAX = 'max', e.KEY_TAB = 9, e.KEY_ENTER = 13, e.KEY_BACKSPACE = 8, e.KEY_DELETE = 46, e.KEY_ESCAPE = 27, e.KEY_SPACE = 32, e.KEY_DOWN = 40, e.KEY_UP = 38, e.KEY_LEFT = 37, e.KEY_RIGHT = 39, e;
                }();
                e.Constants = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Constants, i = function () {
                        function e(t, i) {
                            this.colDef = t, this.actualWidth = i, this.visible = !t.hide, this.sort = t.sort, this.sortedAt = t.sortedAt, t.colId ? this.colId = t.colId : t.field ? this.colId = t.field : this.colId = '' + e.colIdSequence++;
                        }
                        return e.prototype.isGreaterThanMax = function (e) {
                            return this.colDef.maxWidth >= t.MIN_COL_WIDTH ? e > this.colDef.maxWidth : !1;
                        }, e.prototype.getMinimumWidth = function () {
                            return this.colDef.minWidth > t.MIN_COL_WIDTH ? this.colDef.minWidth : t.MIN_COL_WIDTH;
                        }, e.prototype.setMinimum = function () {
                            this.actualWidth = this.getMinimumWidth();
                        }, e.colIdSequence = 0, e;
                    }();
                e.Column = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e(e, t) {
                        this.allColumns = [], this.displayedColumns = [], this.expandable = !1, this.expanded = !1, this.pinned = e, this.name = t;
                    }
                    return e.prototype.getMinimumWidth = function () {
                        var e = 0;
                        return this.displayedColumns.forEach(function (t) {
                            e += t.getMinimumWidth();
                        }), e;
                    }, e.prototype.addColumn = function (e) {
                        this.allColumns.push(e);
                    }, e.prototype.calculateExpandable = function () {
                        for (var e = !1, t = !1, i = !1, o = 0, n = this.allColumns.length; n > o; o++) {
                            var r = this.allColumns[o];
                            'open' === r.colDef.headerGroupShow ? (e = !0, i = !0) : 'closed' === r.colDef.headerGroupShow ? (t = !0, i = !0) : (e = !0, t = !0);
                        }
                        this.expandable = e && t && i;
                    }, e.prototype.calculateActualWidth = function () {
                        var e = 0;
                        this.displayedColumns.forEach(function (t) {
                            e += t.actualWidth;
                        }), this.actualWidth = e;
                    }, e.prototype.calculateDisplayedColumns = function () {
                        if (this.displayedColumns = [], !this.expandable)
                            return void (this.displayedColumns = this.allColumns);
                        for (var e = 0, t = this.allColumns.length; t > e; e++) {
                            var i = this.allColumns[e];
                            switch (i.colDef.headerGroupShow) {
                            case 'open':
                                this.expanded && this.displayedColumns.push(i);
                                break;
                            case 'closed':
                                this.expanded || this.displayedColumns.push(i);
                                break;
                            default:
                                this.displayedColumns.push(i);
                            }
                        }
                    }, e.prototype.addToVisibleColumns = function (e) {
                        for (var t = 0; t < this.displayedColumns.length; t++) {
                            var i = this.displayedColumns[t];
                            e.push(i);
                        }
                    }, e;
                }();
                e.ColumnGroup = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                function t(e) {
                    return e === !0 || 'true' === e;
                }
                var i = 25, o = e.Constants, n = function () {
                        function e() {
                        }
                        return e.prototype.init = function (e, t) {
                            this.gridOptions = e, this.headerHeight = e.headerHeight, this.groupHeaders = e.groupHeaders, this.rowHeight = e.rowHeight, this.floatingTopRowData = e.floatingTopRowData, this.floatingBottomRowData = e.floatingBottomRowData, t.addGlobalListener(this.globalEventHandler.bind(this)), this.rowHeight || (this.rowHeight = i), this.checkForDeprecated();
                        }, e.prototype.isRowSelection = function () {
                            return 'single' === this.gridOptions.rowSelection || 'multiple' === this.gridOptions.rowSelection;
                        }, e.prototype.isRowDeselection = function () {
                            return t(this.gridOptions.rowDeselection);
                        }, e.prototype.isRowSelectionMulti = function () {
                            return 'multiple' === this.gridOptions.rowSelection;
                        }, e.prototype.getContext = function () {
                            return this.gridOptions.context;
                        }, e.prototype.isVirtualPaging = function () {
                            return t(this.gridOptions.virtualPaging);
                        }, e.prototype.isShowToolPanel = function () {
                            return t(this.gridOptions.showToolPanel);
                        }, e.prototype.isToolPanelSuppressPivot = function () {
                            return t(this.gridOptions.toolPanelSuppressPivot);
                        }, e.prototype.isToolPanelSuppressValues = function () {
                            return t(this.gridOptions.toolPanelSuppressValues);
                        }, e.prototype.isRowsAlreadyGrouped = function () {
                            return t(this.gridOptions.rowsAlreadyGrouped);
                        }, e.prototype.isGroupSelectsChildren = function () {
                            return t(this.gridOptions.groupSelectsChildren);
                        }, e.prototype.isGroupHidePivotColumns = function () {
                            return t(this.gridOptions.groupHidePivotColumns);
                        }, e.prototype.isGroupIncludeFooter = function () {
                            return t(this.gridOptions.groupIncludeFooter);
                        }, e.prototype.isGroupSuppressBlankHeader = function () {
                            return t(this.gridOptions.groupSuppressBlankHeader);
                        }, e.prototype.isSuppressRowClickSelection = function () {
                            return t(this.gridOptions.suppressRowClickSelection);
                        }, e.prototype.isSuppressCellSelection = function () {
                            return t(this.gridOptions.suppressCellSelection);
                        }, e.prototype.isSuppressMultiSort = function () {
                            return t(this.gridOptions.suppressMultiSort);
                        }, e.prototype.isGroupSuppressAutoColumn = function () {
                            return t(this.gridOptions.groupSuppressAutoColumn);
                        }, e.prototype.isForPrint = function () {
                            return t(this.gridOptions.forPrint);
                        }, e.prototype.isSuppressHorizontalScroll = function () {
                            return t(this.gridOptions.suppressHorizontalScroll);
                        }, e.prototype.isSuppressLoadingOverlay = function () {
                            return t(this.gridOptions.suppressLoadingOverlay);
                        }, e.prototype.isSuppressNoRowsOverlay = function () {
                            return t(this.gridOptions.suppressNoRowsOverlay);
                        }, e.prototype.isUnSortIcon = function () {
                            return t(this.gridOptions.unSortIcon);
                        }, e.prototype.isSuppressMenuHide = function () {
                            return t(this.gridOptions.suppressMenuHide);
                        }, e.prototype.getRowStyle = function () {
                            return this.gridOptions.rowStyle;
                        }, e.prototype.getRowClass = function () {
                            return this.gridOptions.rowClass;
                        }, e.prototype.getRowStyleFunc = function () {
                            return this.gridOptions.getRowStyle;
                        }, e.prototype.getRowClassFunc = function () {
                            return this.gridOptions.getRowClass;
                        }, e.prototype.getBusinessKeyForNodeFunc = function () {
                            return this.gridOptions.getBusinessKeyForNode;
                        }, e.prototype.getHeaderCellRenderer = function () {
                            return this.gridOptions.headerCellRenderer;
                        }, e.prototype.getApi = function () {
                            return this.gridOptions.api;
                        }, e.prototype.isEnableColResize = function () {
                            return t(this.gridOptions.enableColResize);
                        }, e.prototype.isSingleClickEdit = function () {
                            return t(this.gridOptions.singleClickEdit);
                        }, e.prototype.getGroupDefaultExpanded = function () {
                            return this.gridOptions.groupDefaultExpanded;
                        }, e.prototype.getGroupKeys = function () {
                            return this.gridOptions.groupKeys;
                        }, e.prototype.getGroupAggFunction = function () {
                            return this.gridOptions.groupAggFunction;
                        }, e.prototype.getGroupAggFields = function () {
                            return this.gridOptions.groupAggFields;
                        }, e.prototype.getRowData = function () {
                            return this.gridOptions.rowData;
                        }, e.prototype.isGroupUseEntireRow = function () {
                            return t(this.gridOptions.groupUseEntireRow);
                        }, e.prototype.getGroupColumnDef = function () {
                            return this.gridOptions.groupColumnDef;
                        }, e.prototype.isGroupSuppressRow = function () {
                            return t(this.gridOptions.groupSuppressRow);
                        }, e.prototype.isAngularCompileRows = function () {
                            return t(this.gridOptions.angularCompileRows);
                        }, e.prototype.isAngularCompileFilters = function () {
                            return t(this.gridOptions.angularCompileFilters);
                        }, e.prototype.isAngularCompileHeaders = function () {
                            return t(this.gridOptions.angularCompileHeaders);
                        }, e.prototype.isDebug = function () {
                            return t(this.gridOptions.debug);
                        }, e.prototype.getColumnDefs = function () {
                            return this.gridOptions.columnDefs;
                        }, e.prototype.getDatasource = function () {
                            return this.gridOptions.datasource;
                        }, e.prototype.isEnableSorting = function () {
                            return t(this.gridOptions.enableSorting) || t(this.gridOptions.enableServerSideSorting);
                        }, e.prototype.isEnableCellExpressions = function () {
                            return t(this.gridOptions.enableCellExpressions);
                        }, e.prototype.isEnableServerSideSorting = function () {
                            return t(this.gridOptions.enableServerSideSorting);
                        }, e.prototype.isEnableFilter = function () {
                            return t(this.gridOptions.enableFilter) || t(this.gridOptions.enableServerSideFilter);
                        }, e.prototype.isEnableServerSideFilter = function () {
                            return this.gridOptions.enableServerSideFilter;
                        }, e.prototype.isSuppressScrollLag = function () {
                            return t(this.gridOptions.suppressScrollLag);
                        }, e.prototype.getIcons = function () {
                            return this.gridOptions.icons;
                        }, e.prototype.getIsScrollLag = function () {
                            return this.gridOptions.isScrollLag;
                        }, e.prototype.getSortingOrder = function () {
                            return this.gridOptions.sortingOrder;
                        }, e.prototype.getSlaveGrids = function () {
                            return this.gridOptions.slaveGrids;
                        }, e.prototype.getGroupRowRenderer = function () {
                            return this.gridOptions.groupRowRenderer;
                        }, e.prototype.getRowHeight = function () {
                            return this.rowHeight;
                        }, e.prototype.getOverlayLoadingTemplate = function () {
                            return this.gridOptions.overlayLoadingTemplate;
                        }, e.prototype.getOverlayNoRowsTemplate = function () {
                            return this.gridOptions.overlayNoRowsTemplate;
                        }, e.prototype.getHeaderHeight = function () {
                            return 'number' == typeof this.headerHeight ? this.headerHeight : this.groupHeaders ? 50 : 25;
                        }, e.prototype.setHeaderHeight = function (e) {
                            this.headerHeight = e;
                        }, e.prototype.isGroupHeaders = function () {
                            return t(this.groupHeaders);
                        }, e.prototype.setGroupHeaders = function (e) {
                            this.groupHeaders = e;
                        }, e.prototype.getFloatingTopRowData = function () {
                            return this.floatingTopRowData;
                        }, e.prototype.setFloatingTopRowData = function (e) {
                            this.floatingTopRowData = e;
                        }, e.prototype.getFloatingBottomRowData = function () {
                            return this.floatingBottomRowData;
                        }, e.prototype.setFloatingBottomRowData = function (e) {
                            this.floatingBottomRowData = e;
                        }, e.prototype.isExternalFilterPresent = function () {
                            return 'function' == typeof this.gridOptions.isExternalFilterPresent ? this.gridOptions.isExternalFilterPresent() : !1;
                        }, e.prototype.doesExternalFilterPass = function (e) {
                            return 'function' == typeof this.gridOptions.doesExternalFilterPass ? this.gridOptions.doesExternalFilterPass(e) : !1;
                        }, e.prototype.getGroupRowInnerRenderer = function () {
                            return this.gridOptions.groupRowInnerRenderer;
                        }, e.prototype.getColWidth = function () {
                            return 'number' != typeof this.gridOptions.colWidth || this.gridOptions.colWidth < o.MIN_COL_WIDTH ? 200 : this.gridOptions.colWidth;
                        }, e.prototype.getRowBuffer = function () {
                            return 'number' == typeof this.gridOptions.rowBuffer ? (this.gridOptions.rowBuffer < 0 && console.warn('ag-Grid: rowBuffer should not be negative'), this.gridOptions.rowBuffer) : o.ROW_BUFFER_SIZE;
                        }, e.prototype.checkForDeprecated = function () {
                            var e = this.gridOptions;
                            e.suppressUnSort && console.warn('ag-grid: as of v1.12.4 suppressUnSort is not used. Please use sortOrder instead.'), e.suppressDescSort && console.warn('ag-grid: as of v1.12.4 suppressDescSort is not used. Please use sortOrder instead.');
                        }, e.prototype.getPinnedColCount = function () {
                            return this.isForPrint() ? 0 : this.gridOptions.pinnedColumnCount ? Number(this.gridOptions.pinnedColumnCount) : 0;
                        }, e.prototype.getLocaleTextFunc = function () {
                            if (this.gridOptions.localeTextFunc)
                                return this.gridOptions.localeTextFunc;
                            var e = this;
                            return function (t, i) {
                                var o = e.gridOptions.localeText;
                                return o && o[t] ? o[t] : i;
                            };
                        }, e.prototype.globalEventHandler = function (e, t) {
                            var i = this.getCallbackForEvent(e);
                            'function' == typeof this.gridOptions[i] && this.gridOptions[i](t);
                        }, e.prototype.getCallbackForEvent = function (e) {
                            return !e || e.length < 2 ? e : 'on' + e[0].toUpperCase() + e.substr(1);
                        }, e;
                    }();
                e.GridOptionsWrapper = n;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                    }
                    return e.prototype.init = function (e) {
                        this.logging = e.isDebug();
                    }, e.prototype.create = function (e) {
                        return new i(e, this.logging);
                    }, e;
                }();
                e.LoggerFactory = t;
                var i = function () {
                    function e(e, t) {
                        this.name = e, this.logging = t;
                    }
                    return e.prototype.log = function (e) {
                        this.logging && console.log('ag-Grid.' + this.name + ': ' + e);
                    }, e;
                }();
                e.Logger = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                    }
                    return e.EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged', e.EVENT_COLUMN_PIVOT_CHANGE = 'columnPivotChanged', e.EVENT_COLUMN_VALUE_CHANGE = 'columnValueChanged', e.EVENT_COLUMN_MOVED = 'columnMoved', e.EVENT_COLUMN_VISIBLE = 'columnVisible', e.EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened', e.EVENT_COLUMN_RESIZED = 'columnResized', e.EVENT_COLUMN_PINNED_COUNT_CHANGED = 'columnPinnedCountChanged', e.EVENT_MODEL_UPDATED = 'modelUpdated', e.EVENT_CELL_CLICKED = 'cellClicked', e.EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked', e.EVENT_CELL_CONTEXT_MENU = 'cellContextMenu', e.EVENT_CELL_VALUE_CHANGED = 'cellValueChanged', e.EVENT_CELL_FOCUSED = 'cellFocused', e.EVENT_ROW_SELECTED = 'rowSelected', e.EVENT_ROW_DESELECTED = 'rowDeselected', e.EVENT_SELECTION_CHANGED = 'selectionChanged', e.EVENT_BEFORE_FILTER_CHANGED = 'beforeFilterChanged', e.EVENT_AFTER_FILTER_CHANGED = 'afterFilterChanged', e.EVENT_FILTER_MODIFIED = 'filterModified', e.EVENT_BEFORE_SORT_CHANGED = 'beforeSortChanged', e.EVENT_AFTER_SORT_CHANGED = 'afterSortChanged', e.EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved', e.EVENT_ROW_CLICKED = 'rowClicked', e.EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked', e.EVENT_READY = 'ready', e;
                }();
                e.Events = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function e() {
                            this.allListeners = {}, this.globalListeners = [];
                        }
                        return e.prototype.init = function (e) {
                            this.logger = e.create('EventService');
                        }, e.prototype.getListenerList = function (e) {
                            var t = this.allListeners[e];
                            return t || (t = [], this.allListeners[e] = t), t;
                        }, e.prototype.addEventListener = function (e, t) {
                            var i = this.getListenerList(e);
                            i.indexOf(t) < 0 && i.push(t);
                        }, e.prototype.addGlobalListener = function (e) {
                            this.globalListeners.push(e);
                        }, e.prototype.removeEventListener = function (e, i) {
                            var o = this.getListenerList(e);
                            t.removeFromArray(o, i);
                        }, e.prototype.removeGlobalListener = function (e) {
                            t.removeFromArray(this.globalListeners, e);
                        }, e.prototype.dispatchEvent = function (e, t) {
                            t || (t = {});
                            var i = this.getListenerList(e);
                            i.forEach(function (e) {
                                e(t);
                            }), this.globalListeners.forEach(function (i) {
                                i(e, t);
                            });
                        }, e;
                    }();
                e.EventService = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function t() {
                        this.consuming = !1;
                    }
                    return t.prototype.init = function (t, i, o, n, r) {
                        this.gridOptionsWrapper = t, this.columnController = i, this.gridPanel = o, this.eventService = r, this.logger = n.create('MasterSlaveService'), r.addEventListener(e.Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_PINNED_COUNT_CHANGED, this.fireColumnEvent.bind(this));
                    }, t.prototype.fireEvent = function (e) {
                        if (!this.consuming) {
                            var t = this.gridOptionsWrapper.getSlaveGrids();
                            t && t.forEach(function (t) {
                                if (t.api) {
                                    var i = t.api.__getMasterSlaveService();
                                    e(i);
                                }
                            });
                        }
                    }, t.prototype.onEvent = function (e) {
                        this.consuming = !0, e(), this.consuming = !1;
                    }, t.prototype.fireColumnEvent = function (e) {
                        this.fireEvent(function (t) {
                            t.onColumnEvent(e);
                        });
                    }, t.prototype.fireHorizontalScrollEvent = function (e) {
                        this.fireEvent(function (t) {
                            t.onScrollEvent(e);
                        });
                    }, t.prototype.onScrollEvent = function (e) {
                        var t = this;
                        this.onEvent(function () {
                            t.gridPanel.setHorizontalScrollPosition(e);
                        });
                    }, t.prototype.onColumnEvent = function (t) {
                        var i = this;
                        this.onEvent(function () {
                            var o, n = t.getColumn();
                            if (n && (o = i.columnController.getColumn(n.colId)), !n || o) {
                                var r, s = t.getColumnGroup();
                                if (s && (r = i.columnController.getColumnGroup(s.name)), !s || r)
                                    switch (t.getType()) {
                                    case e.Events.EVENT_COLUMN_MOVED:
                                        i.logger.log('onColumnEvent-> processing ' + t + ' fromIndex = ' + t.getFromIndex() + ', toIndex = ' + t.getToIndex()), i.columnController.moveColumn(t.getFromIndex(), t.getToIndex());
                                        break;
                                    case e.Events.EVENT_COLUMN_VISIBLE:
                                        i.logger.log('onColumnEvent-> processing ' + t + ' visible = ' + n.visible), i.columnController.setColumnVisible(o, n.visible);
                                        break;
                                    case e.Events.EVENT_COLUMN_GROUP_OPENED:
                                        i.logger.log('onColumnEvent-> processing ' + t + ' expanded = ' + s.expanded), i.columnController.columnGroupOpened(r, s.expanded);
                                        break;
                                    case e.Events.EVENT_COLUMN_RESIZED:
                                        i.logger.log('onColumnEvent-> processing ' + t + ' actualWidth = ' + n.actualWidth), i.columnController.setColumnWidth(o, n.actualWidth, t.isFinished());
                                        break;
                                    case e.Events.EVENT_COLUMN_PINNED_COUNT_CHANGED:
                                        i.logger.log('onColumnEvent-> processing ' + t), i.columnController.setPinnedColumnCount(t.getPinnedColumnCount());
                                    }
                            }
                        });
                    }, t;
                }();
                e.MasterSlaveService = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = e.Constants, o = function () {
                        function e(e) {
                            this._columnController = e;
                        }
                        return e.prototype.sizeColumnsToFit = function (e) {
                            this._columnController.sizeColumnsToFit(e);
                        }, e.prototype.hideColumns = function (e, t) {
                            this._columnController.hideColumns(e, t);
                        }, e.prototype.columnGroupOpened = function (e, t) {
                            this._columnController.columnGroupOpened(e, t);
                        }, e.prototype.getColumnGroup = function (e) {
                            return this._columnController.getColumnGroup(e);
                        }, e.prototype.getDisplayNameForCol = function (e) {
                            return this._columnController.getDisplayNameForCol(e);
                        }, e.prototype.getColumn = function (e) {
                            return this._columnController.getColumn(e);
                        }, e.prototype.setState = function (e) {
                            return this._columnController.setState(e);
                        }, e.prototype.getState = function () {
                            return this._columnController.getState();
                        }, e.prototype.isPinning = function () {
                            return this._columnController.isPinning();
                        }, e.prototype.getVisibleColAfter = function (e) {
                            return this._columnController.getVisibleColAfter(e);
                        }, e.prototype.getVisibleColBefore = function (e) {
                            return this._columnController.getVisibleColBefore(e);
                        }, e.prototype.setColumnVisible = function (e, t) {
                            this._columnController.setColumnVisible(e, t);
                        }, e.prototype.getAllColumns = function () {
                            return this._columnController.getAllColumns();
                        }, e.prototype.getDisplayedColumns = function () {
                            return this._columnController.getDisplayedColumns();
                        }, e.prototype.getPivotedColumns = function () {
                            return this._columnController.getPivotedColumns();
                        }, e.prototype.getValueColumns = function () {
                            return this._columnController.getValueColumns();
                        }, e.prototype.moveColumn = function (e, t) {
                            this._columnController.moveColumn(e, t);
                        }, e.prototype.movePivotColumn = function (e, t) {
                            this._columnController.movePivotColumn(e, t);
                        }, e.prototype.setColumnAggFunction = function (e, t) {
                            this._columnController.setColumnAggFunction(e, t);
                        }, e.prototype.setColumnWidth = function (e, t, i) {
                            void 0 === i && (i = !0), this._columnController.setColumnWidth(e, t, i);
                        }, e.prototype.removeValueColumn = function (e) {
                            this._columnController.removeValueColumn(e);
                        }, e.prototype.addValueColumn = function (e) {
                            this._columnController.addValueColumn(e);
                        }, e.prototype.removePivotColumn = function (e) {
                            this._columnController.removePivotColumn(e);
                        }, e.prototype.setPinnedColumnCount = function (e) {
                            this._columnController.setPinnedColumnCount(e);
                        }, e.prototype.addPivotColumn = function (e) {
                            this._columnController.addPivotColumn(e);
                        }, e.prototype.getHeaderGroups = function () {
                            return this._columnController.getHeaderGroups();
                        }, e.prototype.hideColumn = function (e, t) {
                            this._columnController.hideColumns([e], t);
                        }, e;
                    }();
                e.ColumnApi = o;
                var n = function () {
                    function n() {
                        this.setupComplete = !1;
                    }
                    return n.prototype.init = function (e, t, i, o, n, r, s) {
                        this.gridOptionsWrapper = i, this.angularGrid = e, this.selectionRendererFactory = t, this.expressionService = o, this.valueService = n, this.masterSlaveController = r, this.eventService = s, this.pinnedColumnCount = i.getPinnedColCount(), this.pinnedColumnCount > 0 || (this.pinnedColumnCount = 0);
                    }, n.prototype.getColumnApi = function () {
                        return new o(this);
                    }, n.prototype.isSetupComplete = function () {
                        return this.setupComplete;
                    }, n.prototype.getHeaderGroups = function () {
                        return this.columnGroups;
                    }, n.prototype.getPinnedContainerWidth = function () {
                        return this.getTotalColWidth(!0);
                    }, n.prototype.addPivotColumn = function (t) {
                        if (this.allColumns.indexOf(t) < 0)
                            return void console.warn('not a valid column: ' + t);
                        if (this.pivotColumns.indexOf(t) >= 0)
                            return void console.warn('column is already a value column');
                        this.pivotColumns.push(t), this.updateModel();
                        var i = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_PIVOT_CHANGE);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_PIVOT_CHANGE, i);
                    }, n.prototype.setPinnedColumnCount = function (t) {
                        if ('number' != typeof t)
                            return void console.warn('ag-Grid: setPinnedColumnCount: count must be a number');
                        if (0 > t)
                            return void console.warn('ag-Grid: setPinnedColumnCount: count must be zero or greater');
                        this.pinnedColumnCount = t, this.updateModel();
                        var i = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_PINNED_COUNT_CHANGED).withPinnedColumnCount(t);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_PINNED_COUNT_CHANGED, i);
                    }, n.prototype.removePivotColumn = function (i) {
                        if (this.pivotColumns.indexOf(i) < 0)
                            return void console.warn('column not a pivot');
                        t.removeFromArray(this.pivotColumns, i), this.updateModel();
                        var o = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_PIVOT_CHANGE);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_PIVOT_CHANGE, o);
                    }, n.prototype.addValueColumn = function (t) {
                        if (this.allColumns.indexOf(t) < 0)
                            return void console.warn('not a valid column: ' + t);
                        if (this.valueColumns.indexOf(t) >= 0)
                            return void console.warn('column is already a value column');
                        t.aggFunc || (t.aggFunc = i.SUM), this.valueColumns.push(t);
                        var o = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_VALUE_CHANGE);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_VALUE_CHANGE, o);
                    }, n.prototype.removeValueColumn = function (i) {
                        if (this.valueColumns.indexOf(i) < 0)
                            return void console.warn('column not a value');
                        t.removeFromArray(this.valueColumns, i);
                        var o = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_VALUE_CHANGE);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_VALUE_CHANGE, o);
                    }, n.prototype.doesColumnExistInGrid = function (e) {
                        var t = this.allColumns.indexOf(e) >= 0, i = this.visibleColumns.indexOf(e) >= 0;
                        return t || i;
                    }, n.prototype.setColumnWidth = function (t, i, o) {
                        if (!this.doesColumnExistInGrid(t))
                            return void console.warn('column does not exist');
                        if (i < t.getMinimumWidth() && (i = t.getMinimumWidth()), t.isGreaterThanMax(i) && (i = t.colDef.maxWidth), o || t.actualWidth !== i) {
                            t.actualWidth = i, this.updateGroupWidthsAfterColumnResize(t);
                            var n = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_RESIZED).withColumn(t).withFinished(o);
                            this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_RESIZED, n);
                        }
                    }, n.prototype.updateGroupWidthsAfterColumnResize = function (e) {
                        this.columnGroups && this.columnGroups.forEach(function (t) {
                            t.displayedColumns.indexOf(e) >= 0 && t.calculateActualWidth();
                        });
                    }, n.prototype.setColumnAggFunction = function (t, i) {
                        t.aggFunc = i;
                        var o = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_VALUE_CHANGE);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_VALUE_CHANGE, o);
                    }, n.prototype.movePivotColumn = function (t, i) {
                        var o = this.pivotColumns[t];
                        this.pivotColumns.splice(t, 1), this.pivotColumns.splice(i, 0, o);
                        var n = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_PIVOT_CHANGE);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_PIVOT_CHANGE, n);
                    }, n.prototype.moveColumn = function (t, i) {
                        var o = this.allColumns[t];
                        this.allColumns.splice(t, 1), this.allColumns.splice(i, 0, o), this.updateModel();
                        var n = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_MOVED).withFromIndex(t).withToIndex(i);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_MOVED, n);
                    }, n.prototype.getBodyContainerWidth = function () {
                        return this.getTotalColWidth(!1);
                    }, n.prototype.getValueColumns = function () {
                        return this.valueColumns;
                    }, n.prototype.getPivotedColumns = function () {
                        return this.pivotColumns;
                    }, n.prototype.getDisplayedColumns = function () {
                        return this.displayedColumns;
                    }, n.prototype.getAllColumns = function () {
                        return this.allColumns;
                    }, n.prototype.setColumnVisible = function (t, i) {
                        t.visible = i, this.updateModel();
                        var o = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_VISIBLE).withColumn(t);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_VISIBLE, o);
                    }, n.prototype.getVisibleColBefore = function (e) {
                        var t = this.visibleColumns.indexOf(e);
                        return t > 0 ? this.visibleColumns[t - 1] : null;
                    }, n.prototype.getVisibleColAfter = function (e) {
                        var t = this.visibleColumns.indexOf(e);
                        return t < this.visibleColumns.length - 1 ? this.visibleColumns[t + 1] : null;
                    }, n.prototype.isPinning = function () {
                        return this.visibleColumns && this.visibleColumns.length > 0 && this.visibleColumns[0].pinned;
                    }, n.prototype.getState = function () {
                        if (!this.allColumns || this.allColumns.length < 0)
                            return [];
                        for (var e = [], t = 0; t < this.allColumns.length; t++) {
                            var i = this.allColumns[t], o = this.pivotColumns.indexOf(i), n = {
                                    colId: i.colId,
                                    hide: !i.visible,
                                    aggFunc: i.aggFunc ? i.aggFunc : null,
                                    width: i.actualWidth,
                                    pivotIndex: o >= 0 ? o : null
                                };
                            e.push(n);
                        }
                        return e;
                    }, n.prototype.setState = function (o) {
                        var n = this.allColumns;
                        this.allColumns = [], this.pivotColumns = [], this.valueColumns = [];
                        var r = this;
                        t.forEach(o, function (e) {
                            var o = t.find(n, 'colId', e.colId);
                            if (!o)
                                return void console.warn('ag-grid: column ' + e.colId + ' not found');
                            o.visible = e.hide ? !1 : !0, o.actualWidth = e.width >= i.MIN_COL_WIDTH ? e.width : o.actualWidth;
                            var s = [
                                i.MIN,
                                i.MAX,
                                i.SUM
                            ].indexOf(e.aggFunc) >= 0;
                            s ? (o.aggFunc = e.aggFunc, r.valueColumns.push(o)) : o.aggFunc = null, 'number' == typeof e.pivotIndex && e.pivotIndex >= 0 && r.pivotColumns.push(o), r.allColumns.push(o), n.splice(n.indexOf(o), 1);
                        }), t.forEach(n, function (e) {
                            e.visible = !1, e.aggFunc = null, r.allColumns.push(e);
                        }), this.pivotColumns.sort(function (e, t) {
                            return e.pivotIndex - t.pivotIndex;
                        }), this.updateModel();
                        var s = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_EVERYTHING_CHANGED);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_EVERYTHING_CHANGED, s);
                    }, n.prototype.getColumns = function (e) {
                        var t = this, i = [];
                        return e && e.forEach(function (e) {
                            var o = t.getColumn(e);
                            o && i.push(o);
                        }), i;
                    }, n.prototype.getColumn = function (e) {
                        if (!e)
                            return null;
                        for (var t = [
                                    this.allColumns,
                                    this.visibleColumns
                                ], i = 0; i < t.length; i++) {
                            var o = t[i];
                            if (o)
                                for (var n = 0; n < o.length; n++) {
                                    var r = o[n].colDef === e, s = o[n].colId === e;
                                    if (r || s)
                                        return o[n];
                                }
                        }
                    }, n.prototype.getDisplayNameForCol = function (e) {
                        var t = e.colDef, i = t.headerValueGetter;
                        if (!i)
                            return t.displayName ? (console.warn('ag-grid: Found displayName ' + t.displayName + ', please use headerName instead, displayName is deprecated.'), t.displayName) : t.headerName;
                        var o = {
                            colDef: t,
                            api: this.gridOptionsWrapper.getApi(),
                            context: this.gridOptionsWrapper.getContext()
                        };
                        return 'function' == typeof i ? i(o) : 'string' == typeof i ? this.expressionService.evaluate(i, o) : void console.warn('ag-grid: headerValueGetter must be a function or a string');
                    }, n.prototype.getColumnGroup = function (e) {
                        if (!e)
                            return null;
                        if (this.columnGroups)
                            for (var t = 0; t < this.columnGroups.length; t++)
                                if (this.columnGroups[t].name === e)
                                    return this.columnGroups[t];
                    }, n.prototype.onColumnsChanged = function () {
                        var t = this.gridOptionsWrapper.getColumnDefs();
                        this.checkForDeprecatedItems(t), this.createColumns(t), this.createPivotColumns(), this.createValueColumns(), this.updateModel();
                        var i = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_EVERYTHING_CHANGED);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_EVERYTHING_CHANGED, i), this.setupComplete = !0;
                    }, n.prototype.checkForDeprecatedItems = function (e) {
                        if (e)
                            for (var t = 0; t < e.length; t++) {
                                var i = e[t];
                                void 0 !== i.group && (console.warn('ag-grid: ' + i.field + ' colDef.group is deprecated, please use colDef.headerGroup'), i.headerGroup = i.group), void 0 !== i.groupShow && (console.warn('ag-grid: ' + i.field + ' colDef.groupShow is deprecated, please use colDef.headerGroupShow'), i.headerGroupShow = i.groupShow);
                            }
                    }, n.prototype.columnGroupOpened = function (t, i) {
                        t.expanded = i, this.updateGroups(), this.updateDisplayedColumns();
                        var o = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_GROUP_OPENED).withColumnGroup(t);
                        this.eventService.dispatchEvent(e.Events.EVENT_COLUMN_GROUP_OPENED, o);
                    }, n.prototype.hideColumns = function (t, i) {
                        var o = this, n = [];
                        this.allColumns.forEach(function (e) {
                            var o = e.colId, r = t.indexOf(o) >= 0, s = !i;
                            r && e.visible !== s && (e.visible = s, n.push(e));
                        }), n.length > 0 && (this.updateModel(), n.forEach(function (t) {
                            var i = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_VISIBLE).withColumn(t);
                            o.eventService.dispatchEvent(e.Events.EVENT_COLUMN_VISIBLE, i);
                        }));
                    }, n.prototype.updateModel = function () {
                        this.updateVisibleColumns(), this.updatePinnedColumns(), this.buildGroups(), this.updateGroups(), this.updateDisplayedColumns();
                    }, n.prototype.updateDisplayedColumns = function () {
                        if (this.gridOptionsWrapper.isGroupHeaders()) {
                            this.displayedColumns = [];
                            for (var e = 0; e < this.columnGroups.length; e++) {
                                var t = this.columnGroups[e];
                                t.addToVisibleColumns(this.displayedColumns);
                            }
                        } else
                            this.displayedColumns = this.visibleColumns;
                    }, n.prototype.sizeColumnsToFit = function (i) {
                        function o(e) {
                            t.removeFromArray(l, e), s.push(e);
                        }
                        function n(e) {
                            for (var t = 0, i = 0; i < e.length; i++)
                                t += e[i].actualWidth;
                            return t;
                        }
                        var r = this;
                        if (!(0 >= i || 0 === this.displayedColumns.length)) {
                            for (var s = t.filter(this.displayedColumns, function (e) {
                                        return e.colDef.suppressSizeToFit === !0;
                                    }), l = t.filter(this.displayedColumns, function (e) {
                                        return e.colDef.suppressSizeToFit !== !0;
                                    }), a = l.slice(0), d = !1; !d;) {
                                d = !0;
                                var u = i - n(s);
                                if (0 >= u)
                                    l.forEach(function (e) {
                                        e.setMinimum(), r.updateGroupWidthsAfterColumnResize(e);
                                    });
                                else
                                    for (var p = u / n(l), h = u, c = l.length - 1; c >= 0; c--) {
                                        var g = l[c], f = Math.round(g.actualWidth * p);
                                        if (f < g.getMinimumWidth())
                                            g.setMinimum(), o(g), d = !1;
                                        else if (g.isGreaterThanMax(f))
                                            g.actualWidth = g.colDef.maxWidth, o(g), d = !1;
                                        else {
                                            var v = 0 === c;
                                            v ? g.actualWidth = h : (h -= f, g.actualWidth = f);
                                        }
                                        this.updateGroupWidthsAfterColumnResize(g);
                                    }
                            }
                            a.forEach(function (t) {
                                var i = new e.ColumnChangeEvent(e.Events.EVENT_COLUMN_RESIZED).withColumn(t);
                                r.eventService.dispatchEvent(e.Events.EVENT_COLUMN_RESIZED, i);
                            });
                        }
                    }, n.prototype.buildGroups = function () {
                        if (!this.gridOptionsWrapper.isGroupHeaders())
                            return void (this.columnGroups = null);
                        var t = null;
                        this.columnGroups = [];
                        var i = this, o = !0;
                        this.visibleColumns.forEach(function (n) {
                            var r = o && !n.pinned;
                            n.pinned || (o = !1);
                            var s = t && n.colDef.headerGroup !== t.name, l = t && !t.name, a = null === t, d = a || r || s || l;
                            if (d) {
                                var u = n.pinned;
                                t = new e.ColumnGroup(u, n.colDef.headerGroup), i.columnGroups.push(t);
                            }
                            t.addColumn(n);
                        });
                    }, n.prototype.updateGroups = function () {
                        if (this.gridOptionsWrapper.isGroupHeaders())
                            for (var e = 0; e < this.columnGroups.length; e++) {
                                var t = this.columnGroups[e];
                                t.calculateExpandable(), t.calculateDisplayedColumns(), t.calculateActualWidth();
                            }
                    }, n.prototype.updateVisibleColumns = function () {
                        this.visibleColumns = [];
                        var t = this.pivotColumns.length > 0 && !this.gridOptionsWrapper.isGroupSuppressAutoColumn() && !this.gridOptionsWrapper.isGroupUseEntireRow() && !this.gridOptionsWrapper.isGroupSuppressRow(), i = this.gridOptionsWrapper.getLocaleTextFunc();
                        if (t) {
                            var o = this.gridOptionsWrapper.getGroupColumnDef();
                            o || (o = {
                                headerName: i('group', 'Group'),
                                cellRenderer: { renderer: 'group' }
                            });
                            var n = this.calculateColInitialWidth(o), r = new e.Column(o, n);
                            this.visibleColumns.push(r);
                        }
                        for (var s = 0; s < this.allColumns.length; s++) {
                            var l = this.allColumns[s], a = this.pivotColumns.indexOf(l) >= 0 && this.gridOptionsWrapper.isGroupHidePivotColumns();
                            l.visible && !a && (l.index = this.visibleColumns.length, this.visibleColumns.push(this.allColumns[s]));
                        }
                    }, n.prototype.updatePinnedColumns = function () {
                        for (var e = 0; e < this.visibleColumns.length; e++) {
                            var t = e < this.pinnedColumnCount;
                            this.visibleColumns[e].pinned = t;
                        }
                    }, n.prototype.createColumns = function (t) {
                        if (this.allColumns = [], t)
                            for (var i = 0; i < t.length; i++) {
                                var o = t[i], n = this.calculateColInitialWidth(o), r = new e.Column(o, n);
                                this.allColumns.push(r);
                            }
                    }, n.prototype.createPivotColumns = function () {
                        this.pivotColumns = [];
                        var e = this.gridOptionsWrapper.getGroupKeys();
                        if (e && !(e.length <= 0))
                            for (var t = 0; t < e.length; t++) {
                                var i = e[t], o = this.getColumn(i);
                                o || (o = this.createDummyColumn(i)), this.pivotColumns.push(o);
                            }
                    }, n.prototype.createValueColumns = function () {
                        this.valueColumns = [];
                        for (var e = 0; e < this.allColumns.length; e++) {
                            var t = this.allColumns[e];
                            t.colDef.aggFunc && (t.aggFunc = t.colDef.aggFunc, this.valueColumns.push(t));
                        }
                    }, n.prototype.createDummyColumn = function (t) {
                        var i = {
                                field: t,
                                headerName: t,
                                hide: !1
                            }, o = this.gridOptionsWrapper.getColWidth(), n = new e.Column(i, o);
                        return n;
                    }, n.prototype.calculateColInitialWidth = function (e) {
                        return e.width ? e.width < i.MIN_COL_WIDTH ? i.MIN_COL_WIDTH : e.width : this.gridOptionsWrapper.getColWidth();
                    }, n.prototype.getTotalColWidth = function (e) {
                        var t = 0, i = 'boolean' != typeof e;
                        return this.displayedColumns.forEach(function (o) {
                            var n = i || o.pinned === e;
                            n && (t += o.actualWidth);
                        }), t;
                    }, n;
                }();
                e.ColumnController = n;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = '\r\n', i = function () {
                        function e(e, t, i, o) {
                            this.rowController = e, this.columnController = t, this.grid = i, this.valueService = o;
                        }
                        return e.prototype.exportDataAsCsv = function (e) {
                            var t = this.getDataAsCsv(e), i = e && e.fileName && 0 !== e.fileName.length, o = i ? e.fileName : 'export.csv', n = new Blob([t], { type: 'text/csv;charset=utf-8;' });
                            if (window.navigator.msSaveOrOpenBlob)
                                window.navigator.msSaveOrOpenBlob(n, o);
                            else {
                                var r = document.createElement('a');
                                r.href = window.URL.createObjectURL(n), r.download = o, document.body.appendChild(r), r.click(), document.body.removeChild(r);
                            }
                        }, e.prototype.getDataAsCsv = function (e) {
                            var i = this;
                            if (!this.grid.isUsingInMemoryModel())
                                return console.log('ag-Grid: getDataAsCsv not available when doing virtual pagination'), '';
                            var o = '', n = e && e.skipGroups, r = e && e.skipHeader, s = e && e.skipFooters, l = e && e.customHeader, a = e && e.customFooter, d = this.columnController.getDisplayedColumns();
                            return d && 0 !== d.length ? (l && (o += e.customHeader), r || (d.forEach(function (e, t) {
                                var n = i.columnController.getDisplayNameForCol(e);
                                (null === n || void 0 === n) && (n = ''), 0 != t && (o += ','), o += '"' + i.escape(n) + '"';
                            }), o += t), this.rowController.forEachNodeAfterFilterAndSort(function (e) {
                                n && e.group || s && e.footer || (d.forEach(function (t, n) {
                                    var r;
                                    r = e.group && 0 === n ? i.createValueForGroupNode(e) : i.valueService.getValue(t.colDef, e.data, e), (null === r || void 0 === r) && (r = ''), 0 != n && (o += ','), o += '"' + i.escape(r) + '"';
                                }), o += t);
                            }), a && (o += e.customFooter), o) : '';
                        }, e.prototype.createValueForGroupNode = function (e) {
                            for (var t = [e.key]; e.parent;)
                                e = e.parent, t.push(e.key);
                            return t.reverse().join(' -> ');
                        }, e.prototype.escape = function (e) {
                            if (null === e || void 0 === e)
                                return '';
                            var t;
                            return 'string' == typeof e ? t = e : 'function' == typeof e.toString ? t = e.toString() : (console.warn('known value type during csv conversio'), t = ''), t.replace(/"/g, '""');
                        }, e;
                    }();
                e.CsvCreator = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                        this.expressionToFunctionCache = {};
                    }
                    return e.prototype.init = function (e) {
                        this.logger = e.create('ExpressionService');
                    }, e.prototype.evaluate = function (e, t) {
                        try {
                            var i = this.createExpressionFunction(e), o = i(t.value, t.context, t.node, t.data, t.colDef, t.rowIndex, t.api, t.getValue);
                            return o;
                        } catch (n) {
                            return this.logger.log('Processing of the expression failed'), this.logger.log('Expression = ' + e), this.logger.log('Exception = ' + n), null;
                        }
                    }, e.prototype.createExpressionFunction = function (e) {
                        if (this.expressionToFunctionCache[e])
                            return this.expressionToFunctionCache[e];
                        var t = this.createFunctionBody(e), i = new Function('x, ctx, node, data, colDef, rowIndex, api, getValue', t);
                        return this.expressionToFunctionCache[e] = i, i;
                    }, e.prototype.createFunctionBody = function (e) {
                        return e.indexOf('return') >= 0 ? e : 'return ' + e + ';';
                    }, e;
                }();
                e.ExpressionService = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = '<div><div><select class="ag-filter-select" id="filterType"><option value="1">[CONTAINS]</option><option value="2">[EQUALS]</option><option value="3">[STARTS WITH]</option><option value="4">[ENDS WITH]</option></select></div><div><input class="ag-filter-filter" id="filterText" type="text" placeholder="[FILTER...]"/></div><div class="ag-filter-apply-panel" id="applyPanel"><button type="button" id="applyButton">[APPLY FILTER]</button></div></div>', o = 1, n = 2, r = 3, s = 4, l = function () {
                        function e() {
                        }
                        return e.prototype.init = function (e) {
                            this.filterParams = e.filterParams, this.applyActive = this.filterParams && 1 == this.filterParams.apply, this.filterChangedCallback = e.filterChangedCallback, this.filterModifiedCallback = e.filterModifiedCallback, this.localeTextFunc = e.localeTextFunc, this.valueGetter = e.valueGetter, this.createGui(), this.filterText = null, this.filterType = o, this.createApi();
                        }, e.prototype.onNewRowsLoaded = function () {
                            var e = this.filterParams && 'keep' === this.filterParams.newRowsAction;
                            e || (this.api.setType(o), this.api.setFilter(null));
                        }, e.prototype.afterGuiAttached = function () {
                            this.eFilterTextField.focus();
                        }, e.prototype.doesFilterPass = function (e) {
                            if (!this.filterText)
                                return !0;
                            var t = this.valueGetter(e);
                            if (!t)
                                return !1;
                            var i = t.toString().toLowerCase();
                            switch (this.filterType) {
                            case o:
                                return i.indexOf(this.filterText) >= 0;
                            case n:
                                return i === this.filterText;
                            case r:
                                return 0 === i.indexOf(this.filterText);
                            case s:
                                var l = i.indexOf(this.filterText);
                                return l >= 0 && l === i.length - this.filterText.length;
                            default:
                                return console.warn('invalid filter type ' + this.filterType), !1;
                            }
                        }, e.prototype.getGui = function () {
                            return this.eGui;
                        }, e.prototype.isFilterActive = function () {
                            return null !== this.filterText;
                        }, e.prototype.createTemplate = function () {
                            return i.replace('[FILTER...]', this.localeTextFunc('filterOoo', 'Filter...')).replace('[EQUALS]', this.localeTextFunc('equals', 'Equals')).replace('[CONTAINS]', this.localeTextFunc('contains', 'Contains')).replace('[STARTS WITH]', this.localeTextFunc('startsWith', 'Starts with')).replace('[ENDS WITH]', this.localeTextFunc('endsWith', 'Ends with')).replace('[APPLY FILTER]', this.localeTextFunc('applyFilter', 'Apply Filter'));
                        }, e.prototype.createGui = function () {
                            this.eGui = t.loadTemplate(this.createTemplate()), this.eFilterTextField = this.eGui.querySelector('#filterText'), this.eTypeSelect = this.eGui.querySelector('#filterType'), t.addChangeListener(this.eFilterTextField, this.onFilterChanged.bind(this)), this.eTypeSelect.addEventListener('change', this.onTypeChanged.bind(this)), this.setupApply();
                        }, e.prototype.setupApply = function () {
                            var e = this;
                            this.applyActive ? (this.eApplyButton = this.eGui.querySelector('#applyButton'), this.eApplyButton.addEventListener('click', function () {
                                e.filterChangedCallback();
                            })) : t.removeElement(this.eGui, '#applyPanel');
                        }, e.prototype.onTypeChanged = function () {
                            this.filterType = parseInt(this.eTypeSelect.value), this.filterChanged();
                        }, e.prototype.onFilterChanged = function () {
                            var e = t.makeNull(this.eFilterTextField.value);
                            e && '' === e.trim() && (e = null);
                            var i;
                            i = null !== e && void 0 !== e ? e.toLowerCase() : null, this.filterText !== i && (this.filterText = i, this.filterChanged());
                        }, e.prototype.filterChanged = function () {
                            this.filterModifiedCallback(), this.applyActive || this.filterChangedCallback();
                        }, e.prototype.createApi = function () {
                            var e = this;
                            this.api = {
                                EQUALS: n,
                                CONTAINS: o,
                                STARTS_WITH: r,
                                ENDS_WITH: s,
                                setType: function (t) {
                                    e.filterType = t, e.eTypeSelect.value = t;
                                },
                                setFilter: function (i) {
                                    i = t.makeNull(i), i ? (e.filterText = i.toLowerCase(), e.eFilterTextField.value = i) : (e.filterText = null, e.eFilterTextField.value = null);
                                },
                                getType: function () {
                                    return e.filterType;
                                },
                                getFilter: function () {
                                    return e.filterText;
                                },
                                getModel: function () {
                                    return e.isFilterActive() ? {
                                        type: e.filterType,
                                        filter: e.filterText
                                    } : null;
                                },
                                setModel: function (e) {
                                    e ? (this.setType(e.type), this.setFilter(e.filter)) : this.setFilter(null);
                                }
                            };
                        }, e.prototype.getApi = function () {
                            return this.api;
                        }, e;
                    }();
                e.TextFilter = l;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = '<div><div><select class="ag-filter-select" id="filterType"><option value="1">[EQUALS]</option><option value="2">[LESS THAN]</option><option value="3">[GREATER THAN]</option></select></div><div><input class="ag-filter-filter" id="filterText" type="text" placeholder="[FILTER...]"/></div><div class="ag-filter-apply-panel" id="applyPanel"><button type="button" id="applyButton">[APPLY FILTER]</button></div></div>', o = 1, n = 2, r = 3, s = function () {
                        function e() {
                        }
                        return e.prototype.init = function (e) {
                            this.filterParams = e.filterParams, this.applyActive = this.filterParams && 1 == this.filterParams.apply, this.filterChangedCallback = e.filterChangedCallback, this.filterModifiedCallback = e.filterModifiedCallback, this.localeTextFunc = e.localeTextFunc, this.valueGetter = e.valueGetter, this.createGui(), this.filterNumber = null, this.filterType = o, this.createApi();
                        }, e.prototype.onNewRowsLoaded = function () {
                            var e = this.filterParams && 'keep' === this.filterParams.newRowsAction;
                            e || (this.api.setType(o), this.api.setFilter(null));
                        }, e.prototype.afterGuiAttached = function () {
                            this.eFilterTextField.focus();
                        }, e.prototype.doesFilterPass = function (e) {
                            if (null === this.filterNumber)
                                return !0;
                            var t = this.valueGetter(e);
                            if (!t && 0 !== t)
                                return !1;
                            var i;
                            switch (i = 'number' == typeof t ? t : parseFloat(t), this.filterType) {
                            case o:
                                return i === this.filterNumber;
                            case n:
                                return i < this.filterNumber;
                            case r:
                                return i > this.filterNumber;
                            default:
                                return console.warn('invalid filter type ' + this.filterType), !1;
                            }
                        }, e.prototype.getGui = function () {
                            return this.eGui;
                        }, e.prototype.isFilterActive = function () {
                            return null !== this.filterNumber;
                        }, e.prototype.createTemplate = function () {
                            return i.replace('[FILTER...]', this.localeTextFunc('filterOoo', 'Filter...')).replace('[EQUALS]', this.localeTextFunc('equals', 'Equals')).replace('[LESS THAN]', this.localeTextFunc('lessThan', 'Less than')).replace('[GREATER THAN]', this.localeTextFunc('greaterThan', 'Greater than')).replace('[APPLY FILTER]', this.localeTextFunc('applyFilter', 'Apply Filter'));
                        }, e.prototype.createGui = function () {
                            this.eGui = t.loadTemplate(this.createTemplate()), this.eFilterTextField = this.eGui.querySelector('#filterText'), this.eTypeSelect = this.eGui.querySelector('#filterType'), t.addChangeListener(this.eFilterTextField, this.onFilterChanged.bind(this)), this.eTypeSelect.addEventListener('change', this.onTypeChanged.bind(this)), this.setupApply();
                        }, e.prototype.setupApply = function () {
                            var e = this;
                            this.applyActive ? (this.eApplyButton = this.eGui.querySelector('#applyButton'), this.eApplyButton.addEventListener('click', function () {
                                e.filterChangedCallback();
                            })) : t.removeElement(this.eGui, '#applyPanel');
                        }, e.prototype.onTypeChanged = function () {
                            this.filterType = parseInt(this.eTypeSelect.value), this.filterChanged();
                        }, e.prototype.filterChanged = function () {
                            this.filterModifiedCallback(), this.applyActive || this.filterChangedCallback();
                        }, e.prototype.onFilterChanged = function () {
                            var e = t.makeNull(this.eFilterTextField.value);
                            e && '' === e.trim() && (e = null);
                            var i;
                            i = null !== e && void 0 !== e ? parseFloat(e) : null, this.filterNumber !== i && (this.filterNumber = i, this.filterChanged());
                        }, e.prototype.createApi = function () {
                            var e = this;
                            this.api = {
                                EQUALS: o,
                                LESS_THAN: n,
                                GREATER_THAN: r,
                                setType: function (t) {
                                    e.filterType = t, e.eTypeSelect.value = t;
                                },
                                setFilter: function (i) {
                                    i = t.makeNull(i), null !== i && 'number' != typeof i && (i = parseFloat(i)), e.filterNumber = i, e.eFilterTextField.value = i;
                                },
                                getType: function () {
                                    return e.filterType;
                                },
                                getFilter: function () {
                                    return e.filterNumber;
                                },
                                getModel: function () {
                                    return e.isFilterActive() ? {
                                        type: e.filterType,
                                        filter: e.filterNumber
                                    } : null;
                                },
                                setModel: function (e) {
                                    e ? (this.setType(e.type), this.setFilter(e.filter)) : this.setFilter(null);
                                }
                            };
                        }, e.prototype.getApi = function () {
                            return this.api;
                        }, e;
                    }();
                e.NumberFilter = s;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function e(e, t, i, o) {
                            this.colDef = e, this.rowModel = t, this.valueGetter = i, this.doesRowPassOtherFilters = o, this.filterParams = this.colDef.filterParams, this.usingProvidedSet = this.filterParams && this.filterParams.values, this.showingAvailableOnly = this.filterParams && !this.filterParams.suppressRemoveEntries, this.createAllUniqueValues(), this.createAvailableUniqueValues(), this.displayedValues = this.availableUniqueValues, this.miniFilter = null, this.selectedValuesMap = {}, this.selectEverything();
                        }
                        return e.prototype.refreshAfterNewRowsLoaded = function (e, t) {
                            this.createAllUniqueValues(), this.createAvailableUniqueValues();
                            var i = Object.keys(this.selectedValuesMap);
                            this.selectedValuesMap = {}, this.processMiniFilter(), e ? this.setModel(i, t) : this.selectEverything();
                        }, e.prototype.refreshAfterAnyFilterChanged = function () {
                            this.showingAvailableOnly && (this.createAvailableUniqueValues(), this.processMiniFilter());
                        }, e.prototype.createAllUniqueValues = function () {
                            this.usingProvidedSet ? this.allUniqueValues = t.toStrings(this.filterParams.values) : this.allUniqueValues = t.toStrings(this.getUniqueValues(!1)), this.sortValues(this.allUniqueValues);
                        }, e.prototype.createAvailableUniqueValues = function () {
                            var e = !this.showingAvailableOnly || this.usingProvidedSet;
                            return e ? void (this.availableUniqueValues = this.allUniqueValues) : (this.availableUniqueValues = t.toStrings(this.getUniqueValues(!0)), void this.sortValues(this.availableUniqueValues));
                        }, e.prototype.sortValues = function (e) {
                            this.filterParams && this.filterParams.comparator ? e.sort(this.filterParams.comparator) : this.colDef.comparator ? e.sort(this.colDef.comparator) : e.sort(t.defaultComparator);
                        }, e.prototype.getUniqueValues = function (e) {
                            function t(e) {
                                o.hasOwnProperty(e) || (n.push(e), o[e] = 1);
                            }
                            var i = this, o = {}, n = [];
                            return this.rowModel.forEachNode(function (o) {
                                if (!o.group) {
                                    var n = i.valueGetter(o);
                                    if (('' === n || void 0 === n) && (n = null), e && !i.doesRowPassOtherFilters(o))
                                        return;
                                    if (null != n && Array.isArray(n))
                                        for (var r = 0; r < n.length; r++)
                                            t(n[r]);
                                    else
                                        t(n);
                                }
                            }), n;
                        }, e.prototype.setMiniFilter = function (e) {
                            return e = t.makeNull(e), this.miniFilter === e ? !1 : (this.miniFilter = e, this.processMiniFilter(), !0);
                        }, e.prototype.getMiniFilter = function () {
                            return this.miniFilter;
                        }, e.prototype.processMiniFilter = function () {
                            if (null === this.miniFilter)
                                return void (this.displayedValues = this.availableUniqueValues);
                            this.displayedValues = [];
                            for (var e = this.miniFilter.toUpperCase(), t = 0, i = this.availableUniqueValues.length; i > t; t++) {
                                var o = this.availableUniqueValues[t];
                                null !== o && o.toString().toUpperCase().indexOf(e) >= 0 && this.displayedValues.push(o);
                            }
                        }, e.prototype.getDisplayedValueCount = function () {
                            return this.displayedValues.length;
                        }, e.prototype.getDisplayedValue = function (e) {
                            return this.displayedValues[e];
                        }, e.prototype.selectEverything = function () {
                            for (var e = this.allUniqueValues.length, t = 0; e > t; t++) {
                                var i = this.allUniqueValues[t];
                                this.selectedValuesMap[i] = null;
                            }
                            this.selectedValuesCount = e;
                        }, e.prototype.isFilterActive = function () {
                            return this.allUniqueValues.length !== this.selectedValuesCount;
                        }, e.prototype.selectNothing = function () {
                            this.selectedValuesMap = {}, this.selectedValuesCount = 0;
                        }, e.prototype.getUniqueValueCount = function () {
                            return this.allUniqueValues.length;
                        }, e.prototype.getUniqueValue = function (e) {
                            return this.allUniqueValues[e];
                        }, e.prototype.unselectValue = function (e) {
                            void 0 !== this.selectedValuesMap[e] && (delete this.selectedValuesMap[e], this.selectedValuesCount--);
                        }, e.prototype.selectValue = function (e) {
                            void 0 === this.selectedValuesMap[e] && (this.selectedValuesMap[e] = null, this.selectedValuesCount++);
                        }, e.prototype.isValueSelected = function (e) {
                            return void 0 !== this.selectedValuesMap[e];
                        }, e.prototype.isEverythingSelected = function () {
                            return this.allUniqueValues.length === this.selectedValuesCount;
                        }, e.prototype.isNothingSelected = function () {
                            return 0 === this.allUniqueValues.length;
                        }, e.prototype.getModel = function () {
                            if (!this.isFilterActive())
                                return null;
                            var e = [];
                            return t.iterateObject(this.selectedValuesMap, function (t) {
                                e.push(t);
                            }), e;
                        }, e.prototype.setModel = function (e, t) {
                            if (e && !t) {
                                this.selectNothing();
                                for (var i = 0; i < e.length; i++) {
                                    var o = e[i];
                                    this.allUniqueValues.indexOf(o) >= 0 ? this.selectValue(e[i]) : console.warn('Value ' + o + ' is not a valid value for filter');
                                }
                            } else
                                this.selectEverything();
                        }, e;
                    }();
                e.SetFilterModel = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = '<div><div class="ag-filter-header-container"><input class="ag-filter-filter" type="text" placeholder="[SEARCH...]"/></div><div class="ag-filter-header-container"><label><input id="selectAll" type="checkbox" class="ag-filter-checkbox"/>([SELECT ALL])</label></div><div class="ag-filter-list-viewport"><div class="ag-filter-list-container"><div id="itemForRepeat" class="ag-filter-item"><label><input type="checkbox" class="ag-filter-checkbox" filter-checkbox="true"/><span class="ag-filter-value"></span></label></div></div></div><div class="ag-filter-apply-panel" id="applyPanel"><button type="button" id="applyButton">[APPLY FILTER]</button></div></div>', o = 20, n = function () {
                        function n() {
                        }
                        return n.prototype.init = function (t) {
                            this.filterParams = t.filterParams, this.rowHeight = this.filterParams && this.filterParams.cellHeight ? this.filterParams.cellHeight : o, this.applyActive = this.filterParams && 1 == this.filterParams.apply, this.model = new e.SetFilterModel(t.colDef, t.rowModel, t.valueGetter, t.doesRowPassOtherFilter), this.filterChangedCallback = t.filterChangedCallback, this.filterModifiedCallback = t.filterModifiedCallback, this.valueGetter = t.valueGetter, this.rowsInBodyContainer = {}, this.colDef = t.colDef, this.localeTextFunc = t.localeTextFunc, this.filterParams && (this.cellRenderer = this.filterParams.cellRenderer), this.createGui(), this.addScrollListener(), this.createApi();
                        }, n.prototype.afterGuiAttached = function () {
                            this.drawVirtualRows();
                        }, n.prototype.isFilterActive = function () {
                            return this.model.isFilterActive();
                        }, n.prototype.doesFilterPass = function (e) {
                            if (this.model.isEverythingSelected())
                                return !0;
                            if (this.model.isNothingSelected())
                                return !1;
                            var i = this.valueGetter(e);
                            if (i = t.makeNull(i), Array.isArray(i)) {
                                for (var o = 0; o < i.length; o++)
                                    if (this.model.isValueSelected(i[o]))
                                        return !0;
                                return !1;
                            }
                            return this.model.isValueSelected(i);
                        }, n.prototype.getGui = function () {
                            return this.eGui;
                        }, n.prototype.onNewRowsLoaded = function () {
                            var e = this.filterParams && 'keep' === this.filterParams.newRowsAction, t = this.eSelectAll && this.eSelectAll.checked && !this.eSelectAll.indeterminate;
                            this.model.refreshAfterNewRowsLoaded(e, t), this.setContainerHeight(), this.refreshVirtualRows();
                        }, n.prototype.onAnyFilterChanged = function () {
                            this.model.refreshAfterAnyFilterChanged(), this.setContainerHeight(), this.refreshVirtualRows();
                        }, n.prototype.createTemplate = function () {
                            return i.replace('[SELECT ALL]', this.localeTextFunc('selectAll', 'Select All')).replace('[SEARCH...]', this.localeTextFunc('searchOoo', 'Search...')).replace('[APPLY FILTER]', this.localeTextFunc('applyFilter', 'Apply Filter'));
                        }, n.prototype.createGui = function () {
                            var e = this;
                            this.eGui = t.loadTemplate(this.createTemplate()), this.eListContainer = this.eGui.querySelector('.ag-filter-list-container'), this.eFilterValueTemplate = this.eGui.querySelector('#itemForRepeat'), this.eSelectAll = this.eGui.querySelector('#selectAll'), this.eListViewport = this.eGui.querySelector('.ag-filter-list-viewport'), this.eMiniFilter = this.eGui.querySelector('.ag-filter-filter'), this.eListContainer.style.height = this.model.getUniqueValueCount() * this.rowHeight + 'px', this.setContainerHeight(), this.eMiniFilter.value = this.model.getMiniFilter(), t.addChangeListener(this.eMiniFilter, function () {
                                e.onMiniFilterChanged();
                            }), t.removeAllChildren(this.eListContainer), this.eSelectAll.onclick = this.onSelectAll.bind(this), this.model.isEverythingSelected() ? (this.eSelectAll.indeterminate = !1, this.eSelectAll.checked = !0) : this.model.isNothingSelected() ? (this.eSelectAll.indeterminate = !1, this.eSelectAll.checked = !1) : this.eSelectAll.indeterminate = !0, this.setupApply();
                        }, n.prototype.setupApply = function () {
                            var e = this;
                            this.applyActive ? (this.eApplyButton = this.eGui.querySelector('#applyButton'), this.eApplyButton.addEventListener('click', function () {
                                e.filterChangedCallback();
                            })) : t.removeElement(this.eGui, '#applyPanel');
                        }, n.prototype.setContainerHeight = function () {
                            this.eListContainer.style.height = this.model.getDisplayedValueCount() * this.rowHeight + 'px';
                        }, n.prototype.drawVirtualRows = function () {
                            var e = this.eListViewport.scrollTop, t = e + this.eListViewport.offsetHeight, i = Math.floor(e / this.rowHeight), o = Math.floor(t / this.rowHeight);
                            this.ensureRowsRendered(i, o);
                        }, n.prototype.ensureRowsRendered = function (e, t) {
                            for (var i = this, o = Object.keys(this.rowsInBodyContainer), n = e; t >= n; n++)
                                if (o.indexOf(n.toString()) >= 0)
                                    o.splice(o.indexOf(n.toString()), 1);
                                else if (this.model.getDisplayedValueCount() > n) {
                                    var r = this.model.getDisplayedValue(n);
                                    i.insertRow(r, n);
                                }
                            this.removeVirtualRows(o);
                        }, n.prototype.removeVirtualRows = function (e) {
                            var t = this;
                            e.forEach(function (e) {
                                var i = t.rowsInBodyContainer[e];
                                t.eListContainer.removeChild(i), delete t.rowsInBodyContainer[e];
                            });
                        }, n.prototype.insertRow = function (e, i) {
                            var o = this, n = this.eFilterValueTemplate.cloneNode(!0), r = n.querySelector('.ag-filter-value');
                            if (this.cellRenderer) {
                                var s = this.cellRenderer({ value: e });
                                t.isNode(s) ? r.appendChild(s) : r.innerHTML = s;
                            } else {
                                var l = '(' + this.localeTextFunc('blanks', 'Blanks') + ')', a = null === e ? l : e;
                                r.innerHTML = a;
                            }
                            var d = n.querySelector('input');
                            d.checked = this.model.isValueSelected(e), d.onclick = function () {
                                o.onCheckboxClicked(d, e);
                            }, n.style.top = this.rowHeight * i + 'px', this.eListContainer.appendChild(n), this.rowsInBodyContainer[i] = n;
                        }, n.prototype.onCheckboxClicked = function (e, t) {
                            var i = e.checked;
                            i ? (this.model.selectValue(t), this.model.isEverythingSelected() ? (this.eSelectAll.indeterminate = !1, this.eSelectAll.checked = !0) : this.eSelectAll.indeterminate = !0) : (this.model.unselectValue(t), this.model.isNothingSelected() ? (this.eSelectAll.indeterminate = !1, this.eSelectAll.checked = !1) : this.eSelectAll.indeterminate = !0), this.filterChanged();
                        }, n.prototype.filterChanged = function () {
                            this.filterModifiedCallback(), this.applyActive || this.filterChangedCallback();
                        }, n.prototype.onMiniFilterChanged = function () {
                            var e = this.model.setMiniFilter(this.eMiniFilter.value);
                            e && (this.setContainerHeight(), this.refreshVirtualRows());
                        }, n.prototype.refreshVirtualRows = function () {
                            this.clearVirtualRows(), this.drawVirtualRows();
                        }, n.prototype.clearVirtualRows = function () {
                            var e = Object.keys(this.rowsInBodyContainer);
                            this.removeVirtualRows(e);
                        }, n.prototype.onSelectAll = function () {
                            var e = this.eSelectAll.checked;
                            e ? this.model.selectEverything() : this.model.selectNothing(), this.updateAllCheckboxes(e), this.filterChanged();
                        }, n.prototype.updateAllCheckboxes = function (e) {
                            for (var t = this.eListContainer.querySelectorAll('[filter-checkbox=true]'), i = 0, o = t.length; o > i; i++)
                                t[i].checked = e;
                        }, n.prototype.addScrollListener = function () {
                            var e = this;
                            this.eListViewport.addEventListener('scroll', function () {
                                e.drawVirtualRows();
                            });
                        }, n.prototype.getApi = function () {
                            return this.api;
                        }, n.prototype.createApi = function () {
                            var e = this.model, t = this;
                            this.api = {
                                setMiniFilter: function (t) {
                                    e.setMiniFilter(t);
                                },
                                getMiniFilter: function () {
                                    return e.getMiniFilter();
                                },
                                selectEverything: function () {
                                    t.eSelectAll.indeterminate = !1, t.eSelectAll.checked = !0, e.selectEverything();
                                },
                                isFilterActive: function () {
                                    return e.isFilterActive();
                                },
                                selectNothing: function () {
                                    t.eSelectAll.indeterminate = !1, t.eSelectAll.checked = !1, e.selectNothing();
                                },
                                unselectValue: function (i) {
                                    e.unselectValue(i), t.refreshVirtualRows();
                                },
                                selectValue: function (i) {
                                    e.selectValue(i), t.refreshVirtualRows();
                                },
                                isValueSelected: function (t) {
                                    return e.isValueSelected(t);
                                },
                                isEverythingSelected: function () {
                                    return e.isEverythingSelected();
                                },
                                isNothingSelected: function () {
                                    return e.isNothingSelected();
                                },
                                getUniqueValueCount: function () {
                                    return e.getUniqueValueCount();
                                },
                                getUniqueValue: function (t) {
                                    return e.getUniqueValue(t);
                                },
                                getModel: function () {
                                    return e.getModel();
                                },
                                setModel: function (i) {
                                    e.setModel(i), t.refreshVirtualRows();
                                }
                            };
                        }, n;
                    }();
                e.SetFilter = n;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function i() {
                        }
                        return i.prototype.init = function (e) {
                            this.ePopupParent = e;
                        }, i.prototype.positionPopup = function (e, t, i) {
                            var o = e.getBoundingClientRect(), n = this.ePopupParent.getBoundingClientRect(), r = o.left - n.left, s = o.top - n.top + o.height;
                            if (i) {
                                var l;
                                l = t.clientWidth > 0 ? t.clientWidth : 200;
                                var a = n.right - n.left, d = a - l;
                                r > d && (r = d), 0 > r && (r = 0);
                            }
                            t.style.left = r + 'px', t.style.top = s + 'px';
                        }, i.prototype.addAsModalPopup = function (i, o) {
                            function n(t) {
                                var i = t.which || t.keyCode;
                                i === e.Constants.KEY_ESCAPE && r(null);
                            }
                            function r(e) {
                                e && e === u || (d.ePopupParent.removeChild(i), l.removeEventListener('keydown', n), l.removeEventListener('click', r), i.removeEventListener('click', s));
                            }
                            function s(e) {
                                u = e;
                            }
                            var l = document.body;
                            if (!l)
                                return void console.warn('ag-grid: could not find the body of the document, document.body is empty');
                            var a = t.isVisible(i);
                            if (!a) {
                                this.ePopupParent.appendChild(i);
                                var d = this;
                                setTimeout(function () {
                                    o && l.addEventListener('keydown', n), l.addEventListener('click', r), i.addEventListener('click', s);
                                }, 0);
                                var u = null;
                                return r;
                            }
                        }, i;
                    }();
                e.PopupService = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function i() {
                        }
                        return i.prototype.init = function (e, t, i, o, n, r, s) {
                            this.$compile = i, this.$scope = o, this.gridOptionsWrapper = t, this.grid = e, this.allFilters = {}, this.columnController = n, this.popupService = r, this.valueService = s, this.columnController = n, this.quickFilter = null;
                        }, i.prototype.setFilterModel = function (e) {
                            var i = this;
                            if (e) {
                                var o = Object.keys(e);
                                t.iterateObject(this.allFilters, function (n, r) {
                                    t.removeFromArray(o, n);
                                    var s = e[n];
                                    i.setModelOnFilterWrapper(r.filter, s);
                                }), t.iterateArray(o, function (t) {
                                    var o = i.columnController.getColumn(t);
                                    if (!o)
                                        return void console.warn('Warning ag-grid setFilterModel - no column found for colId ' + t);
                                    var n = i.getOrCreateFilterWrapper(o);
                                    i.setModelOnFilterWrapper(n.filter, e[t]);
                                });
                            } else
                                t.iterateObject(this.allFilters, function (e, t) {
                                    i.setModelOnFilterWrapper(t.filter, null);
                                });
                            this.grid.onFilterChanged();
                        }, i.prototype.setModelOnFilterWrapper = function (e, t) {
                            if ('function' != typeof e.getApi)
                                return void console.warn('Warning ag-grid - filter missing getApi method, which is needed for getFilterModel');
                            var i = e.getApi();
                            return 'function' != typeof i.setModel ? void console.warn('Warning ag-grid - filter API missing setModel method, which is needed for setFilterModel') : void i.setModel(t);
                        }, i.prototype.getFilterModel = function () {
                            var e = {};
                            return t.iterateObject(this.allFilters, function (t, i) {
                                if ('function' != typeof i.filter.getApi)
                                    return void console.warn('Warning ag-grid - filter missing getApi method, which is needed for getFilterModel');
                                var o = i.filter.getApi();
                                if ('function' != typeof o.getModel)
                                    return void console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');
                                var n = o.getModel();
                                n && (e[t] = n);
                            }), e;
                        }, i.prototype.setRowModel = function (e) {
                            this.rowModel = e;
                        }, i.prototype.isAdvancedFilterPresent = function () {
                            var e = !1;
                            return t.iterateObject(this.allFilters, function (t, i) {
                                i.filter.isFilterActive || console.error('Filter is missing method isFilterActive'), i.filter.isFilterActive() && (e = !0);
                            }), e;
                        }, i.prototype.isAnyFilterPresent = function () {
                            return this.isQuickFilterPresent() || this.advancedFilterPresent || this.externalFilterPresent;
                        }, i.prototype.isFilterPresentForCol = function (e) {
                            var t = this.allFilters[e];
                            if (!t)
                                return !1;
                            t.filter.isFilterActive || console.error('Filter is missing method isFilterActive');
                            var i = t.filter.isFilterActive();
                            return i;
                        }, i.prototype.doesFilterPass = function (e, t) {
                            for (var i = e.data, o = Object.keys(this.allFilters), n = 0, r = o.length; r > n; n++) {
                                var s = o[n], l = this.allFilters[s];
                                if (void 0 !== l && l.filter !== t) {
                                    l.filter.doesFilterPass || console.error('Filter is missing method doesFilterPass');
                                    var a = {
                                        node: e,
                                        data: i
                                    };
                                    if (!l.filter.doesFilterPass(a))
                                        return !1;
                                }
                            }
                            return !0;
                        }, i.prototype.setQuickFilter = function (e) {
                            return (void 0 === e || '' === e) && (e = null), this.quickFilter !== e ? this.gridOptionsWrapper.isVirtualPaging() ? void console.warn('ag-grid: cannot do quick filtering when doing virtual paging') : ((void 0 === e || '' === e) && (e = null), null !== e && (e = e.toUpperCase()), this.quickFilter = e, !0) : !1;
                        }, i.prototype.onFilterChanged = function () {
                            this.advancedFilterPresent = this.isAdvancedFilterPresent(), this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent(), t.iterateObject(this.allFilters, function (e, t) {
                                t.filter.onAnyFilterChanged && t.filter.onAnyFilterChanged();
                            });
                        }, i.prototype.isQuickFilterPresent = function () {
                            return null !== this.quickFilter;
                        }, i.prototype.doesRowPassOtherFilters = function (e, t) {
                            return this.doesRowPassFilter(t, e);
                        }, i.prototype.doesRowPassFilter = function (e, t) {
                            return this.isQuickFilterPresent() && (e.quickFilterAggregateText || this.aggregateRowForQuickFilter(e), e.quickFilterAggregateText.indexOf(this.quickFilter) < 0) ? !1 : this.externalFilterPresent && !this.gridOptionsWrapper.doesExternalFilterPass(e) ? !1 : this.advancedFilterPresent && !this.doesFilterPass(e, t) ? !1 : !0;
                        }, i.prototype.aggregateRowForQuickFilter = function (e) {
                            var t = '', i = this;
                            this.columnController.getAllColumns().forEach(function (o) {
                                var n = e.data, r = i.valueService.getValue(o.colDef, n, e);
                                r && '' !== r && (t = t + r.toString().toUpperCase() + '_');
                            }), e.quickFilterAggregateText = t;
                        }, i.prototype.onNewRowsLoaded = function () {
                            var e = this;
                            Object.keys(this.allFilters).forEach(function (t) {
                                var i = e.allFilters[t].filter;
                                i.onNewRowsLoaded && i.onNewRowsLoaded();
                            });
                        }, i.prototype.createValueGetter = function (e) {
                            var t = this;
                            return function (i) {
                                return t.valueService.getValue(e.colDef, i.data, i);
                            };
                        }, i.prototype.getFilterApi = function (e) {
                            var t = this.getOrCreateFilterWrapper(e);
                            return t && 'function' == typeof t.filter.getApi ? t.filter.getApi() : void 0;
                        }, i.prototype.getOrCreateFilterWrapper = function (e) {
                            var t = this.allFilters[e.colId];
                            return t || (t = this.createFilterWrapper(e), this.allFilters[e.colId] = t), t;
                        }, i.prototype.createFilterWrapper = function (i) {
                            var o = i.colDef, n = {
                                    column: i,
                                    filter: null,
                                    scope: null,
                                    gui: null
                                };
                            'function' == typeof o.filter ? (this.gridOptionsWrapper.isAngularCompileFilters() && (n.scope = this.$scope.$new()), this.assertMethodHasNoParameters(o.filter), n.filter = new o.filter()) : 'text' === o.filter ? n.filter = new e.TextFilter() : 'number' === o.filter ? n.filter = new e.NumberFilter() : n.filter = new e.SetFilter();
                            var r = this.grid.onFilterChanged.bind(this.grid), s = this.grid.onFilterModified.bind(this.grid), l = this.doesRowPassOtherFilters.bind(this, n.filter), a = o.filterParams, d = {
                                    colDef: o,
                                    rowModel: this.rowModel,
                                    filterChangedCallback: r,
                                    filterModifiedCallback: s,
                                    filterParams: a,
                                    localeTextFunc: this.gridOptionsWrapper.getLocaleTextFunc(),
                                    valueGetter: this.createValueGetter(i),
                                    doesRowPassOtherFilter: l,
                                    context: this.gridOptionsWrapper.getContext,
                                    $scope: n.scope
                                };
                            if (!n.filter.init)
                                throw 'Filter is missing method init';
                            if (n.filter.init(d), !n.filter.getGui)
                                throw 'Filter is missing method getGui';
                            var u = document.createElement('div');
                            u.className = 'ag-filter';
                            var p = n.filter.getGui();
                            if (t.isNodeOrElement(p))
                                u.appendChild(p);
                            else {
                                var h = document.createElement('span');
                                h.innerHTML = p, u.appendChild(h);
                            }
                            return n.scope ? n.gui = this.$compile(u)(n.scope)[0] : n.gui = u, n;
                        }, i.prototype.assertMethodHasNoParameters = function (e) {
                            var i = t.getFunctionParameters(e);
                            i.length > 0 && (console.warn('ag-grid: It looks like your filter is of the old type and expecting parameters in the constructor.'), console.warn('ag-grid: From ag-grid 1.14, the constructor should take no parameters and init() used instead.'));
                        }, i.prototype.showFilter = function (e, t) {
                            var i = this.getOrCreateFilterWrapper(e), o = this.popupService.addAsModalPopup(i.gui, !0);
                            if (this.popupService.positionPopup(t, i.gui, !0), i.filter.afterGuiAttached) {
                                var n = {
                                    hidePopup: o,
                                    eventSource: t
                                };
                                i.filter.afterGuiAttached(n);
                            }
                        }, i;
                    }();
                e.FilterManager = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                        this.templateCache = {}, this.waitingCallbacks = {};
                    }
                    return e.prototype.init = function (e) {
                        this.$scope = e;
                    }, e.prototype.getTemplate = function (e, t) {
                        var i = this.templateCache[e];
                        if (i)
                            return i;
                        var o = this.waitingCallbacks[e], n = this;
                        if (!o) {
                            o = [], this.waitingCallbacks[e] = o;
                            var r = new XMLHttpRequest();
                            r.onload = function () {
                                n.handleHttpResult(this, e);
                            }, r.open('GET', e), r.send();
                        }
                        return t && o.push(t), null;
                    }, e.prototype.handleHttpResult = function (e, t) {
                        if (200 !== e.status || null === e.response)
                            return void console.warn('Unable to get template error ' + e.status + ' - ' + t);
                        this.templateCache[t] = e.response || e.responseText;
                        for (var i = this.waitingCallbacks[t], o = 0; o < i.length; o++) {
                            var n = i[o];
                            n();
                        }
                        if (this.$scope) {
                            var r = this;
                            setTimeout(function () {
                                r.$scope.$apply();
                            }, 0);
                        }
                    }, e;
                }();
                e.TemplateService = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                function t(e, t) {
                    'boolean' == typeof t ? (e.checked = t, e.indeterminate = !1) : e.indeterminate = !0;
                }
                var i = function () {
                    function e() {
                    }
                    return e.prototype.init = function (e, t) {
                        this.angularGrid = e, this.selectionController = t;
                    }, e.prototype.createSelectionCheckbox = function (e, i) {
                        var o = document.createElement('input');
                        o.type = 'checkbox', o.name = 'name', o.className = 'ag-selection-checkbox', t(o, this.selectionController.isNodeSelected(e));
                        var n = this;
                        return o.onclick = function (e) {
                            e.stopPropagation();
                        }, o.onchange = function () {
                            var e = o.checked;
                            e ? n.selectionController.selectIndex(i, !0) : n.selectionController.deselectIndex(i);
                        }, this.angularGrid.addVirtualRowListener(i, {
                            rowSelected: function (e) {
                                t(o, e);
                            },
                            rowRemoved: function () {
                            }
                        }), o;
                    }, e;
                }();
                e.SelectionRendererFactory = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (t) {
                var i = (e.grid.Utils, function () {
                    function e() {
                        this.id = e.idSequence++;
                    }
                    return e.prototype.getId = function () {
                        return this.id;
                    }, e.prototype.addElementAttachedListener = function (e) {
                        this.elementAttachedListeners || (this.elementAttachedListeners = []), this.elementAttachedListeners.push(e);
                    }, e.prototype.fireElementAttached = function (e) {
                        if (this.elementAttachedListeners)
                            for (var t = 0; t < this.elementAttachedListeners.length; t++) {
                                var i = this.elementAttachedListeners[t];
                                i(e);
                            }
                    }, e.prototype.elementAttached = function (e) {
                        this.fireElementAttached(e);
                    }, e.prototype.toHtmlString = function () {
                        return null;
                    }, e.idSequence = 0, e;
                }());
                t.VElement = i;
            }(t = e.vdom || (e.vdom = {}));
        }(ag || (ag = {}));
        var __extends = this && this.__extends || function (e, t) {
                function i() {
                    this.constructor = e;
                }
                for (var o in t)
                    t.hasOwnProperty(o) && (e[o] = t[o]);
                e.prototype = null === t ? Object.create(t) : (i.prototype = t.prototype, new i());
            }, ag;
        !function (e) {
            var t;
            !function (t) {
                var i = e.grid.Utils, o = function (e) {
                        function o(t) {
                            e.call(this), this.style = {}, this.type = t;
                        }
                        return __extends(o, e), o.prototype.getElement = function () {
                            return this.element;
                        }, o.prototype.setInnerHtml = function (e) {
                            this.bound ? this.element.innerHTML = e : this.innerHtml = e;
                        }, o.prototype.addStyles = function (e) {
                            var t = this;
                            e && (this.bound || this.style || (this.style = {}), i.iterateObject(e, function (e, i) {
                                if (t.bound) {
                                    var o = t.element.style;
                                    o[e] = i;
                                } else
                                    t.style[e] = i;
                            }));
                        }, o.prototype.attachEventListeners = function (e) {
                            if (this.eventListeners)
                                for (var t = 0; t < this.eventListeners.length; t++) {
                                    var i = this.eventListeners[t];
                                    e.addEventListener(i.event, i.listener);
                                }
                        }, o.prototype.addClass = function (e) {
                            this.bound ? i.addCssClass(this.element, e) : (this.classes || (this.classes = []), this.classes.push(e));
                        }, o.prototype.removeClass = function (e) {
                            if (this.bound)
                                i.removeCssClass(this.element, e);
                            else {
                                if (!this.classes)
                                    return;
                                for (; this.classes.indexOf(e) >= 0;)
                                    i.removeFromArray(this.classes, e);
                            }
                        }, o.prototype.addClasses = function (e) {
                            if (e && !(e.length <= 0))
                                if (this.bound)
                                    for (var t = 0; t < e.length; t++)
                                        i.addCssClass(this.element, e[t]);
                                else {
                                    this.classes || (this.classes = []);
                                    for (var o = 0; o < e.length; o++)
                                        this.classes.push(e[o]);
                                }
                        }, o.prototype.toHtmlString = function () {
                            var e = '';
                            return e += '<' + this.type + ' v_element_id="' + this.getId() + '" ', e += this.toHtmlStringClasses(), e += this.toHtmlStringAttributes(), e += this.toHtmlStringStyles(), e += '>', this.innerHtml && (e += this.innerHtml), e += this.toHtmlStringChildren(), e += '</' + this.type + '>';
                        }, o.prototype.toHtmlStringChildren = function () {
                            if (!this.children)
                                return '';
                            for (var e = '', t = 0; t < this.children.length; t++)
                                e += this.children[t].toHtmlString();
                            return e;
                        }, o.prototype.toHtmlStringAttributes = function () {
                            if (!this.attributes)
                                return '';
                            var e = '';
                            return i.iterateObject(this.attributes, function (t, i) {
                                e += ' ' + t + '="' + i + '"';
                            }), e;
                        }, o.prototype.toHtmlStringClasses = function () {
                            return this.classes ? ' class="' + this.classes.join(' ') + '"' : '';
                        }, o.prototype.toHtmlStringStyles = function () {
                            var e = ' style="', t = !1;
                            return i.iterateObject(this.style, function (i, o) {
                                e += ' ' + i + ': ' + o + ';', t = !0;
                            }), e += '"', t ? e : '';
                        }, o.prototype.appendChild = function (e) {
                            this.bound ? i.isNodeOrElement(e) ? this.element.appendChild(e) : console.error('cannot appendChild with virtual child to already bound VHTMLElement') : (this.children || (this.children = []), i.isNodeOrElement(e) ? this.children.push(new t.VWrapperElement(e)) : this.children.push(e));
                        }, o.prototype.setAttribute = function (e, t) {
                            this.bound ? this.element.setAttribute(e, t) : (this.attributes || (this.attributes = {}), this.attributes[e] = t);
                        }, o.prototype.addEventListener = function (e, t) {
                            if (this.bound)
                                this.element.addEventListener(e, t);
                            else {
                                this.eventListeners || (this.eventListeners = []);
                                var i = new n(e, t);
                                this.eventListeners.push(i);
                            }
                        }, o.prototype.elementAttached = function (t) {
                            e.prototype.elementAttached.call(this, t), this.element = t, this.attachEventListeners(t), this.fireElementAttachedToChildren(t), this.bound = !0;
                        }, o.prototype.fireElementAttachedToChildren = function (e) {
                            if (this.children)
                                for (var t = 0; t < this.children.length; t++) {
                                    var i = this.children[t], o = e.querySelector('[v_element_id="' + i.getId() + '"]');
                                    i.elementAttached(o);
                                }
                        }, o;
                    }(t.VElement);
                t.VHtmlElement = o;
                var n = function () {
                    function e(e, t) {
                        this.event = e, this.listener = t;
                    }
                    return e;
                }();
            }(t = e.vdom || (e.vdom = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function (e) {
                    function t(t) {
                        e.call(this), this.wrappedElement = t;
                    }
                    return __extends(t, e), t.prototype.toHtmlString = function () {
                        return '<span v_element_id="' + this.getId() + '"></span>';
                    }, t.prototype.elementAttached = function (e) {
                        var t = e.parentNode;
                        t.insertBefore(this.wrappedElement, e), t.removeChild(e);
                    }, t;
                }(e.VElement);
                e.VWrapperElement = t;
            }(t = e.vdom || (e.vdom = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (t) {
                var i = t.Utils, o = function () {
                        function o(e, t, i, o, n, r, s, l, a, d, u, p, h, c, g, f) {
                            this.isFirstColumn = !1, this.isFirstColumn = e, this.column = t, this.rowRenderer = o, this.gridOptionsWrapper = n, this.expressionService = r, this.selectionRendererFactory = s, this.selectionController = l, this.cellRendererMap = d, this.$compile = i, this.templateService = a, this.columnController = c, this.valueService = g, this.eventService = f, this.checkboxSelection = this.column.colDef.checkboxSelection && !u.floating, this.node = u, this.rowIndex = p, this.scope = h, this.data = this.getDataForRow(), this.value = this.getValue(), this.setupComponents();
                        }
                        return o.prototype.getColumn = function () {
                            return this.column;
                        }, o.prototype.getValue = function () {
                            return this.valueService.getValue(this.column.colDef, this.data, this.node);
                        }, o.prototype.getVGridCell = function () {
                            return this.vGridCell;
                        }, o.prototype.getDataForRow = function () {
                            if (this.node.footer)
                                return this.node.data;
                            if (this.node.group) {
                                var e = this.gridOptionsWrapper.isGroupIncludeFooter(), t = this.gridOptionsWrapper.isGroupSuppressBlankHeader();
                                return this.node.expanded && e && !t ? void 0 : this.node.data;
                            }
                            return this.node.data;
                        }, o.prototype.setupComponents = function () {
                            this.vGridCell = new e.vdom.VHtmlElement('div'), this.vGridCell.setAttribute('col', void 0 !== this.column.index && null !== this.column.index ? this.column.index.toString() : ''), this.vGridCell.setAttribute('colId', this.column.colId), this.gridOptionsWrapper.isSuppressCellSelection() || this.node.floating || this.vGridCell.setAttribute('tabindex', '-1'), this.addClasses(), this.addCellClickedHandler(), this.addCellDoubleClickedHandler(), this.addCellContextMenuHandler(), this.node.floating || this.addCellNavigationHandler(), this.vGridCell.addStyles({ width: this.column.actualWidth + 'px' }), this.createParentOfValue(), this.populateCell(), this.eCheckbox && this.setSelected(this.selectionController.isNodeSelected(this.node));
                        }, o.prototype.startEditing = function (e) {
                            var o = this, n = this;
                            this.editingCell = !0, i.removeAllChildren(this.vGridCell.getElement());
                            var r = document.createElement('input');
                            r.type = 'text', i.addCssClass(r, 'ag-cell-edit-input');
                            var s = e !== t.Constants.KEY_BACKSPACE && e !== t.Constants.KEY_DELETE, l = this.getValue();
                            s && null !== l && void 0 !== l && (r.value = l), r.style.width = this.column.actualWidth - 14 + 'px', this.vGridCell.appendChild(r), r.focus(), r.select();
                            var a = function () {
                                n.stopEditing(r, a);
                            };
                            r.addEventListener('blur', a), r.addEventListener('keypress', function (e) {
                                var i = e.which || e.keyCode;
                                i === t.Constants.KEY_ENTER && (o.stopEditing(r, a), o.focusCell(!0));
                            }), r.addEventListener('keydown', function (e) {
                                var i = e.which || e.keyCode;
                                i === t.Constants.KEY_ESCAPE && (o.stopEditing(r, a, !0), o.focusCell(!0));
                            }), r.addEventListener('keydown', function (e) {
                                var i = e.which || e.keyCode;
                                return i == t.Constants.KEY_TAB ? (n.stopEditing(r, a), n.rowRenderer.startEditingNextCell(n.rowIndex, n.column, e.shiftKey), e.preventDefault(), !1) : void 0;
                            });
                        }, o.prototype.focusCell = function (e) {
                            this.rowRenderer.focusCell(this.vGridCell.getElement(), this.rowIndex, this.column.index, this.column.colDef, e);
                        }, o.prototype.stopEditing = function (e, o, n) {
                            void 0 === n && (n = !1), this.editingCell = !1;
                            var r = e.value, s = this.column.colDef;
                            if (e.removeEventListener('blur', o), !n) {
                                var l = {
                                    node: this.node,
                                    data: this.node.data,
                                    oldValue: this.node.data[s.field],
                                    newValue: r,
                                    rowIndex: this.rowIndex,
                                    colDef: s,
                                    api: this.gridOptionsWrapper.getApi(),
                                    context: this.gridOptionsWrapper.getContext()
                                };
                                s.newValueHandler ? s.newValueHandler(l) : this.node.data[s.field] = r, this.value = this.getValue(), l.newValue = this.value, 'function' == typeof s.onCellValueChanged && s.onCellValueChanged(l), this.eventService.dispatchEvent(t.Events.EVENT_CELL_VALUE_CHANGED, l);
                            }
                            i.removeAllChildren(this.vGridCell.getElement()), this.checkboxSelection && this.vGridCell.appendChild(this.vCellWrapper.getElement()), this.refreshCell();
                        }, o.prototype.createParams = function () {
                            var e = {
                                node: this.node,
                                data: this.node.data,
                                value: this.value,
                                rowIndex: this.rowIndex,
                                colDef: this.column.colDef,
                                $scope: this.scope,
                                context: this.gridOptionsWrapper.getContext(),
                                api: this.gridOptionsWrapper.getApi()
                            };
                            return e;
                        }, o.prototype.createEvent = function (e, t) {
                            var i = this.createParams();
                            return i.event = e, i.eventSource = t, i;
                        }, o.prototype.addCellDoubleClickedHandler = function () {
                            var e = this, i = this.column.colDef;
                            this.vGridCell.addEventListener('dblclick', function (o) {
                                var n = e.createEvent(o, this);
                                e.eventService.dispatchEvent(t.Events.EVENT_CELL_DOUBLE_CLICKED, n), 'function' == typeof i.onCellDoubleClicked && i.onCellDoubleClicked(n), !e.gridOptionsWrapper.isSingleClickEdit() && e.isCellEditable() && e.startEditing();
                            });
                        }, o.prototype.addCellContextMenuHandler = function () {
                            var e = this, i = this.column.colDef;
                            this.vGridCell.addEventListener('contextmenu', function (o) {
                                var n = e.createEvent(o, this);
                                e.eventService.dispatchEvent(t.Events.EVENT_CELL_CONTEXT_MENU, n), i.onCellContextMenu && i.onCellContextMenu(n);
                            });
                        }, o.prototype.isCellEditable = function () {
                            if (this.editingCell)
                                return !1;
                            if (this.node.group)
                                return !1;
                            var e = this.column.colDef;
                            if ('boolean' == typeof e.editable)
                                return e.editable;
                            if ('function' == typeof e.editable) {
                                var t = this.createParams(), i = e.editable;
                                return i(t);
                            }
                            return !1;
                        }, o.prototype.addCellClickedHandler = function () {
                            var e = this.column.colDef, i = this;
                            this.vGridCell.addEventListener('click', function (o) {
                                i.node.floating || i.focusCell(!1);
                                var n = i.createEvent(o, this);
                                i.eventService.dispatchEvent(t.Events.EVENT_CELL_CLICKED, n), e.onCellClicked && e.onCellClicked(n), i.gridOptionsWrapper.isSingleClickEdit() && i.isCellEditable() && i.startEditing();
                            });
                        }, o.prototype.populateCell = function () {
                            this.putDataIntoCell(), this.addStylesFromCollDef(), this.addClassesFromCollDef(), this.addClassesFromRules();
                        }, o.prototype.addStylesFromCollDef = function () {
                            var e = this.column.colDef;
                            if (e.cellStyle) {
                                var t;
                                if ('function' == typeof e.cellStyle) {
                                    var i = {
                                            value: this.value,
                                            data: this.node.data,
                                            node: this.node,
                                            colDef: e,
                                            column: this.column,
                                            $scope: this.scope,
                                            context: this.gridOptionsWrapper.getContext(),
                                            api: this.gridOptionsWrapper.getApi()
                                        }, o = e.cellStyle;
                                    t = o(i);
                                } else
                                    t = e.cellStyle;
                                t && this.vGridCell.addStyles(t);
                            }
                        }, o.prototype.addClassesFromCollDef = function () {
                            var e = this, t = this.column.colDef;
                            if (t.cellClass) {
                                var i;
                                if ('function' == typeof t.cellClass) {
                                    var o = {
                                            value: this.value,
                                            data: this.node.data,
                                            node: this.node,
                                            colDef: t,
                                            $scope: this.scope,
                                            context: this.gridOptionsWrapper.getContext(),
                                            api: this.gridOptionsWrapper.getApi()
                                        }, n = t.cellClass;
                                    i = n(o);
                                } else
                                    i = t.cellClass;
                                'string' == typeof i ? this.vGridCell.addClass(i) : Array.isArray(i) && i.forEach(function (t) {
                                    e.vGridCell.addClass(t);
                                });
                            }
                        }, o.prototype.addClassesFromRules = function () {
                            var e = this.column.colDef, t = e.cellClassRules;
                            if ('object' == typeof t && null !== t)
                                for (var i = {
                                            value: this.value,
                                            data: this.node.data,
                                            node: this.node,
                                            colDef: e,
                                            rowIndex: this.rowIndex,
                                            api: this.gridOptionsWrapper.getApi(),
                                            context: this.gridOptionsWrapper.getContext()
                                        }, o = Object.keys(t), n = 0; n < o.length; n++) {
                                    var r, s = o[n], l = t[s];
                                    'string' == typeof l ? r = this.expressionService.evaluate(l, i) : 'function' == typeof l && (r = l(i)), r ? this.vGridCell.addClass(s) : this.vGridCell.removeClass(s);
                                }
                        }, o.prototype.addCellNavigationHandler = function () {
                            var e = this;
                            this.vGridCell.addEventListener('keydown', function (i) {
                                if (!e.editingCell && i.target === e.vGridCell.getElement()) {
                                    var o = i.which || i.keyCode, n = o === t.Constants.KEY_DOWN || o === t.Constants.KEY_UP || o === t.Constants.KEY_LEFT || o === t.Constants.KEY_RIGHT;
                                    if (n)
                                        return i.preventDefault(), void e.rowRenderer.navigateToNextCell(o, e.rowIndex, e.column);
                                    var r = e.isKeycodeForStartEditing(o);
                                    if (r && e.isCellEditable())
                                        return e.startEditing(o), void i.preventDefault();
                                    var s = o === t.Constants.KEY_SPACE;
                                    if (s && e.gridOptionsWrapper.isRowSelection()) {
                                        var l = e.selectionController.isNodeSelected(e.node);
                                        return l ? e.selectionController.deselectNode(e.node) : e.selectionController.selectNode(e.node, !0), void i.preventDefault();
                                    }
                                }
                            });
                        }, o.prototype.isKeycodeForStartEditing = function (e) {
                            return e === t.Constants.KEY_ENTER || e === t.Constants.KEY_BACKSPACE || e === t.Constants.KEY_DELETE;
                        }, o.prototype.createSelectionCheckbox = function () {
                            this.eCheckbox = document.createElement('input'), this.eCheckbox.type = 'checkbox', this.eCheckbox.name = 'name', this.eCheckbox.className = 'ag-selection-checkbox', this.eCheckbox.addEventListener('click', function (e) {
                                e.stopPropagation();
                            });
                            var e = this;
                            this.checkboxOnChangeListener = function () {
                                var t = e.eCheckbox.checked;
                                t ? e.selectionController.selectIndex(e.rowIndex, !0) : e.selectionController.deselectIndex(e.rowIndex);
                            }, this.eCheckbox.onchange = this.checkboxOnChangeListener;
                        }, o.prototype.setSelected = function (e) {
                            this.eCheckbox && (this.eCheckbox.onchange = null, 'boolean' == typeof e ? (this.eCheckbox.checked = e, this.eCheckbox.indeterminate = !1) : this.eCheckbox.indeterminate = !0, this.eCheckbox.onchange = this.checkboxOnChangeListener);
                        }, o.prototype.createParentOfValue = function () {
                            this.checkboxSelection ? (this.vCellWrapper = new e.vdom.VHtmlElement('span'), this.vCellWrapper.addClass('ag-cell-wrapper'), this.vGridCell.appendChild(this.vCellWrapper), this.createSelectionCheckbox(), this.vCellWrapper.appendChild(new e.vdom.VWrapperElement(this.eCheckbox)), this.vSpanWithValue = new e.vdom.VHtmlElement('span'), this.vSpanWithValue.addClass('ag-cell-value'), this.vCellWrapper.appendChild(this.vSpanWithValue), this.vParentOfValue = this.vSpanWithValue) : (this.vGridCell.addClass('ag-cell-value'), this.vParentOfValue = this.vGridCell);
                        }, o.prototype.isVolatile = function () {
                            return this.column.colDef['volatile'];
                        }, o.prototype.refreshCell = function () {
                            i.removeAllChildren(this.vParentOfValue.getElement()), this.value = this.getValue(), this.populateCell(), this.checkboxSelection && this.setSelected(this.selectionController.isNodeSelected(this.node)), this.gridOptionsWrapper.isAngularCompileRows() && this.$compile(this.vGridCell.getElement())(this.scope);
                        }, o.prototype.putDataIntoCell = function () {
                            var e = this.column.colDef;
                            if (e.template)
                                this.vParentOfValue.setInnerHtml(e.template);
                            else if (e.templateUrl) {
                                var t = this.templateService.getTemplate(e.templateUrl, this.refreshCell.bind(this, !0));
                                t && this.vParentOfValue.setInnerHtml(t);
                            } else
                                e.floatingCellRenderer && this.node.floating ? this.useCellRenderer(e.floatingCellRenderer) : e.cellRenderer ? this.useCellRenderer(e.cellRenderer) : void 0 !== this.value && null !== this.value && '' !== this.value && this.vParentOfValue.setInnerHtml(this.value.toString());
                        }, o.prototype.useCellRenderer = function (e) {
                            var t, o = this.column.colDef, n = {
                                    value: this.value,
                                    valueGetter: this.getValue,
                                    data: this.node.data,
                                    node: this.node,
                                    colDef: o,
                                    column: this.column,
                                    $scope: this.scope,
                                    rowIndex: this.rowIndex,
                                    api: this.gridOptionsWrapper.getApi(),
                                    context: this.gridOptionsWrapper.getContext(),
                                    refreshCell: this.refreshCell.bind(this),
                                    eGridCell: this.vGridCell
                                };
                            if ('object' == typeof e && null !== e) {
                                var r = e;
                                if (t = this.cellRendererMap[r.renderer], !t)
                                    throw 'Cell renderer ' + e + ' not found, available are ' + Object.keys(this.cellRendererMap);
                            } else {
                                if ('function' != typeof e)
                                    throw 'Cell Renderer must be String or Function';
                                t = e;
                            }
                            var s = t(n);
                            i.isNodeOrElement(s) ? this.vParentOfValue.appendChild(s) : this.vParentOfValue.setInnerHtml(s);
                        }, o.prototype.addClasses = function () {
                            this.vGridCell.addClass('ag-cell'), this.vGridCell.addClass('ag-cell-no-focus'), this.vGridCell.addClass('cell-col-' + this.column.index), this.node.group && this.node.footer && this.vGridCell.addClass('ag-footer-cell'), this.node.group && !this.node.footer && this.vGridCell.addClass('ag-group-cell');
                        }, o;
                    }();
                t.RenderedCell = o;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (t) {
                var i = t.Utils, o = function () {
                        function o(e, t, i, o, n, r, s, l, a, d, u, p, h, c, g, f, v) {
                            this.renderedCells = {}, this.gridOptionsWrapper = e, this.valueService = t, this.parentScope = i, this.angularGrid = o, this.expressionService = r, this.columnController = n, this.cellRendererMap = s, this.selectionRendererFactory = l, this.$compile = a, this.templateService = d, this.selectionController = u, this.rowRenderer = p, this.eBodyContainer = h, this.ePinnedContainer = c, this.pinning = n.isPinning(), this.eventService = v;
                            var C = this.gridOptionsWrapper.isGroupUseEntireRow(), m = g.group && C;
                            this.vBodyRow = this.createRowContainer(), this.pinning && (this.vPinnedRow = this.createRowContainer()), this.rowIndex = f, this.node = g, this.scope = this.createChildScopeOrNull(g.data), m || this.drawNormalRow(), this.addDynamicStyles(), this.addDynamicClasses();
                            var y = this.rowIndex.toString();
                            if (this.node.floatingBottom ? y = 'fb-' + y : this.node.floatingTop && (y = 'ft-' + y), this.vBodyRow.setAttribute('row', y), this.pinning && this.vPinnedRow.setAttribute('row', y), 'function' == typeof this.gridOptionsWrapper.getBusinessKeyForNodeFunc()) {
                                var E = this.gridOptionsWrapper.getBusinessKeyForNodeFunc()(this.node);
                                ('string' == typeof E || 'number' == typeof E) && (this.vBodyRow.setAttribute('row-id', E), this.pinning && this.vPinnedRow.setAttribute('row-id', E));
                            }
                            this.gridOptionsWrapper.isForPrint() || (this.vBodyRow.style.top = this.gridOptionsWrapper.getRowHeight() * this.rowIndex + 'px', this.pinning && (this.vPinnedRow.style.top = this.gridOptionsWrapper.getRowHeight() * this.rowIndex + 'px')), this.vBodyRow.style.height = this.gridOptionsWrapper.getRowHeight() + 'px', this.pinning && (this.vPinnedRow.style.height = this.gridOptionsWrapper.getRowHeight() + 'px'), m && this.createGroupRow(), this.bindVirtualElement(this.vBodyRow), this.pinning && this.bindVirtualElement(this.vPinnedRow), this.scope && (this.$compile(this.vBodyRow.getElement())(this.scope), this.pinning && this.$compile(this.vPinnedRow.getElement())(this.scope)), this.eBodyContainer.appendChild(this.vBodyRow.getElement()), this.pinning && this.ePinnedContainer.appendChild(this.vPinnedRow.getElement());
                        }
                        return o.prototype.onRowSelected = function (e) {
                            i.iterateObject(this.renderedCells, function (t, i) {
                                i.setSelected(e);
                            });
                        }, o.prototype.softRefresh = function () {
                            i.iterateObject(this.renderedCells, function (e, t) {
                                t.isVolatile() && t.refreshCell();
                            });
                        }, o.prototype.getRenderedCellForColumn = function (e) {
                            return this.renderedCells[e.index];
                        }, o.prototype.getCellForCol = function (e) {
                            var t = this.renderedCells[e.index];
                            return t ? t.getVGridCell().getElement() : null;
                        }, o.prototype.destroy = function () {
                            this.destroyScope(), this.pinning && this.ePinnedContainer.removeChild(this.vPinnedRow.getElement()), this.eBodyContainer.removeChild(this.vBodyRow.getElement());
                        }, o.prototype.destroyScope = function () {
                            this.scope && (this.scope.$destroy(), this.scope = null);
                        }, o.prototype.isDataInList = function (e) {
                            return e.indexOf(this.node.data) >= 0;
                        }, o.prototype.isNodeInList = function (e) {
                            return e.indexOf(this.node) >= 0;
                        }, o.prototype.isGroup = function () {
                            return this.node.group === !0;
                        }, o.prototype.drawNormalRow = function () {
                            for (var e = this.columnController.getDisplayedColumns(), i = 0; i < e.length; i++) {
                                var o = e[i], n = 0 === i, r = new t.RenderedCell(n, o, this.$compile, this.rowRenderer, this.gridOptionsWrapper, this.expressionService, this.selectionRendererFactory, this.selectionController, this.templateService, this.cellRendererMap, this.node, this.rowIndex, this.scope, this.columnController, this.valueService, this.eventService), s = r.getVGridCell();
                                o.pinned ? this.vPinnedRow.appendChild(s) : this.vBodyRow.appendChild(s), this.renderedCells[o.index] = r;
                            }
                        }, o.prototype.bindVirtualElement = function (e) {
                            var t = e.toHtmlString(), o = i.loadTemplate(t);
                            e.elementAttached(o);
                        }, o.prototype.createGroupRow = function () {
                            var e = this.createGroupSpanningEntireRowCell(!1);
                            if (this.pinning) {
                                this.vPinnedRow.appendChild(e);
                                var t = this.createGroupSpanningEntireRowCell(!0);
                                this.vBodyRow.appendChild(t);
                            } else
                                this.vBodyRow.appendChild(e);
                        }, o.prototype.createGroupSpanningEntireRowCell = function (e) {
                            var t;
                            if (e)
                                t = document.createElement('span');
                            else {
                                var o = this.gridOptionsWrapper.getGroupRowRenderer();
                                o || (o = {
                                    renderer: 'group',
                                    innerRenderer: this.gridOptionsWrapper.getGroupRowInnerRenderer()
                                });
                                var n, r = {
                                        node: this.node,
                                        data: this.node.data,
                                        rowIndex: this.rowIndex,
                                        api: this.gridOptionsWrapper.getApi(),
                                        colDef: { cellRenderer: o }
                                    };
                                if ('object' == typeof o && null !== o) {
                                    var s = o;
                                    if (n = this.cellRendererMap[s.renderer], !n)
                                        throw 'Cell renderer ' + o + ' not found, available are ' + Object.keys(this.cellRendererMap);
                                } else {
                                    if ('function' != typeof o)
                                        throw 'Cell Renderer must be String or Function';
                                    n = o;
                                }
                                var l = n(r);
                                t = i.isNodeOrElement(l) ? l : i.loadTemplate(l);
                            }
                            return this.node.footer ? i.addCssClass(t, 'ag-footer-cell-entire-row') : i.addCssClass(t, 'ag-group-cell-entire-row'), t;
                        }, o.prototype.setMainRowWidth = function (e) {
                            this.vBodyRow.addStyles({ width: e + 'px' });
                        }, o.prototype.createChildScopeOrNull = function (e) {
                            if (this.gridOptionsWrapper.isAngularCompileRows()) {
                                var t = this.parentScope.$new();
                                return t.data = e, t;
                            }
                            return null;
                        }, o.prototype.addDynamicStyles = function () {
                            var e = this.gridOptionsWrapper.getRowStyle();
                            e && ('function' == typeof e ? console.log('ag-Grid: rowStyle should be a string or an array, not be a function, use getRowStyle() instead') : (this.vBodyRow.addStyles(e), this.pinning && this.vPinnedRow.addStyles(e)));
                            var t = this.gridOptionsWrapper.getRowStyleFunc();
                            if (t) {
                                var i = {
                                        data: this.node.data,
                                        node: this.node,
                                        api: this.gridOptionsWrapper.getApi(),
                                        context: this.gridOptionsWrapper.getContext(),
                                        $scope: this.scope
                                    }, o = t(i);
                                this.vBodyRow.addStyles(o), this.pinning && this.vPinnedRow.addStyles(o);
                            }
                        }, o.prototype.createParams = function () {
                            var e = {
                                node: this.node,
                                data: this.node.data,
                                rowIndex: this.rowIndex,
                                $scope: this.scope,
                                context: this.gridOptionsWrapper.getContext(),
                                api: this.gridOptionsWrapper.getApi()
                            };
                            return e;
                        }, o.prototype.createEvent = function (e, t) {
                            var i = this.createParams();
                            return i.event = e, i.eventSource = t, i;
                        }, o.prototype.createRowContainer = function () {
                            var i = new e.vdom.VHtmlElement('div'), o = this;
                            return i.addEventListener('click', function (e) {
                                var i = o.createEvent(e, this);
                                o.eventService.dispatchEvent(t.Events.EVENT_ROW_CLICKED, i);
                                var n = e.ctrlKey || e.metaKey;
                                o.angularGrid.onRowClicked(n, o.rowIndex, o.node);
                            }), i.addEventListener('dblclick', function (e) {
                                var i = o.createEvent(e, this);
                                o.eventService.dispatchEvent(t.Events.EVENT_ROW_DOUBLE_CLICKED, i);
                            }), i;
                        }, o.prototype.getRowNode = function () {
                            return this.node;
                        }, o.prototype.getRowIndex = function () {
                            return this.rowIndex;
                        }, o.prototype.refreshCells = function (e) {
                            if (e) {
                                var t = this.columnController.getColumns(e);
                                i.iterateObject(this.renderedCells, function (e, i) {
                                    var o = i.getColumn();
                                    t.indexOf(o) >= 0 && i.refreshCell();
                                });
                            }
                        }, o.prototype.addDynamicClasses = function () {
                            var e = [];
                            e.push('ag-row'), e.push(this.rowIndex % 2 == 0 ? 'ag-row-even' : 'ag-row-odd'), this.selectionController.isNodeSelected(this.node) && e.push('ag-row-selected'), this.node.group ? (e.push('ag-row-group'), e.push('ag-row-level-' + this.node.level), !this.node.footer && this.node.expanded && e.push('ag-row-group-expanded'), this.node.footer || this.node.expanded || e.push('ag-row-group-contracted'), this.node.footer && e.push('ag-row-footer')) : this.node.parent ? e.push('ag-row-level-' + (this.node.parent.level + 1)) : e.push('ag-row-level-0');
                            var t = this.gridOptionsWrapper.getRowClass();
                            t && ('function' == typeof t ? console.warn('ag-Grid: rowClass should not be a function, please use getRowClass instead') : 'string' == typeof t ? e.push(t) : Array.isArray(t) && t.forEach(function (t) {
                                e.push(t);
                            }));
                            var i = this.gridOptionsWrapper.getRowClassFunc();
                            if (i) {
                                var o = {
                                        node: this.node,
                                        data: this.node.data,
                                        rowIndex: this.rowIndex,
                                        context: this.gridOptionsWrapper.getContext(),
                                        api: this.gridOptionsWrapper.getApi()
                                    }, n = i(o);
                                n && ('string' == typeof n ? e.push(n) : Array.isArray(n) && n.forEach(function (t) {
                                    e.push(t);
                                }));
                            }
                            this.vBodyRow.addClasses(e), this.pinning && this.vPinnedRow.addClasses(e);
                        }, o;
                    }();
                t.RenderedRow = o;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                function t(e, t) {
                    var o = i(t), r = document.createElementNS(n, 'polygon');
                    return r.setAttribute('points', e), o.appendChild(r), o;
                }
                function i(e) {
                    var t = document.createElementNS(n, 'svg');
                    return e > 0 ? (t.setAttribute('width', e), t.setAttribute('height', e)) : (t.setAttribute('width', '10'), t.setAttribute('height', '10')), t;
                }
                function o(e) {
                    var t = i(), o = document.createElementNS(n, 'circle');
                    return o.setAttribute('cx', '5'), o.setAttribute('cy', '5'), o.setAttribute('r', '5'), o.setAttribute('stroke', 'black'), o.setAttribute('stroke-width', '2'), e ? o.setAttribute('fill', 'black') : o.setAttribute('fill', 'none'), t.appendChild(o), t;
                }
                var n = 'http://www.w3.org/2000/svg', r = function () {
                        function e() {
                        }
                        return e.getInstance = function () {
                            return this.theInstance || (this.theInstance = new e()), this.theInstance;
                        }, e.prototype.createFilterSvg = function () {
                            var e = i(), t = document.createElementNS(n, 'polygon');
                            return t.setAttribute('points', '0,0 4,4 4,10 6,10 6,4 10,0'), t.setAttribute('class', 'ag-header-icon'), e.appendChild(t), e;
                        }, e.prototype.createColumnShowingSvg = function () {
                            return o(!0);
                        }, e.prototype.createColumnHiddenSvg = function () {
                            return o(!1);
                        }, e.prototype.createMenuSvg = function () {
                            var e = document.createElementNS(n, 'svg'), t = '12';
                            return e.setAttribute('width', t), e.setAttribute('height', t), [
                                '0',
                                '5',
                                '10'
                            ].forEach(function (i) {
                                var o = document.createElementNS(n, 'rect');
                                o.setAttribute('y', i), o.setAttribute('width', t), o.setAttribute('height', '2'), o.setAttribute('class', 'ag-header-icon'), e.appendChild(o);
                            }), e;
                        }, e.prototype.createArrowUpSvg = function () {
                            return t('0,10 5,0 10,10');
                        }, e.prototype.createArrowLeftSvg = function () {
                            return t('10,0 0,5 10,10');
                        }, e.prototype.createArrowDownSvg = function () {
                            return t('0,0 5,10 10,0');
                        }, e.prototype.createArrowRightSvg = function () {
                            return t('0,0 10,5 0,10');
                        }, e.prototype.createSmallArrowDownSvg = function () {
                            return t('0,0 3,6 6,0', 6);
                        }, e.prototype.createArrowUpDownSvg = function () {
                            var e = i(), t = document.createElementNS(n, 'polygon');
                            t.setAttribute('points', '0,4 5,0 10,4'), e.appendChild(t);
                            var o = document.createElementNS(n, 'polygon');
                            return o.setAttribute('points', '0,6 5,10 10,6'), e.appendChild(o), e;
                        }, e;
                    }();
                e.SvgFactory = r;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                function t(e, t, r) {
                    function s(e, t) {
                        function i() {
                            u(r, s, t);
                        }
                        var r = p(!0), s = p(!1);
                        e.appendChild(r), e.appendChild(s), r.addEventListener('click', i), s.addEventListener('click', i), e.addEventListener('dblclick', i), l(r, s, t.node.expanded), t.eGridCell && t.eGridCell.addEventListener('keydown', function (e) {
                            o.isKeyPressed(e, n.KEY_ENTER) && (i(), e.preventDefault());
                        });
                    }
                    function l(e, t, i) {
                        o.setVisible(e, !i), o.setVisible(t, i);
                    }
                    function a(e, t, i) {
                        o.useRenderer(e, i, t);
                    }
                    function d(t) {
                        return e.isGroupIncludeFooter() ? t.rowIndex : t.rowIndex + 1;
                    }
                    function u(e, t, i) {
                        i.node.expanded = !i.node.expanded;
                        var o = d(i);
                        i.api.onGroupExpandedOrCollapsed(o), l(e, t, i.node.expanded);
                    }
                    function p(t) {
                        var n;
                        return n = t ? o.createIcon('groupContracted', e, null, i.createArrowRightSvg) : o.createIcon('groupExpanded', e, null, i.createArrowDownSvg), o.addCssClass(n, 'ag-group-expand'), n;
                    }
                    function h(e, t) {
                        var i, n = c(t);
                        if (t.colDef && t.colDef.cellRenderer && t.colDef.cellRenderer.footerValueGetter) {
                            var s = t.colDef.cellRenderer.footerValueGetter, l = o.cloneObject(t);
                            l.value = n, 'function' == typeof s ? i = s(l) : 'string' == typeof s ? i = r.evaluate(s, l) : console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');
                        } else
                            i = 'Total ' + n;
                        var a = document.createTextNode(i);
                        e.appendChild(a);
                    }
                    function c(e) {
                        var t = e.colDef.cellRenderer;
                        if (t && t.keyMap && 'object' == typeof t.keyMap && null !== e.colDef.cellRenderer) {
                            var i = t.keyMap[e.node.key];
                            return i ? i : e.node.key;
                        }
                        return e.node.key;
                    }
                    function g(e, t) {
                        var i = c(t), n = t.api.getColumnDef(t.node.field);
                        n && 'function' == typeof n.cellRenderer ? (t.value = i, o.useRenderer(e, n.cellRenderer, t)) : e.appendChild(document.createTextNode(i));
                        var r = t.colDef.cellRenderer && t.colDef.cellRenderer.suppressCount;
                        !r && t.node.allChildrenCount >= 0 && e.appendChild(document.createTextNode(' (' + t.node.allChildrenCount + ')'));
                    }
                    function f(e, t) {
                        if (t.value) {
                            var i = document.createTextNode(' ' + t.value);
                            e.appendChild(i);
                        }
                    }
                    return function (e) {
                        var i = document.createElement('span'), o = e.node, n = o.group && !o.footer;
                        n && s(i, e);
                        var r = e.colDef && e.colDef.cellRenderer && e.colDef.cellRenderer.checkbox && !o.footer;
                        if (r) {
                            var l = t.createSelectionCheckbox(o, e.rowIndex);
                            i.appendChild(l);
                        }
                        e.colDef && e.colDef.cellRenderer && e.colDef.cellRenderer.innerRenderer ? a(i, e, e.colDef.cellRenderer.innerRenderer) : o.footer ? h(i, e) : o.group ? g(i, e) : f(i, e);
                        var d = e.colDef && e.colDef.cellRenderer && e.colDef.cellRenderer.suppressPadding;
                        if (!d && (o.footer || o.level > 0)) {
                            var u;
                            u = e.colDef && e.colDef.cellRenderer && e.colDef.cellRenderer.padding >= 0 ? e.colDef.cellRenderer.padding : 10;
                            var p = o.level * u;
                            o.footer ? p += 10 : o.group || (p += 5), i.style.paddingLeft = p + 'px';
                        }
                        return i;
                    };
                }
                var i = e.SvgFactory.getInstance(), o = e.Utils, n = e.Constants;
                e.groupCellRendererFactory = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function i() {
                            this.renderedTopFloatingRows = [], this.renderedBottomFloatingRows = [];
                        }
                        return i.prototype.init = function (t, i, o, n, r, s, l, a, d, u, p, h) {
                            this.columnModel = t, this.gridOptionsWrapper = i, this.angularGrid = n, this.selectionRendererFactory = r, this.gridPanel = o, this.$compile = s, this.$scope = l, this.selectionController = a, this.expressionService = d, this.templateService = u, this.valueService = p, this.findAllElements(o), this.eventService = h, this.cellRendererMap = {
                                group: e.groupCellRendererFactory(i, r, d),
                                'default': function (e) {
                                    return e.value;
                                }
                            }, this.renderedRows = {};
                        }, i.prototype.setRowModel = function (e) {
                            this.rowModel = e;
                        }, i.prototype.onIndividualColumnResized = function (e) {
                            var t = e.actualWidth + 'px', i = '.cell-col-' + e.index;
                            this.eParentsOfRows.forEach(function (e) {
                                for (var o = e.querySelectorAll(i), n = 0; n < o.length; n++) {
                                    var r = o[n];
                                    r.style.width = t;
                                }
                            });
                        }, i.prototype.setMainRowWidths = function () {
                            var e = this.columnModel.getBodyContainerWidth() + 'px';
                            this.eAllBodyContainers.forEach(function (t) {
                                for (var i = t.querySelectorAll('.ag-row'), o = 0; o < i.length; o++)
                                    i[o].style.width = e;
                            });
                        }, i.prototype.findAllElements = function (e) {
                            this.eBodyContainer = e.getBodyContainer(), this.ePinnedColsContainer = e.getPinnedColsContainer(), this.eFloatingTopContainer = e.getFloatingTopContainer(), this.eFloatingTopPinnedContainer = e.getPinnedFloatingTop(), this.eFloatingBottomContainer = e.getFloatingBottomContainer(), this.eFloatingBottomPinnedContainer = e.getPinnedFloatingBottom(), this.eBodyViewport = e.getBodyViewport(), this.eParentsOfRows = e.getRowsParent(), this.eAllBodyContainers = [
                                this.eBodyContainer,
                                this.eFloatingBottomContainer,
                                this.eFloatingTopContainer
                            ], this.eAllPinnedContainers = [
                                this.ePinnedColsContainer,
                                this.eFloatingBottomPinnedContainer,
                                this.eFloatingTopPinnedContainer
                            ];
                        }, i.prototype.refreshAllFloatingRows = function () {
                            this.refreshFloatingRows(this.renderedTopFloatingRows, this.gridOptionsWrapper.getFloatingTopRowData(), this.eFloatingTopPinnedContainer, this.eFloatingTopContainer, !0), this.refreshFloatingRows(this.renderedBottomFloatingRows, this.gridOptionsWrapper.getFloatingBottomRowData(), this.eFloatingBottomPinnedContainer, this.eFloatingBottomContainer, !1);
                        }, i.prototype.refreshFloatingRows = function (t, i, o, n, r) {
                            var s = this;
                            t.forEach(function (e) {
                                e.destroy();
                            }), t.length = 0;
                            var l = this.columnModel.getDisplayedColumns();
                            if (l && 0 != l.length) {
                                var a = this.columnModel.getBodyContainerWidth();
                                i && i.forEach(function (i, l) {
                                    var d = {
                                            data: i,
                                            floating: !0,
                                            floatingTop: r,
                                            floatingBottom: !r
                                        }, u = new e.RenderedRow(s.gridOptionsWrapper, s.valueService, s.$scope, s.angularGrid, s.columnModel, s.expressionService, s.cellRendererMap, s.selectionRendererFactory, s.$compile, s.templateService, s.selectionController, s, n, o, d, l, s.eventService);
                                    u.setMainRowWidth(a), t.push(u);
                                });
                            }
                        }, i.prototype.refreshView = function (e) {
                            if (!this.gridOptionsWrapper.isForPrint()) {
                                var t = this.rowModel.getVirtualRowCount(), i = this.gridOptionsWrapper.getRowHeight() * t;
                                this.eBodyContainer.style.height = i + 'px', this.ePinnedColsContainer.style.height = i + 'px';
                            }
                            this.refreshAllVirtualRows(e), this.refreshAllFloatingRows();
                        }, i.prototype.softRefreshView = function () {
                            t.iterateObject(this.renderedRows, function (e, t) {
                                t.softRefresh();
                            });
                        }, i.prototype.refreshRows = function (e) {
                            if (e && 0 != e.length) {
                                var i = [];
                                t.iterateObject(this.renderedRows, function (t, o) {
                                    var n = o.getRowNode();
                                    e.indexOf(n) >= 0 && i.push(t);
                                }), this.removeVirtualRow(i), this.drawVirtualRows();
                            }
                        }, i.prototype.refreshCells = function (e, i) {
                            e && 0 != e.length && t.iterateObject(this.renderedRows, function (t, o) {
                                var n = o.getRowNode();
                                e.indexOf(n) >= 0 && o.refreshCells(i);
                            });
                        }, i.prototype.rowDataChanged = function (e) {
                            var t = [], i = this.renderedRows;
                            Object.keys(i).forEach(function (o) {
                                var n = i[o];
                                n.isDataInList(e) && t.push(o);
                            }), this.removeVirtualRow(t), this.drawVirtualRows();
                        }, i.prototype.refreshAllVirtualRows = function (e) {
                            var t = Object.keys(this.renderedRows);
                            this.removeVirtualRow(t, e), this.drawVirtualRows();
                        }, i.prototype.refreshGroupRows = function () {
                            var e = [], t = this;
                            Object.keys(this.renderedRows).forEach(function (i) {
                                var o = t.renderedRows[i];
                                o.isGroup() && e.push(i);
                            }), this.removeVirtualRow(e), this.ensureRowsRendered();
                        }, i.prototype.removeVirtualRow = function (e, t) {
                            var i = this, o = 'number' == typeof t ? t : -1;
                            e.forEach(function (e) {
                                e >= o && (i.unbindVirtualRow(e), i.focusedCell && i.focusedCell.rowIndex == e && (i.focusedCell = null));
                            });
                        }, i.prototype.unbindVirtualRow = function (t) {
                            var i = this.renderedRows[t];
                            i.destroy();
                            var o = {
                                node: i.getRowNode(),
                                rowIndex: t
                            };
                            this.eventService.dispatchEvent(e.Events.EVENT_VIRTUAL_ROW_REMOVED, o), this.angularGrid.onVirtualRowRemoved(t), delete this.renderedRows[t];
                        }, i.prototype.drawVirtualRows = function () {
                            var e, t, i = this.rowModel.getVirtualRowCount();
                            if (this.gridOptionsWrapper.isForPrint())
                                e = 0, t = i;
                            else {
                                var o = this.eBodyViewport.scrollTop, n = o + this.eBodyViewport.offsetHeight;
                                e = Math.floor(o / this.gridOptionsWrapper.getRowHeight()), t = Math.floor(n / this.gridOptionsWrapper.getRowHeight());
                                var r = this.gridOptionsWrapper.getRowBuffer();
                                e -= r, t += r, 0 > e && (e = 0), t > i - 1 && (t = i - 1);
                            }
                            this.firstVirtualRenderedRow = e, this.lastVirtualRenderedRow = t, this.ensureRowsRendered();
                        }, i.prototype.getFirstVirtualRenderedRow = function () {
                            return this.firstVirtualRenderedRow;
                        }, i.prototype.getLastVirtualRenderedRow = function () {
                            return this.lastVirtualRenderedRow;
                        }, i.prototype.ensureRowsRendered = function () {
                            for (var e = this.columnModel.getBodyContainerWidth(), t = this, i = Object.keys(this.renderedRows), o = this.firstVirtualRenderedRow; o <= this.lastVirtualRenderedRow; o++)
                                if (i.indexOf(o.toString()) >= 0)
                                    i.splice(i.indexOf(o.toString()), 1);
                                else {
                                    var n = this.rowModel.getVirtualRow(o);
                                    n && t.insertRow(n, o, e);
                                }
                            this.removeVirtualRow(i), this.gridOptionsWrapper.isAngularCompileRows() && setTimeout(function () {
                                t.$scope.$apply();
                            }, 0);
                        }, i.prototype.insertRow = function (t, i, o) {
                            var n = this.columnModel.getDisplayedColumns();
                            if (n && 0 != n.length) {
                                var r = new e.RenderedRow(this.gridOptionsWrapper, this.valueService, this.$scope, this.angularGrid, this.columnModel, this.expressionService, this.cellRendererMap, this.selectionRendererFactory, this.$compile, this.templateService, this.selectionController, this, this.eBodyContainer, this.ePinnedColsContainer, t, i, this.eventService);
                                r.setMainRowWidth(o), this.renderedRows[i] = r;
                            }
                        }, i.prototype.getRenderedNodes = function () {
                            var e = this.renderedRows;
                            return Object.keys(e).map(function (t) {
                                return e[t].getRowNode();
                            });
                        }, i.prototype.getIndexOfRenderedNode = function (e) {
                            for (var t = this.renderedRows, i = Object.keys(t), o = 0; o < i.length; o++) {
                                var n = i[o];
                                if (t[n].getRowNode() === e)
                                    return t[n].getRowIndex();
                            }
                            return -1;
                        }, i.prototype.navigateToNextCell = function (e, t, i) {
                            for (var o, n, r = {
                                        rowIndex: t,
                                        column: i
                                    }; !n;) {
                                if (r = this.getNextCellToFocus(e, r), !r)
                                    return;
                                o = this.renderedRows[r.rowIndex], n = o.getCellForCol(r.column);
                            }
                            this.gridPanel.ensureIndexVisible(o.getRowIndex()), this.focusCell(n, r.rowIndex, r.column.index, r.column.colDef, !0);
                        }, i.prototype.getNextCellToFocus = function (t, i) {
                            var o, n, r = i.rowIndex, s = i.column;
                            switch (t) {
                            case e.Constants.KEY_UP:
                                if (r === this.firstVirtualRenderedRow)
                                    return null;
                                o = r - 1, n = s;
                                break;
                            case e.Constants.KEY_DOWN:
                                if (r === this.lastVirtualRenderedRow)
                                    return null;
                                o = r + 1, n = s;
                                break;
                            case e.Constants.KEY_RIGHT:
                                var l = this.columnModel.getVisibleColAfter(s);
                                if (!l)
                                    return null;
                                o = r, n = l;
                                break;
                            case e.Constants.KEY_LEFT:
                                var a = this.columnModel.getVisibleColBefore(s);
                                if (!a)
                                    return null;
                                o = r, n = a;
                            }
                            return {
                                rowIndex: o,
                                column: n
                            };
                        }, i.prototype.onRowSelected = function (e, t) {
                            this.renderedRows[e] && this.renderedRows[e].onRowSelected(t);
                        }, i.prototype.focusCell = function (i, o, n, r, s) {
                            this.gridOptionsWrapper.isSuppressCellSelection() || (this.eParentsOfRows.forEach(function (e) {
                                t.querySelectorAll_replaceCssClass(e, '.ag-cell-focus', 'ag-cell-focus', 'ag-cell-no-focus');
                                var i = '[row="' + o + '"] [col="' + n + '"]';
                                t.querySelectorAll_replaceCssClass(e, i, 'ag-cell-no-focus', 'ag-cell-focus');
                            }), this.focusedCell = {
                                rowIndex: o,
                                colIndex: n,
                                node: this.rowModel.getVirtualRow(o),
                                colDef: r
                            }, s && i.focus(), this.eventService.dispatchEvent(e.Events.EVENT_CELL_FOCUSED, this.focusedCell));
                        }, i.prototype.getFocusedCell = function () {
                            return this.focusedCell;
                        }, i.prototype.setFocusedCell = function (e, t) {
                            var i = this.renderedRows[e], o = this.columnModel.getDisplayedColumns()[t];
                            if (i && o) {
                                var n = i.getCellForCol(o);
                                this.focusCell(n, e, t, o.colDef, !0);
                            }
                        }, i.prototype.startEditingNextCell = function (e, t, i) {
                            for (var o = this.firstVirtualRenderedRow, n = this.lastVirtualRenderedRow, r = e, s = this.columnModel.getDisplayedColumns(), l = t;;) {
                                var a = s.indexOf(l);
                                if (i) {
                                    if (l = s[a - 1], l || (l = s[s.length - 1], r--), o > r)
                                        return;
                                } else if (l = s[a + 1], l || (l = s[0], r++), r > n)
                                    return;
                                var d = this.renderedRows[r], u = d.getRenderedCellForColumn(l);
                                if (u.isCellEditable())
                                    return u.startEditing(), void u.focusCell(!1);
                            }
                        }, i;
                    }();
                e.RowRenderer = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = 0, o = 1, n = 2, r = 3, s = function () {
                        function s() {
                        }
                        return s.prototype.init = function (e, t, i, o, n, r) {
                            this.eParentsOfRows = t.getRowsParent(), this.angularGrid = e, this.gridOptionsWrapper = i, this.$scope = o, this.rowRenderer = n, this.eventService = r, this.initSelectedNodesById(), this.selectedRows = [];
                        }, s.prototype.initSelectedNodesById = function () {
                            this.selectedNodesById = {};
                        }, s.prototype.getSelectedNodesById = function () {
                            return this.selectedNodesById;
                        }, s.prototype.getSelectedRows = function () {
                            return this.selectedRows;
                        }, s.prototype.getSelectedNodes = function () {
                            for (var e = [], t = Object.keys(this.selectedNodesById), i = 0; i < t.length; i++) {
                                var o = t[i], n = this.selectedNodesById[o];
                                e.push(n);
                            }
                            return e;
                        }, s.prototype.getBestCostNodeSelection = function () {
                            function e(t) {
                                for (var n = 0, r = t.length; r > n; n++) {
                                    var s = t[n];
                                    o.isNodeSelected(s) ? i.push(s) : s.group && s.children && e(s.children);
                                }
                            }
                            if ('function' != typeof this.rowModel.getTopLevelNodes)
                                throw 'selectAll not available when rows are on the server';
                            var t = this.rowModel.getTopLevelNodes(), i = [], o = this;
                            return e(t), i;
                        }, s.prototype.setRowModel = function (e) {
                            this.rowModel = e;
                        }, s.prototype.deselectAll = function () {
                            this.initSelectedNodesById(), this.syncSelectedRowsAndCallListener();
                        }, s.prototype.selectAll = function () {
                            function e(o) {
                                if (o)
                                    for (var n = 0; n < o.length; n++) {
                                        var r = o[n];
                                        r.group ? (e(r.children), i && (t[r.id] = r)) : t[r.id] = r;
                                    }
                            }
                            if ('function' != typeof this.rowModel.getTopLevelNodes)
                                throw 'selectAll not available when rows are on the server';
                            var t = this.selectedNodesById, i = !this.gridOptionsWrapper.isGroupSelectsChildren(), o = this.rowModel.getTopLevelNodes();
                            e(o), this.syncSelectedRowsAndCallListener();
                        }, s.prototype.selectNode = function (e, t, i) {
                            var o, n = this.gridOptionsWrapper.isRowSelectionMulti() && t;
                            o = e.footer ? e.sibling : e;
                            var r = !1, s = !1;
                            n || (r = this.doWorkOfDeselectAllNodes(null, i)), s = this.gridOptionsWrapper.isGroupSelectsChildren() && o.group ? this.recursivelySelectAllChildren(o) : this.doWorkOfSelectNode(o, i), (r || s) && this.syncSelectedRowsAndCallListener(i), this.updateGroupParentsIfNeeded();
                        }, s.prototype.recursivelySelectAllChildren = function (e, t) {
                            var i = !1;
                            if (e.children)
                                for (var o = 0; o < e.children.length; o++) {
                                    var n = e.children[o];
                                    n.group ? this.recursivelySelectAllChildren(n) && (i = !0) : this.doWorkOfSelectNode(n, t) && (i = !0);
                                }
                            return i;
                        }, s.prototype.recursivelyDeselectAllChildren = function (e, t) {
                            if (e.children)
                                for (var i = 0; i < e.children.length; i++) {
                                    var o = e.children[i];
                                    o.group ? this.recursivelyDeselectAllChildren(o, t) : this.deselectRealNode(o, t);
                                }
                        }, s.prototype.doWorkOfSelectNode = function (t, i) {
                            if (this.selectedNodesById[t.id])
                                return !1;
                            if (this.selectedNodesById[t.id] = t, this.addCssClassForNode_andInformVirtualRowListener(t), t.group && t.expanded && t.sibling && this.addCssClassForNode_andInformVirtualRowListener(t.sibling), !i) {
                                var o = { node: t };
                                this.eventService.dispatchEvent(e.Events.EVENT_ROW_SELECTED, o);
                            }
                            return !0;
                        }, s.prototype.addCssClassForNode_andInformVirtualRowListener = function (e) {
                            var i = this.rowRenderer.getIndexOfRenderedNode(e);
                            i >= 0 && (this.eParentsOfRows.forEach(function (e) {
                                t.querySelectorAll_addCssClass(e, '[row="' + i + '"]', 'ag-row-selected');
                            }), this.angularGrid.onVirtualRowSelected(i, !0));
                        }, s.prototype.doWorkOfDeselectAllNodes = function (e, t) {
                            for (var i, o = Object.keys(this.selectedNodesById), n = 0; n < o.length; n++) {
                                var r = o[n], s = this.selectedNodesById[r];
                                s !== e && (this.deselectRealNode(s, t), i = !0);
                            }
                            return i;
                        }, s.prototype.deselectRealNode = function (t, i) {
                            if (this.removeCssClassForNode(t), t.group && t.expanded && t.sibling && this.removeCssClassForNode(t.sibling), delete this.selectedNodesById[t.id], !i) {
                                var o = { node: t };
                                this.eventService.dispatchEvent(e.Events.EVENT_ROW_DESELECTED, o);
                            }
                        }, s.prototype.removeCssClassForNode = function (e) {
                            var i = this.rowRenderer.getIndexOfRenderedNode(e);
                            i >= 0 && (this.eParentsOfRows.forEach(function (e) {
                                t.querySelectorAll_removeCssClass(e, '[row="' + i + '"]', 'ag-row-selected');
                            }), this.angularGrid.onVirtualRowSelected(i, !1));
                        }, s.prototype.deselectIndex = function (e, t) {
                            void 0 === t && (t = !1);
                            var i = this.rowModel.getVirtualRow(e);
                            this.deselectNode(i, t);
                        }, s.prototype.deselectNode = function (e, t) {
                            void 0 === t && (t = !1), e && (this.gridOptionsWrapper.isGroupSelectsChildren() && e.group ? this.recursivelyDeselectAllChildren(e, t) : this.deselectRealNode(e, t)), this.syncSelectedRowsAndCallListener(), this.updateGroupParentsIfNeeded();
                        }, s.prototype.selectIndex = function (e, t, i) {
                            void 0 === i && (i = !1);
                            var o = this.rowModel.getVirtualRow(e);
                            this.selectNode(o, t, i);
                        }, s.prototype.syncSelectedRowsAndCallListener = function (t) {
                            var i = this.selectedRows, o = i.length;
                            i.length = 0;
                            for (var n = Object.keys(this.selectedNodesById), r = 0; r < n.length; r++)
                                if (void 0 !== this.selectedNodesById[n[r]]) {
                                    var s = this.selectedNodesById[n[r]];
                                    i.push(s.data);
                                }
                            var l = 0 === o && 0 === i.length;
                            if (!l && !t) {
                                var a = {
                                    selectedNodesById: this.selectedNodesById,
                                    selectedRows: this.selectedRows
                                };
                                this.eventService.dispatchEvent(e.Events.EVENT_SELECTION_CHANGED, a);
                            }
                            var d = this;
                            this.$scope && setTimeout(function () {
                                d.$scope.$apply();
                            }, 0);
                        }, s.prototype.recursivelyCheckIfSelected = function (e) {
                            var t = !1, s = !1;
                            if (e.children)
                                for (var l = 0; l < e.children.length; l++) {
                                    var a, d = e.children[l];
                                    if (d.group)
                                        switch (a = this.recursivelyCheckIfSelected(d)) {
                                        case i:
                                            t = !0;
                                            break;
                                        case o:
                                            s = !0;
                                            break;
                                        case n:
                                            t = !0, s = !0;
                                        }
                                    else
                                        this.isNodeSelected(d) ? t = !0 : s = !0;
                                    if (t && s)
                                        return n;
                                }
                            return t ? i : s ? o : r;
                        }, s.prototype.isNodeSelected = function (e) {
                            if (!this.gridOptionsWrapper.isGroupSelectsChildren() || !e.group)
                                return void 0 !== this.selectedNodesById[e.id];
                            var t = this.recursivelyCheckIfSelected(e);
                            switch (t) {
                            case i:
                                return !0;
                            case o:
                                return !1;
                            default:
                                return;
                            }
                        }, s.prototype.updateGroupParentsIfNeeded = function () {
                            if (this.gridOptionsWrapper.isGroupSelectsChildren())
                                for (var e = this.rowRenderer.getFirstVirtualRenderedRow(), i = this.rowRenderer.getLastVirtualRenderedRow(), o = e; i >= o; o++) {
                                    var n = this.rowModel.getVirtualRow(o);
                                    if (n.group) {
                                        var r = this.isNodeSelected(n);
                                        this.angularGrid.onVirtualRowSelected(o, r), this.eParentsOfRows.forEach(function (e) {
                                            r ? t.querySelectorAll_addCssClass(e, '[row="' + o + '"]', 'ag-row-selected') : t.querySelectorAll_removeCssClass(e, '[row="' + o + '"]', 'ag-row-selected');
                                        });
                                    }
                                }
                        }, s;
                    }();
                e.SelectionController = s;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function e(e) {
                            this.eRoot = e;
                        }
                        return e.prototype.getERoot = function () {
                            return this.eRoot;
                        }, e.prototype.destroy = function () {
                        }, e.prototype.refreshFilterIcon = function () {
                        }, e.prototype.refreshSortIcon = function () {
                        }, e.prototype.onDragStart = function () {
                        }, e.prototype.onDragging = function (e, t) {
                        }, e.prototype.onIndividualColumnResized = function (e) {
                        }, e.prototype.addDragHandler = function (e) {
                            var t = this;
                            e.addEventListener('mousedown', function (e) {
                                t.onDragStart(), t.eRoot.style.cursor = 'col-resize', t.dragStartX = e.clientX;
                                var i = {}, o = 0;
                                i.mousemove = function (e) {
                                    var i = e.clientX;
                                    o = i - t.dragStartX, t.onDragging(o, !1);
                                }, i.mouseup = function () {
                                    t.stopDragging(i, o);
                                }, i.mouseleave = function () {
                                    t.stopDragging(i, o);
                                }, t.eRoot.addEventListener('mousemove', i.mousemove), t.eRoot.addEventListener('mouseup', i.mouseup), t.eRoot.addEventListener('mouseleave', i.mouseleave);
                            });
                        }, e.prototype.stopDragging = function (e, i) {
                            this.eRoot.style.cursor = '';
                            var o = this;
                            t.iterateObject(e, function (e, t) {
                                o.eRoot.removeEventListener(e, t);
                            }), o.onDragging(i, !0);
                        }, e;
                    }();
                e.RenderedHeaderElement = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = e.Constants, o = e.SvgFactory.getInstance(), n = function (e) {
                        function n(t, i, o, n, r, s, l, a, d) {
                            e.call(this, d), this.column = t, this.parentGroup = i, this.gridOptionsWrapper = o, this.parentScope = n, this.filterManager = r, this.columnController = s, this.$compile = l, this.angularGrid = a, this.setupComponents();
                        }
                        return __extends(n, e), n.prototype.getGui = function () {
                            return this.eHeaderCell;
                        }, n.prototype.destroy = function () {
                            this.childScope && this.childScope.$destroy();
                        }, n.prototype.createScope = function () {
                            this.gridOptionsWrapper.isAngularCompileHeaders() && (this.childScope = this.parentScope.$new(), this.childScope.colDef = this.column.colDef, this.childScope.colIndex = this.column.index, this.childScope.colDefWrapper = this.column);
                        }, n.prototype.addAttributes = function () {
                            this.eHeaderCell.setAttribute('col', void 0 !== this.column.index && null !== this.column.index ? this.column.index.toString() : ''), this.eHeaderCell.setAttribute('colId', this.column.colId);
                        }, n.prototype.addClasses = function () {
                            t.addCssClass(this.eHeaderCell, 'ag-header-cell'), this.gridOptionsWrapper.isGroupHeaders() ? t.addCssClass(this.eHeaderCell, 'ag-header-cell-grouped') : t.addCssClass(this.eHeaderCell, 'ag-header-cell-not-grouped');
                        }, n.prototype.addMenu = function () {
                            var e = this.gridOptionsWrapper.isEnableFilter() && !this.column.colDef.suppressMenu;
                            if (e) {
                                var i = t.createIcon('menu', this.gridOptionsWrapper, this.column, o.createMenuSvg);
                                t.addCssClass(i, 'ag-header-icon'), i.setAttribute('class', 'ag-header-cell-menu-button');
                                var n = this;
                                i.onclick = function () {
                                    n.filterManager.showFilter(n.column, this);
                                }, this.eHeaderCell.appendChild(i), this.gridOptionsWrapper.isSuppressMenuHide() || (i.style.opacity = '0', this.eHeaderCell.onmouseenter = function () {
                                    i.style.opacity = '1';
                                }, this.eHeaderCell.onmouseleave = function () {
                                    i.style.opacity = '0';
                                }), i.style.transition = 'opacity 0.5s, border 0.2s';
                                var r = i.style;
                                r['-webkit-transition'] = 'opacity 0.5s, border 0.2s';
                            }
                        }, n.prototype.addSortIcons = function (e) {
                            var i = this.gridOptionsWrapper.isEnableSorting() && !this.column.colDef.suppressSorting;
                            i && (this.eSortAsc = t.createIcon('sortAscending', this.gridOptionsWrapper, this.column, o.createArrowUpSvg), this.eSortDesc = t.createIcon('sortDescending', this.gridOptionsWrapper, this.column, o.createArrowDownSvg), t.addCssClass(this.eSortAsc, 'ag-header-icon ag-sort-ascending-icon'), t.addCssClass(this.eSortDesc, 'ag-header-icon ag-sort-descending-icon'), e.appendChild(this.eSortAsc), e.appendChild(this.eSortDesc), (this.column.colDef.unSortIcon || this.gridOptionsWrapper.isUnSortIcon()) && (this.eSortNone = t.createIcon('sortUnSort', this.gridOptionsWrapper, this.column, o.createArrowUpDownSvg), t.addCssClass(this.eSortNone, 'ag-header-icon ag-sort-none-icon'), e.appendChild(this.eSortNone)), this.eSortAsc.style.display = 'none', this.eSortDesc.style.display = 'none', this.addSortHandling(e));
                        }, n.prototype.setupComponents = function () {
                            if (this.eHeaderCell = document.createElement('div'), this.createScope(), this.addClasses(), this.addAttributes(), this.addHeaderClassesFromCollDef(), this.column.colDef.headerTooltip && (this.eHeaderCell.title = this.column.colDef.headerTooltip), this.gridOptionsWrapper.isEnableColResize() && !this.column.colDef.suppressResize) {
                                var e = document.createElement('div');
                                e.className = 'ag-header-cell-resize', this.eHeaderCell.appendChild(e), this.addDragHandler(e);
                            }
                            this.addMenu();
                            var i = document.createElement('div');
                            i.className = 'ag-header-cell-label', this.addSortIcons(i), this.eFilterIcon = t.createIcon('filter', this.gridOptionsWrapper, this.column, o.createFilterSvg), t.addCssClass(this.eFilterIcon, 'ag-header-icon'), i.appendChild(this.eFilterIcon);
                            var n;
                            this.column.colDef.headerCellRenderer ? n = this.column.colDef.headerCellRenderer : this.gridOptionsWrapper.getHeaderCellRenderer() && (n = this.gridOptionsWrapper.getHeaderCellRenderer());
                            var r = this.columnController.getDisplayNameForCol(this.column);
                            if (n)
                                this.useRenderer(r, n, i);
                            else {
                                var s = document.createElement('span');
                                s.className = 'ag-header-cell-text', s.innerHTML = r, i.appendChild(s);
                            }
                            this.eHeaderCell.appendChild(i), this.eHeaderCell.style.width = t.formatWidth(this.column.actualWidth), this.refreshFilterIcon(), this.refreshSortIcon();
                        }, n.prototype.useRenderer = function (e, i, o) {
                            var n, r = {
                                    colDef: this.column.colDef,
                                    $scope: this.childScope,
                                    context: this.gridOptionsWrapper.getContext(),
                                    value: e,
                                    api: this.gridOptionsWrapper.getApi(),
                                    eHeaderCell: this.eHeaderCell
                                }, s = i(r);
                            if (t.isNodeOrElement(s))
                                n = s;
                            else {
                                var l = document.createElement('span');
                                l.innerHTML = s, n = l;
                            }
                            if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
                                var a = this.$compile(n)(this.childScope)[0];
                                o.appendChild(a);
                            } else
                                o.appendChild(n);
                        }, n.prototype.refreshFilterIcon = function () {
                            var e = this.filterManager.isFilterPresentForCol(this.column.colId);
                            e ? (t.addCssClass(this.eHeaderCell, 'ag-header-cell-filtered'), this.eFilterIcon.style.display = 'inline') : (t.removeCssClass(this.eHeaderCell, 'ag-header-cell-filtered'), this.eFilterIcon.style.display = 'none');
                        }, n.prototype.refreshSortIcon = function () {
                            var e = this.column.sort === i.ASC, o = this.column.sort === i.DESC, n = this.column.sort !== i.DESC && this.column.sort !== i.ASC;
                            this.eSortAsc && t.setVisible(this.eSortAsc, e), this.eSortDesc && t.setVisible(this.eSortDesc, o), this.eSortNone && t.setVisible(this.eSortNone, n);
                        }, n.prototype.getNextSortDirection = function () {
                            var e;
                            if (e = this.column.colDef.sortingOrder ? this.column.colDef.sortingOrder : this.gridOptionsWrapper.getSortingOrder() ? this.gridOptionsWrapper.getSortingOrder() : n.DEFAULT_SORTING_ORDER, !Array.isArray(e) || e.length <= 0)
                                return void console.warn('ag-grid: sortingOrder must be an array with at least one element, currently it\'s ' + e);
                            var t, i = e.indexOf(this.column.sort), o = 0 > i, r = i == e.length - 1;
                            return t = o || r ? e[0] : e[i + 1], n.DEFAULT_SORTING_ORDER.indexOf(t) < 0 ? (console.warn('ag-grid: invalid sort type ' + t), null) : t;
                        }, n.prototype.addSortHandling = function (e) {
                            var t = this;
                            e.addEventListener('click', function (e) {
                                t.column.sort = t.getNextSortDirection(), t.column.sort ? t.column.sortedAt = new Date().valueOf() : t.column.sortedAt = null;
                                var i = !t.gridOptionsWrapper.isSuppressMultiSort() && e.shiftKey;
                                i || t.columnController.getAllColumns().forEach(function (e) {
                                    e !== t.column && (e.sort = null);
                                }), t.angularGrid.onSortingChanged();
                            });
                        }, n.prototype.onDragStart = function () {
                            this.startWidth = this.column.actualWidth;
                        }, n.prototype.onDragging = function (e, t) {
                            var i = this.startWidth + e;
                            this.columnController.setColumnWidth(this.column, i, t);
                        }, n.prototype.onIndividualColumnResized = function (e) {
                            if (this.column === e) {
                                var t = e.actualWidth + 'px';
                                this.eHeaderCell.style.width = t;
                            }
                        }, n.prototype.addHeaderClassesFromCollDef = function () {
                            var e = this;
                            if (this.column.colDef.headerClass) {
                                var i;
                                if ('function' == typeof this.column.colDef.headerClass) {
                                    var o = {
                                            colDef: this.column.colDef,
                                            $scope: this.childScope,
                                            context: this.gridOptionsWrapper.getContext(),
                                            api: this.gridOptionsWrapper.getApi()
                                        }, n = this.column.colDef.headerClass;
                                    i = n(o);
                                } else
                                    i = this.column.colDef.headerClass;
                                'string' == typeof i ? t.addCssClass(this.eHeaderCell, i) : Array.isArray(i) && i.forEach(function (i) {
                                    t.addCssClass(e.eHeaderCell, i);
                                });
                            }
                        }, n.DEFAULT_SORTING_ORDER = [
                            i.ASC,
                            i.DESC,
                            null
                        ], n;
                    }(e.RenderedHeaderElement);
                e.RenderedHeaderCell = n;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = e.Constants, o = e.SvgFactory.getInstance(), n = function (n) {
                        function r(e, t, i, o, r, s, l, a) {
                            n.call(this, o), this.children = [], this.columnController = i, this.columnGroup = e, this.gridOptionsWrapper = t, this.parentScope = s, this.filterManager = l, this.$compile = a, this.angularGrid = r, this.setupComponents();
                        }
                        return __extends(r, n), r.prototype.getGui = function () {
                            return this.eHeaderGroup;
                        }, r.prototype.destroy = function () {
                            this.children.forEach(function (e) {
                                e.destroy();
                            });
                        }, r.prototype.refreshFilterIcon = function () {
                            this.children.forEach(function (e) {
                                e.refreshFilterIcon();
                            });
                        }, r.prototype.refreshSortIcon = function () {
                            this.children.forEach(function (e) {
                                e.refreshSortIcon();
                            });
                        }, r.prototype.onIndividualColumnResized = function (e) {
                            this.isColumnInOurDisplayedGroup(e) && (this.children.forEach(function (t) {
                                t.onIndividualColumnResized(e);
                            }), this.setWidthOfGroupHeaderCell());
                        }, r.prototype.setupComponents = function () {
                            var t = this;
                            this.eHeaderGroup = document.createElement('div'), this.eHeaderGroup.className = 'ag-header-group', this.eHeaderGroupCell = document.createElement('div');
                            var i = ['ag-header-group-cell'];
                            this.columnGroup.name ? i.push('ag-header-group-cell-with-group') : i.push('ag-header-group-cell-no-group'), this.eHeaderGroupCell.className = i.join(' '), this.gridOptionsWrapper.isEnableColResize() && (this.eHeaderCellResize = document.createElement('div'), this.eHeaderCellResize.className = 'ag-header-cell-resize', this.eHeaderGroupCell.appendChild(this.eHeaderCellResize), this.addDragHandler(this.eHeaderCellResize));
                            var o = this.columnGroup.name;
                            if (o && '' !== o) {
                                var n = document.createElement('div');
                                n.className = 'ag-header-group-cell-label', this.eHeaderGroupCell.appendChild(n);
                                var r = document.createElement('span');
                                r.className = 'ag-header-group-text', r.innerHTML = o, n.appendChild(r), this.columnGroup.expandable && this.addGroupExpandIcon(n);
                            }
                            this.eHeaderGroup.appendChild(this.eHeaderGroupCell), this.columnGroup.displayedColumns.forEach(function (i) {
                                var o = new e.RenderedHeaderCell(i, t, t.gridOptionsWrapper, t.parentScope, t.filterManager, t.columnController, t.$compile, t.angularGrid, t.getERoot());
                                t.children.push(o), t.eHeaderGroup.appendChild(o.getGui());
                            }), this.setWidthOfGroupHeaderCell();
                        }, r.prototype.isColumnInOurDisplayedGroup = function (e) {
                            return this.columnGroup.displayedColumns.indexOf(e) >= 0;
                        }, r.prototype.setWidthOfGroupHeaderCell = function () {
                            this.eHeaderGroupCell.style.width = t.formatWidth(this.columnGroup.actualWidth);
                        }, r.prototype.addGroupExpandIcon = function (e) {
                            var i;
                            i = this.columnGroup.expanded ? t.createIcon('headerGroupOpened', this.gridOptionsWrapper, null, o.createArrowLeftSvg) : t.createIcon('headerGroupClosed', this.gridOptionsWrapper, null, o.createArrowRightSvg), i.className = 'ag-header-expand-icon', e.appendChild(i);
                            var n = this;
                            i.onclick = function () {
                                var e = !n.columnGroup.expanded;
                                n.columnController.columnGroupOpened(n.columnGroup, e);
                            };
                        }, r.prototype.onDragStart = function () {
                            var e = this;
                            this.groupWidthStart = this.columnGroup.actualWidth, this.childrenWidthStarts = [], this.columnGroup.displayedColumns.forEach(function (t) {
                                e.childrenWidthStarts.push(t.actualWidth);
                            }), this.minWidth = this.columnGroup.getMinimumWidth();
                        }, r.prototype.onDragging = function (e, t) {
                            var o = this, n = this.groupWidthStart + e;
                            n < this.minWidth && (n = this.minWidth);
                            var r = n / this.groupWidthStart, s = n, l = this.columnGroup.displayedColumns;
                            l.forEach(function (e, n) {
                                var a, d = n !== l.length - 1;
                                if (d) {
                                    var u = o.childrenWidthStarts[n];
                                    a = u * r, a < i.MIN_COL_WIDTH && (a = i.MIN_COL_WIDTH), s -= a;
                                } else
                                    a = s;
                                o.columnController.setColumnWidth(e, a, t);
                            });
                        }, r;
                    }(e.RenderedHeaderElement);
                e.RenderedHeaderGroupCell = n;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function i() {
                            this.headerElements = [];
                        }
                        return i.prototype.init = function (e, t, i, o, n, r, s) {
                            this.gridOptionsWrapper = e, this.columnController = t, this.angularGrid = o, this.filterManager = n, this.$scope = r, this.$compile = s, this.findAllElements(i);
                        }, i.prototype.findAllElements = function (e) {
                            this.ePinnedHeader = e.getPinnedHeader(), this.eHeaderContainer = e.getHeaderContainer(), this.eRoot = e.getRoot();
                        }, i.prototype.refreshHeader = function () {
                            t.removeAllChildren(this.ePinnedHeader), t.removeAllChildren(this.eHeaderContainer), this.headerElements.forEach(function (e) {
                                e.destroy();
                            }), this.headerElements = [], this.gridOptionsWrapper.isGroupHeaders() ? this.insertHeadersWithGrouping() : this.insertHeadersWithoutGrouping();
                        }, i.prototype.insertHeadersWithGrouping = function () {
                            var t = this, i = this.columnController.getHeaderGroups();
                            i.forEach(function (i) {
                                var o = new e.RenderedHeaderGroupCell(i, t.gridOptionsWrapper, t.columnController, t.eRoot, t.angularGrid, t.$scope, t.filterManager, t.$compile);
                                t.headerElements.push(o);
                                var n = i.pinned ? t.ePinnedHeader : t.eHeaderContainer;
                                n.appendChild(o.getGui());
                            });
                        }, i.prototype.insertHeadersWithoutGrouping = function () {
                            var t = this;
                            this.columnController.getDisplayedColumns().forEach(function (i) {
                                var o = new e.RenderedHeaderCell(i, null, t.gridOptionsWrapper, t.$scope, t.filterManager, t.columnController, t.$compile, t.angularGrid, t.eRoot);
                                t.headerElements.push(o);
                                var n = i.pinned ? t.ePinnedHeader : t.eHeaderContainer;
                                n.appendChild(o.getGui());
                            });
                        }, i.prototype.updateSortIcons = function () {
                            this.headerElements.forEach(function (e) {
                                e.refreshSortIcon();
                            });
                        }, i.prototype.updateFilterIcons = function () {
                            this.headerElements.forEach(function (e) {
                                e.refreshFilterIcon();
                            });
                        }, i.prototype.onIndividualColumnResized = function (e) {
                            this.headerElements.forEach(function (t) {
                                t.onIndividualColumnResized(e);
                            });
                        }, i;
                    }();
                e.HeaderRenderer = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                    }
                    return e.prototype.init = function (e) {
                        this.valueService = e;
                    }, e.prototype.group = function (e, t, i) {
                        var o = {
                                level: -1,
                                children: [],
                                _childrenMap: {}
                            }, n = [];
                        n.push(o);
                        var r, s, l, a, d, u, p, h = t.length - 1, c = -1;
                        for (r = 0; r < e.length; r++)
                            for (l = e[r], a = l.data, l.level = h + 1, s = 0; s < t.length; s++) {
                                var g = t[s];
                                u = this.valueService.getValue(g.colDef, a, l), 0 === s && (d = o), p = d._childrenMap[u], p || (p = {
                                    group: !0,
                                    field: g.colId,
                                    id: c--,
                                    key: u,
                                    expanded: this.isExpanded(i, s),
                                    children: [],
                                    parent: d === o ? null : d,
                                    allChildrenCount: 0,
                                    level: d.level + 1,
                                    _childrenMap: {}
                                }, d._childrenMap[u] = p, d.children.push(p), n.push(p)), p.allChildrenCount++, s == h ? (l.parent = p === o ? null : p, p.children.push(l)) : d = p;
                            }
                        for (r = 0; r < n.length; r++)
                            delete n[r]._childrenMap;
                        return o.children;
                    }, e.prototype.isExpanded = function (e, t) {
                        return 'number' == typeof e ? e > t : e === !0 || 'true' === e;
                    }, e;
                }();
                e.GroupCreator = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t, i = e.Utils, o = e.Constants;
                !function (e) {
                    e[e.Normal = 0] = 'Normal', e[e.AfterFilter = 1] = 'AfterFilter', e[e.AfterFilterAndSort = 2] = 'AfterFilterAndSort';
                }(t || (t = {}));
                var n = function () {
                    function n() {
                        this.createModel();
                    }
                    return n.prototype.init = function (e, t, i, o, n, r, s, l) {
                        this.gridOptionsWrapper = e, this.columnController = t, this.angularGrid = i, this.filterManager = o, this.$scope = n, this.groupCreator = r, this.valueService = s, this.eventService = l, this.allRows = null, this.rowsAfterGroup = null, this.rowsAfterFilter = null, this.rowsAfterSort = null, this.rowsAfterMap = null;
                    }, n.prototype.createModel = function () {
                        var e = this;
                        this.model = {
                            getTopLevelNodes: function () {
                                return e.rowsAfterGroup;
                            },
                            getVirtualRow: function (t) {
                                return e.rowsAfterMap[t];
                            },
                            getVirtualRowCount: function () {
                                return e.rowsAfterMap ? e.rowsAfterMap.length : 0;
                            },
                            forEachInMemory: function (t) {
                                e.forEachInMemory(t);
                            },
                            forEachNode: function (t) {
                                e.forEachNode(t);
                            },
                            forEachNodeAfterFilter: function (t) {
                                e.forEachNodeAfterFilter(t);
                            },
                            forEachNodeAfterFilterAndSort: function (t) {
                                e.forEachNodeAfterFilterAndSort(t);
                            }
                        };
                    }, n.prototype.getModel = function () {
                        return this.model;
                    }, n.prototype.forEachInMemory = function (e) {
                        console.warn('ag-Grid: please use forEachNode instead of forEachInMemory, method is same, I just renamed it, forEachInMemory is deprecated'), this.forEachNode(e);
                    }, n.prototype.forEachNode = function (e) {
                        this.recursivelyWalkNodesAndCallback(this.rowsAfterGroup, e, t.Normal, 0);
                    }, n.prototype.forEachNodeAfterFilter = function (e) {
                        this.recursivelyWalkNodesAndCallback(this.rowsAfterFilter, e, t.AfterFilter, 0);
                    }, n.prototype.forEachNodeAfterFilterAndSort = function (e) {
                        this.recursivelyWalkNodesAndCallback(this.rowsAfterSort, e, t.AfterFilterAndSort, 0);
                    }, n.prototype.recursivelyWalkNodesAndCallback = function (e, i, o, n) {
                        if (e)
                            for (var r = 0; r < e.length; r++) {
                                var s = e[r];
                                if (i(s, n++), s.group) {
                                    var l;
                                    switch (o) {
                                    case t.Normal:
                                        l = s.children;
                                        break;
                                    case t.AfterFilter:
                                        l = s.childrenAfterFilter;
                                        break;
                                    case t.AfterFilterAndSort:
                                        l = s.childrenAfterSort;
                                    }
                                    l && (n = this.recursivelyWalkNodesAndCallback(l, i, o, n));
                                }
                            }
                        return n;
                    }, n.prototype.updateModel = function (t) {
                        var i = this;
                        switch (t) {
                        case o.STEP_EVERYTHING:
                        case o.STEP_FILTER:
                            this.doFilter(), this.doAggregate();
                        case o.STEP_SORT:
                            this.doSort();
                        case o.STEP_MAP:
                            this.doGroupMapping();
                        }
                        this.eventService.dispatchEvent(e.Events.EVENT_MODEL_UPDATED), this.$scope && setTimeout(function () {
                            i.$scope.$apply();
                        }, 0);
                    }, n.prototype.defaultGroupAggFunctionFactory = function (e, t) {
                        function i(e, t, i) {
                            for (var n = null, r = 0; r < e.length; r++) {
                                var s = e[r], l = s.data[i];
                                if ('number' == typeof l)
                                    switch (t) {
                                    case o.SUM:
                                        n += l;
                                        break;
                                    case o.MIN:
                                        null === n ? n = l : n > l && (n = l);
                                        break;
                                    case o.MAX:
                                        null === n ? n = l : l > n && (n = l);
                                    }
                            }
                            return n;
                        }
                        return function (n) {
                            var r = {};
                            if (t)
                                for (var s = 0; s < t.length; s++) {
                                    var l = t[s];
                                    r[l] = i(n, o.SUM, l);
                                }
                            if (e)
                                for (var a = 0; a < e.length; a++) {
                                    var d = e[a], u = d.colDef.field;
                                    r[u] = i(n, d.aggFunc, u);
                                }
                            return r;
                        };
                    }, n.prototype.doAggregate = function () {
                        var e = this.gridOptionsWrapper.getGroupAggFunction();
                        if ('function' == typeof e)
                            return void this.recursivelyCreateAggData(this.rowsAfterFilter, e, 0);
                        var t = this.columnController.getValueColumns(), i = this.gridOptionsWrapper.getGroupAggFields();
                        if (t && t.length > 0 || i && i.length > 0) {
                            var o = this.defaultGroupAggFunctionFactory(t, i);
                            this.recursivelyCreateAggData(this.rowsAfterFilter, o, 0);
                        } else
                            this.gridOptionsWrapper.isRowsAlreadyGrouped() || this.recursivelyClearAggData(this.rowsAfterFilter);
                    }, n.prototype.expandOrCollapseAll = function (e, t) {
                        var i = this;
                        null === t && (t = this.rowsAfterGroup), t && t.forEach(function (t) {
                            t.group && (t.expanded = e, i.expandOrCollapseAll(e, t.children));
                        });
                    }, n.prototype.recursivelyClearAggData = function (e) {
                        for (var t = 0, i = e.length; i > t; t++) {
                            var o = e[t];
                            o.group && (this.recursivelyClearAggData(o.childrenAfterFilter), o.data = null);
                        }
                    }, n.prototype.recursivelyCreateAggData = function (e, t, i) {
                        for (var o = 0, n = e.length; n > o; o++) {
                            var r = e[o];
                            if (r.group) {
                                this.recursivelyCreateAggData(r.childrenAfterFilter, t, i++);
                                var s = t(r.childrenAfterFilter, i);
                                r.data = s, r.sibling && (r.sibling.data = s);
                            }
                        }
                    }, n.prototype.doSort = function () {
                        var e;
                        if (this.gridOptionsWrapper.isEnableServerSideSorting())
                            e = !1;
                        else {
                            var t = [];
                            this.columnController.getAllColumns().forEach(function (e) {
                                if (e.sort) {
                                    var i = e.sort === o.ASC;
                                    t.push({
                                        inverter: i ? 1 : -1,
                                        sortedAt: e.sortedAt,
                                        column: e
                                    });
                                }
                            }), t.length > 0 && (e = !0);
                        }
                        var i = this.rowsAfterFilter ? this.rowsAfterFilter.slice(0) : null;
                        e ? (t.sort(function (e, t) {
                            return e.sortedAt - t.sortedAt;
                        }), this.sortList(i, t)) : this.recursivelyResetSort(i), this.rowsAfterSort = i;
                    }, n.prototype.recursivelyResetSort = function (e) {
                        if (e) {
                            for (var t = 0, i = e.length; i > t; t++) {
                                var o = e[t];
                                o.group && o.children && (o.childrenAfterSort = o.childrenAfterFilter, this.recursivelyResetSort(o.children));
                            }
                            this.updateChildIndexes(e);
                        }
                    }, n.prototype.sortList = function (e, t) {
                        function o(e, t, o, n) {
                            var r = l.valueService.getValue(o.colDef, e.data, e), s = l.valueService.getValue(o.colDef, t.data, t);
                            return o.colDef.comparator ? o.colDef.comparator(r, s, e, t, n) : i.defaultComparator(r, s);
                        }
                        for (var n = 0, r = e.length; r > n; n++) {
                            var s = e[n];
                            s.group && s.children && (s.childrenAfterSort = s.childrenAfterFilter.slice(0), this.sortList(s.childrenAfterSort, t));
                        }
                        var l = this;
                        e.sort(function (e, i) {
                            for (var n = 0, r = t.length; r > n; n++) {
                                var s = t[n], l = o(e, i, s.column, -1 === s.inverter);
                                if (0 !== l)
                                    return l * s.inverter;
                            }
                            return 0;
                        }), this.updateChildIndexes(e);
                    }, n.prototype.updateChildIndexes = function (e) {
                        for (var t = 0; t < e.length; t++) {
                            var i = e[t];
                            i.firstChild = 0 === t, i.lastChild = t === e.length - 1, i.childIndex = t;
                        }
                    }, n.prototype.onPivotChanged = function () {
                        this.doPivoting(), this.updateModel(o.STEP_EVERYTHING);
                    }, n.prototype.doPivoting = function () {
                        var e, t = this.columnController.getPivotedColumns(), i = this.gridOptionsWrapper.isRowsAlreadyGrouped(), o = !i && t.length > 0;
                        if (o) {
                            var n = this.gridOptionsWrapper.isGroupSuppressRow() || this.gridOptionsWrapper.getGroupDefaultExpanded();
                            e = this.groupCreator.group(this.allRows, t, n);
                        } else
                            e = this.allRows;
                        this.rowsAfterGroup = e;
                    }, n.prototype.doFilter = function () {
                        var e;
                        e = this.gridOptionsWrapper.isEnableServerSideFilter() ? !1 : this.filterManager.isAnyFilterPresent();
                        var t;
                        e ? t = this.filterItems(this.rowsAfterGroup) : (t = this.rowsAfterGroup, this.recursivelyResetFilter(this.rowsAfterGroup)), this.rowsAfterFilter = t;
                    }, n.prototype.filterItems = function (e) {
                        for (var t = [], i = 0, o = e.length; o > i; i++) {
                            var n = e[i];
                            n.group ? (n.childrenAfterFilter = this.filterItems(n.children), n.childrenAfterFilter.length > 0 && (n.allChildrenCount = this.getTotalChildCount(n.childrenAfterFilter), t.push(n))) : this.filterManager.doesRowPassFilter(n) && t.push(n);
                        }
                        return t;
                    }, n.prototype.recursivelyResetFilter = function (e) {
                        if (e)
                            for (var t = 0, i = e.length; i > t; t++) {
                                var o = e[t];
                                o.group && o.children && (o.childrenAfterFilter = o.children, this.recursivelyResetFilter(o.children), o.allChildrenCount = this.getTotalChildCount(o.childrenAfterFilter));
                            }
                    }, n.prototype.setAllRows = function (e, t) {
                        var i;
                        if (this.gridOptionsWrapper.isRowsAlreadyGrouped())
                            i = e, this.recursivelyCheckUserProvidedNodes(i, null, 0);
                        else {
                            var i = [];
                            if (e)
                                for (var o = 0; o < e.length; o++) {
                                    var n = {};
                                    n.data = e[o], i.push(n);
                                }
                        }
                        var r = t ? t : 0;
                        this.recursivelyAddIdToNodes(i, r), this.allRows = i, this.columnController.isSetupComplete() && this.doPivoting();
                    }, n.prototype.recursivelyAddIdToNodes = function (e, t) {
                        if (e) {
                            for (var i = 0; i < e.length; i++) {
                                var o = e[i];
                                o.id = t++, o.group && o.children && (t = this.recursivelyAddIdToNodes(o.children, t));
                            }
                            return t;
                        }
                    }, n.prototype.recursivelyCheckUserProvidedNodes = function (e, t, i) {
                        if (e)
                            for (var o = 0; o < e.length; o++) {
                                var n = e[o];
                                t && (n.parent = t), n.level = i, n.group && n.children && this.recursivelyCheckUserProvidedNodes(n.children, n, i + 1);
                            }
                    }, n.prototype.getTotalChildCount = function (e) {
                        for (var t = 0, i = 0, o = e.length; o > i; i++) {
                            var n = e[i];
                            n.group ? t += n.allChildrenCount : t++;
                        }
                        return t;
                    }, n.prototype.doGroupMapping = function () {
                        var e = [];
                        this.addToMap(e, this.rowsAfterSort), this.rowsAfterMap = e;
                    }, n.prototype.addToMap = function (e, t) {
                        if (t)
                            for (var i = this.gridOptionsWrapper.isGroupSuppressRow(), o = 0; o < t.length; o++) {
                                var n = t[o];
                                if ((!i || i && !n.group) && e.push(n), n.group && n.expanded && (this.addToMap(e, n.childrenAfterSort), this.gridOptionsWrapper.isGroupIncludeFooter())) {
                                    var r = this.createFooterNode(n);
                                    e.push(r);
                                }
                            }
                    }, n.prototype.createFooterNode = function (e) {
                        var t = {};
                        return Object.keys(e).forEach(function (i) {
                            t[i] = e[i];
                        }), t.footer = !0, t.sibling = e, e.sibling = t, t;
                    }, n;
                }();
                e.InMemoryRowController = n;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = !1, o = function () {
                        function e() {
                        }
                        return e.prototype.init = function (e, t, i) {
                            this.rowRenderer = e, this.datasourceVersion = 0, this.gridOptionsWrapper = t, this.angularGrid = i;
                        }, e.prototype.setDatasource = function (e) {
                            this.datasource = e, e && this.reset();
                        }, e.prototype.reset = function () {
                            'number' == typeof this.datasource.rowCount && this.datasource.rowCount >= 0 ? (this.virtualRowCount = this.datasource.rowCount, this.foundMaxRow = !0) : (this.virtualRowCount = 0, this.foundMaxRow = !1), this.datasourceVersion++, this.pageCache = {}, this.pageCacheSize = 0, this.pageLoadsInProgress = [], this.pageLoadsQueued = [], this.pageAccessTimes = {}, this.accessTime = 0, 'number' == typeof this.datasource.maxConcurrentRequests && this.datasource.maxConcurrentRequests > 0 ? this.maxConcurrentDatasourceRequests = this.datasource.maxConcurrentRequests : this.maxConcurrentDatasourceRequests = 2, 'number' == typeof this.datasource.maxPagesInCache && this.datasource.maxPagesInCache > 0 ? this.maxPagesInCache = this.datasource.maxPagesInCache : this.maxPagesInCache = null, this.pageSize = this.datasource.pageSize, this.overflowSize = this.datasource.overflowSize, this.doLoadOrQueue(0);
                        }, e.prototype.createNodesFromRows = function (e, t) {
                            var i = [];
                            if (t)
                                for (var o = 0, n = t.length; n > o; o++) {
                                    var r = e * this.pageSize + o;
                                    i.push({
                                        data: t[o],
                                        id: r
                                    });
                                }
                            return i;
                        }, e.prototype.removeFromLoading = function (e) {
                            var t = this.pageLoadsInProgress.indexOf(e);
                            this.pageLoadsInProgress.splice(t, 1);
                        }, e.prototype.pageLoadFailed = function (e) {
                            this.removeFromLoading(e), this.checkQueueForNextLoad();
                        }, e.prototype.pageLoaded = function (e, t, i) {
                            this.putPageIntoCacheAndPurge(e, t), this.checkMaxRowAndInformRowRenderer(e, i), this.removeFromLoading(e), this.checkQueueForNextLoad();
                        }, e.prototype.putPageIntoCacheAndPurge = function (e, t) {
                            this.pageCache[e] = this.createNodesFromRows(e, t), this.pageCacheSize++, i && console.log('adding page ' + e);
                            var o = this.maxPagesInCache && this.maxPagesInCache < this.pageCacheSize;
                            if (o) {
                                var n = this.findLeastRecentlyAccessedPage(Object.keys(this.pageCache));
                                i && console.log('purging page ' + n + ' from cache ' + Object.keys(this.pageCache)), delete this.pageCache[n], this.pageCacheSize--;
                            }
                        }, e.prototype.checkMaxRowAndInformRowRenderer = function (e, t) {
                            if (this.foundMaxRow)
                                this.rowRenderer.refreshAllVirtualRows();
                            else {
                                if ('number' == typeof t && t >= 0)
                                    this.virtualRowCount = t, this.foundMaxRow = !0;
                                else {
                                    var i = (e + 1) * this.pageSize + this.overflowSize;
                                    this.virtualRowCount < i && (this.virtualRowCount = i);
                                }
                                this.rowRenderer.refreshView();
                            }
                        }, e.prototype.isPageAlreadyLoading = function (e) {
                            var t = this.pageLoadsInProgress.indexOf(e) >= 0 || this.pageLoadsQueued.indexOf(e) >= 0;
                            return t;
                        }, e.prototype.doLoadOrQueue = function (e) {
                            this.isPageAlreadyLoading(e) || (this.pageLoadsInProgress.length < this.maxConcurrentDatasourceRequests ? this.loadPage(e) : this.addToQueueAndPurgeQueue(e));
                        }, e.prototype.addToQueueAndPurgeQueue = function (e) {
                            i && console.log('queueing ' + e + ' - ' + this.pageLoadsQueued), this.pageLoadsQueued.push(e);
                            var t = this.maxPagesInCache && this.maxPagesInCache < this.pageLoadsQueued.length;
                            if (t) {
                                var o = this.findLeastRecentlyAccessedPage(this.pageLoadsQueued);
                                i && console.log('de-queueing ' + e + ' - ' + this.pageLoadsQueued);
                                var n = this.pageLoadsQueued.indexOf(o);
                                this.pageLoadsQueued.splice(n, 1);
                            }
                        }, e.prototype.findLeastRecentlyAccessedPage = function (e) {
                            var t = -1, i = Number.MAX_VALUE, o = this;
                            return e.forEach(function (e) {
                                var n = o.pageAccessTimes[e];
                                i > n && (i = n, t = e);
                            }), t;
                        }, e.prototype.checkQueueForNextLoad = function () {
                            if (this.pageLoadsQueued.length > 0) {
                                var e = this.pageLoadsQueued[0];
                                this.pageLoadsQueued.splice(0, 1), i && console.log('dequeueing ' + e + ' - ' + this.pageLoadsQueued), this.loadPage(e);
                            }
                        }, e.prototype.loadPage = function (e) {
                            function i(t, i) {
                                l.requestIsDaemon(a) || l.pageLoaded(e, t, i);
                            }
                            function o() {
                                l.requestIsDaemon(a) || l.pageLoadFailed(e);
                            }
                            this.pageLoadsInProgress.push(e);
                            var n, r = e * this.pageSize, s = (e + 1) * this.pageSize, l = this, a = this.datasourceVersion;
                            this.gridOptionsWrapper.isEnableServerSideSorting() && (n = this.angularGrid.getSortModel());
                            var d;
                            this.gridOptionsWrapper.isEnableServerSideFilter() && (d = this.angularGrid.getFilterModel());
                            var u = {
                                    startRow: r,
                                    endRow: s,
                                    successCallback: i,
                                    failCallback: o,
                                    sortModel: n,
                                    filterModel: d
                                }, p = t.getFunctionParameters(this.datasource.getRows);
                            p.length > 1 && (console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.'), console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.')), this.datasource.getRows(u);
                        }, e.prototype.requestIsDaemon = function (e) {
                            return this.datasourceVersion !== e;
                        }, e.prototype.getVirtualRow = function (e) {
                            if (e > this.virtualRowCount)
                                return null;
                            var t = Math.floor(e / this.pageSize), i = this.pageCache[t];
                            if (this.pageAccessTimes[t] = this.accessTime++, i) {
                                var o = e % this.pageSize;
                                return i[o];
                            }
                            return this.doLoadOrQueue(t), {
                                data: {},
                                id: e
                            };
                        }, e.prototype.forEachNode = function (e) {
                            for (var t = Object.keys(this.pageCache), i = 0; i < t.length; i++)
                                for (var o = t[i], n = this.pageCache[o], r = 0; r < n.length; r++) {
                                    var s = n[r];
                                    e(s);
                                }
                        }, e.prototype.getModel = function () {
                            var e = this;
                            return {
                                getVirtualRow: function (t) {
                                    return e.getVirtualRow(t);
                                },
                                getVirtualRowCount: function () {
                                    return e.virtualRowCount;
                                },
                                forEachInMemory: function (t) {
                                    e.forEachNode(t);
                                },
                                forEachNode: function (t) {
                                    e.forEachNode(t);
                                },
                                forEachNodeAfterFilter: function (e) {
                                    console.warn('forEachNodeAfterFilter - does not work with virtual pagination');
                                },
                                forEachNodeAfterFilterAndSort: function (e) {
                                    console.warn('forEachNodeAfterFilterAndSort - does not work with virtual pagination');
                                }
                            };
                        }, e;
                    }();
                e.VirtualPageRowController = o;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = '<div class="ag-paging-panel"><span id="pageRowSummaryPanel" class="ag-paging-row-summary-panel"><span id="firstRowOnPage"></span> [TO] <span id="lastRowOnPage"></span> [OF] <span id="recordCount"></span></span><span class="ag-paging-page-summary-panel"><button type="button" class="ag-paging-button" id="btFirst">[FIRST]</button><button type="button" class="ag-paging-button" id="btPrevious">[PREVIOUS]</button>[PAGE] <span id="current"></span> [OF] <span id="total"></span><button type="button" class="ag-paging-button" id="btNext">[NEXT]</button><button type="button" class="ag-paging-button" id="btLast">[LAST]</button></span></div>', o = function () {
                        function e() {
                        }
                        return e.prototype.init = function (e, t) {
                            this.gridOptionsWrapper = t, this.angularGrid = e, this.setupComponents(), this.callVersion = 0;
                        }, e.prototype.setDatasource = function (e) {
                            this.datasource = e, e && this.reset();
                        }, e.prototype.reset = function () {
                            this.datasource.pageSize && 'number' != typeof this.datasource.pageSize && console.warn('datasource.pageSize should be a number'), this.pageSize = this.datasource.pageSize, 'number' == typeof this.datasource.rowCount && this.datasource.rowCount >= 0 ? (this.rowCount = this.datasource.rowCount, this.foundMaxRow = !0, this.calculateTotalPages()) : (this.rowCount = 0, this.foundMaxRow = !1, this.totalPages = null), this.currentPage = 0, this.ePageRowSummaryPanel.style.visibility = 'hidden', this.setTotalLabels(), this.loadPage();
                        }, e.prototype.setTotalLabels = function () {
                            if (this.foundMaxRow)
                                this.lbTotal.innerHTML = this.totalPages.toLocaleString(), this.lbRecordCount.innerHTML = this.rowCount.toLocaleString();
                            else {
                                var e = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');
                                this.lbTotal.innerHTML = e, this.lbRecordCount.innerHTML = e;
                            }
                        }, e.prototype.calculateTotalPages = function () {
                            this.totalPages = Math.floor((this.rowCount - 1) / this.pageSize) + 1;
                        }, e.prototype.pageLoaded = function (e, t) {
                            var i = this.currentPage * this.pageSize;
                            this.angularGrid.setRowData(e, i), !this.foundMaxRow && 'number' == typeof t && t >= 0 && (this.foundMaxRow = !0, this.rowCount = t, this.calculateTotalPages(), this.setTotalLabels(), this.currentPage > this.totalPages && (this.currentPage = this.totalPages - 1, this.loadPage())), this.enableOrDisableButtons(), this.updateRowLabels();
                        }, e.prototype.updateRowLabels = function () {
                            var e, t;
                            this.isZeroPagesToDisplay() ? (e = 0, t = 0) : (e = this.pageSize * this.currentPage + 1, t = e + this.pageSize - 1, this.foundMaxRow && t > this.rowCount && (t = this.rowCount)), this.lbFirstRowOnPage.innerHTML = e.toLocaleString(), this.lbLastRowOnPage.innerHTML = t.toLocaleString(), this.ePageRowSummaryPanel.style.visibility = '';
                        }, e.prototype.loadPage = function () {
                            function e(e, t) {
                                s.isCallDaemon(r) || s.pageLoaded(e, t);
                            }
                            function i() {
                                s.isCallDaemon(r) || s.angularGrid.setRowData([]);
                            }
                            this.enableOrDisableButtons();
                            var o = this.currentPage * this.datasource.pageSize, n = (this.currentPage + 1) * this.datasource.pageSize;
                            this.lbCurrent.innerHTML = (this.currentPage + 1).toLocaleString(), this.callVersion++;
                            var r = this.callVersion, s = this;
                            this.angularGrid.showLoadingOverlay();
                            var l;
                            this.gridOptionsWrapper.isEnableServerSideSorting() && (l = this.angularGrid.getSortModel());
                            var a;
                            this.gridOptionsWrapper.isEnableServerSideFilter() && (a = this.angularGrid.getFilterModel());
                            var d = {
                                    startRow: o,
                                    endRow: n,
                                    successCallback: e,
                                    failCallback: i,
                                    sortModel: l,
                                    filterModel: a
                                }, u = t.getFunctionParameters(this.datasource.getRows);
                            u.length > 1 && (console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.'), console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.')), this.datasource.getRows(d);
                        }, e.prototype.isCallDaemon = function (e) {
                            return e !== this.callVersion;
                        }, e.prototype.onBtNext = function () {
                            this.currentPage++, this.loadPage();
                        }, e.prototype.onBtPrevious = function () {
                            this.currentPage--, this.loadPage();
                        }, e.prototype.onBtFirst = function () {
                            this.currentPage = 0, this.loadPage();
                        }, e.prototype.onBtLast = function () {
                            this.currentPage = this.totalPages - 1, this.loadPage();
                        }, e.prototype.isZeroPagesToDisplay = function () {
                            return this.foundMaxRow && 0 === this.totalPages;
                        }, e.prototype.enableOrDisableButtons = function () {
                            var e = 0 === this.currentPage;
                            this.btPrevious.disabled = e, this.btFirst.disabled = e;
                            var t = this.isZeroPagesToDisplay(), i = this.foundMaxRow && this.currentPage === this.totalPages - 1, o = i || t;
                            this.btNext.disabled = o;
                            var n = !this.foundMaxRow || t || this.currentPage === this.totalPages - 1;
                            this.btLast.disabled = n;
                        }, e.prototype.createTemplate = function () {
                            var e = this.gridOptionsWrapper.getLocaleTextFunc();
                            return i.replace('[PAGE]', e('page', 'Page')).replace('[TO]', e('to', 'to')).replace('[OF]', e('of', 'of')).replace('[OF]', e('of', 'of')).replace('[FIRST]', e('first', 'First')).replace('[PREVIOUS]', e('previous', 'Previous')).replace('[NEXT]', e('next', 'Next')).replace('[LAST]', e('last', 'Last'));
                        }, e.prototype.getGui = function () {
                            return this.eGui;
                        }, e.prototype.setupComponents = function () {
                            this.eGui = t.loadTemplate(this.createTemplate()), this.btNext = this.eGui.querySelector('#btNext'), this.btPrevious = this.eGui.querySelector('#btPrevious'), this.btFirst = this.eGui.querySelector('#btFirst'), this.btLast = this.eGui.querySelector('#btLast'), this.lbCurrent = this.eGui.querySelector('#current'), this.lbTotal = this.eGui.querySelector('#total'), this.lbRecordCount = this.eGui.querySelector('#recordCount'), this.lbFirstRowOnPage = this.eGui.querySelector('#firstRowOnPage'), this.lbLastRowOnPage = this.eGui.querySelector('#lastRowOnPage'), this.ePageRowSummaryPanel = this.eGui.querySelector('#pageRowSummaryPanel');
                            var e = this;
                            this.btNext.addEventListener('click', function () {
                                e.onBtNext();
                            }), this.btPrevious.addEventListener('click', function () {
                                e.onBtPrevious();
                            }), this.btFirst.addEventListener('click', function () {
                                e.onBtFirst();
                            }), this.btLast.addEventListener('click', function () {
                                e.onBtLast();
                            });
                        }, e;
                    }();
                e.PaginationController = o;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function e(e) {
                            this.sizeChangeListeners = [], this.isLayoutPanel = !0, this.fullHeight = !e.north && !e.south;
                            var i;
                            e.dontFill ? (i = '<div style="position: relative;"><div id="north"></div><div id="centerRow"><div id="west"></div><div id="east"></div><div id="center"></div></div><div id="south"></div><div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div></div>', this.layoutActive = !1) : (i = this.fullHeight ? '<div style="height: 100%; overflow: auto; position: relative;"><div id="west" style="height: 100%; float: left;"></div><div id="east" style="height: 100%; float: right;"></div><div id="center" style="height: 100%;"></div><div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div></div>' : '<div style="height: 100%; position: relative;"><div id="north"></div><div id="centerRow" style="height: 100%; overflow: hidden;"><div id="west" style="height: 100%; float: left;"></div><div id="east" style="height: 100%; float: right;"></div><div id="center" style="height: 100%;"></div></div><div id="south"></div><div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div></div>', this.layoutActive = !0), this.eGui = t.loadTemplate(i), this.id = 'borderLayout', e.name && (this.id += '_' + e.name), this.eGui.setAttribute('id', this.id), this.childPanels = [], e && this.setupPanels(e), this.overlays = e.overlays, this.setupOverlays();
                        }
                        return e.prototype.addSizeChangeListener = function (e) {
                            this.sizeChangeListeners.push(e);
                        }, e.prototype.fireSizeChanged = function () {
                            this.sizeChangeListeners.forEach(function (e) {
                                e();
                            });
                        }, e.prototype.setupPanels = function (e) {
                            this.eNorthWrapper = this.eGui.querySelector('#north'), this.eSouthWrapper = this.eGui.querySelector('#south'), this.eEastWrapper = this.eGui.querySelector('#east'), this.eWestWrapper = this.eGui.querySelector('#west'), this.eCenterWrapper = this.eGui.querySelector('#center'), this.eOverlayWrapper = this.eGui.querySelector('#overlay'), this.eCenterRow = this.eGui.querySelector('#centerRow'), this.eNorthChildLayout = this.setupPanel(e.north, this.eNorthWrapper), this.eSouthChildLayout = this.setupPanel(e.south, this.eSouthWrapper), this.eEastChildLayout = this.setupPanel(e.east, this.eEastWrapper), this.eWestChildLayout = this.setupPanel(e.west, this.eWestWrapper), this.eCenterChildLayout = this.setupPanel(e.center, this.eCenterWrapper);
                        }, e.prototype.setupPanel = function (e, t) {
                            return t ? e ? e.isLayoutPanel ? (this.childPanels.push(e), t.appendChild(e.getGui()), e) : (t.appendChild(e), null) : (t.parentNode.removeChild(t), null) : void 0;
                        }, e.prototype.getGui = function () {
                            return this.eGui;
                        }, e.prototype.doLayout = function () {
                            if (!t.isVisible(this.eGui))
                                return !1;
                            var e = !1, i = [
                                    this.eNorthChildLayout,
                                    this.eSouthChildLayout,
                                    this.eEastChildLayout,
                                    this.eWestChildLayout
                                ], o = this;
                            if (t.forEach(i, function (t) {
                                    var i = o.layoutChild(t);
                                    i && (e = !0);
                                }), this.layoutActive) {
                                var n = this.layoutHeight(), r = this.layoutWidth();
                                (n || r) && (e = !0);
                            }
                            var s = this.layoutChild(this.eCenterChildLayout);
                            return s && (e = !0), e && this.fireSizeChanged(), e;
                        }, e.prototype.layoutChild = function (e) {
                            return e ? e.doLayout() : !1;
                        }, e.prototype.layoutHeight = function () {
                            return this.fullHeight ? this.layoutHeightFullHeight() : this.layoutHeightNormal();
                        }, e.prototype.layoutHeightFullHeight = function () {
                            var e = t.offsetHeight(this.eGui);
                            return 0 > e && (e = 0), this.centerHeightLastTime !== e ? (this.centerHeightLastTime = e, !0) : !1;
                        }, e.prototype.layoutHeightNormal = function () {
                            var e = t.offsetHeight(this.eGui), i = t.offsetHeight(this.eNorthWrapper), o = t.offsetHeight(this.eSouthWrapper), n = e - i - o;
                            return 0 > n && (n = 0), this.centerHeightLastTime !== n ? (this.eCenterRow.style.height = n + 'px', this.centerHeightLastTime = n, !0) : !1;
                        }, e.prototype.getCentreHeight = function () {
                            return this.centerHeightLastTime;
                        }, e.prototype.layoutWidth = function () {
                            var e = t.offsetWidth(this.eGui), i = t.offsetWidth(this.eEastWrapper), o = t.offsetWidth(this.eWestWrapper), n = e - i - o;
                            0 > n && (n = 0), this.eCenterWrapper.style.width = n + 'px';
                        }, e.prototype.setEastVisible = function (e) {
                            this.eEastWrapper && (this.eEastWrapper.style.display = e ? '' : 'none'), this.doLayout();
                        }, e.prototype.setupOverlays = function () {
                            return this.overlays ? void this.hideOverlay() : void this.eOverlayWrapper.parentNode.removeChild(this.eOverlayWrapper);
                        }, e.prototype.hideOverlay = function () {
                            t.removeAllChildren(this.eOverlayWrapper), this.eOverlayWrapper.style.display = 'none';
                        }, e.prototype.showOverlay = function (e) {
                            var i = this.overlays ? this.overlays[e] : null;
                            i ? (t.removeAllChildren(this.eOverlayWrapper), this.eOverlayWrapper.style.display = '', this.eOverlayWrapper.appendChild(i)) : (console.log('ag-Grid: unknown overlay'), this.hideOverlay());
                        }, e.prototype.setSouthVisible = function (e) {
                            this.eSouthWrapper && (this.eSouthWrapper.style.display = e ? '' : 'none'), this.doLayout();
                        }, e;
                    }();
                e.BorderLayout = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = '<div>\n                <!-- header -->\n                <div class="ag-header">\n                    <div class="ag-pinned-header"></div><div class="ag-header-viewport"><div class="ag-header-container"></div></div>\n                </div>\n                <!-- floating top -->\n                <div class="ag-floating-top">\n                    <div class="ag-pinned-floating-top"></div><div class="ag-floating-top-viewport"><div class="ag-floating-top-container"></div></div>\n                </div>\n                <!-- floating bottom -->\n                <div class="ag-floating-bottom">\n                    <div class="ag-pinned-floating-bottom"></div><div class="ag-floating-bottom-viewport"><div class="ag-floating-bottom-container"></div></div>\n                </div>\n                <!-- body -->\n                <div class="ag-body">\n                    <div class="ag-pinned-cols-viewport">\n                        <div class="ag-pinned-cols-container"></div>\n                    </div>\n                    <div class="ag-body-viewport-wrapper">\n                        <div class="ag-body-viewport">\n                            <div class="ag-body-container"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>', i = '<div>\n                <!-- header -->\n                <div class="ag-header-container"></div>\n                <!-- floating top -->\n                <div class="ag-floating-top-container"></div>\n                <!-- body -->\n                <div class="ag-body-container"></div>\n                <!-- floating bottom -->\n                <div class="ag-floating-bottom-container"></div>\n            </div>', o = '<div class="ag-overlay-panel"><div class="ag-overlay-wrapper ag-overlay-[OVERLAY_NAME]-wrapper">[OVERLAY_TEMPLATE]</div></div>', n = '<span class="ag-overlay-loading-center">[LOADING...]</span>', r = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>', s = e.Utils, l = function () {
                        function l() {
                            this.scrollLagCounter = 0;
                        }
                        return l.prototype.init = function (e, t, i, o) {
                            this.gridOptionsWrapper = e, this.forPrint = this.gridOptionsWrapper.isForPrint(), this.setupComponents(), this.scrollWidth = s.getScrollbarWidth(), this.columnModel = t, this.rowRenderer = i, this.masterSlaveService = o, this.sizeHeaderAndBody();
                        }, l.prototype.getLayout = function () {
                            return this.layout;
                        }, l.prototype.setupComponents = function () {
                            this.forPrint ? (this.eRoot = s.loadTemplate(i), s.addCssClass(this.eRoot, 'ag-root ag-no-scrolls')) : (this.eRoot = s.loadTemplate(t), s.addCssClass(this.eRoot, 'ag-root ag-scrolls')), this.findElements(), this.layout = new e.BorderLayout({
                                overlays: {
                                    loading: s.loadTemplate(this.createLoadingOverlayTemplate()),
                                    noRows: s.loadTemplate(this.createNoRowsOverlayTemplate())
                                },
                                center: this.eRoot,
                                dontFill: this.forPrint,
                                name: 'eGridPanel'
                            }), this.layout.addSizeChangeListener(this.onBodyHeightChange.bind(this)), this.addScrollListener(), this.gridOptionsWrapper.isSuppressHorizontalScroll() && (this.eBodyViewport.style.overflowX = 'hidden');
                        }, l.prototype.getPinnedFloatingTop = function () {
                            return this.ePinnedFloatingTop;
                        }, l.prototype.getFloatingTopContainer = function () {
                            return this.eFloatingTopContainer;
                        }, l.prototype.getPinnedFloatingBottom = function () {
                            return this.ePinnedFloatingBottom;
                        }, l.prototype.getFloatingBottomContainer = function () {
                            return this.eFloatingBottomContainer;
                        }, l.prototype.createOverlayTemplate = function (e, t, i) {
                            var n = o.replace('[OVERLAY_NAME]', e);
                            return n = i ? n.replace('[OVERLAY_TEMPLATE]', i) : n.replace('[OVERLAY_TEMPLATE]', t);
                        }, l.prototype.createLoadingOverlayTemplate = function () {
                            var e = this.gridOptionsWrapper.getOverlayLoadingTemplate(), t = this.createOverlayTemplate('loading', n, e), i = this.gridOptionsWrapper.getLocaleTextFunc(), o = t.replace('[LOADING...]', i('loadingOoo', 'Loading...'));
                            return o;
                        }, l.prototype.createNoRowsOverlayTemplate = function () {
                            var e = this.gridOptionsWrapper.getOverlayNoRowsTemplate(), t = this.createOverlayTemplate('no-rows', r, e), i = this.gridOptionsWrapper.getLocaleTextFunc(), o = t.replace('[NO_ROWS_TO_SHOW]', i('noRowsToShow', 'No Rows To Show'));
                            return o;
                        }, l.prototype.ensureIndexVisible = function (e) {
                            var t = this.rowModel.getVirtualRowCount();
                            if ('number' != typeof e || 0 > e || e >= t)
                                return void console.warn('invalid row index for ensureIndexVisible: ' + e);
                            var i = this.gridOptionsWrapper.getRowHeight(), o = i * e, n = o + i, r = this.eBodyViewport.scrollTop, s = this.eBodyViewport.offsetHeight, l = this.eBodyViewport.clientWidth < this.eBodyViewport.scrollWidth;
                            l && (s -= this.scrollWidth);
                            var a = r + s, d = r > o, u = n > a;
                            if (d)
                                this.eBodyViewport.scrollTop = o;
                            else if (u) {
                                var p = n - s;
                                this.eBodyViewport.scrollTop = p;
                            }
                        }, l.prototype.ensureColIndexVisible = function (e) {
                            if ('number' != typeof e)
                                return void console.warn('col index must be a number: ' + e);
                            var t = this.columnModel.getDisplayedColumns();
                            if ('number' != typeof e || 0 > e || e >= t.length)
                                return void console.warn('invalid col index for ensureColIndexVisible: ' + e + ', should be between 0 and ' + (t.length - 1));
                            var i = t[e], o = this.gridOptionsWrapper.getPinnedColCount();
                            if (o > e)
                                return void console.warn('invalid col index for ensureColIndexVisible: ' + e + ', scrolling to a pinned col makes no sense');
                            for (var n = 0, r = o; e > r; r++)
                                n += t[r].actualWidth;
                            var s = n + i.actualWidth, l = this.eBodyViewport.scrollLeft, a = this.eBodyViewport.offsetWidth, d = this.eBodyViewport.clientHeight < this.eBodyViewport.scrollHeight;
                            d && (a -= this.scrollWidth);
                            var u = l + a, p = l > n, h = s > u;
                            if (p)
                                this.eBodyViewport.scrollLeft = n;
                            else if (h) {
                                var c = s - a;
                                this.eBodyViewport.scrollLeft = c;
                            }
                        }, l.prototype.showLoadingOverlay = function () {
                            this.gridOptionsWrapper.isSuppressLoadingOverlay() || this.layout.showOverlay('loading');
                        }, l.prototype.showNoRowsOverlay = function () {
                            this.gridOptionsWrapper.isSuppressNoRowsOverlay() || this.layout.showOverlay('noRows');
                        }, l.prototype.hideOverlay = function () {
                            this.layout.hideOverlay();
                        }, l.prototype.getWidthForSizeColsToFit = function () {
                            var e = this.eBody.clientWidth, t = this.eBodyViewport.clientHeight < this.eBodyViewport.scrollHeight;
                            return t && (e -= this.scrollWidth), e;
                        }, l.prototype.setRowModel = function (e) {
                            this.rowModel = e;
                        }, l.prototype.getBodyContainer = function () {
                            return this.eBodyContainer;
                        }, l.prototype.getBodyViewport = function () {
                            return this.eBodyViewport;
                        }, l.prototype.getPinnedColsContainer = function () {
                            return this.ePinnedColsContainer;
                        }, l.prototype.getHeaderContainer = function () {
                            return this.eHeaderContainer;
                        }, l.prototype.getRoot = function () {
                            return this.eRoot;
                        }, l.prototype.getPinnedHeader = function () {
                            return this.ePinnedHeader;
                        }, l.prototype.getRowsParent = function () {
                            return this.eParentsOfRows;
                        }, l.prototype.queryHtmlElement = function (e) {
                            return this.eRoot.querySelector(e);
                        }, l.prototype.findElements = function () {
                            this.forPrint ? (this.eHeaderContainer = this.queryHtmlElement('.ag-header-container'), this.eBodyContainer = this.queryHtmlElement('.ag-body-container'), this.eFloatingTopContainer = this.queryHtmlElement('.ag-floating-top-container'), this.eFloatingBottomContainer = this.queryHtmlElement('.ag-floating-bottom-container'), this.eParentsOfRows = [
                                this.eBodyContainer,
                                this.eFloatingTopContainer,
                                this.eFloatingBottomContainer
                            ]) : (this.eBody = this.queryHtmlElement('.ag-body'), this.eBodyContainer = this.queryHtmlElement('.ag-body-container'), this.eBodyViewport = this.queryHtmlElement('.ag-body-viewport'), this.eBodyViewportWrapper = this.queryHtmlElement('.ag-body-viewport-wrapper'), this.ePinnedColsContainer = this.queryHtmlElement('.ag-pinned-cols-container'), this.ePinnedColsViewport = this.queryHtmlElement('.ag-pinned-cols-viewport'), this.ePinnedHeader = this.queryHtmlElement('.ag-pinned-header'), this.eHeader = this.queryHtmlElement('.ag-header'), this.eHeaderContainer = this.queryHtmlElement('.ag-header-container'), this.eFloatingTop = this.queryHtmlElement('.ag-floating-top'), this.ePinnedFloatingTop = this.queryHtmlElement('.ag-pinned-floating-top'), this.eFloatingTopContainer = this.queryHtmlElement('.ag-floating-top-container'), this.eFloatingBottom = this.queryHtmlElement('.ag-floating-bottom'), this.ePinnedFloatingBottom = this.queryHtmlElement('.ag-pinned-floating-bottom'), this.eFloatingBottomContainer = this.queryHtmlElement('.ag-floating-bottom-container'), this.eParentsOfRows = [
                                this.eBody,
                                this.eFloatingTop,
                                this.eFloatingBottom
                            ], this.ePinnedColsViewport.addEventListener('mousewheel', this.mouseWheelListener.bind(this)), this.ePinnedColsViewport.addEventListener('DOMMouseScroll', this.mouseWheelListener.bind(this)));
                        }, l.prototype.mouseWheelListener = function (e) {
                            var t;
                            if (e.deltaY && 0 != e.deltaX)
                                t = e.deltaY;
                            else if (e.wheelDelta && 0 != e.wheelDelta)
                                t = -e.wheelDelta;
                            else {
                                if (!e.detail || 0 == e.detail)
                                    return;
                                t = 20 * e.detail;
                            }
                            var i = this.eBodyViewport.scrollTop + t;
                            return this.eBodyViewport.scrollTop = i, e.preventDefault(), !1;
                        }, l.prototype.setBodyContainerWidth = function () {
                            var e = this.columnModel.getBodyContainerWidth() + 'px';
                            this.eBodyContainer.style.width = e, this.forPrint || (this.eFloatingBottomContainer.style.width = e, this.eFloatingTopContainer.style.width = e);
                        }, l.prototype.setPinnedColContainerWidth = function () {
                            if (!this.forPrint) {
                                var e = this.columnModel.getPinnedContainerWidth() + 'px';
                                this.ePinnedColsContainer.style.width = e, this.ePinnedFloatingBottom.style.width = e, this.ePinnedFloatingTop.style.width = e, this.eBodyViewportWrapper.style.marginLeft = e;
                            }
                        }, l.prototype.showPinnedColContainersIfNeeded = function () {
                            if (!this.forPrint) {
                                var e = this.columnModel.isPinning();
                                e ? (this.ePinnedHeader.style.display = 'inline-block', this.ePinnedColsViewport.style.display = 'inline') : (this.ePinnedHeader.style.display = 'none', this.ePinnedColsViewport.style.display = 'none');
                            }
                        }, l.prototype.onBodyHeightChange = function () {
                            this.sizeHeaderAndBody();
                        }, l.prototype.sizeHeaderAndBody = function () {
                            this.forPrint ? this.sizeHeaderAndBodyForPrint() : this.sizeHeaderAndBodyNormal();
                        }, l.prototype.sizeHeaderAndBodyNormal = function () {
                            var e = this.layout.getCentreHeight();
                            if (e) {
                                var t = this.gridOptionsWrapper.getHeaderHeight();
                                this.eHeader.style.height = t + 'px';
                                var i = 0;
                                this.gridOptionsWrapper.getFloatingTopRowData() && (i = this.gridOptionsWrapper.getFloatingTopRowData().length);
                                var o = 0;
                                this.gridOptionsWrapper.getFloatingBottomRowData() && (o = this.gridOptionsWrapper.getFloatingBottomRowData().length);
                                var n = this.gridOptionsWrapper.getRowHeight(), r = i * n, s = t + r, l = o * n, a = e - l, d = e - t - l - r;
                                this.eBody.style.paddingTop = s + 'px', this.eBody.style.paddingBottom = l + 'px', this.eFloatingTop.style.top = t + 'px', this.eFloatingTop.style.height = r + 'px', this.eFloatingBottom.style.height = l + 'px', this.eFloatingBottom.style.top = a + 'px', this.ePinnedColsViewport.style.height = d + 'px';
                            }
                        }, l.prototype.sizeHeaderAndBodyForPrint = function () {
                            var e = this.gridOptionsWrapper.getHeaderHeight() + 'px';
                            this.eHeaderContainer.style.height = e;
                        }, l.prototype.setHorizontalScrollPosition = function (e) {
                            this.eBodyViewport.scrollLeft = e;
                        }, l.prototype.addScrollListener = function () {
                            var e = this;
                            if (!this.forPrint) {
                                var t = -1, i = -1;
                                this.eBodyViewport.addEventListener('scroll', function () {
                                    var o = e.eBodyViewport.scrollLeft, n = e.eBodyViewport.scrollTop;
                                    o !== t && (t = o, e.scrollHeader(o)), n !== i && (i = n, e.scrollPinned(n), e.requestDrawVirtualRows()), e.masterSlaveService.fireHorizontalScrollEvent(o);
                                }), this.ePinnedColsViewport.addEventListener('scroll', function () {
                                    e.ePinnedColsViewport.scrollTop = 0;
                                });
                            }
                        }, l.prototype.requestDrawVirtualRows = function () {
                            var e, t = this;
                            if (e = this.gridOptionsWrapper.isSuppressScrollLag() ? !1 : this.gridOptionsWrapper.getIsScrollLag() ? this.gridOptionsWrapper.getIsScrollLag()() : s.isBrowserIE() || s.isBrowserSafari()) {
                                this.scrollLagCounter++;
                                var i = this.scrollLagCounter;
                                setTimeout(function () {
                                    t.scrollLagCounter === i && t.rowRenderer.drawVirtualRows();
                                }, 50);
                            } else
                                this.rowRenderer.drawVirtualRows();
                        }, l.prototype.scrollHeader = function (e) {
                            this.eHeaderContainer.style.left = -e + 'px', this.eFloatingBottomContainer.style.left = -e + 'px', this.eFloatingTopContainer.style.left = -e + 'px';
                        }, l.prototype.scrollPinned = function (e) {
                            this.ePinnedColsContainer.style.top = -e + 'px';
                        }, l;
                    }();
                e.GridPanel = l;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function e() {
                        }
                        return e.prototype.init = function (e) {
                            this.logger = e.create('DragAndDropService');
                            var t = this;
                            this.mouseUpEventListener = function () {
                                t.stopDragging();
                            }, document.addEventListener('mouseup', this.mouseUpEventListener), this.logger.log('initialised');
                        }, e.prototype.destroy = function () {
                            document.removeEventListener('mouseup', this.mouseUpEventListener), this.logger.log('destroyed');
                        }, e.prototype.stopDragging = function () {
                            this.dragItem && (this.setDragCssClasses(this.dragItem.eDragSource, !1), this.dragItem = null);
                        }, e.prototype.setDragCssClasses = function (e, i) {
                            t.addOrRemoveCssClass(e, 'ag-dragging', i), t.addOrRemoveCssClass(e, 'ag-not-dragging', !i);
                        }, e.prototype.addDragSource = function (e, t) {
                            this.setDragCssClasses(e, !1), e.addEventListener('mousedown', this.onMouseDownDragSource.bind(this, e, t));
                        }, e.prototype.onMouseDownDragSource = function (e, t) {
                            this.dragItem && this.stopDragging();
                            var i;
                            t.getData && (i = t.getData());
                            var o;
                            t.getContainerId && (o = t.getContainerId()), this.dragItem = {
                                eDragSource: e,
                                data: i,
                                containerId: o
                            }, this.setDragCssClasses(this.dragItem.eDragSource, !0);
                        }, e.prototype.addDropTarget = function (e, t) {
                            var i = !1, o = !1, n = this;
                            e.addEventListener('mouseover', function () {
                                i || (i = !0, o = n.dragItem ? t.acceptDrag(n.dragItem) : !1);
                            }), e.addEventListener('mouseout', function () {
                                o && t.noDrop(), i = !1, o = !1;
                            }), e.addEventListener('mouseup', function () {
                                o && n.dragItem && t.drop(n.dragItem);
                            });
                        }, e;
                    }();
                e.DragAndDropService = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t, i = e.Utils, o = '<div class="ag-list-selection"><div><div ag-repeat class="ag-list-item"></div></div></div>';
                !function (e) {
                    e[e.NOT_DROP_TARGET = 0] = 'NOT_DROP_TARGET', e[e.DROP_TARGET_ABOVE = 1] = 'DROP_TARGET_ABOVE', e[e.DROP_TARGET_BELOW = 2] = 'DROP_TARGET_BELOW';
                }(t || (t = {}));
                var n = function () {
                    function e(e) {
                        this.readOnly = !1, this.dragAndDropService = e, this.setupComponents(), this.uniqueId = 'CheckboxSelection-' + Math.random(), this.modelChangedListeners = [], this.itemSelectedListeners = [], this.itemMovedListeners = [], this.beforeDropListeners = [], this.dragSources = [], this.setupAsDropTarget();
                    }
                    return e.prototype.setReadOnly = function (e) {
                        this.readOnly = e;
                    }, e.prototype.setEmptyMessage = function (e) {
                        this.emptyMessage = e, this.refreshView();
                    }, e.prototype.getUniqueId = function () {
                        return this.uniqueId;
                    }, e.prototype.addStyles = function (e) {
                        i.addStylesToElement(this.eGui, e);
                    }, e.prototype.addCssClass = function (e) {
                        i.addCssClass(this.eGui, e);
                    }, e.prototype.addDragSource = function (e) {
                        this.dragSources.push(e);
                    }, e.prototype.addModelChangedListener = function (e) {
                        this.modelChangedListeners.push(e);
                    }, e.prototype.addItemSelectedListener = function (e) {
                        this.itemSelectedListeners.push(e);
                    }, e.prototype.addItemMovedListener = function (e) {
                        this.itemMovedListeners.push(e);
                    }, e.prototype.addBeforeDropListener = function (e) {
                        this.beforeDropListeners.push(e);
                    }, e.prototype.fireItemMoved = function (e, t) {
                        for (var i = 0; i < this.itemMovedListeners.length; i++)
                            this.itemMovedListeners[i](e, t);
                    }, e.prototype.fireModelChanged = function () {
                        for (var e = 0; e < this.modelChangedListeners.length; e++)
                            this.modelChangedListeners[e](this.model);
                    }, e.prototype.fireItemSelected = function (e) {
                        for (var t = 0; t < this.itemSelectedListeners.length; t++)
                            this.itemSelectedListeners[t](e);
                    }, e.prototype.fireBeforeDrop = function (e) {
                        for (var t = 0; t < this.beforeDropListeners.length; t++)
                            this.beforeDropListeners[t](e);
                    }, e.prototype.setupComponents = function () {
                        this.eGui = i.loadTemplate(o), this.eFilterValueTemplate = this.eGui.querySelector('[ag-repeat]'), this.eListParent = this.eFilterValueTemplate.parentNode, i.removeAllChildren(this.eListParent);
                    }, e.prototype.setModel = function (e) {
                        this.model = e, this.refreshView();
                    }, e.prototype.getModel = function () {
                        return this.model;
                    }, e.prototype.setCellRenderer = function (e) {
                        this.cellRenderer = e;
                    }, e.prototype.refreshView = function () {
                        i.removeAllChildren(this.eListParent), this.model && this.model.length > 0 ? this.insertRows() : this.insertBlankMessage();
                    }, e.prototype.insertRows = function () {
                        for (var e = 0; e < this.model.length; e++) {
                            var t = this.model[e], o = this.eFilterValueTemplate.cloneNode(!0);
                            if (this.cellRenderer) {
                                var n = { value: t };
                                i.useRenderer(o, this.cellRenderer, n);
                            } else
                                o.innerHTML = t;
                            o.addEventListener('click', this.fireItemSelected.bind(this, t)), this.addDragAndDropToListItem(o, t), this.eListParent.appendChild(o);
                        }
                    }, e.prototype.insertBlankMessage = function () {
                        if (this.emptyMessage) {
                            var e = document.createElement('div');
                            e.style.color = 'grey', e.style.padding = '4px', e.style.textAlign = 'center', e.innerHTML = this.emptyMessage, this.eListParent.appendChild(e);
                        }
                    }, e.prototype.setupAsDropTarget = function () {
                        this.dragAndDropService.addDropTarget(this.eGui, {
                            acceptDrag: this.externalAcceptDrag.bind(this),
                            drop: this.externalDrop.bind(this),
                            noDrop: this.externalNoDrop.bind(this)
                        });
                    }, e.prototype.externalAcceptDrag = function (e) {
                        var t = this.dragSources.indexOf(e.containerId) >= 0;
                        if (!t)
                            return !1;
                        var i = this.model.indexOf(e.data) >= 0;
                        return i ? !1 : (this.eGui.style.backgroundColor = 'lightgreen', !0);
                    }, e.prototype.externalDrop = function (e) {
                        var t = e.data;
                        this.fireBeforeDrop(t), this.readOnly || this.addItemToList(t), this.eGui.style.backgroundColor = '';
                    }, e.prototype.externalNoDrop = function () {
                        this.eGui.style.backgroundColor = '';
                    }, e.prototype.addItemToList = function (e) {
                        this.model.push(e), this.refreshView(), this.fireModelChanged();
                    }, e.prototype.addDragAndDropToListItem = function (e, t) {
                        var i = this;
                        this.dragAndDropService.addDragSource(e, {
                            getData: function () {
                                return t;
                            },
                            getContainerId: function () {
                                return i.uniqueId;
                            }
                        }), this.dragAndDropService.addDropTarget(e, {
                            acceptDrag: function (o) {
                                return i.internalAcceptDrag(t, o, e);
                            },
                            drop: function (e) {
                                i.internalDrop(t, e.data);
                            },
                            noDrop: function () {
                                i.internalNoDrop(e);
                            }
                        });
                    }, e.prototype.internalAcceptDrag = function (e, i, o) {
                        var n = i.data !== e && i.containerId === this.uniqueId;
                        return n && (this.dragAfterThisItem(e, i.data) ? this.setDropCssClasses(o, t.DROP_TARGET_ABOVE) : this.setDropCssClasses(o, t.DROP_TARGET_BELOW)), n;
                    }, e.prototype.internalDrop = function (e, t) {
                        var i = this.model.indexOf(t), o = this.model.indexOf(e);
                        this.readOnly ? this.fireItemMoved(i, o) : (this.model.splice(i, 1), this.model.splice(o, 0, t), this.refreshView(), this.fireModelChanged());
                    }, e.prototype.internalNoDrop = function (e) {
                        this.setDropCssClasses(e, t.NOT_DROP_TARGET);
                    }, e.prototype.dragAfterThisItem = function (e, t) {
                        return this.model.indexOf(e) < this.model.indexOf(t);
                    }, e.prototype.setDropCssClasses = function (e, o) {
                        i.addOrRemoveCssClass(e, 'ag-not-drop-target', o === t.NOT_DROP_TARGET), i.addOrRemoveCssClass(e, 'ag-drop-target-above', o === t.DROP_TARGET_ABOVE), i.addOrRemoveCssClass(e, 'ag-drop-target-below', o === t.DROP_TARGET_BELOW);
                    }, e.prototype.getGui = function () {
                        return this.eGui;
                    }, e;
                }();
                e.AgList = n;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = e.SvgFactory.getInstance(), o = function () {
                        function o(t, i, o, n) {
                            this.dragAndDropService = n, this.gridOptionsWrapper = i, this.columnController = t, this.setupComponents(), o.addEventListener(e.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.columnsChanged.bind(this)), o.addEventListener(e.Events.EVENT_COLUMN_MOVED, this.columnsChanged.bind(this)), o.addEventListener(e.Events.EVENT_COLUMN_VISIBLE, this.columnsChanged.bind(this));
                        }
                        return o.prototype.columnsChanged = function () {
                            this.cColumnList.setModel(this.columnController.getAllColumns());
                        }, o.prototype.getDragSource = function () {
                            return this.cColumnList.getUniqueId();
                        }, o.prototype.columnCellRenderer = function (e) {
                            function o() {
                                p.columnController.setColumnVisible(n, !n.visible);
                            }
                            var n = e.value, r = this.columnController.getDisplayNameForCol(n), s = document.createElement('span'), l = document.createElement('span');
                            t.addCssClass(l, 'ag-visible-icons');
                            var a = t.createIcon('columnVisible', this.gridOptionsWrapper, n, i.createColumnShowingSvg), d = t.createIcon('columnHidden', this.gridOptionsWrapper, n, i.createColumnHiddenSvg);
                            l.appendChild(a), l.appendChild(d), a.style.display = n.visible ? '' : 'none', d.style.display = n.visible ? 'none' : '', s.appendChild(l);
                            var u = document.createElement('span');
                            u.innerHTML = r, s.appendChild(u), n.visible || t.addCssClass(s, 'ag-column-not-visible'), l.addEventListener('click', o);
                            var p = this;
                            return s;
                        }, o.prototype.setupComponents = function () {
                            this.cColumnList = new e.AgList(this.dragAndDropService), this.cColumnList.setCellRenderer(this.columnCellRenderer.bind(this)), this.cColumnList.addStyles({
                                height: '100%',
                                overflow: 'auto'
                            }), this.cColumnList.addItemMovedListener(this.onItemMoved.bind(this)), this.cColumnList.setReadOnly(!0);
                            var t = this.gridOptionsWrapper.getLocaleTextFunc(), i = t('columns', 'Columns'), o = document.createElement('div');
                            o.innerHTML = '<div style="text-align: center;">' + i + '</div>', this.layout = new e.BorderLayout({
                                center: this.cColumnList.getGui(),
                                north: o
                            });
                        }, o.prototype.onItemMoved = function (e, t) {
                            this.columnController.moveColumn(e, t);
                        }, o.prototype.getGui = function () {
                            return this.eRootPanel.getGui();
                        }, o;
                    }();
                e.ColumnSelectionPanel = o;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = e.SvgFactory.getInstance(), o = function () {
                        function o(t, i, o, n, r) {
                            this.dragAndDropService = r, this.gridOptionsWrapper = o, this.setupComponents(), this.columnController = t, this.inMemoryRowController = i, n.addEventListener(e.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.columnsChanged.bind(this)), n.addEventListener(e.Events.EVENT_COLUMN_PIVOT_CHANGE, this.columnsChanged.bind(this));
                        }
                        return o.prototype.columnsChanged = function () {
                            this.cColumnList.setModel(this.columnController.getPivotedColumns());
                        }, o.prototype.addDragSource = function (e) {
                            this.cColumnList.addDragSource(e);
                        }, o.prototype.columnCellRenderer = function (e) {
                            var o = e.value, n = this.columnController.getDisplayNameForCol(o), r = document.createElement('span'), s = t.createIcon('columnRemoveFromGroup', this.gridOptionsWrapper, o, i.createArrowUpSvg);
                            t.addCssClass(s, 'ag-visible-icons'), r.appendChild(s);
                            var l = this;
                            s.addEventListener('click', function () {
                                l.columnController.removePivotColumn(o);
                            });
                            var a = document.createElement('span');
                            return a.innerHTML = n, r.appendChild(a), r;
                        }, o.prototype.setupComponents = function () {
                            var t = this.gridOptionsWrapper.getLocaleTextFunc(), i = t('pivotedColumns', 'Pivoted Columns'), o = t('pivotedColumnsEmptyMessage', 'Drag columns from above to pivot');
                            this.cColumnList = new e.AgList(this.dragAndDropService), this.cColumnList.setCellRenderer(this.columnCellRenderer.bind(this)), this.cColumnList.addBeforeDropListener(this.onBeforeDrop.bind(this)), this.cColumnList.addItemMovedListener(this.onItemMoved.bind(this)), this.cColumnList.setEmptyMessage(o), this.cColumnList.addStyles({
                                height: '100%',
                                overflow: 'auto'
                            }), this.cColumnList.setReadOnly(!0);
                            var n = document.createElement('div');
                            n.style.paddingTop = '10px', n.innerHTML = '<div style="text-align: center;">' + i + '</div>', this.layout = new e.BorderLayout({
                                center: this.cColumnList.getGui(),
                                north: n
                            });
                        }, o.prototype.onBeforeDrop = function (e) {
                            this.columnController.addPivotColumn(e);
                        }, o.prototype.onItemMoved = function (e, t) {
                            this.columnController.movePivotColumn(e, t);
                        }, o;
                    }();
                e.GroupSelectionPanel = o;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = e.SvgFactory.getInstance(), o = function () {
                        function o(e, t) {
                            this.popupService = e, this.setupComponents(t), this.itemSelectedListeners = [];
                        }
                        return o.prototype.setWidth = function (e) {
                            this.eValue.style.width = e + 'px', this.agList.addStyles({ width: e + 'px' });
                        }, o.prototype.addItemSelectedListener = function (e) {
                            this.itemSelectedListeners.push(e);
                        }, o.prototype.fireItemSelected = function (e) {
                            for (var t = 0; t < this.itemSelectedListeners.length; t++)
                                this.itemSelectedListeners[t](e);
                        }, o.prototype.setupComponents = function (i) {
                            this.eGui = document.createElement('span'), this.eValue = document.createElement('span'), this.eGui.appendChild(this.eValue), this.agList = new e.AgList(i), this.eValue.addEventListener('click', this.onClick.bind(this)), this.agList.addItemSelectedListener(this.itemSelected.bind(this)), this.agList.addCssClass('ag-popup-list'), t.addStylesToElement(this.eValue, {
                                border: '1px solid darkgrey',
                                display: 'inline-block',
                                paddingLeft: 2
                            }), t.addStylesToElement(this.eGui, { position: 'relative' }), this.agList.addStyles({
                                display: 'inline-block',
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                backgroudColor: 'white'
                            });
                        }, o.prototype.itemSelected = function (e) {
                            this.setSelected(e), this.hidePopupCallback && this.hidePopupCallback(), this.fireItemSelected(e);
                        }, o.prototype.onClick = function () {
                            var e = this.agList.getGui();
                            this.popupService.positionPopup(this.eGui, e, !1), this.hidePopupCallback = this.popupService.addAsModalPopup(e, !0);
                        }, o.prototype.getGui = function () {
                            return this.eGui;
                        }, o.prototype.setSelected = function (e) {
                            this.selectedItem = e, this.refreshView();
                        }, o.prototype.setCellRenderer = function (e) {
                            this.agList.setCellRenderer(e), this.cellRenderer = e;
                        }, o.prototype.refreshView = function () {
                            if (t.removeAllChildren(this.eValue), this.selectedItem)
                                if (this.cellRenderer) {
                                    var e = { value: this.selectedItem };
                                    t.useRenderer(this.eValue, this.cellRenderer, e);
                                } else
                                    this.eValue.appendChild(document.createTextNode(this.selectedItem));
                            var o = i.createSmallArrowDownSvg();
                            o.style['float'] = 'right', o.style.marginTop = '6', o.style.marginRight = '2', this.eValue.appendChild(o);
                        }, o.prototype.setModel = function (e) {
                            this.agList.setModel(e);
                        }, o;
                    }();
                e.AgDropdownList = o;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.SvgFactory.getInstance(), i = e.Constants, o = e.Utils, n = function () {
                        function n(t, i, o, n, r) {
                            this.dragAndDropService = r, this.popupService = o, this.gridOptionsWrapper = i, this.setupComponents(), this.columnController = t, n.addEventListener(e.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.columnsChanged.bind(this)), n.addEventListener(e.Events.EVENT_COLUMN_VALUE_CHANGE, this.columnsChanged.bind(this));
                        }
                        return n.prototype.getLayout = function () {
                            return this.layout;
                        }, n.prototype.columnsChanged = function () {
                            this.cColumnList.setModel(this.columnController.getValueColumns());
                        }, n.prototype.addDragSource = function (e) {
                            this.cColumnList.addDragSource(e);
                        }, n.prototype.cellRenderer = function (n) {
                            var r = n.value, s = this.columnController.getDisplayNameForCol(r), l = document.createElement('span'), a = o.createIcon('columnRemoveFromGroup', this.gridOptionsWrapper, r, t.createArrowUpSvg);
                            o.addCssClass(a, 'ag-visible-icons'), l.appendChild(a);
                            var d = this;
                            a.addEventListener('click', function () {
                                d.columnController.removeValueColumn(r);
                            });
                            var u = new e.AgDropdownList(this.popupService, this.dragAndDropService);
                            u.setModel([
                                i.SUM,
                                i.MIN,
                                i.MAX
                            ]), u.setSelected(r.aggFunc), u.setWidth(45), u.addItemSelectedListener(function (e) {
                                d.columnController.setColumnAggFunction(r, e);
                            }), l.appendChild(u.getGui());
                            var p = document.createElement('span');
                            return p.innerHTML = s, p.style.paddingLeft = '2px', l.appendChild(p), l;
                        }, n.prototype.setupComponents = function () {
                            var t = this.gridOptionsWrapper.getLocaleTextFunc(), i = t('valueColumns', 'Value Columns'), o = t('valueColumnsEmptyMessage', 'Drag columns from above to create values');
                            this.cColumnList = new e.AgList(this.dragAndDropService), this.cColumnList.setCellRenderer(this.cellRenderer.bind(this)), this.cColumnList.setEmptyMessage(o), this.cColumnList.addStyles({
                                height: '100%',
                                overflow: 'auto'
                            }), this.cColumnList.addBeforeDropListener(this.beforeDropListener.bind(this)), this.cColumnList.setReadOnly(!0);
                            var n = document.createElement('div');
                            n.style.paddingTop = '10px', n.innerHTML = '<div style="text-align: center;">' + i + '</div>', this.layout = new e.BorderLayout({
                                center: this.cColumnList.getGui(),
                                north: n
                            });
                        }, n.prototype.beforeDropListener = function (e) {
                            this.columnController.addValueColumn(e);
                        }, n;
                    }();
                e.ValuesSelectionPanel = n;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                        this.isLayoutPanel = !0, this.childPanels = [], this.eGui = document.createElement('div'), this.eGui.style.height = '100%';
                    }
                    return e.prototype.addPanel = function (e, t) {
                        var i;
                        e.isLayoutPanel ? (this.childPanels.push(e), i = e.getGui()) : i = e, t && (i.style.height = t), this.eGui.appendChild(i);
                    }, e.prototype.getGui = function () {
                        return this.eGui;
                    }, e.prototype.doLayout = function () {
                        for (var e = 0; e < this.childPanels.length; e++)
                            this.childPanels[e].doLayout();
                    }, e;
                }();
                e.VerticalStack = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = e.Utils, i = function () {
                        function i() {
                            this.layout = new e.VerticalStack();
                        }
                        return i.prototype.init = function (i, o, n, r, s, l) {
                            var a = n.isToolPanelSuppressPivot(), d = n.isToolPanelSuppressValues(), u = !a, p = !a && !d, h = new e.ColumnSelectionPanel(i, n, s, l), c = a ? '100%' : '50%';
                            this.layout.addPanel(h.layout, c);
                            var g = h.getDragSource();
                            if (p) {
                                var f = new e.ValuesSelectionPanel(i, n, r, s, l);
                                this.layout.addPanel(f.getLayout(), '25%'), f.addDragSource(g);
                            }
                            if (u) {
                                var v = new e.GroupSelectionPanel(i, o, n, s, l), C = p ? '25%' : '50%';
                                this.layout.addPanel(v.layout, C), v.addDragSource(g);
                            }
                            var m = this.layout.getGui();
                            t.addCssClass(m, 'ag-tool-panel-container');
                        }, i;
                    }();
                e.ToolPanel = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function t(t, i, o, n, r, s, l, a, d, u, p, h) {
                        this.grid = t, this.rowRenderer = i, this.headerRenderer = o, this.filterManager = n, this.columnController = r, this.inMemoryRowController = s, this.selectionController = l, this.gridOptionsWrapper = a, this.gridPanel = d, this.valueService = u, this.masterSlaveService = p, this.eventService = h, this.csvCreator = new e.CsvCreator(this.inMemoryRowController, this.columnController, this.grid, this.valueService);
                    }
                    return t.prototype.__getMasterSlaveService = function () {
                        return this.masterSlaveService;
                    }, t.prototype.getDataAsCsv = function (e) {
                        return this.csvCreator.getDataAsCsv(e);
                    }, t.prototype.exportDataAsCsv = function (e) {
                        this.csvCreator.exportDataAsCsv(e);
                    }, t.prototype.setDatasource = function (e) {
                        this.grid.setDatasource(e);
                    }, t.prototype.onNewDatasource = function () {
                        console.log('ag-Grid: onNewDatasource deprecated, please use setDatasource()'), this.grid.setDatasource();
                    }, t.prototype.setRowData = function (e) {
                        this.grid.setRowData(e);
                    }, t.prototype.setRows = function (e) {
                        console.log('ag-Grid: setRows deprecated, please use setRowData()'), this.grid.setRowData(e);
                    }, t.prototype.onNewRows = function () {
                        console.log('ag-Grid: onNewRows deprecated, please use setRowData()'), this.grid.setRowData();
                    }, t.prototype.setFloatingTopRowData = function (e) {
                        this.gridOptionsWrapper.setFloatingTopRowData(e), this.gridPanel.onBodyHeightChange(), this.refreshView();
                    }, t.prototype.setFloatingBottomRowData = function (e) {
                        this.gridOptionsWrapper.setFloatingBottomRowData(e), this.gridPanel.onBodyHeightChange(), this.refreshView();
                    }, t.prototype.onNewCols = function () {
                        console.error('ag-Grid: deprecated, please call setColumnDefs instead providing a list of the defs'), this.grid.setColumnDefs();
                    }, t.prototype.setColumnDefs = function (e) {
                        this.grid.setColumnDefs(e);
                    }, t.prototype.unselectAll = function () {
                        console.error('unselectAll deprecated, call deselectAll instead'), this.deselectAll();
                    }, t.prototype.refreshRows = function (e) {
                        this.rowRenderer.refreshRows(e);
                    }, t.prototype.refreshCells = function (e, t) {
                        this.rowRenderer.refreshCells(e, t);
                    }, t.prototype.rowDataChanged = function (e) {
                        this.rowRenderer.rowDataChanged(e);
                    }, t.prototype.refreshView = function () {
                        this.rowRenderer.refreshView();
                    }, t.prototype.softRefreshView = function () {
                        this.rowRenderer.softRefreshView();
                    }, t.prototype.refreshGroupRows = function () {
                        this.rowRenderer.refreshGroupRows();
                    }, t.prototype.refreshHeader = function () {
                        this.headerRenderer.refreshHeader(), this.headerRenderer.updateFilterIcons();
                    }, t.prototype.isAnyFilterPresent = function () {
                        return this.filterManager.isAnyFilterPresent();
                    }, t.prototype.isAdvancedFilterPresent = function () {
                        return this.filterManager.isAdvancedFilterPresent();
                    }, t.prototype.isQuickFilterPresent = function () {
                        return this.filterManager.isQuickFilterPresent();
                    }, t.prototype.getModel = function () {
                        return this.grid.getRowModel();
                    }, t.prototype.onGroupExpandedOrCollapsed = function (t) {
                        this.grid.updateModelAndRefresh(e.Constants.STEP_MAP, t);
                    }, t.prototype.expandAll = function () {
                        this.inMemoryRowController.expandOrCollapseAll(!0, null), this.grid.updateModelAndRefresh(e.Constants.STEP_MAP);
                    }, t.prototype.collapseAll = function () {
                        this.inMemoryRowController.expandOrCollapseAll(!1, null), this.grid.updateModelAndRefresh(e.Constants.STEP_MAP);
                    }, t.prototype.addVirtualRowListener = function (e, t) {
                        this.grid.addVirtualRowListener(e, t);
                    }, t.prototype.setQuickFilter = function (e) {
                        this.grid.onQuickFilterChanged(e);
                    }, t.prototype.selectIndex = function (e, t, i) {
                        this.selectionController.selectIndex(e, t, i);
                    }, t.prototype.deselectIndex = function (e, t) {
                        void 0 === t && (t = !1), this.selectionController.deselectIndex(e, t);
                    }, t.prototype.selectNode = function (e, t, i) {
                        void 0 === t && (t = !1), void 0 === i && (i = !1), this.selectionController.selectNode(e, t, i);
                    }, t.prototype.deselectNode = function (e) {
                        this.selectionController.deselectNode(e);
                    }, t.prototype.selectAll = function () {
                        this.selectionController.selectAll(), this.rowRenderer.refreshView();
                    }, t.prototype.deselectAll = function () {
                        this.selectionController.deselectAll(), this.rowRenderer.refreshView();
                    }, t.prototype.recomputeAggregates = function () {
                        this.inMemoryRowController.doAggregate(), this.rowRenderer.refreshGroupRows();
                    }, t.prototype.sizeColumnsToFit = function () {
                        if (this.gridOptionsWrapper.isForPrint())
                            return void console.warn('ag-grid: sizeColumnsToFit does not work when forPrint=true');
                        var e = this.gridPanel.getWidthForSizeColsToFit();
                        this.columnController.sizeColumnsToFit(e);
                    }, t.prototype.showLoadingOverlay = function () {
                        this.grid.showLoadingOverlay();
                    }, t.prototype.showNoRowsOverlay = function () {
                        this.grid.showNoRowsOverlay();
                    }, t.prototype.hideOverlay = function () {
                        this.grid.hideOverlay();
                    }, t.prototype.showLoading = function (e) {
                        console.warn('ag-Grid: showLoading is deprecated, please use api.showLoadingOverlay() and api.hideOverlay() instead'), e ? this.grid.showLoadingOverlay() : this.grid.hideOverlay();
                    }, t.prototype.isNodeSelected = function (e) {
                        return this.selectionController.isNodeSelected(e);
                    }, t.prototype.getSelectedNodesById = function () {
                        return this.selectionController.getSelectedNodesById();
                    }, t.prototype.getSelectedNodes = function () {
                        return this.selectionController.getSelectedNodes();
                    }, t.prototype.getSelectedRows = function () {
                        return this.selectionController.getSelectedRows();
                    }, t.prototype.getBestCostNodeSelection = function () {
                        return this.selectionController.getBestCostNodeSelection();
                    }, t.prototype.getRenderedNodes = function () {
                        return this.rowRenderer.getRenderedNodes();
                    }, t.prototype.ensureColIndexVisible = function (e) {
                        this.gridPanel.ensureColIndexVisible(e);
                    }, t.prototype.ensureIndexVisible = function (e) {
                        this.gridPanel.ensureIndexVisible(e);
                    }, t.prototype.ensureNodeVisible = function (e) {
                        this.grid.ensureNodeVisible(e);
                    }, t.prototype.forEachInMemory = function (e) {
                        console.warn('ag-Grid: please use forEachNode instead of forEachInMemory, method is same, I just renamed it, forEachInMemory is deprecated'), this.forEachNode(e);
                    }, t.prototype.forEachNode = function (e) {
                        this.grid.getRowModel().forEachNode(e);
                    }, t.prototype.forEachNodeAfterFilter = function (e) {
                        this.grid.getRowModel().forEachNodeAfterFilter(e);
                    }, t.prototype.forEachNodeAfterFilterAndSort = function (e) {
                        this.grid.getRowModel().forEachNodeAfterFilterAndSort(e);
                    }, t.prototype.getFilterApiForColDef = function (e) {
                        return console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead'), this.getFilterApi(e);
                    }, t.prototype.getFilterApi = function (e) {
                        var t = this.columnController.getColumn(e);
                        return this.filterManager.getFilterApi(t);
                    }, t.prototype.getColumnDef = function (e) {
                        var t = this.columnController.getColumn(e);
                        return t ? t.colDef : null;
                    }, t.prototype.onFilterChanged = function () {
                        this.grid.onFilterChanged();
                    }, t.prototype.setSortModel = function (e) {
                        this.grid.setSortModel(e);
                    }, t.prototype.getSortModel = function () {
                        return this.grid.getSortModel();
                    }, t.prototype.setFilterModel = function (e) {
                        this.filterManager.setFilterModel(e);
                    }, t.prototype.getFilterModel = function () {
                        return this.grid.getFilterModel();
                    }, t.prototype.getFocusedCell = function () {
                        return this.rowRenderer.getFocusedCell();
                    }, t.prototype.setFocusedCell = function (e, t) {
                        this.grid.setFocusedCell(e, t);
                    }, t.prototype.setHeaderHeight = function (e) {
                        this.gridOptionsWrapper.setHeaderHeight(e), this.gridPanel.onBodyHeightChange();
                    }, t.prototype.setGroupHeaders = function (e) {
                        this.gridOptionsWrapper.setGroupHeaders(e), this.columnController.onColumnsChanged(), this.gridPanel.onBodyHeightChange();
                    }, t.prototype.showToolPanel = function (e) {
                        this.grid.showToolPanel(e);
                    }, t.prototype.isToolPanelShowing = function () {
                        return this.grid.isToolPanelShowing();
                    }, t.prototype.hideColumn = function (e, t) {
                        console.warn('ag-Grid: hideColumn deprecated - use hideColumn on columnApi instead eg api.columnApi.hideColumn()'), this.columnController.hideColumns([e], t);
                    }, t.prototype.hideColumns = function (e, t) {
                        console.warn('ag-Grid: hideColumns deprecated - use hideColumns on columnApi instead eg api.columnApi.hideColumns()'), this.columnController.hideColumns(e, t);
                    }, t.prototype.getColumnState = function () {
                        return console.warn('ag-Grid: getColumnState deprecated - use getColumnState on columnApi instead eg api.columnApi.getState()'), this.columnController.getState();
                    }, t.prototype.setColumnState = function (e) {
                        console.warn('ag-Grid: setColumnState deprecated - use setColumnState on columnApi instead eg api.columnApi.setState()'), this.columnController.setState(e);
                    }, t.prototype.doLayout = function () {
                        this.grid.doLayout();
                    }, t.prototype.getValue = function (e, t, i) {
                        return this.valueService.getValue(e, t, i);
                    }, t.prototype.addEventListener = function (e, t) {
                        this.eventService.addEventListener(e, t);
                    }, t.prototype.addGlobalListener = function (e) {
                        this.eventService.addGlobalListener(e);
                    }, t.prototype.removeEventListener = function (e, t) {
                        this.eventService.removeEventListener(e, t);
                    }, t.prototype.removeGlobalListener = function (e) {
                        this.eventService.removeGlobalListener(e);
                    }, t.prototype.dispatchEvent = function (e, t) {
                        this.eventService.dispatchEvent(e, t);
                    }, t.prototype.refreshPivot = function () {
                        this.grid.refreshPivot();
                    }, t.prototype.destroy = function () {
                        this.grid.destroy();
                    }, t;
                }();
                e.GridApi = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                    }
                    return e.prototype.init = function (e, t, i) {
                        this.gridOptionsWrapper = e, this.expressionService = t, this.columnController = i;
                    }, e.prototype.getValue = function (e, t, i) {
                        var o, n = this.gridOptionsWrapper.isEnableCellExpressions(), r = e.field;
                        if (o = e.valueGetter ? this.executeValueGetter(e.valueGetter, t, e, i) : r && t ? t[r] : void 0, n && 'string' == typeof o && 0 === o.indexOf('=')) {
                            var s = o.substring(1);
                            o = this.executeValueGetter(s, t, e, i);
                        }
                        return o;
                    }, e.prototype.executeValueGetter = function (e, t, i, o) {
                        var n = this.gridOptionsWrapper.getContext(), r = this.gridOptionsWrapper.getApi(), s = {
                                data: t,
                                node: o,
                                colDef: i,
                                api: r,
                                context: n,
                                getValue: this.getValueCallback.bind(this, t, o)
                            };
                        return 'function' == typeof e ? e(s) : 'string' == typeof e ? this.expressionService.evaluate(e, s) : void 0;
                    }, e.prototype.getValueCallback = function (e, t, i) {
                        var o = this.columnController.getColumn(i);
                        return o ? this.getValue(o.colDef, e, t) : null;
                    }, e;
                }();
                e.ValueService = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function t(t, i, o, n, r, s) {
                        void 0 === o && (o = null), void 0 === n && (n = null), void 0 === r && (r = null), void 0 === s && (s = null), this.virtualRowCallbacks = {}, this.gridOptions = i, this.setupComponents(n, r, t, o), this.gridOptions.api = new e.GridApi(this, this.rowRenderer, this.headerRenderer, this.filterManager, this.columnController, this.inMemoryRowController, this.selectionController, this.gridOptionsWrapper, this.gridPanel, this.valueService, this.masterSlaveService, this.eventService), this.gridOptions.columnApi = this.columnController.getColumnApi();
                        var l = this;
                        n && n.$watch(s, function (e) {
                            l.onQuickFilterChanged(e);
                        }), this.gridOptionsWrapper.isForPrint() || this.addWindowResizeListener(), this.inMemoryRowController.setAllRows(this.gridOptionsWrapper.getRowData()), this.setupColumns(), this.updateModelAndRefresh(e.Constants.STEP_EVERYTHING), this.decideStartingOverlay(), this.gridOptionsWrapper.getDatasource() && this.setDatasource(), this.doLayout(), this.finished = !1, this.periodicallyDoLayout();
                        var a = { api: i.api };
                        this.eventService.dispatchEvent(e.Events.EVENT_READY, a), this.logger.log('initialised');
                    }
                    return t.prototype.decideStartingOverlay = function () {
                        var e = !this.gridOptionsWrapper.isVirtualPaging();
                        if (e) {
                            var t = !this.gridOptionsWrapper.getRowData(), i = this.gridOptionsWrapper.getRowData() && 0 == this.gridOptionsWrapper.getRowData().length;
                            t && this.showLoadingOverlay(), i && this.showNoRowsOverlay();
                        }
                    }, t.prototype.addWindowResizeListener = function () {
                        var e = this;
                        this.windowResizeListener = function () {
                            e.doLayout();
                        }, window.addEventListener('resize', this.windowResizeListener);
                    }, t.prototype.getRowModel = function () {
                        return this.rowModel;
                    }, t.prototype.periodicallyDoLayout = function () {
                        if (!this.finished) {
                            var e = this;
                            setTimeout(function () {
                                e.doLayout(), e.periodicallyDoLayout();
                            }, 500);
                        }
                    }, t.prototype.setupComponents = function (t, i, o, n) {
                        this.eUserProvidedDiv = o;
                        var r = new e.EventService(), s = new e.GridOptionsWrapper(), l = new e.SelectionController(), a = new e.FilterManager(), d = new e.SelectionRendererFactory(), u = new e.ColumnController(), p = new e.RowRenderer(), h = new e.HeaderRenderer(), c = new e.InMemoryRowController(), g = new e.VirtualPageRowController(), f = new e.ExpressionService(), v = new e.TemplateService(), C = new e.GridPanel(), m = new e.PopupService(), y = new e.ValueService(), E = new e.GroupCreator(), w = new e.MasterSlaveService(), R = new e.LoggerFactory(), S = new e.DragAndDropService();
                        s.init(this.gridOptions, r), R.init(s), this.logger = R.create('Grid'), this.logger.log('initialising'), S.init(R), r.init(R), C.init(s, u, p, w), v.init(t), f.init(R), l.init(this, C, s, t, p, r), a.init(this, s, i, t, u, m, y), d.init(this, l), u.init(this, d, s, f, y, w, r), p.init(u, s, C, this, d, i, t, l, f, v, y, r), h.init(s, u, C, this, a, t, i), c.init(s, u, this, a, t, E, y, r), g.init(p, s, this), y.init(s, f, u), E.init(y), w.init(s, u, C, R, r), n && r.addGlobalListener(n);
                        var O = null, A = null;
                        s.isForPrint() || (A = new e.ToolPanel(), O = A.layout, A.init(u, c, s, m, r, S));
                        var T = c.getModel();
                        l.setRowModel(T), a.setRowModel(T), p.setRowModel(T), C.setRowModel(T);
                        var b = null, L = null;
                        s.isForPrint() || (b = new e.PaginationController(), b.init(this, s), L = b.getGui()), this.rowModel = T, this.usingInMemoryModel = !0, this.selectionController = l, this.columnController = u, this.inMemoryRowController = c, this.virtualPageRowController = g, this.rowRenderer = p, this.headerRenderer = h, this.paginationController = b, this.filterManager = a, this.toolPanel = A, this.gridPanel = C, this.valueService = y, this.masterSlaveService = w, this.eventService = r, this.gridOptionsWrapper = s, this.dragAndDropService = S, this.eRootPanel = new e.BorderLayout({
                            center: C.getLayout(),
                            east: O,
                            south: L,
                            dontFill: s.isForPrint(),
                            name: 'eRootPanel'
                        }), m.init(this.eRootPanel.getGui()), this.eRootPanel.setSouthVisible(!1), this.showToolPanel(s.isShowToolPanel()), o.appendChild(this.eRootPanel.getGui()), this.logger.log('grid DOM added'), r.addEventListener(e.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnChanged.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_GROUP_OPENED, this.onColumnChanged.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_MOVED, this.onColumnChanged.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_PINNED_COUNT_CHANGED, this.onColumnChanged.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_PIVOT_CHANGE, this.onColumnChanged.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_RESIZED, this.onColumnChanged.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_VALUE_CHANGE, this.onColumnChanged.bind(this)), r.addEventListener(e.Events.EVENT_COLUMN_VISIBLE, this.onColumnChanged.bind(this));
                    }, t.prototype.onColumnChanged = function (e) {
                        e.isPivotChanged() && this.inMemoryRowController.onPivotChanged(), e.isValueChanged() && this.inMemoryRowController.doAggregate(), e.isIndividualColumnResized() ? this.onIndividualColumnResized(e.getColumn()) : this.refreshHeaderAndBody(), this.gridPanel.showPinnedColContainersIfNeeded();
                    }, t.prototype.refreshPivot = function () {
                        this.inMemoryRowController.onPivotChanged(), this.refreshHeaderAndBody();
                    }, t.prototype.getEventService = function () {
                        return this.eventService;
                    }, t.prototype.onIndividualColumnResized = function (e) {
                        this.headerRenderer.onIndividualColumnResized(e), this.rowRenderer.onIndividualColumnResized(e), e.pinned ? this.updatePinnedColContainerWidthAfterColResize() : this.updateBodyContainerWidthAfterColResize();
                    }, t.prototype.showToolPanel = function (e) {
                        return this.toolPanel ? (this.toolPanelShowing = e, void this.eRootPanel.setEastVisible(e)) : void (this.toolPanelShowing = !1);
                    }, t.prototype.isToolPanelShowing = function () {
                        return this.toolPanelShowing;
                    }, t.prototype.isUsingInMemoryModel = function () {
                        return this.usingInMemoryModel;
                    }, t.prototype.setDatasource = function (e) {
                        e && (this.gridOptions.datasource = e);
                        var t = this.gridOptionsWrapper.getDatasource();
                        this.doingVirtualPaging = this.gridOptionsWrapper.isVirtualPaging() && t, this.doingPagination = t && !this.doingVirtualPaging;
                        var i;
                        this.doingVirtualPaging ? (this.paginationController.setDatasource(null), this.virtualPageRowController.setDatasource(t), this.rowModel = this.virtualPageRowController.getModel(), this.usingInMemoryModel = !1, i = !1) : this.doingPagination ? (this.paginationController.setDatasource(t), this.virtualPageRowController.setDatasource(null), this.rowModel = this.inMemoryRowController.getModel(), this.usingInMemoryModel = !0, i = !0) : (this.paginationController.setDatasource(null), this.virtualPageRowController.setDatasource(null), this.rowModel = this.inMemoryRowController.getModel(), this.usingInMemoryModel = !0, i = !1), this.selectionController.setRowModel(this.rowModel), this.filterManager.setRowModel(this.rowModel), this.rowRenderer.setRowModel(this.rowModel), this.gridPanel.setRowModel(this.rowModel), this.eRootPanel.setSouthVisible(i), this.rowRenderer.refreshView(), this.doLayout();
                    }, t.prototype.refreshHeaderAndBody = function () {
                        this.headerRenderer.refreshHeader(), this.headerRenderer.updateFilterIcons(), this.headerRenderer.updateSortIcons(), this.gridPanel.setBodyContainerWidth(), this.gridPanel.setPinnedColContainerWidth(), this.rowRenderer.refreshView();
                    }, t.prototype.destroy = function () {
                        this.windowResizeListener && (window.removeEventListener('resize', this.windowResizeListener), this.logger.log('Removing windowResizeListener')), this.finished = !0, this.dragAndDropService.destroy(), this.eUserProvidedDiv.removeChild(this.eRootPanel.getGui()), this.logger.log('Grid DOM removed');
                    }, t.prototype.onQuickFilterChanged = function (e) {
                        var t = this.filterManager.setQuickFilter(e);
                        t && this.onFilterChanged();
                    }, t.prototype.onFilterModified = function () {
                        this.eventService.dispatchEvent(e.Events.EVENT_FILTER_MODIFIED);
                    }, t.prototype.onFilterChanged = function () {
                        this.eventService.dispatchEvent(e.Events.EVENT_BEFORE_FILTER_CHANGED), this.filterManager.onFilterChanged(), this.headerRenderer.updateFilterIcons(), this.gridOptionsWrapper.isEnableServerSideFilter() ? this.setDatasource() : this.updateModelAndRefresh(e.Constants.STEP_FILTER), this.eventService.dispatchEvent(e.Events.EVENT_AFTER_FILTER_CHANGED);
                    }, t.prototype.onRowClicked = function (e, t, i) {
                        if (!i.group && !i.floating) {
                            var o = this.gridOptionsWrapper, n = this.selectionController;
                            if (o.isRowSelection() && !o.isSuppressRowClickSelection()) {
                                var r = e && n.isNodeSelected(i) && o.isRowDeselection();
                                r ? n.deselectNode(i) : n.selectNode(i, e);
                            }
                        }
                    }, t.prototype.showLoadingOverlay = function () {
                        this.gridPanel.showLoadingOverlay();
                    }, t.prototype.showNoRowsOverlay = function () {
                        this.gridPanel.showNoRowsOverlay();
                    }, t.prototype.hideOverlay = function () {
                        this.gridPanel.hideOverlay();
                    }, t.prototype.setupColumns = function () {
                        this.columnController.onColumnsChanged(), this.gridPanel.showPinnedColContainersIfNeeded();
                    }, t.prototype.updateModelAndRefresh = function (e, t) {
                        this.inMemoryRowController.updateModel(e), this.rowRenderer.refreshView(t);
                    }, t.prototype.setRowData = function (t, i) {
                        t && (this.gridOptions.rowData = t);
                        var o = this.gridOptionsWrapper.getRowData();
                        this.inMemoryRowController.setAllRows(o, i), this.selectionController.deselectAll(), this.filterManager.onNewRowsLoaded(), this.updateModelAndRefresh(e.Constants.STEP_EVERYTHING), this.headerRenderer.updateFilterIcons(), o && o.length > 0 ? this.hideOverlay() : this.showNoRowsOverlay();
                    }, t.prototype.ensureNodeVisible = function (e) {
                        if (this.doingVirtualPaging)
                            throw 'Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory';
                        for (var t = this.rowModel.getVirtualRowCount(), i = 'function' == typeof e, o = -1, n = 0; t > n; n++) {
                            var r = this.rowModel.getVirtualRow(n);
                            if (i) {
                                if (e(r)) {
                                    o = n;
                                    break;
                                }
                            } else if (e === r || e === r.data) {
                                o = n;
                                break;
                            }
                        }
                        o >= 0 && this.gridPanel.ensureIndexVisible(o);
                    }, t.prototype.getFilterModel = function () {
                        return this.filterManager.getFilterModel();
                    }, t.prototype.setFocusedCell = function (e, t) {
                        this.gridPanel.ensureIndexVisible(e), this.gridPanel.ensureColIndexVisible(t);
                        var i = this;
                        setTimeout(function () {
                            i.rowRenderer.setFocusedCell(e, t);
                        }, 10);
                    }, t.prototype.getSortModel = function () {
                        var e, t = this.columnController.getAllColumns(), i = [];
                        for (e = 0; e < t.length; e++)
                            t[e].sort && i.push(t[e]);
                        i.sort(function (e, t) {
                            return e.sortedAt - t.sortedAt;
                        });
                        var o = [];
                        for (e = 0; e < i.length; e++) {
                            var n = {
                                colId: i[e].colId,
                                sort: i[e].sort
                            };
                            o.push(n);
                        }
                        return o;
                    }, t.prototype.setSortModel = function (e) {
                        if (!this.gridOptionsWrapper.isEnableSorting())
                            return void console.warn('ag-grid: You are setting the sort model on a grid that does not have sorting enabled');
                        for (var t = null !== e && void 0 !== e && e.length > 0, i = this.columnController.getAllColumns(), o = 0; o < i.length; o++) {
                            var n = i[o], r = null, s = -1;
                            if (t && !n.colDef.suppressSorting)
                                for (var l = 0; l < e.length; l++) {
                                    var a = e[l];
                                    'string' == typeof a.colId && 'string' == typeof n.colId && a.colId === n.colId && (r = a.sort, s = l);
                                }
                            r ? (n.sort = r, n.sortedAt = s) : (n.sort = null, n.sortedAt = null);
                        }
                        this.onSortingChanged();
                    }, t.prototype.onSortingChanged = function () {
                        this.eventService.dispatchEvent(e.Events.EVENT_BEFORE_SORT_CHANGED), this.headerRenderer.updateSortIcons(), this.gridOptionsWrapper.isEnableServerSideSorting() ? this.setDatasource() : this.updateModelAndRefresh(e.Constants.STEP_SORT), this.eventService.dispatchEvent(e.Events.EVENT_AFTER_SORT_CHANGED);
                    }, t.prototype.addVirtualRowListener = function (e, t) {
                        this.virtualRowCallbacks[e] || (this.virtualRowCallbacks[e] = []), this.virtualRowCallbacks[e].push(t);
                    }, t.prototype.onVirtualRowSelected = function (e, t) {
                        this.virtualRowCallbacks[e] && this.virtualRowCallbacks[e].forEach(function (e) {
                            'function' == typeof e.rowSelected && e.rowSelected(t);
                        }), this.rowRenderer.onRowSelected(e, t);
                    }, t.prototype.onVirtualRowRemoved = function (e) {
                        this.virtualRowCallbacks[e] && this.virtualRowCallbacks[e].forEach(function (e) {
                            'function' == typeof e.rowRemoved && e.rowRemoved();
                        }), delete this.virtualRowCallbacks[e];
                    }, t.prototype.setColumnDefs = function (t) {
                        t && (this.gridOptions.columnDefs = t), this.setupColumns(), this.updateModelAndRefresh(e.Constants.STEP_EVERYTHING), this.doLayout();
                    }, t.prototype.updateBodyContainerWidthAfterColResize = function () {
                        this.rowRenderer.setMainRowWidths(), this.gridPanel.setBodyContainerWidth();
                    }, t.prototype.updatePinnedColContainerWidthAfterColResize = function () {
                        this.gridPanel.setPinnedColContainerWidth();
                    }, t.prototype.doLayout = function () {
                        var e = this.eRootPanel.doLayout();
                        e && this.rowRenderer.drawVirtualRows();
                    }, t;
                }();
                e.Grid = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (e) {
                var t = function () {
                    function e() {
                    }
                    return e.copyAttributesToGridOptions = function (t, i) {
                        'object' != typeof t && (t = {});
                        var o = t;
                        return e.SIMPLE_PROPERTIES.concat(e.WITH_IMPACT_OTHER_PROPERTIES).forEach(function (e) {
                            'undefined' != typeof i[e] && (o[e] = i[e]);
                        }), e.SIMPLE_BOOLEAN_PROPERTIES.concat(e.WITH_IMPACT_BOOLEAN_PROPERTIES).forEach(function (t) {
                            'undefined' != typeof i[t] && (o[t] = e.toBoolean(i[t]));
                        }), e.SIMPLE_NUMBER_PROPERTIES.concat(e.WITH_IMPACT_NUMBER_PROPERTIES).forEach(function (t) {
                            'undefined' != typeof i[t] && (o[t] = e.toNumber(i[t]));
                        }), t;
                    }, e.processOnChange = function (t, i, o) {
                        if (o._initialised && t) {
                            var n = i;
                            e.SIMPLE_PROPERTIES.forEach(function (e) {
                                t[e] && (n[e] = t[e].currentValue);
                            }), e.SIMPLE_BOOLEAN_PROPERTIES.forEach(function (i) {
                                t[i] && (n[i] = e.toBoolean(t[i].currentValue));
                            }), e.SIMPLE_NUMBER_PROPERTIES.forEach(function (i) {
                                t[i] && (n[i] = e.toNumber(t[i].currentValue));
                            }), t.showToolPanel && o.api.showToolPanel(o.showToolPanel), t.quickFilterText && o.api.setQuickFilter(o.quickFilterText), t.rowData && o.api.setRowData(o.rowData), t.floatingTopRowData && o.api.setFloatingTopRowData(o.floatingTopRowData), t.floatingBottomRowData && o.api.setFloatingBottomRowData(o.floatingBottomRowData), t.columnDefs && o.api.setColumnDefs(o.columnDefs), t.datasource && o.api.setDatasource(o.datasource), t.pinnedColumnCount && o.columnApi.setPinnedColumnCount(o.pinnedColumnCount), t.pinnedColumnCount && o.columnApi.setPinnedColumnCount(o.pinnedColumnCount), t.groupHeaders && o.api.setGroupHeaders(o.groupHeaders), t.headerHeight && o.api.setHeaderHeight(o.headerHeight), t.groupKeys && (o.gridOptions.groupKeys = o.groupKeys), t.groupAggFunction && (o.gridOptions.groupAggFunction = o.groupAggFunction), t.groupAggFields && (o.gridOptions.groupAggFields = o.groupAggFields);
                        }
                    }, e.toBoolean = function (e) {
                        return 'boolean' == typeof e ? e : 'string' == typeof e ? 'TRUE' === e.toUpperCase() || '' == e : !1;
                    }, e.toNumber = function (e) {
                        return 'number' == typeof e ? e : 'string' == typeof e ? Number(e) : void 0;
                    }, e.SIMPLE_PROPERTIES = [
                        'sortingOrder',
                        'icons',
                        'localeText',
                        'localeTextFunc',
                        'groupColumnDef',
                        'context',
                        'rowStyle',
                        'rowClass',
                        'headerCellRenderer',
                        'groupDefaultExpanded',
                        'slaveGrids',
                        'rowSelection',
                        'overlayLoadingTemplate',
                        'overlayNoRowsTemplate'
                    ], e.SIMPLE_NUMBER_PROPERTIES = [
                        'rowHeight',
                        'rowBuffer',
                        'colWidth'
                    ], e.SIMPLE_BOOLEAN_PROPERTIES = [
                        'virtualPaging',
                        'toolPanelSuppressPivot',
                        'toolPanelSuppressValues',
                        'rowsAlreadyGrouped',
                        'suppressRowClickSelection',
                        'suppressCellSelection',
                        'suppressHorizontalScroll',
                        'debug',
                        'enableColResize',
                        'enableCellExpressions',
                        'enableSorting',
                        'enableServerSideSorting',
                        'enableFilter',
                        'enableServerSideFilter',
                        'angularCompileRows',
                        'angularCompileFilters',
                        'angularCompileHeaders',
                        'groupSuppressAutoColumn',
                        'groupSelectsChildren',
                        'groupHidePivotColumns',
                        'groupIncludeFooter',
                        'groupUseEntireRow',
                        'groupSuppressRow',
                        'groupSuppressBlankHeader',
                        'forPrint',
                        'suppressMenuHide',
                        'rowDeselection',
                        'unSortIcon',
                        'suppressMultiSort',
                        'suppressScrollLag',
                        'singleClickEdit',
                        'suppressLoadingOverlay',
                        'suppressNoRowsOverlay'
                    ], e.WITH_IMPACT_NUMBER_PROPERTIES = [
                        'pinnedColumnCount',
                        'headerHeight'
                    ], e.WITH_IMPACT_BOOLEAN_PROPERTIES = [
                        'groupHeaders',
                        'showToolPanel'
                    ], e.WITH_IMPACT_OTHER_PROPERTIES = [
                        'rowData',
                        'floatingTopRowData',
                        'floatingBottomRowData',
                        'groupKeys',
                        'groupAggFields',
                        'columnDefs',
                        'datasource',
                        'quickFilterText'
                    ], e.CALLBACKS = [
                        'groupRowInnerRenderer',
                        'groupRowRenderer',
                        'groupAggFunction',
                        'isScrollLag',
                        'isExternalFilterPresent',
                        'doesExternalFilterPass',
                        'getRowClass',
                        'getRowStyle',
                        'headerCellRenderer'
                    ], e.ALL_PROPERTIES = e.SIMPLE_PROPERTIES.concat(e.SIMPLE_NUMBER_PROPERTIES).concat(e.SIMPLE_BOOLEAN_PROPERTIES).concat(e.WITH_IMPACT_NUMBER_PROPERTIES).concat(e.WITH_IMPACT_BOOLEAN_PROPERTIES).concat(e.WITH_IMPACT_OTHER_PROPERTIES), e;
                }();
                e.ComponentUtil = t;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (t) {
                function i(e) {
                    o = e, n.annotations = [
                        new o.core.Component({
                            selector: 'ag-grid-ng2',
                            outputs: [
                                'modelUpdated',
                                'cellClicked',
                                'cellDoubleClicked',
                                'cellContextMenu',
                                'cellValueChanged',
                                'cellFocused',
                                'rowSelected',
                                'rowDeselected',
                                'selectionChanged',
                                'beforeFilterChanged',
                                'afterFilterChanged',
                                'filterModified',
                                'beforeSortChanged',
                                'afterSortChanged',
                                'virtualRowRemoved',
                                'rowClicked',
                                'rowDoubleClicked',
                                'ready',
                                'columnEverythingChanged',
                                'columnPivotChanged',
                                'columnValueChanged',
                                'columnMoved',
                                'columnVisible',
                                'columnGroupOpened',
                                'columnResized',
                                'columnPinnedCountChanged'
                            ],
                            inputs: ['gridOptions'].concat(t.ComponentUtil.SIMPLE_PROPERTIES).concat(t.ComponentUtil.SIMPLE_BOOLEAN_PROPERTIES).concat(t.ComponentUtil.SIMPLE_NUMBER_PROPERTIES).concat(t.ComponentUtil.WITH_IMPACT_OTHER_PROPERTIES).concat(t.ComponentUtil.WITH_IMPACT_BOOLEAN_PROPERTIES).concat(t.ComponentUtil.WITH_IMPACT_NUMBER_PROPERTIES).concat(t.ComponentUtil.CALLBACKS),
                            compileChildren: !1
                        }),
                        new o.core.View({
                            template: '',
                            encapsulation: o.core.ViewEncapsulation.None
                        })
                    ], n.parameters = [[o.core.ElementRef]];
                }
                var o, n = function () {
                        function i(e) {
                            this.elementDef = e, this._initialised = !1, this.modelUpdated = new o.core.EventEmitter(), this.cellClicked = new o.core.EventEmitter(), this.cellDoubleClicked = new o.core.EventEmitter(), this.cellContextMenu = new o.core.EventEmitter(), this.cellValueChanged = new o.core.EventEmitter(), this.cellFocused = new o.core.EventEmitter(), this.rowSelected = new o.core.EventEmitter(), this.rowDeselected = new o.core.EventEmitter(), this.selectionChanged = new o.core.EventEmitter(), this.beforeFilterChanged = new o.core.EventEmitter(), this.afterFilterChanged = new o.core.EventEmitter(), this.filterModified = new o.core.EventEmitter(), this.beforeSortChanged = new o.core.EventEmitter(), this.afterSortChanged = new o.core.EventEmitter(), this.virtualRowRemoved = new o.core.EventEmitter(), this.rowClicked = new o.core.EventEmitter(), this.rowDoubleClicked = new o.core.EventEmitter(), this.ready = new o.core.EventEmitter(), this.columnEverythingChanged = new o.core.EventEmitter(), this.columnPivotChanged = new o.core.EventEmitter(), this.columnValueChanged = new o.core.EventEmitter(), this.columnMoved = new o.core.EventEmitter(), this.columnVisible = new o.core.EventEmitter(), this.columnGroupOpened = new o.core.EventEmitter(), this.columnResized = new o.core.EventEmitter(), this.columnPinnedCountChanged = new o.core.EventEmitter();
                        }
                        return i.prototype.ngOnInit = function () {
                            this.gridOptions = t.ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this);
                            var i = this.elementDef.nativeElement, o = this.globalEventListener.bind(this);
                            this._agGrid = new e.grid.Grid(i, this.gridOptions, o), this.api = this.gridOptions.api, this.columnApi = this.gridOptions.columnApi, this._initialised = !0;
                        }, i.prototype.ngOnChanges = function (e) {
                            t.ComponentUtil.processOnChange(e, this.gridOptions, this);
                        }, i.prototype.ngOnDestroy = function () {
                            this.api.destroy();
                        }, i.prototype.globalEventListener = function (e, i) {
                            var o;
                            switch (e) {
                            case t.Events.EVENT_COLUMN_GROUP_OPENED:
                                o = this.columnGroupOpened;
                                break;
                            case t.Events.EVENT_COLUMN_EVERYTHING_CHANGED:
                                o = this.columnEverythingChanged;
                                break;
                            case t.Events.EVENT_COLUMN_MOVED:
                                o = this.columnMoved;
                                break;
                            case t.Events.EVENT_COLUMN_PINNED_COUNT_CHANGED:
                                o = this.columnPinnedCountChanged;
                                break;
                            case t.Events.EVENT_COLUMN_PIVOT_CHANGE:
                                o = this.columnPivotChanged;
                                break;
                            case t.Events.EVENT_COLUMN_RESIZED:
                                o = this.columnResized;
                                break;
                            case t.Events.EVENT_COLUMN_VALUE_CHANGE:
                                o = this.columnValueChanged;
                                break;
                            case t.Events.EVENT_COLUMN_VISIBLE:
                                o = this.columnVisible;
                                break;
                            case t.Events.EVENT_MODEL_UPDATED:
                                o = this.modelUpdated;
                                break;
                            case t.Events.EVENT_CELL_CLICKED:
                                o = this.cellClicked;
                                break;
                            case t.Events.EVENT_CELL_DOUBLE_CLICKED:
                                o = this.cellDoubleClicked;
                                break;
                            case t.Events.EVENT_CELL_CONTEXT_MENU:
                                o = this.cellContextMenu;
                                break;
                            case t.Events.EVENT_CELL_VALUE_CHANGED:
                                o = this.cellValueChanged;
                                break;
                            case t.Events.EVENT_CELL_FOCUSED:
                                o = this.cellFocused;
                                break;
                            case t.Events.EVENT_ROW_SELECTED:
                                o = this.rowSelected;
                                break;
                            case t.Events.EVENT_ROW_DESELECTED:
                                o = this.rowDeselected;
                                break;
                            case t.Events.EVENT_SELECTION_CHANGED:
                                o = this.selectionChanged;
                                break;
                            case t.Events.EVENT_BEFORE_FILTER_CHANGED:
                                o = this.beforeFilterChanged;
                                break;
                            case t.Events.EVENT_AFTER_FILTER_CHANGED:
                                o = this.afterFilterChanged;
                                break;
                            case t.Events.EVENT_AFTER_SORT_CHANGED:
                                o = this.afterSortChanged;
                                break;
                            case t.Events.EVENT_BEFORE_SORT_CHANGED:
                                o = this.beforeSortChanged;
                                break;
                            case t.Events.EVENT_FILTER_MODIFIED:
                                o = this.filterModified;
                                break;
                            case t.Events.EVENT_VIRTUAL_ROW_REMOVED:
                                o = this.virtualRowRemoved;
                                break;
                            case t.Events.EVENT_ROW_CLICKED:
                                o = this.rowClicked;
                                break;
                            case t.Events.EVENT_ROW_DOUBLE_CLICKED:
                                o = this.rowDoubleClicked;
                                break;
                            case t.Events.EVENT_READY:
                                o = this.ready;
                                break;
                            default:
                                return void console.log('ag-Grid: AgGridNg2 - unknown event type: ' + e);
                            }
                            o.next(i);
                        }, i;
                    }();
                if (t.AgGridNg2 = n, window.ng && window.ng.core && window.ng.core.Component) {
                    var r = window.ng;
                    i(r);
                }
                t.initialiseAgGridWithAngular2 = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (t) {
                function i(e) {
                    var t = e.module('agGrid', []);
                    t.directive('agGrid', function () {
                        return {
                            restrict: 'A',
                            controller: [
                                '$element',
                                '$scope',
                                '$compile',
                                '$attrs',
                                o
                            ],
                            scope: !0
                        };
                    });
                }
                function o(t, i, o, n) {
                    var r, s, l = n.agGrid;
                    if (s = l + '.quickFilterText', r = i.$eval(l), !r)
                        return void console.warn('WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope');
                    var a = t[0], d = new e.grid.Grid(a, r, null, i, o, s);
                    i.$on('$destroy', function () {
                        d.destroy();
                    });
                }
                var n = window.angular;
                'undefined' != typeof n && 'undefined' != typeof n.module && 'undefined' !== n.directive && i(n), t.initialiseAgGridWithAngular1 = i;
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {}));
        var ag;
        !function (e) {
            var t;
            !function (t) {
                function i(e) {
                    if ('string' == typeof e) {
                        var t = e.replace(/-([a-z])/g, function (e) {
                            return e[1].toUpperCase();
                        });
                        return t;
                    }
                    return e;
                }
                if (document.registerElement) {
                    var o = Object.create(HTMLElement.prototype);
                    t.ComponentUtil.ALL_PROPERTIES.forEach(function (e) {
                        Object.defineProperty(o, e, {
                            set: function (t) {
                                this.__agGridSetProperty(e, t);
                            },
                            get: function () {
                                return this.__agGridGetProperty(e);
                            }
                        });
                    }), o.__agGridSetProperty = function (e, t) {
                        this.__attributes || (this.__attributes = {}), this.__attributes[e] = t;
                        var i = {};
                        i[e] = { currentValue: t }, this.onChange(i);
                    }, o.onChange = function (e) {
                        t.ComponentUtil.processOnChange(e, this.gridOptions, this);
                    }, o.__agGridGetProperty = function (e) {
                        return this.__attributes || (this.__attributes = {}), this.__attributes[e];
                    }, o.setGridOptions = function (i) {
                        var o = this.globalEventListener.bind(this);
                        this._gridOptions = t.ComponentUtil.copyAttributesToGridOptions(i, this), this._agGrid = new e.grid.Grid(this, this._gridOptions, o), this.api = i.api, this.columnApi = i.columnApi, this._initialised = !0;
                    }, o.createdCallback = function () {
                        for (var e = 0; e < this.attributes.length; e++) {
                            var t = this.attributes[e];
                            this.setPropertyFromAttribute(t);
                        }
                    }, o.setPropertyFromAttribute = function (e) {
                        var o = i(e.nodeName), n = e.nodeValue;
                        t.ComponentUtil.ALL_PROPERTIES.indexOf(o) >= 0 && (this[o] = n);
                    }, o.attachedCallback = function (e) {
                    }, o.detachedCallback = function (e) {
                    }, o.attributeChangedCallback = function (e) {
                        var t = this.attributes[e];
                        this.setPropertyFromAttribute(t);
                    }, o.globalEventListener = function (e, t) {
                        var i = e.toLowerCase(), o = new Event(i), n = o;
                        n.agGridDetails = t, this.dispatchEvent(o);
                        var r = 'on' + i;
                        'function' == typeof this[r] && this[r](o);
                    }, document.registerElement('ag-grid', { prototype: o });
                }
            }(t = e.grid || (e.grid = {}));
        }(ag || (ag = {})), function () {
            function e(e, t) {
                var i;
                if ('string' == typeof e) {
                    if (i = document.querySelector(e), !i)
                        return void console.warn('WARNING - was not able to find element ' + e + ' in the DOM, ag-Grid initialisation aborted.');
                } else
                    i = e;
                new ag.grid.Grid(i, t);
            }
            var t = this;
            'undefined' != typeof exports && ('undefined' != typeof module && module.exports && (exports = module.exports = e), exports.angularGrid = e), t.agGridGlobalFunc = e;
        }.call(window);
    }(function () {
        return this;
    }()));
});
/*blueimp-canvas-to-blob@3.3.0#js/canvas-to-blob*/
;
(function (window) {
    'use strict';
    var CanvasPrototype = window.HTMLCanvasElement && window.HTMLCanvasElement.prototype;
    var hasBlobConstructor = window.Blob && function () {
        try {
            return Boolean(new Blob());
        } catch (e) {
            return false;
        }
    }();
    var hasArrayBufferViewSupport = hasBlobConstructor && window.Uint8Array && function () {
        try {
            return new Blob([new Uint8Array(100)]).size === 100;
        } catch (e) {
            return false;
        }
    }();
    var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
    var dataURIPattern = /^data:((.*?)(;charset=.*?)?)(;base64)?,/;
    var dataURLtoBlob = (hasBlobConstructor || BlobBuilder) && window.atob && window.ArrayBuffer && window.Uint8Array && function (dataURI) {
        var matches, mediaType, isBase64, dataString, byteString, arrayBuffer, intArray, i, bb;
        matches = dataURI.match(dataURIPattern);
        if (!matches) {
            throw new Error('invalid data URI');
        }
        mediaType = matches[2] ? matches[1] : 'text/plain' + (matches[3] || ';charset=US-ASCII');
        isBase64 = !!matches[4];
        dataString = dataURI.slice(matches[0].length);
        if (isBase64) {
            byteString = atob(dataString);
        } else {
            byteString = decodeURIComponent(dataString);
        }
        arrayBuffer = new ArrayBuffer(byteString.length);
        intArray = new Uint8Array(arrayBuffer);
        for (i = 0; i < byteString.length; i += 1) {
            intArray[i] = byteString.charCodeAt(i);
        }
        if (hasBlobConstructor) {
            return new Blob([hasArrayBufferViewSupport ? intArray : arrayBuffer], { type: mediaType });
        }
        bb = new BlobBuilder();
        bb.append(arrayBuffer);
        return bb.getBlob(mediaType);
    };
    if (window.HTMLCanvasElement && !CanvasPrototype.toBlob) {
        if (CanvasPrototype.mozGetAsFile) {
            CanvasPrototype.toBlob = function (callback, type, quality) {
                if (quality && CanvasPrototype.toDataURL && dataURLtoBlob) {
                    callback(dataURLtoBlob(this.toDataURL(type, quality)));
                } else {
                    callback(this.mozGetAsFile('blob', type));
                }
            };
        } else if (CanvasPrototype.toDataURL && dataURLtoBlob) {
            CanvasPrototype.toBlob = function (callback, type, quality) {
                callback(dataURLtoBlob(this.toDataURL(type, quality)));
            };
        }
    }
    if (typeof define === 'function' && define.amd) {
        define('blueimp-canvas-to-blob@3.3.0#js/canvas-to-blob', function () {
            return dataURLtoBlob;
        });
    } else if (typeof module === 'object' && module.exports) {
        module.exports = dataURLtoBlob;
    } else {
        window.dataURLtoBlob = dataURLtoBlob;
    }
}(window));
/*notific8@2.3.1#dist/jquery.notific8.min*/
define('notific8@2.3.1#dist/jquery.notific8.min', [
    'module',
    '@loader',
    'jquery',
    'notific8/dist/jquery.notific8.css'
], function (module, loader) {
    loader.get('@@global-helpers').prepareGlobal(module.id, [
        'jquery',
        'notific8/dist/jquery.notific8.css'
    ]);
    var define = loader.global.define;
    var require = loader.global.require;
    var source = '/**\n * @author Will Steinmetz\n * jQuery notification plug-in inspired by the notification style of Windows 8\n * Copyright (c)2013-2015, Will Steinmetz\n * Licensed under the BSD license.\n * http://opensource.org/licenses/BSD-3-Clause\n */!function(a){"use strict";var b,c,d;c=void 0,d={life:1e4,family:"legacy",theme:"teal",sticky:!1,verticalEdge:"right",horizontalEdge:"top",zindex:1100,icon:!1,closeText:"close",onInit:null,onCreate:null,onClose:null,namespace:"notific8"},b=function(){var b,e,f,g,h,i,j,k,l,m,n,o,p,q,r;return l=function(b){a(window).unbind(".notific8"),a("."+b.namespace+"-container").remove()},h=function(c){var d,h,i,k,l,m,n,o,q;k=c.data("notific8"),o=Number(a("body").data("notific8s")),i="margin-"+k.settings.verticalEdge,q=k.settings.verticalEdge,l=k.settings.horizontalEdge,d=a("."+k.settings.namespace+"-container."+q+"."+l),o+=1,a("body").data("notific8s",o),n=""+k.settings.namespace+"-notification-"+o,m=\'<div class="\'+p(k).join(" ")+\'" id="\'+n+\'">\\n\'+f(k)+"\\n"+e(k)+"\\n"+b(k)+"\\n"+g(k)+"\\n</div>",h=a(m),d.append(h),k.settings.onCreate&&k.settings.onCreate(h,k),setTimeout(function(){h.addClass("open"),k.settings.sticky||!function(a,b){setTimeout(function(){j(a,k)},b)}(h,Number(k.settings.life)+200)},5)},m=function(a){return a.settings.hasOwnProperty("icon")&&"string"==typeof a.settings.icon},b=function(a){var b;return b=\'<div class="\'+a.settings.namespace+"-close",a.settings.sticky?(b+=\' sticky">\',b+=""+a.settings.closeText):b+=\'">&times;\',b+="</div>"},e=function(a){return a.settings.hasOwnProperty("heading")&&"string"==typeof a.settings.heading?\'<div class="\'+a.settings.namespace+\'-heading">\\n  \'+a.settings.heading+"\\n</div>":""},f=function(a){var b;return m(a)?(b=[""+a.settings.namespace+"-icon",""+a.settings.namespace+"-fontastic-"+a.settings.icon],\'<i class="\'+b.join(" ")+\'"></i>\'):""},g=function(a){return\'<div class="\'+a.settings.namespace+\'-message">\\n  \'+a.message+"\\n</div>"},p=function(a){var b;return b=[""+a.settings.namespace+"-notification","family-"+a.settings.family,a.settings.theme],m(a)&&b.push("has-icon"),a.settings.sticky&&b.push("sticky"),b},j=function(a,b){a.removeClass("open"),a.height(0),setTimeout(function(){a.remove(),b.settings.onClose&&b.settings.onClose(a,b)},200)},k=function(b){a.extend(d,b)},q=function(b){a("."+b.namespace+"-notification").remove()},r=function(a){d.zindex=a},n=function(b,e){return c.each(function(){var c,f;c=a(this),f=c.data("notific8"),c.data("notific8",{target:c,settings:{},message:""}),f=c.data("notific8"),f.message=b,a.extend(f.settings,d,e),h(c),f.settings.onInit&&f.settings.onInit(f)})},o=function(b){var c,e,f;c=a("body"),c.data("notific8s",0),e=""+b.namespace+"-container",f="<div class=\'"+e+" $pos\'></div>",c.append(f.replace("$pos","top right")),c.append(f.replace("$pos","top left")),c.append(f.replace("$pos","bottom right")),c.append(f.replace("$pos","bottom left")),a("."+e).css("z-index",d.zindex),a("."+e).on("click","."+b.namespace+"-close",function(c){var d,f,g,h;g=a(c.currentTarget),f=g.closest("."+b.namespace+"-notification"),d=f.closest("."+e),h=d.data("notific8"),j(f,h)})},i=function(a){a.verticalEdge=(a.verticalEdge||d.verticalEdge).toLowerCase(),a.horizontalEdge=(a.horizontalEdge||d.horizontalEdge).toLowerCase(),"right"!==a.verticalEdge&&"left"!==a.verticalEdge&&(a.verticalEdge=d.verticalEdge),"top"!==a.horizontalEdge&&"bottom"!==a.horizontalEdge&&(a.horizontalEdge=d.horizontalEdge)},{init:n,destroy:l,configure:k,zindex:r,initContainers:o,checkEdges:i,remove:q}}(),a.notific8=function(c,d){var e,f,g;switch(null==d&&(d={}),d.hasOwnProperty("namespace")||"zindex"===c||(d.namespace="notific8"),c){case"configure":case"config":return b.configure.apply(this,[d]);case"zindex":return b.zindex.apply(this,[d]);case"destroy":return b.destroy.apply(this,[d]);case"remove":return b.remove.apply(this,[d]);default:return e=""+d.namespace+"-container",0===a("."+e).size()&&b.initContainers(d),b.checkEdges(d),g=d.verticalEdge,f=d.horizontalEdge,a("."+e+"."+g+"."+f).notific8(c,d)}},a.fn.notific8=function(d){c=this,"string"==typeof d?b.init.apply(this,arguments):a.error("jQuery.notific8 takes a string message as the first parameter")}}(jQuery);';
    loader.global.define = undefined;
    loader.global.module = undefined;
    loader.global.exports = undefined;
    loader.__exec({
        'source': source,
        'address': module.uri
    });
    loader.global.require = require;
    loader.global.define = define;
    return loader.get('@@global-helpers').retrieveGlobal(module.id, undefined);
});
/*mev-alert@0.0.1#src/main/view/NotificAlertDirective*/
define('mev-alert@0.0.1#src/main/view/NotificAlertDirective', [
    'lodash',
    'jquery',
    'notific8'
], function (_, $, notific8) {
    var directive = function () {
        return {
            restrict: 'AE',
            controller: [
                '$scope',
                function ($scope) {
                    var config = {
                        success: { theme: 'lime' },
                        info: { theme: 'ebony' },
                        error: { theme: 'ruby' }
                    };
                    var deregisterListener = $scope.$on('mev:alert', function ($event, alert) {
                        $.notific8(alert.message, _.defaults({
                            heading: alert.heading,
                            life: 5000
                        }, config[alert.level]));
                    });
                    $scope.$on('$destroy')(function () {
                        deregisterListener();
                    });
                }
            ]
        };
    };
    directive.$name = 'mevNotificAlert';
    directive.$inject = [];
    directive.$provider = 'directive';
    return directive;
});
/*mev-alert@0.0.1#src/main/mev-alert*/
define('mev-alert@0.0.1#src/main/mev-alert', [
    'mui',
    './view/NotificAlertDirective'
], function (ng) {
    return ng.module('mev-alert', arguments, arguments);
});
/*mev-dotplot@0.0.1#src/main/view/mevDotplot.tpl.html!system-text@0.1.0#text*/
define('mev-dotplot@0.0.1#src/main/view/mevDotplot.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="chart">\t\n\t<div class="body">\n\t\t<nvd3 options=\'options\' data=\'data\' api=\'api\'></nvd3>\n\t</div>\n\t<div class="controls">\t\t\t\t\n\t\t<div mev-chart-color-legend="config.color" class="legend" id="colorLegend"></div>\n\t</div>\n\t<div class="footer">\t\t\n\t</div>\n</div>';
});
/*mev-dotplot@0.0.1#src/main/view/mevDotplotDirective*/
define('mev-dotplot@0.0.1#src/main/view/mevDotplotDirective', [
    'mui',
    './mevDotplot.tpl.html'
], function (ng, template) {
    'use strict';
    var directive = function mevDotplotDirective() {
        return {
            restrict: 'AEC',
            scope: { config: '=mevDotplot' },
            template: template,
            controller: [
                '$scope',
                'mevDotplotNvd3Adaptor',
                'mevTooltipContent',
                'mevChartConfig',
                'mevChartDimConfig',
                'mevChartColorDimConfig',
                function (scope, mevDotplotNvd3Adaptor, mevTooltipContent, mevChartConfig, mevChartDimConfig, mevChartColorDimConfig) {
                    var input = scope.config.data;
                    mevChartConfig(_.extend(scope.config, {
                        onUpdateColor: function () {
                            scope.api.refresh();
                        }
                    }));
                    var xConfig = scope.config.x;
                    var yConfig = scope.config.y;
                    var sizeConfig = scope.config.size;
                    var colorConfig = scope.config.color;
                    scope.data = mevDotplotNvd3Adaptor(scope.config, input);
                    scope.options = {
                        chart: {
                            type: 'dotPlotChart',
                            height: _.max([
                                450,
                                10 * scope.data.length
                            ]),
                            x: xConfig.get,
                            y: yConfig.get,
                            z: sizeConfig.get,
                            showControls: false,
                            showValues: true,
                            duration: 500,
                            xAxis: { showMaxMin: false },
                            valueFormat: function (d) {
                                return d3.format(',.4f')(d);
                            },
                            yAxis: {
                                axisLabel: 'Ratio',
                                tickFormat: function (d) {
                                    return d3.format(',.4f')(d);
                                }
                            },
                            barColor: function (d) {
                                return colorConfig.scale(colorConfig.get(d));
                            },
                            margin: { 'left': 300 },
                            tooltip: { contentGenerator: mevTooltipContent.bind(null, scope.config) }
                        }
                    };
                }
            ],
            link: function (scope, elem, attr, ctrl) {
            }
        };
    };
    directive.$name = 'mevDotplotDirective';
    directive.$inject = ['mevTooltipContent'];
    return directive;
});
/*mev-dotplot@0.0.1#src/main/services/mevDotplotNvd3Adaptor*/
define('mev-dotplot@0.0.1#src/main/services/mevDotplotNvd3Adaptor', ['lodash'], function (_) {
    var service = function mevDotplotNvd3Adaptor() {
        return function (config, input) {
            var groups = [];
            var sortfunc = config.series.sort && config.series.sort.field ? _.isFunction(config.series.sort.field) ? config.series.sort.field : function (item) {
                return item[config.series.sort.field];
            } : undefined;
            var group = {
                'key': config.series.label,
                'color': '#1f77b4',
                'values': sortfunc ? _.orderBy(input, sortfunc, config.series.sort.order) : input
            };
            groups.push(group);
            return groups;
        };
    };
    service.$name = 'mevDotplotNvd3Adaptor';
    service.$provider = 'factory';
    service.$inject = [];
    return service;
});
/*mev-dotplot@0.0.1#src/main/services/mevDotplotDataAdaptor*/
define('mev-dotplot@0.0.1#src/main/services/mevDotplotDataAdaptor', [
    'mui',
    'lodash'
], function (ng, _) {
    var service = function mevDotplotDataAdaptor() {
        return function (input) {
            return input.map(function (item) {
                return _.extend(item, {
                    getRation: function () {
                        return item.significantGenes / item.annotatedGenes;
                    },
                    getCount: function () {
                        return item.annotatedGenes;
                    }
                });
            });
        };
    };
    service.$name = 'mevDotplotDataAdaptor';
    service.$provider = 'factory';
    service.$inject = [];
    return service;
});
/*mev-dotplot@0.0.1#src/main/mev-dotplot*/
define('mev-dotplot@0.0.1#src/main/mev-dotplot', [
    'mui',
    'jquery',
    'd3',
    'nvd3',
    'angular-nvd3',
    'lodash',
    'mev-chart-utils',
    './view/mevDotplotDirective',
    './services/mevDotplotNvd3Adaptor',
    './services/mevDotplotDataAdaptor',
    'nvd3/build/nv.d3.css',
    './style/mevDotplot.less'
], function (ng) {
    return ng.module('mev-dotplot', arguments, arguments);
});
/*mev-enrichment-dotplot@0.0.1#src/main/view/mevEnrichmentDotplot.tpl.html!system-text@0.1.0#text*/
define('mev-enrichment-dotplot@0.0.1#src/main/view/mevEnrichmentDotplot.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div mev-dotplot="config"></div>';
});
/*mev-enrichment-dotplot@0.0.1#src/main/view/mevEnrichmentDotplotDirective*/
define('mev-enrichment-dotplot@0.0.1#src/main/view/mevEnrichmentDotplotDirective', [
    'lodash',
    './mevEnrichmentDotplot.tpl.html'
], function (_, template) {
    'use strict';
    var directive = function mevEnrichmentDotplotDirective() {
        return {
            restrict: 'AEC',
            scope: { config: '=mevEnrichmentDotplot' },
            template: template,
            controller: [
                '$scope',
                'mevDotplotNvd3Adaptor',
                function (scope, mevDotplotNvd3Adaptor, mevEnrcihmentDataAdaptor) {
                    _.extend(scope.config, {
                        series: {
                            label: 'Ratio',
                            sort: {
                                field: function (d) {
                                    return d.getMatched();
                                },
                                order: 'desc'
                            }
                        },
                        x: {
                            field: function (d) {
                                return d.getName();
                            },
                            label: 'Name'
                        },
                        y: {
                            field: function (d) {
                                return d.getRatio();
                            },
                            label: 'Ratio',
                            precision: 0
                        },
                        color: {
                            field: function (d) {
                                return d.getPValue();
                            },
                            label: 'pValue'
                        },
                        size: {
                            field: function (d) {
                                return d.getMatched();
                            },
                            label: 'Match'
                        },
                        tooltip: {
                            fields: {
                                'Total': function (d) {
                                    return d.getTotal();
                                }
                            }
                        }
                    });
                }
            ],
            link: function (scope, elem, attr, ctrl) {
            }
        };
    };
    directive.$name = 'mevEnrichmentDotplot';
    directive.$provider = 'directive';
    directive.$inject = ['mevDotplotNvd3Adaptor'];
    return directive;
});
/*mev-enrichment-dotplot@0.0.1#src/main/services/mevEnrichmentDataAdaptor*/
define('mev-enrichment-dotplot@0.0.1#src/main/services/mevEnrichmentDataAdaptor', [
    'mui',
    'lodash'
], function (ng, _) {
    var service = function mevEnrichmentDataAdaptor() {
        return function (input) {
            return input.map(function (item) {
                return _.extend(item, {
                    getRatio: function () {
                        return Math.round(item.significantGenes / item.annotatedGenes * 1000) / 10000;
                    },
                    getTotal: function () {
                        return item.annotatedGenes;
                    },
                    getMatched: function () {
                        return item.significantGenes;
                    },
                    getName: function () {
                        return item.goTerm;
                    },
                    getPValue: function () {
                        return item.pValue;
                    }
                });
            });
        };
    };
    service.$name = 'mevEnrichmentDataAdaptor';
    service.$provider = 'factory';
    service.$inject = [];
    return service;
});
/*mev-enrichment-dotplot@0.0.1#src/main/mev-enrichment-dotplot*/
define('mev-enrichment-dotplot@0.0.1#src/main/mev-enrichment-dotplot', [
    'mui',
    'lodash',
    'mev-dotplot',
    './view/mevEnrichmentDotplotDirective',
    './services/mevEnrichmentDataAdaptor'
], function (ng) {
    return ng.module('mevEnrichmentDotplot', arguments, arguments);
});
/*mevPathwayEnrichment@0.0.1#src/router/PathwayEnrichmentState.tpl.html!system-text@0.1.0#text*/
define('mevPathwayEnrichment@0.0.1#src/router/PathwayEnrichmentState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="column-wrapper">\n\t<ul class="nav nav-tabs column-header" id="analysisTabs">\n\t\t<li id="table_tab" class="active"><a href="#table" data-toggle="tab" target="_self">{{analysis.name}}</a></li>\n\t\t<div class="action-menu" mui-paste="action-menu"></div>\t\t\n\t</ul>\n\n\t<div class="tab-content column-body">\n\t\t<div class="tab-pane active results-wrapper" id="table" >\n\t\t\t<div class="results-header clearfix">\n\t\t     \t<div class="btn-toolbar" role="toolbar" >\n\t\t     \t\t<div class="btn-group">\n\t\t\t            <btn-create-selection mui-target="Top" mui-analysis="analysis" \n\t\t\t             \tmui-dataset="project.dataset" mui-items="selectedGenes" mui-dimension="row">\n\t\t\t            </btn-create-selection><btn-export-selection mui-target="Top" mui-analysis="analysis" \n\t\t\t             \tmui-dataset="project.dataset" mui-items="selectedGenes" mui-dimension="row">\n\t\t\t            </btn-export-selection>           \n\t\t            </div>\n\t\t      \t</div>\n\t\t\t</div>\n\t\t\t<div class="results-body">\n\t\t\t\t<div >\n\t\t\t\t\t<div mev-enrichment-dotplot="dotPlotConfig"></div>\n\t\t\t\t</div>\n\t\t\t\t<div >\n\t\t\t\t\t<mev-results-table mev-save-as="{name: analysis.name}" data="analysis.result" headers="headers" ordering="pValue" selected-rows="selectedRows"></mev-results-table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\t\t\n\t</div>\n</div>\n';
});
/*mevPathwayEnrichment@0.0.1#src/model/PathwayEnrichmentInfo.tpl.html!system-text@0.1.0#text*/
define('mevPathwayEnrichment@0.0.1#src/model/PathwayEnrichmentInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>Pathway Enrichment Analysis of a gene set from Reactome. Given a vector of genes, this function will return the enriched pathways with FDR control.</p>\n<p>Reference: <a href="https://bioconductor.org/packages/release/bioc/html/ReactomePA.html">https://bioconductor.org/packages/release/bioc/html/ReactomePA.html</p>';
});
/*mevPathwayEnrichment@0.0.1#src/model/PathwayEnrichmentParams*/
'use strict';
define('mevPathwayEnrichment@0.0.1#src/model/PathwayEnrichmentParams', [
    'lodash',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/text/TextParam',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/integer/IntegerParam',
    'mev-analysis/src/params/model/decimal/DecimalParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam'
], function (_, AnalysisParamsFactory, TextParam, SelectParam, IntegerParam, DecimalParam) {
    function PathwayEnrichmentParams(mevAnalysisParams, mevSelectionSetParam) {
        var self = this;
        var params = mevAnalysisParams([
            new SelectParam({
                'id': 'organism',
                'displayName': 'Species',
                'options': [
                    'human',
                    'mouse'
                ],
                'value': 'human'
            }),
            new SelectParam({
                'id': 'pAdjustMethod',
                'options': [
                    'holm',
                    'hochberg',
                    'hommel',
                    'bonferroni',
                    'BH',
                    'BY',
                    'fdr',
                    'none'
                ],
                'value': 'fdr'
            }),
            new DecimalParam({
                'id': 'pvalueCutoff',
                'displayName': 'pValueCutoff',
                'min': 0,
                'max': 1,
                'value': 0.05,
                'precision': 3
            }),
            new IntegerParam({
                'id': 'minGSSize',
                'displayName': 'Min GS Size',
                'min': 0,
                'max': Infinity,
                'value': 20
            }),
            new mevSelectionSetParam({
                'id': 'genelist',
                'dimension': 'row',
                'displayName': 'Genes',
                'display': 'name',
                'bound': 'keys'
            })
        ]);
        return params;
    }
    ;
    PathwayEnrichmentParams.$inject = [
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    PathwayEnrichmentParams.$name = 'mevPathwayEnrichmentParams';
    PathwayEnrichmentParams.$provider = 'service';
    return PathwayEnrichmentParams;
});
/*mevPathwayEnrichment@0.0.1#src/model/PathwayEnrichmentAnalysisType*/
define('mevPathwayEnrichment@0.0.1#src/model/PathwayEnrichmentAnalysisType', [
    'lodash',
    '../router/PathwayEnrichmentState.tpl.html',
    './PathwayEnrichmentInfo.tpl.html',
    './PathwayEnrichmentParams',
    'mev-analysis/src/type/model/AnalysisType'
], function (_, template, infoTemplate) {
    'use strict';
    function PathwayEnrichmentAnalysisType(mevAnalysisType, mevPathwayEnrichmentParams) {
        return new mevAnalysisType({
            id: 'pe',
            name: 'Pathway Enrichment',
            viewModel: 'PathwayEnrichmentVM',
            template: template,
            params: mevPathwayEnrichmentParams,
            modelDecorator: function (analysis) {
                var peRowModel = {
                    getRatio: function () {
                        return Math.round(eval(this.GeneRatio) * 1000) / 10000;
                    },
                    getTotal: function () {
                        return parseInt(this.GeneRatio.split('/')[1]);
                    },
                    getMatched: function () {
                        return this.Count;
                    },
                    getName: function () {
                        return this.Description;
                    },
                    getPValue: function () {
                        return this.pvalue;
                    }
                };
                function formatResults(input) {
                    return input.map(function (item) {
                        return _.extend(item, peRowModel);
                    });
                }
                ;
                function isPeRow(item) {
                    return _.every(_.functions(peRowModel), function (methodName) {
                        return _.has(item, methodName);
                    });
                }
                if (analysis && analysis.result && analysis.result.length > 0)
                    if (!isPeRow(analysis.result[0]))
                        formatResults(analysis.result);
            },
            info: { template: infoTemplate }
        });
    }
    PathwayEnrichmentAnalysisType.$inject = [
        'mevAnalysisType',
        'mevPathwayEnrichmentParams'
    ];
    PathwayEnrichmentAnalysisType.$name = 'mevPathwayEnrichmentAnalysisType';
    PathwayEnrichmentAnalysisType.$provider = 'factory';
    return PathwayEnrichmentAnalysisType;
});
/*mevPathwayEnrichment@0.0.1#src/router/PathwayEnrichmentState*/
define('mevPathwayEnrichment@0.0.1#src/router/PathwayEnrichmentState', ['./PathwayEnrichmentState.tpl.html'], function (template) {
    'use strict';
    function PathwayEnrichmentState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.pe', {
            parent: 'root.dataset.analysisType',
            url: 'pe/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'PathwayEnrichmentVMFactory',
                function (scope, project, analysis, PathwayEnrichmentVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return PathwayEnrichmentVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'PathwayEnrichmentVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    PathwayEnrichmentState.inject = ['$stateProvider'];
    PathwayEnrichmentState.provider = 'config';
    return PathwayEnrichmentState;
});
/*mevPathwayEnrichment@0.0.1#src/router/PathwayEnrichmentVM*/
define('mevPathwayEnrichment@0.0.1#src/router/PathwayEnrichmentVM', ['lodash'], function (_) {
    'use strict';
    function PathwayEnrichmentVM(mevAnalysisTypes) {
        function factory(scope, project, analysis) {
            scope.project = project;
            scope.analysis = analysis;
            scope.selectedRows = {};
            scope.selectedGenes = [];
            var analysisType = mevAnalysisTypes.get('pe');
            if (analysisType && _.isFunction(analysisType.modelDecorator))
                analysisType.modelDecorator(analysis);
            scope.dotPlotConfig = {
                name: scope.analysis.name,
                data: scope.analysis.result,
                series: 'Counts'
            };
            scope.selectedGenes = [];
            scope.selectedRows = [];
            scope.headers = [
                {
                    'name': 'ID',
                    'field': 'ID',
                    'icon': 'search',
                    'link': function (value) {
                        return 'http://www.reactome.org/content/detail/R-HSA-' + value;
                    }
                },
                {
                    'name': 'Description',
                    'field': 'Description',
                    'icon': 'search',
                    'nowrap': true,
                    'check': function (value, row) {
                        scope.selectedGenes.length = 0;
                        _.uniq(_.flatten(_.map(scope.selectedRows, function (item) {
                            return item.geneID.split(/[ \/]/).map(function (gene) {
                                return { id: gene };
                            });
                        })), 'id').map(function (gene) {
                            scope.selectedGenes.push(gene);
                        });
                        console.log('selectedGenes', scope.selectedGenes);
                    }
                },
                {
                    'name': 'P-Value',
                    'field': 'pvalue',
                    'icon': [
                        '<=',
                        '>='
                    ],
                    'default': '0.05'
                },
                {
                    'name': 'P-Adjust',
                    'field': 'p.adjust',
                    'icon': [
                        '<=',
                        '>='
                    ]
                },
                {
                    'name': 'q-Value',
                    'field': 'qvalue',
                    'icon': [
                        '<=',
                        '>='
                    ]
                },
                {
                    'name': 'Count',
                    'field': 'Count',
                    'icon': [
                        '<=',
                        '>='
                    ],
                    'datatype': 'integer'
                },
                {
                    'name': 'Gene Id',
                    'field': 'geneID',
                    'icon': 'search'
                }
            ];
            scope.getSelection = function () {
                return scope.selectedGenes;
            };
            scope.viewGenes = function (filteredResults) {
                scope.filteredResults = filteredResults;
            };
        }
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    PathwayEnrichmentVM.$inject = ['mevAnalysisTypes'];
    PathwayEnrichmentVM.$name = 'PathwayEnrichmentVMFactory';
    PathwayEnrichmentVM.$provider = 'factory';
    return PathwayEnrichmentVM;
});
/*mevPathwayEnrichment@0.0.1#src/pathwayEnrichment.module*/
define('mevPathwayEnrichment@0.0.1#src/pathwayEnrichment.module', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-results-table',
    'mev-enrichment-dotplot',
    './model/PathwayEnrichmentAnalysisType',
    './model/PathwayEnrichmentParams',
    './router/PathwayEnrichmentState',
    './router/PathwayEnrichmentVM'
], function (ng) {
    return ng.module('mevPathwayEnrichment', arguments, arguments);
});
/*mev-topgo@0.0.1#src/main/router/TopgoState.tpl.html!system-text@0.1.0#text*/
define('mev-topgo@0.0.1#src/main/router/TopgoState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div>\n\t<ul class="nav nav-tabs column-header" id="importTabs">\n\t\t<li id="topgo_tab" class="active"><a href="#topgo" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n\t\t<div class="action-menu" mui-paste="action-menu"></div>\n\t</ul>\n\n\t<div class="tab-content column-body">\n\t\t<div class="tab-pane active results-wrapper" id="topgo" >\n\t\t\t<div class="results-header clearfix"></div>\n\t\t\t<div class="results-body">\n\t\t\t\t<div mev-enrichment-dotplot="dotPlotConfig"></div>\n\t\t\t\t<mev-results-table data="DatasetAnalysisVM.analysis.results" headers="headers" ordering="pValue" on-filter="viewGenes(filteredResults)"\n\t\t\t\t\t\t\t\t   mev-save-as="{name: DatasetAnalysisVM.analysis.name}"></mev-results-table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';
});
/*mev-topgo@0.0.1#src/main/model/TopgoAnalysisType*/
define('mev-topgo@0.0.1#src/main/model/TopgoAnalysisType', [
    'lodash',
    '../router/TopgoState.tpl.html',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/text/TextParam',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/integer/IntegerParam',
    'mev-analysis/src/params/model/decimal/DecimalParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam'
], function (_, template, mevAnalysisType, AnalysisParamsFactory, TextParam, SelectParam, IntegerParam, DecimalParam) {
    'use strict';
    function TopgoAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        return new mevAnalysisType({
            id: 'topgo',
            name: 'TopGO',
            viewModel: 'TopgoVM',
            template: template,
            params: mevAnalysisParams([
                new mevSelectionSetParam({
                    'id': 'genelist',
                    'dimension': 'row',
                    'displayName': 'Genes',
                    'display': 'name',
                    'bound': 'keys'
                }),
                new SelectParam({
                    'id': 'species',
                    'displayName': 'Species',
                    'options': [
                        'human',
                        'mouse'
                    ],
                    'value': 'human'
                }),
                new SelectParam({
                    'id': 'goType',
                    'options': [
                        'BP',
                        'CC',
                        'MF'
                    ],
                    'value': 'BP'
                }),
                new SelectParam({
                    'id': 'testType',
                    'options': ['fisher'],
                    'value': 'fisher'
                }),
                new SelectParam({
                    'id': 'pAdjust',
                    'options': [
                        'holm',
                        'hochberg',
                        'hommel',
                        'bonferroni',
                        'BH',
                        'BY',
                        'fdr',
                        'none'
                    ],
                    'value': 'fdr'
                }),
                new IntegerParam({
                    'id': 'nodeSize',
                    'displayName': 'Node Size',
                    'min': 0,
                    'max': Infinity,
                    'value': 20
                })
            ]),
            modelDecorator: function (analysis) {
                var topgoRowModel = {
                    getRatio: function () {
                        return Math.round(this.significantGenes / this.annotatedGenes * 1000) / 10000;
                    },
                    getTotal: function () {
                        return this.annotatedGenes;
                    },
                    getMatched: function () {
                        return this.significantGenes;
                    },
                    getName: function () {
                        return this.goTerm;
                    },
                    getPValue: function () {
                        return this.pValue;
                    }
                };
                function formatResults(input) {
                    return input.map(function (item) {
                        return _.extend(item, topgoRowModel);
                    });
                }
                ;
                function isPeRow(item) {
                    return _.every(_.functions(topgoRowModel), function (methodName) {
                        return _.hasIn(item, methodName);
                    });
                }
                if (analysis && analysis.results && analysis.results.length > 0)
                    if (!isPeRow(analysis.results[0]))
                        formatResults(analysis.results);
            },
            info: { template: '<p>Extract top GO terms from goana output or top KEGG pathways from kegga output.</p>' }
        });
    }
    TopgoAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    TopgoAnalysisType.$name = 'mevTopgoAnalysisType';
    TopgoAnalysisType.$provider = 'factory';
    return TopgoAnalysisType;
});
/*mev-topgo@0.0.1#src/main/router/TopgoState*/
define('mev-topgo@0.0.1#src/main/router/TopgoState', ['./TopgoState.tpl.html'], function (template) {
    'use strict';
    function TopgoState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.topgo', {
            parent: 'root.dataset.analysisType',
            url: 'topgo/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'TopgoVMFactory',
                function (scope, project, analysis, PathwayEnrichmentVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return PathwayEnrichmentVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'TopgoVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    TopgoState.inject = ['$stateProvider'];
    TopgoState.provider = 'config';
    return TopgoState;
});
/*mev-topgo@0.0.1#src/main/router/TopgoVM*/
define('mev-topgo@0.0.1#src/main/router/TopgoVM', ['lodash'], function (_) {
    'use strict';
    function TopgoVM(mevAnalysisTypes) {
        function factory($scope, project, analysis) {
            var _self = this;
            this.analysisId = analysis.name;
            this.analysis = analysis;
            this.project = project;
            this.dataset = project.dataset;
            var analysisType = mevAnalysisTypes.get('topgo');
            if (analysisType && _.isFunction(analysisType.modelDecorator))
                analysisType.modelDecorator(analysis);
            $scope.dotPlotConfig = {
                name: this.analysis.name,
                data: this.analysis.results,
                series: 'Counts'
            };
            $scope.headers = [
                {
                    'name': 'ID',
                    'field': 'goId',
                    'icon': 'search',
                    'link': function (value) {
                        return 'http://amigo.geneontology.org/amigo/term/' + value;
                    }
                },
                {
                    'name': 'GO Term',
                    'field': 'goTerm',
                    'icon': 'search'
                },
                {
                    'name': 'Annotated Genes',
                    'field': 'annotatedGenes',
                    'icon': [
                        '>=',
                        '<='
                    ],
                    'datatype': 'integer'
                },
                {
                    'name': 'Significant Genes',
                    'field': 'significantGenes',
                    'icon': [
                        '>=',
                        '<='
                    ],
                    'datatype': 'integer'
                },
                {
                    'name': 'Expected',
                    'field': 'expected',
                    'icon': [
                        '>=',
                        '<='
                    ]
                },
                {
                    'name': 'P-Value',
                    'field': 'pValue',
                    'icon': [
                        '<=',
                        '>='
                    ],
                    'default': 0.05
                },
                {
                    'name': 'Adj. P-Value',
                    'field': 'adj.p',
                    'icon': [
                        '<=',
                        '>='
                    ]
                }
            ];
            $scope.filteredResults = undefined;
            $scope.viewGenes = function (filteredResults) {
                $scope.filteredResults = filteredResults;
            };
        }
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    TopgoVM.$inject = ['mevAnalysisTypes'];
    TopgoVM.$name = 'TopgoVMFactory';
    TopgoVM.$provider = 'factory';
    return TopgoVM;
});
/*mev-topgo@0.0.1#src/main/mev-topgo*/
define('mev-topgo@0.0.1#src/main/mev-topgo', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-results-table',
    'mev-enrichment-dotplot',
    './model/TopgoAnalysisType',
    './router/TopgoState',
    './router/TopgoVM'
], function (ng) {
    return ng.module('mev-topgo', arguments, arguments);
});
/*lodash@4.10.0#lodash*/
;
(function () {
    var undefined;
    var VERSION = '4.10.0';
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = 'Expected a function';
    var HASH_UNDEFINED = '__lodash_hash_undefined__';
    var PLACEHOLDER = '__lodash_placeholder__';
    var BIND_FLAG = 1, BIND_KEY_FLAG = 2, CURRY_BOUND_FLAG = 4, CURRY_FLAG = 8, CURRY_RIGHT_FLAG = 16, PARTIAL_FLAG = 32, PARTIAL_RIGHT_FLAG = 64, ARY_FLAG = 128, REARG_FLAG = 256, FLIP_FLAG = 512;
    var UNORDERED_COMPARE_FLAG = 1, PARTIAL_COMPARE_FLAG = 2;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
    var HOT_COUNT = 150, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', promiseTag = '[object Promise]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', weakMapTag = '[object WeakMap]', weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g, reUnescapedHtml = /[&<>"'`]/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrim = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
    var reBasicWord = /[a-zA-Z0-9]+/g;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reHasHexPrefix = /^0x/i;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23', rsComboSymbolsRange = '\\u20d0-\\u20f0', rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsQuoteRange = '\\u2018\\u2019\\u201c\\u201d', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsQuoteRange + rsSpaceRange;
    var rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
    var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')', rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
            rsNonAstral,
            rsRegional,
            rsSurrPair
        ].join('|') + ')' + rsOptVar + reOptMod + ')*', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
            rsDingbat,
            rsRegional,
            rsSurrPair
        ].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [
            rsNonAstral + rsCombo + '?',
            rsCombo,
            rsRegional,
            rsSurrPair,
            rsAstral
        ].join('|') + ')';
    var reComboMark = RegExp(rsCombo, 'g');
    var reComplexSymbol = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    var reComplexWord = RegExp([
        rsUpper + '?' + rsLower + '+(?=' + [
            rsBreak,
            rsUpper,
            '$'
        ].join('|') + ')',
        rsUpperMisc + '+(?=' + [
            rsBreak,
            rsUpper + rsLowerMisc,
            '$'
        ].join('|') + ')',
        rsUpper + '?' + rsLowerMisc + '+',
        rsUpper + '+',
        rsDigits,
        rsEmoji
    ].join('|'), 'g');
    var reHasComplexSymbol = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');
    var reHasComplexWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'Reflect',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout'
    ];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
        'À': 'A',
        'Á': 'A',
        'Â': 'A',
        'Ã': 'A',
        'Ä': 'A',
        'Å': 'A',
        'à': 'a',
        'á': 'a',
        'â': 'a',
        'ã': 'a',
        'ä': 'a',
        'å': 'a',
        'Ç': 'C',
        'ç': 'c',
        'Ð': 'D',
        'ð': 'd',
        'È': 'E',
        'É': 'E',
        'Ê': 'E',
        'Ë': 'E',
        'è': 'e',
        'é': 'e',
        'ê': 'e',
        'ë': 'e',
        'Ì': 'I',
        'Í': 'I',
        'Î': 'I',
        'Ï': 'I',
        'ì': 'i',
        'í': 'i',
        'î': 'i',
        'ï': 'i',
        'Ñ': 'N',
        'ñ': 'n',
        'Ò': 'O',
        'Ó': 'O',
        'Ô': 'O',
        'Õ': 'O',
        'Ö': 'O',
        'Ø': 'O',
        'ò': 'o',
        'ó': 'o',
        'ô': 'o',
        'õ': 'o',
        'ö': 'o',
        'ø': 'o',
        'Ù': 'U',
        'Ú': 'U',
        'Û': 'U',
        'Ü': 'U',
        'ù': 'u',
        'ú': 'u',
        'û': 'u',
        'ü': 'u',
        'Ý': 'Y',
        'ý': 'y',
        'ÿ': 'y',
        'Æ': 'Ae',
        'æ': 'ae',
        'Þ': 'Th',
        'þ': 'th',
        'ß': 'ss'
    };
    var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '\'': '&#39;',
        '`': '&#96;'
    };
    var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': '\'',
        '&#96;': '`'
    };
    var objectTypes = {
        'function': true,
        'object': true
    };
    var stringEscapes = {
        '\\': '\\',
        '\'': '\'',
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType ? exports : undefined;
    var freeModule = objectTypes[typeof module] && module && !module.nodeType ? module : undefined;
    var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : undefined;
    var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);
    var freeSelf = checkGlobal(objectTypes[typeof self] && self);
    var freeWindow = checkGlobal(objectTypes[typeof window] && window);
    var thisGlobal = checkGlobal(objectTypes[typeof this] && this);
    var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function('return this')();
    function addMapEntry(map, pair) {
        map.set(pair[0], pair[1]);
        return map;
    }
    function addSetEntry(set, value) {
        set.add(value);
        return set;
    }
    function apply(func, thisArg, args) {
        var length = args.length;
        switch (length) {
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array.length;
        while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    function arrayConcat(array, other) {
        var index = -1, length = array.length, othIndex = -1, othLength = other.length, result = Array(length + othLength);
        while (++index < length) {
            result[index] = array[index];
        }
        while (++othIndex < othLength) {
            result[index++] = other[othIndex];
        }
        return result;
    }
    function arrayEach(array, iteratee) {
        var index = -1, length = array.length;
        while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
                break;
            }
        }
        return array;
    }
    function arrayEachRight(array, iteratee) {
        var length = array.length;
        while (length--) {
            if (iteratee(array[length], length, array) === false) {
                break;
            }
        }
        return array;
    }
    function arrayEvery(array, predicate) {
        var index = -1, length = array.length;
        while (++index < length) {
            if (!predicate(array[index], index, array)) {
                return false;
            }
        }
        return true;
    }
    function arrayFilter(array, predicate) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
                result[resIndex++] = value;
            }
        }
        return result;
    }
    function arrayIncludes(array, value) {
        return !!array.length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array.length;
        while (++index < length) {
            if (comparator(value, array[index])) {
                return true;
            }
        }
        return false;
    }
    function arrayMap(array, iteratee) {
        var index = -1, length = array.length, result = Array(length);
        while (++index < length) {
            result[index] = iteratee(array[index], index, array);
        }
        return result;
    }
    function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while (++index < length) {
            array[offset + index] = values[index];
        }
        return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array.length;
        if (initAccum && length) {
            accumulator = array[++index];
        }
        while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
        }
        return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array.length;
        if (initAccum && length) {
            accumulator = array[--length];
        }
        while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
        }
        return accumulator;
    }
    function arraySome(array, predicate) {
        var index = -1, length = array.length;
        while (++index < length) {
            if (predicate(array[index], index, array)) {
                return true;
            }
        }
        return false;
    }
    function baseExtremum(array, iteratee, comparator) {
        var index = -1, length = array.length;
        while (++index < length) {
            var value = array[index], current = iteratee(value);
            if (current != null && (computed === undefined ? current === current : comparator(current, computed))) {
                var computed = current, result = value;
            }
        }
        return result;
    }
    function baseFind(collection, predicate, eachFunc, retKey) {
        var result;
        eachFunc(collection, function (value, key, collection) {
            if (predicate(value, key, collection)) {
                result = retKey ? key : value;
                return false;
            }
        });
        return result;
    }
    function baseFindIndex(array, predicate, fromRight) {
        var length = array.length, index = fromRight ? length : -1;
        while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
                return index;
            }
        }
        return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
        if (value !== value) {
            return indexOfNaN(array, fromIndex);
        }
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
            if (array[index] === value) {
                return index;
            }
        }
        return -1;
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while (++index < length) {
            if (comparator(array[index], value)) {
                return index;
            }
        }
        return -1;
    }
    function baseMean(array, iteratee) {
        var length = array ? array.length : 0;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function (value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while (length--) {
            array[length] = array[length].value;
        }
        return array;
    }
    function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined) {
                result = result === undefined ? current : result + current;
            }
        }
        return result;
    }
    function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while (++index < n) {
            result[index] = iteratee(index);
        }
        return result;
    }
    function baseToPairs(object, props) {
        return arrayMap(props, function (key) {
            return [
                key,
                object[key]
            ];
        });
    }
    function baseUnary(func) {
        return function (value) {
            return func(value);
        };
    }
    function baseValues(object, props) {
        return arrayMap(props, function (key) {
            return object[key];
        });
    }
    function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
        }
        return index;
    }
    function checkGlobal(value) {
        return value && value.Object === Object ? value : null;
    }
    function compareAscending(value, other) {
        if (value !== other) {
            var valIsNull = value === null, valIsUndef = value === undefined, valIsReflexive = value === value;
            var othIsNull = other === null, othIsUndef = other === undefined, othIsReflexive = other === other;
            if (value > other && !othIsNull || !valIsReflexive || valIsNull && !othIsUndef && othIsReflexive || valIsUndef && othIsReflexive) {
                return 1;
            }
            if (value < other && !valIsNull || !othIsReflexive || othIsNull && !valIsUndef && valIsReflexive || othIsUndef && valIsReflexive) {
                return -1;
            }
        }
        return 0;
    }
    function compareMultiple(object, other, orders) {
        var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
        while (++index < length) {
            var result = compareAscending(objCriteria[index], othCriteria[index]);
            if (result) {
                if (index >= ordersLength) {
                    return result;
                }
                var order = orders[index];
                return result * (order == 'desc' ? -1 : 1);
            }
        }
        return object.index - other.index;
    }
    function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while (length--) {
            if (array[length] === placeholder) {
                result++;
            }
        }
        return result;
    }
    function createMathOperation(operator) {
        return function (value, other) {
            var result;
            if (value === undefined && other === undefined) {
                return 0;
            }
            if (value !== undefined) {
                result = value;
            }
            if (other !== undefined) {
                result = result === undefined ? other : operator(result, other);
            }
            return result;
        };
    }
    function deburrLetter(letter) {
        return deburredLetters[letter];
    }
    function escapeHtmlChar(chr) {
        return htmlEscapes[chr];
    }
    function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
    }
    function indexOfNaN(array, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 0 : -1);
        while (fromRight ? index-- : ++index < length) {
            var other = array[index];
            if (other !== other) {
                return index;
            }
        }
        return -1;
    }
    function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != 'function') {
            try {
                result = !!(value + '');
            } catch (e) {
            }
        }
        return result;
    }
    function isIndex(value, length) {
        value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return value > -1 && value % 1 == 0 && value < length;
    }
    function iteratorToArray(iterator) {
        var data, result = [];
        while (!(data = iterator.next()).done) {
            result.push(data.value);
        }
        return result;
    }
    function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function (value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function (value) {
            result[++index] = value;
        });
        return result;
    }
    function stringSize(string) {
        if (!(string && reHasComplexSymbol.test(string))) {
            return string.length;
        }
        var result = reComplexSymbol.lastIndex = 0;
        while (reComplexSymbol.test(string)) {
            result++;
        }
        return result;
    }
    function stringToArray(string) {
        return string.match(reComplexSymbol);
    }
    function unescapeHtmlChar(chr) {
        return htmlUnescapes[chr];
    }
    function runInContext(context) {
        context = context ? _.defaults({}, context, _.pick(root, contextProps)) : root;
        var Date = context.Date, Error = context.Error, Math = context.Math, RegExp = context.RegExp, TypeError = context.TypeError;
        var arrayProto = context.Array.prototype, objectProto = context.Object.prototype;
        var funcToString = context.Function.prototype.toString;
        var hasOwnProperty = objectProto.hasOwnProperty;
        var idCounter = 0;
        var objectCtorString = funcToString.call(Object);
        var objectToString = objectProto.toString;
        var oldDash = root._;
        var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
        var Buffer = moduleExports ? context.Buffer : undefined, Reflect = context.Reflect, Symbol = context.Symbol, Uint8Array = context.Uint8Array, clearTimeout = context.clearTimeout, enumerate = Reflect ? Reflect.enumerate : undefined, getOwnPropertySymbols = Object.getOwnPropertySymbols, iteratorSymbol = typeof (iteratorSymbol = Symbol && Symbol.iterator) == 'symbol' ? iteratorSymbol : undefined, objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, setTimeout = context.setTimeout, splice = arrayProto.splice;
        var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetPrototype = Object.getPrototypeOf, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = Object.keys, nativeMax = Math.max, nativeMin = Math.min, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        var DataView = getNative(context, 'DataView'), Map = getNative(context, 'Map'), Promise = getNative(context, 'Promise'), Set = getNative(context, 'Set'), WeakMap = getNative(context, 'WeakMap'), nativeCreate = getNative(Object, 'create');
        var metaMap = WeakMap && new WeakMap();
        var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) {
                    return value;
                }
                if (hasOwnProperty.call(value, '__wrapped__')) {
                    return wrapperClone(value);
                }
            }
            return new LodashWrapper(value);
        }
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        lodash.templateSettings = {
            'escape': reEscape,
            'evaluate': reEvaluate,
            'interpolate': reInterpolate,
            'variable': '',
            'imports': { '_': lodash }
        };
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || arrLength < LARGE_ARRAY_SIZE || arrLength == length && takeCount == length) {
                return baseWrapperValue(array, this.__actions__);
            }
            var result = [];
            outer:
                while (length-- && resIndex < takeCount) {
                    index += dir;
                    var iterIndex = -1, value = array[index];
                    while (++iterIndex < iterLength) {
                        var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                        if (type == LAZY_MAP_FLAG) {
                            value = computed;
                        } else if (!computed) {
                            if (type == LAZY_FILTER_FLAG) {
                                continue outer;
                            } else {
                                break outer;
                            }
                        }
                    }
                    result[resIndex++] = value;
                }
            return result;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash() {
        }
        function hashDelete(hash, key) {
            return hashHas(hash, key) && delete hash[key];
        }
        function hashGet(hash, key) {
            if (nativeCreate) {
                var result = hash[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(hash, key) ? hash[key] : undefined;
        }
        function hashHas(hash, key) {
            return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);
        }
        function hashSet(hash, key, value) {
            hash[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
        }
        Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;
        function MapCache(values) {
            var index = -1, length = values ? values.length : 0;
            this.clear();
            while (++index < length) {
                var entry = values[index];
                this.set(entry[0], entry[1]);
            }
        }
        function mapClear() {
            this.__data__ = {
                'hash': new Hash(),
                'map': Map ? new Map() : [],
                'string': new Hash()
            };
        }
        function mapDelete(key) {
            var data = this.__data__;
            if (isKeyable(key)) {
                return hashDelete(typeof key == 'string' ? data.string : data.hash, key);
            }
            return Map ? data.map['delete'](key) : assocDelete(data.map, key);
        }
        function mapGet(key) {
            var data = this.__data__;
            if (isKeyable(key)) {
                return hashGet(typeof key == 'string' ? data.string : data.hash, key);
            }
            return Map ? data.map.get(key) : assocGet(data.map, key);
        }
        function mapHas(key) {
            var data = this.__data__;
            if (isKeyable(key)) {
                return hashHas(typeof key == 'string' ? data.string : data.hash, key);
            }
            return Map ? data.map.has(key) : assocHas(data.map, key);
        }
        function mapSet(key, value) {
            var data = this.__data__;
            if (isKeyable(key)) {
                hashSet(typeof key == 'string' ? data.string : data.hash, key, value);
            } else if (Map) {
                data.map.set(key, value);
            } else {
                assocSet(data.map, key, value);
            }
            return this;
        }
        MapCache.prototype.clear = mapClear;
        MapCache.prototype['delete'] = mapDelete;
        MapCache.prototype.get = mapGet;
        MapCache.prototype.has = mapHas;
        MapCache.prototype.set = mapSet;
        function SetCache(values) {
            var index = -1, length = values ? values.length : 0;
            this.__data__ = new MapCache();
            while (++index < length) {
                this.push(values[index]);
            }
        }
        function cacheHas(cache, value) {
            var map = cache.__data__;
            if (isKeyable(value)) {
                var data = map.__data__, hash = typeof value == 'string' ? data.string : data.hash;
                return hash[value] === HASH_UNDEFINED;
            }
            return map.has(value);
        }
        function cachePush(value) {
            var map = this.__data__;
            if (isKeyable(value)) {
                var data = map.__data__, hash = typeof value == 'string' ? data.string : data.hash;
                hash[value] = HASH_UNDEFINED;
            } else {
                map.set(value, HASH_UNDEFINED);
            }
        }
        SetCache.prototype.push = cachePush;
        function Stack(values) {
            var index = -1, length = values ? values.length : 0;
            this.clear();
            while (++index < length) {
                var entry = values[index];
                this.set(entry[0], entry[1]);
            }
        }
        function stackClear() {
            this.__data__ = {
                'array': [],
                'map': null
            };
        }
        function stackDelete(key) {
            var data = this.__data__, array = data.array;
            return array ? assocDelete(array, key) : data.map['delete'](key);
        }
        function stackGet(key) {
            var data = this.__data__, array = data.array;
            return array ? assocGet(array, key) : data.map.get(key);
        }
        function stackHas(key) {
            var data = this.__data__, array = data.array;
            return array ? assocHas(array, key) : data.map.has(key);
        }
        function stackSet(key, value) {
            var data = this.__data__, array = data.array;
            if (array) {
                if (array.length < LARGE_ARRAY_SIZE - 1) {
                    assocSet(array, key, value);
                } else {
                    data.array = null;
                    data.map = new MapCache(array);
                }
            }
            var map = data.map;
            if (map) {
                map.set(key, value);
            }
            return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function assocDelete(array, key) {
            var index = assocIndexOf(array, key);
            if (index < 0) {
                return false;
            }
            var lastIndex = array.length - 1;
            if (index == lastIndex) {
                array.pop();
            } else {
                splice.call(array, index, 1);
            }
            return true;
        }
        function assocGet(array, key) {
            var index = assocIndexOf(array, key);
            return index < 0 ? undefined : array[index][1];
        }
        function assocHas(array, key) {
            return assocIndexOf(array, key) > -1;
        }
        function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
                if (eq(array[length][0], key)) {
                    return length;
                }
            }
            return -1;
        }
        function assocSet(array, key, value) {
            var index = assocIndexOf(array, key);
            if (index < 0) {
                array.push([
                    key,
                    value
                ]);
            } else {
                array[index][1] = value;
            }
        }
        function assignInDefaults(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                return srcValue;
            }
            return objValue;
        }
        function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {
                object[key] = value;
            }
        }
        function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
                object[key] = value;
            }
        }
        function baseAggregator(collection, setter, iteratee, accumulator) {
            baseEach(collection, function (value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        function baseAt(object, paths) {
            var index = -1, isNil = object == null, length = paths.length, result = Array(length);
            while (++index < length) {
                result[index] = isNil ? undefined : get(object, paths[index]);
            }
            return result;
        }
        function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) {
                    number = number <= upper ? number : upper;
                }
                if (lower !== undefined) {
                    number = number >= lower ? number : lower;
                }
            }
            return number;
        }
        function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
            var result;
            if (customizer) {
                result = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result !== undefined) {
                return result;
            }
            if (!isObject(value)) {
                return value;
            }
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) {
                    return copyArray(value, result);
                }
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) {
                    return cloneBuffer(value, isDeep);
                }
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    if (isHostObject(value)) {
                        return object ? value : {};
                    }
                    result = initCloneObject(isFunc ? {} : value);
                    if (!isDeep) {
                        return copySymbols(value, baseAssign(result, value));
                    }
                } else {
                    if (!cloneableTags[tag]) {
                        return object ? value : {};
                    }
                    result = initCloneByTag(value, tag, baseClone, isDeep);
                }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
                return stacked;
            }
            stack.set(value, result);
            if (!isArr) {
                var props = isFull ? getAllKeys(value) : keys(value);
            }
            arrayEach(props || value, function (subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
            });
            return result;
        }
        function baseConforms(source) {
            var props = keys(source), length = props.length;
            return function (object) {
                if (object == null) {
                    return !length;
                }
                var index = length;
                while (index--) {
                    var key = props[index], predicate = source[key], value = object[key];
                    if (value === undefined && !(key in Object(object)) || !predicate(value)) {
                        return false;
                    }
                }
                return true;
            };
        }
        function baseCreate(proto) {
            return isObject(proto) ? objectCreate(proto) : {};
        }
        function baseDelay(func, wait, args) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return setTimeout(function () {
                func.apply(undefined, args);
            }, wait);
        }
        function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) {
                return result;
            }
            if (iteratee) {
                values = arrayMap(values, baseUnary(iteratee));
            }
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer:
                while (++index < length) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    if (isCommon && computed === computed) {
                        var valuesIndex = valuesLength;
                        while (valuesIndex--) {
                            if (values[valuesIndex] === computed) {
                                continue outer;
                            }
                        }
                        result.push(value);
                    } else if (!includes(values, computed, comparator)) {
                        result.push(value);
                    }
                }
            return result;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
            var result = true;
            baseEach(collection, function (value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
                start = -start > length ? 0 : length + start;
            }
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) {
                end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
                array[start++] = value;
            }
            return array;
        }
        function baseFilter(collection, predicate) {
            var result = [];
            baseEach(collection, function (value, index, collection) {
                if (predicate(value, index, collection)) {
                    result.push(value);
                }
            });
            return result;
        }
        function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while (++index < length) {
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) {
                        baseFlatten(value, depth - 1, predicate, isStrict, result);
                    } else {
                        arrayPush(result, value);
                    }
                } else if (!isStrict) {
                    result[result.length] = value;
                }
            }
            return result;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        function baseFunctions(object, props) {
            return arrayFilter(props, function (key) {
                return isFunction(object[key]);
            });
        }
        function baseGet(object, path) {
            path = isKey(path, object) ? [path] : castPath(path);
            var index = 0, length = path.length;
            while (object != null && index < length) {
                object = object[path[index++]];
            }
            return index && index == length ? object : undefined;
        }
        function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        function baseHas(object, key) {
            return hasOwnProperty.call(object, key) || typeof object == 'object' && key in object && getPrototype(object) === null;
        }
        function baseHasIn(object, key) {
            return key in Object(object);
        }
        function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
            while (othIndex--) {
                var array = arrays[othIndex];
                if (othIndex && iteratee) {
                    array = arrayMap(array, baseUnary(iteratee));
                }
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
                while (++index < length && result.length < maxLength) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                        othIndex = othLength;
                        while (--othIndex) {
                            var cache = caches[othIndex];
                            if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
                                continue outer;
                            }
                        }
                        if (seen) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
            return result;
        }
        function baseInverter(object, setter, iteratee, accumulator) {
            baseForOwn(object, function (value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        function baseInvoke(object, path, args) {
            if (!isKey(path, object)) {
                path = castPath(path);
                object = parent(object, path);
                path = last(path);
            }
            var func = object == null ? object : object[path];
            return func == null ? undefined : apply(func, object, args);
        }
        function baseIsEqual(value, other, customizer, bitmask, stack) {
            if (value === other) {
                return true;
            }
            if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
                return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
        }
        function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
            if (!objIsArr) {
                objTag = getTag(object);
                objTag = objTag == argsTag ? objectTag : objTag;
            }
            if (!othIsArr) {
                othTag = getTag(other);
                othTag = othTag == argsTag ? objectTag : othTag;
            }
            var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack());
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
            }
            if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack());
                    return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
                }
            }
            if (!isSameTag) {
                return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
        }
        function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
                return !length;
            }
            object = Object(object);
            while (index--) {
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                    return false;
                }
            }
            while (++index < length) {
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) {
                        return false;
                    }
                } else {
                    var stack = new Stack();
                    if (customizer) {
                        var result = customizer(objValue, srcValue, key, object, source, stack);
                    }
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
                        return false;
                    }
                }
            }
            return true;
        }
        function baseIteratee(value) {
            if (typeof value == 'function') {
                return value;
            }
            if (value == null) {
                return identity;
            }
            if (typeof value == 'object') {
                return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
        }
        function baseKeys(object) {
            return nativeKeys(Object(object));
        }
        function baseKeysIn(object) {
            object = object == null ? object : Object(object);
            var result = [];
            for (var key in object) {
                result.push(key);
            }
            return result;
        }
        if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
            baseKeysIn = function (object) {
                return iteratorToArray(enumerate(object));
            };
        }
        function baseMap(collection, iteratee) {
            var index = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function (value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
                return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function (object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
                return matchesStrictComparable(path, srcValue);
            }
            return function (object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
            };
        }
        function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
                return;
            }
            if (!(isArray(source) || isTypedArray(source))) {
                var props = keysIn(source);
            }
            arrayEach(props || source, function (srcValue, key) {
                if (props) {
                    key = srcValue;
                    srcValue = source[key];
                }
                if (isObject(srcValue)) {
                    stack || (stack = new Stack());
                    baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                } else {
                    var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;
                    if (newValue === undefined) {
                        newValue = srcValue;
                    }
                    assignMergeValue(object, key, newValue);
                }
            });
        }
        function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = object[key], srcValue = source[key], stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                newValue = srcValue;
                if (isArray(srcValue) || isTypedArray(srcValue)) {
                    if (isArray(objValue)) {
                        newValue = objValue;
                    } else if (isArrayLikeObject(objValue)) {
                        newValue = copyArray(objValue);
                    } else {
                        isCommon = false;
                        newValue = baseClone(srcValue, true);
                    }
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    if (isArguments(objValue)) {
                        newValue = toPlainObject(objValue);
                    } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
                        isCommon = false;
                        newValue = baseClone(srcValue, true);
                    } else {
                        newValue = objValue;
                    }
                } else {
                    isCommon = false;
                }
            }
            stack.set(srcValue, newValue);
            if (isCommon) {
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            }
            stack['delete'](srcValue);
            assignMergeValue(object, key, newValue);
        }
        function baseOrderBy(collection, iteratees, orders) {
            var index = -1;
            iteratees = arrayMap(iteratees.length ? iteratees : [identity], getIteratee());
            var result = baseMap(collection, function (value, key, collection) {
                var criteria = arrayMap(iteratees, function (iteratee) {
                    return iteratee(value);
                });
                return {
                    'criteria': criteria,
                    'index': ++index,
                    'value': value
                };
            });
            return baseSortBy(result, function (object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        function basePick(object, props) {
            object = Object(object);
            return arrayReduce(props, function (result, key) {
                if (key in object) {
                    result[key] = object[key];
                }
                return result;
            }, {});
        }
        function basePickBy(object, predicate) {
            var index = -1, props = getAllKeysIn(object), length = props.length, result = {};
            while (++index < length) {
                var key = props[index], value = object[key];
                if (predicate(value, key)) {
                    result[key] = value;
                }
            }
            return result;
        }
        function baseProperty(key) {
            return function (object) {
                return object == null ? undefined : object[key];
            };
        }
        function basePropertyDeep(path) {
            return function (object) {
                return baseGet(object, path);
            };
        }
        function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (iteratee) {
                seen = arrayMap(array, baseUnary(iteratee));
            }
            while (++index < length) {
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                    if (seen !== array) {
                        splice.call(seen, fromIndex, 1);
                    }
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
                var index = indexes[length];
                if (lastIndex == length || index != previous) {
                    var previous = index;
                    if (isIndex(index)) {
                        splice.call(array, index, 1);
                    } else if (!isKey(index, array)) {
                        var path = castPath(index), object = parent(array, path);
                        if (object != null) {
                            delete object[last(path)];
                        }
                    } else {
                        delete array[index];
                    }
                }
            }
            return array;
        }
        function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
            while (length--) {
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        function baseRepeat(string, n) {
            var result = '';
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                return result;
            }
            do {
                if (n % 2) {
                    result += string;
                }
                n = nativeFloor(n / 2);
                if (n) {
                    string += string;
                }
            } while (n);
            return result;
        }
        function baseSet(object, path, value, customizer) {
            path = isKey(path, object) ? [path] : castPath(path);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
                var key = path[index];
                if (isObject(nested)) {
                    var newValue = value;
                    if (index != lastIndex) {
                        var objValue = nested[key];
                        newValue = customizer ? customizer(objValue, key, nested) : undefined;
                        if (newValue === undefined) {
                            newValue = objValue == null ? isIndex(path[index + 1]) ? [] : {} : objValue;
                        }
                    }
                    assignValue(nested, key, newValue);
                }
                nested = nested[key];
            }
            return object;
        }
        var baseSetData = !metaMap ? identity : function (func, data) {
            metaMap.set(func, data);
            return func;
        };
        function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) {
                start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
                end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array(length);
            while (++index < length) {
                result[index] = array[index + start];
            }
            return result;
        }
        function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function (value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array ? array.length : low;
            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while (low < high) {
                    var mid = low + high >>> 1, computed = array[mid];
                    if ((retHighest ? computed <= value : computed < value) && computed !== null) {
                        low = mid + 1;
                    } else {
                        high = mid;
                    }
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        function baseSortedIndexBy(array, value, iteratee, retHighest) {
            value = iteratee(value);
            var low = 0, high = array ? array.length : 0, valIsNaN = value !== value, valIsNull = value === null, valIsUndef = value === undefined;
            while (low < high) {
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), isDef = computed !== undefined, isReflexive = computed === computed;
                if (valIsNaN) {
                    var setLow = isReflexive || retHighest;
                } else if (valIsNull) {
                    setLow = isReflexive && isDef && (retHighest || computed != null);
                } else if (valIsUndef) {
                    setLow = isReflexive && (retHighest || isDef);
                } else if (computed == null) {
                    setLow = false;
                } else {
                    setLow = retHighest ? computed <= value : computed < value;
                }
                if (setLow) {
                    low = mid + 1;
                } else {
                    high = mid;
                }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array) {
            return baseSortedUniqBy(array);
        }
        function baseSortedUniqBy(array, iteratee) {
            var index = 0, length = array.length, value = array[0], computed = iteratee ? iteratee(value) : value, seen = computed, resIndex = 1, result = [value];
            while (++index < length) {
                value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!eq(computed, seen)) {
                    seen = computed;
                    result[resIndex++] = value;
                }
            }
            return result;
        }
        function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) {
                    return setToArray(set);
                }
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache();
            } else {
                seen = iteratee ? [] : result;
            }
            outer:
                while (++index < length) {
                    var value = array[index], computed = iteratee ? iteratee(value) : value;
                    if (isCommon && computed === computed) {
                        var seenIndex = seen.length;
                        while (seenIndex--) {
                            if (seen[seenIndex] === computed) {
                                continue outer;
                            }
                        }
                        if (iteratee) {
                            seen.push(computed);
                        }
                        result.push(value);
                    } else if (!includes(seen, computed, comparator)) {
                        if (seen !== result) {
                            seen.push(computed);
                        }
                        result.push(value);
                    }
                }
            return result;
        }
        function baseUnset(object, path) {
            path = isKey(path, object) ? [path] : castPath(path);
            object = parent(object, path);
            var key = last(path);
            return object != null && has(object, key) ? delete object[key] : true;
        }
        function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        function baseWrapperValue(value, actions) {
            var result = value;
            if (result instanceof LazyWrapper) {
                result = result.value();
            }
            return arrayReduce(actions, function (result, action) {
                return action.func.apply(action.thisArg, arrayPush([result], action.args));
            }, result);
        }
        function baseXor(arrays, iteratee, comparator) {
            var index = -1, length = arrays.length;
            while (++index < length) {
                var result = result ? arrayPush(baseDifference(result, arrays[index], iteratee, comparator), baseDifference(arrays[index], result, iteratee, comparator)) : arrays[index];
            }
            return result && result.length ? baseUniq(result, iteratee, comparator) : [];
        }
        function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {};
            while (++index < length) {
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
            return typeof value == 'function' ? value : identity;
        }
        function castPath(value) {
            return isArray(value) ? value : stringToPath(value);
        }
        function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
                return buffer.slice();
            }
            var result = new buffer.constructor(buffer.length);
            buffer.copy(result);
            return result;
        }
        function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneMap(map, isDeep, cloneFunc) {
            var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
            return arrayReduce(array, addMapEntry, new map.constructor());
        }
        function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        function cloneSet(set, isDeep, cloneFunc) {
            var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
            return arrayReduce(array, addSetEntry, new set.constructor());
        }
        function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
                result[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                    result[holders[argsIndex]] = args[argsIndex];
                }
            }
            while (rangeLength--) {
                result[leftIndex++] = args[argsIndex++];
            }
            return result;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
                result[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
                result[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
                if (isUncurried || argsIndex < argsLength) {
                    result[offset + holders[holdersIndex]] = args[argsIndex++];
                }
            }
            return result;
        }
        function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while (++index < length) {
                array[index] = source[index];
            }
            return array;
        }
        function copyObject(source, props, object) {
            return copyObjectWith(source, props, object);
        }
        function copyObjectWith(source, props, object, customizer) {
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];
                assignValue(object, key, newValue);
            }
            return object;
        }
        function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        function createAggregator(setter, initializer) {
            return function (collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee), accumulator);
            };
        }
        function createAssigner(assigner) {
            return rest(function (object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                while (++index < length) {
                    var source = sources[index];
                    if (source) {
                        assigner(object, source, index, customizer);
                    }
                }
                return object;
            });
        }
        function createBaseEach(eachFunc, fromRight) {
            return function (collection, iteratee) {
                if (collection == null) {
                    return collection;
                }
                if (!isArrayLike(collection)) {
                    return eachFunc(collection, iteratee);
                }
                var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                while (fromRight ? index-- : ++index < length) {
                    if (iteratee(iterable[index], index, iterable) === false) {
                        break;
                    }
                }
                return collection;
            };
        }
        function createBaseFor(fromRight) {
            return function (object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while (length--) {
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) {
                        break;
                    }
                }
                return object;
            };
        }
        function createBaseWrapper(func, bitmask, thisArg) {
            var isBind = bitmask & BIND_FLAG, Ctor = createCtorWrapper(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        function createCaseFirst(methodName) {
            return function (string) {
                string = toString(string);
                var strSymbols = reHasComplexSymbol.test(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        function createCompounder(callback) {
            return function (string) {
                return arrayReduce(words(deburr(string)), callback, '');
            };
        }
        function createCtorWrapper(Ctor) {
            return function () {
                var args = arguments;
                switch (args.length) {
                case 0:
                    return new Ctor();
                case 1:
                    return new Ctor(args[0]);
                case 2:
                    return new Ctor(args[0], args[1]);
                case 3:
                    return new Ctor(args[0], args[1], args[2]);
                case 4:
                    return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                return isObject(result) ? result : thisBinding;
            };
        }
        function createCurryWrapper(func, bitmask, arity) {
            var Ctor = createCtorWrapper(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length, placeholder = getPlaceholder(wrapper);
                while (index--) {
                    args[index] = arguments[index];
                }
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) {
                    return createRecurryWrapper(func, bitmask, createHybridWrapper, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                }
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        function createFlow(fromRight) {
            return rest(function (funcs) {
                funcs = baseFlatten(funcs, 1);
                var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) {
                    funcs.reverse();
                }
                while (index--) {
                    var func = funcs[index];
                    if (typeof func != 'function') {
                        throw new TypeError(FUNC_ERROR_TEXT);
                    }
                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                        var wrapper = new LodashWrapper([], true);
                    }
                }
                index = wrapper ? index : length;
                while (++index < length) {
                    func = funcs[index];
                    var funcName = getFuncName(func), data = funcName == 'wrapper' ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
                        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    } else {
                        wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                    }
                }
                return function () {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
                        return wrapper.plant(value).value();
                    }
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while (++index < length) {
                        result = funcs[index].call(this, result);
                    }
                    return result;
                };
            });
        }
        function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & ARY_FLAG, isBind = bitmask & BIND_FLAG, isBindKey = bitmask & BIND_KEY_FLAG, isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG), isFlip = bitmask & FLIP_FLAG, Ctor = isBindKey ? undefined : createCtorWrapper(func);
            function wrapper() {
                var length = arguments.length, index = length, args = Array(length);
                while (index--) {
                    args[index] = arguments[index];
                }
                if (isCurried) {
                    var placeholder = getPlaceholder(wrapper), holdersCount = countHolders(args, placeholder);
                }
                if (partials) {
                    args = composeArgs(args, partials, holders, isCurried);
                }
                if (partialsRight) {
                    args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                }
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurryWrapper(func, bitmask, createHybridWrapper, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) {
                    args = reorder(args, argPos);
                } else if (isFlip && length > 1) {
                    args.reverse();
                }
                if (isAry && ary < length) {
                    args.length = ary;
                }
                if (this && this !== root && this instanceof wrapper) {
                    fn = Ctor || createCtorWrapper(fn);
                }
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        function createInverter(setter, toIteratee) {
            return function (object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
            };
        }
        function createOver(arrayFunc) {
            return rest(function (iteratees) {
                iteratees = arrayMap(baseFlatten(iteratees, 1, isFlattenableIteratee), getIteratee());
                return rest(function (args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function (iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        function createPadding(length, chars) {
            chars = chars === undefined ? ' ' : chars + '';
            var charsLength = chars.length;
            if (charsLength < 2) {
                return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return reHasComplexSymbol.test(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
        }
        function createPartialWrapper(func, bitmask, thisArg, partials) {
            var isBind = bitmask & BIND_FLAG, Ctor = createCtorWrapper(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while (++leftIndex < leftLength) {
                    args[leftIndex] = partials[leftIndex];
                }
                while (argsLength--) {
                    args[leftIndex++] = arguments[++argsIndex];
                }
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        function createRange(fromRight) {
            return function (start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                    end = step = undefined;
                }
                start = toNumber(start);
                start = start === start ? start : 0;
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else {
                    end = toNumber(end) || 0;
                }
                step = step === undefined ? start < end ? 1 : -1 : toNumber(step) || 0;
                return baseRange(start, end, step, fromRight);
            };
        }
        function createRecurryWrapper(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & CURRY_FLAG, newArgPos = argPos ? copyArray(argPos) : undefined, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
            if (!(bitmask & CURRY_BOUND_FLAG)) {
                bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                newArgPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) {
                setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
        }
        function createRound(methodName) {
            var func = Math[methodName];
            return function (number, precision) {
                number = toNumber(number);
                precision = toInteger(precision);
                if (precision) {
                    var pair = (toString(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
                    pair = (toString(value) + 'e').split('e');
                    return +(pair[0] + 'e' + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        var createSet = !(Set && new Set([
            1,
            2
        ]).size === 2) ? noop : function (values) {
            return new Set(values);
        };
        function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & BIND_KEY_FLAG;
            if (!isBindKey && typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) {
                mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
                bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == BIND_FLAG) {
                var result = createBaseWrapper(func, bitmask, thisArg);
            } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
                result = createCurryWrapper(func, bitmask, arity);
            } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
                result = createPartialWrapper(func, bitmask, thisArg, partials);
            } else {
                result = createHybridWrapper.apply(undefined, newData);
            }
            var setter = data ? baseSetData : setData;
            return setter(result, newData);
        }
        function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
            var index = -1, isPartial = bitmask & PARTIAL_COMPARE_FLAG, isUnordered = bitmask & UNORDERED_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                return false;
            }
            var stacked = stack.get(array);
            if (stacked) {
                return stacked == other;
            }
            var result = true;
            stack.set(array, other);
            while (++index < arrLength) {
                var arrValue = array[index], othValue = other[index];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
                }
                if (compared !== undefined) {
                    if (compared) {
                        continue;
                    }
                    result = false;
                    break;
                }
                if (isUnordered) {
                    if (!arraySome(other, function (othValue) {
                            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
                        })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            return result;
        }
        function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
            switch (tag) {
            case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                    return false;
                }
                object = object.buffer;
                other = other.buffer;
            case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                    return false;
                }
                return true;
            case boolTag:
            case dateTag:
                return +object == +other;
            case errorTag:
                return object.name == other.name && object.message == other.message;
            case numberTag:
                return object != +object ? other != +other : object == +other;
            case regexpTag:
            case stringTag:
                return object == other + '';
            case mapTag:
                var convert = mapToArray;
            case setTag:
                var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                    return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                    return stacked == other;
                }
                bitmask |= UNORDERED_COMPARE_FLAG;
                stack.set(object, other);
                return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
            case symbolTag:
                if (symbolValueOf) {
                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
        }
        function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
            var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
                return false;
            }
            var index = objLength;
            while (index--) {
                var key = objProps[index];
                if (!(isPartial ? key in other : baseHas(other, key))) {
                    return false;
                }
            }
            var stacked = stack.get(object);
            if (stacked) {
                return stacked == other;
            }
            var result = true;
            stack.set(object, other);
            var skipCtor = isPartial;
            while (++index < objLength) {
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) {
                    var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                }
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                    result = false;
                }
            }
            stack['delete'](object);
            return result;
        }
        function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        var getData = !metaMap ? noop : function (func) {
            return metaMap.get(func);
        };
        function getFuncName(func) {
            var result = func.name + '', array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while (length--) {
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) {
                    return data.name;
                }
            }
            return result;
        }
        function getIteratee() {
            var result = lodash.iteratee || iteratee;
            result = result === iteratee ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        var getLength = baseProperty('length');
        function getMatchData(object) {
            var result = toPairs(object), length = result.length;
            while (length--) {
                result[length][2] = isStrictComparable(result[length][1]);
            }
            return result;
        }
        function getNative(object, key) {
            var value = object[key];
            return isNative(value) ? value : undefined;
        }
        function getPlaceholder(func) {
            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
            return object.placeholder;
        }
        function getPrototype(value) {
            return nativeGetPrototype(Object(value));
        }
        function getSymbols(object) {
            return getOwnPropertySymbols(Object(object));
        }
        if (!getOwnPropertySymbols) {
            getSymbols = function () {
                return [];
            };
        }
        var getSymbolsIn = !getOwnPropertySymbols ? getSymbols : function (object) {
            var result = [];
            while (object) {
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        function getTag(value) {
            return objectToString.call(value);
        }
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
            getTag = function (value) {
                var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : undefined;
                if (ctorString) {
                    switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;
                    case mapCtorString:
                        return mapTag;
                    case promiseCtorString:
                        return promiseTag;
                    case setCtorString:
                        return setTag;
                    case weakMapCtorString:
                        return weakMapTag;
                    }
                }
                return result;
            };
        }
        function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
                var data = transforms[index], size = data.size;
                switch (data.type) {
                case 'drop':
                    start += size;
                    break;
                case 'dropRight':
                    end -= size;
                    break;
                case 'take':
                    end = nativeMin(end, start + size);
                    break;
                case 'takeRight':
                    start = nativeMax(start, end - size);
                    break;
                }
            }
            return {
                'start': start,
                'end': end
            };
        }
        function hasPath(object, path, hasFunc) {
            path = isKey(path, object) ? [path] : castPath(path);
            var result, index = -1, length = path.length;
            while (++index < length) {
                var key = path[index];
                if (!(result = object != null && hasFunc(object, key))) {
                    break;
                }
                object = object[key];
            }
            if (result) {
                return result;
            }
            var length = object ? object.length : 0;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isString(object) || isArguments(object));
        }
        function initCloneArray(array) {
            var length = array.length, result = array.constructor(length);
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        function initCloneByTag(object, tag, cloneFunc, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
            case arrayBufferTag:
                return cloneArrayBuffer(object);
            case boolTag:
            case dateTag:
                return new Ctor(+object);
            case dataViewTag:
                return cloneDataView(object, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
                return cloneTypedArray(object, isDeep);
            case mapTag:
                return cloneMap(object, isDeep, cloneFunc);
            case numberTag:
            case stringTag:
                return new Ctor(object);
            case regexpTag:
                return cloneRegExp(object);
            case setTag:
                return cloneSet(object, isDeep, cloneFunc);
            case symbolTag:
                return cloneSymbol(object);
            }
        }
        function indexKeys(object) {
            var length = object ? object.length : undefined;
            if (isLength(length) && (isArray(object) || isString(object) || isArguments(object))) {
                return baseTimes(length, String);
            }
            return null;
        }
        function isFlattenable(value) {
            return isArrayLikeObject(value) && (isArray(value) || isArguments(value));
        }
        function isFlattenableIteratee(value) {
            return isArray(value) && !(value.length == 2 && !isFunction(value[0]));
        }
        function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
                return false;
            }
            var type = typeof index;
            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
                return eq(object[index], value);
            }
            return false;
        }
        function isKey(value, object) {
            var type = typeof value;
            if (type == 'number' || type == 'symbol') {
                return true;
            }
            return !isArray(value) && (isSymbol(value) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object));
        }
        function isKeyable(value) {
            var type = typeof value;
            return type == 'number' || type == 'boolean' || type == 'string' && value != '__proto__' || value == null;
        }
        function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                return false;
            }
            if (func === other) {
                return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
        }
        function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
        }
        function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        function matchesStrictComparable(key, srcValue) {
            return function (object) {
                if (object == null) {
                    return false;
                }
                return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (BIND_FLAG | BIND_KEY_FLAG | ARY_FLAG);
            var isCombo = srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG || srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8] || srcBitmask == (ARY_FLAG | REARG_FLAG) && source[7].length <= source[8] && bitmask == CURRY_FLAG;
            if (!(isCommon || isCombo)) {
                return data;
            }
            if (srcBitmask & BIND_FLAG) {
                data[2] = source[2];
                newBitmask |= bitmask & BIND_FLAG ? 0 : CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : copyArray(value);
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : copyArray(source[4]);
            }
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : copyArray(value);
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : copyArray(source[6]);
            }
            value = source[7];
            if (value) {
                data[7] = copyArray(value);
            }
            if (srcBitmask & ARY_FLAG) {
                data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
                data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        function mergeDefaults(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));
            }
            return objValue;
        }
        function parent(object, path) {
            return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        var setData = function () {
            var count = 0, lastCalled = 0;
            return function (key, value) {
                var stamp = now(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) {
                        return key;
                    }
                } else {
                    count = 0;
                }
                return baseSetData(key, value);
            };
        }();
        var stringToPath = memoize(function (string) {
            var result = [];
            toString(string).replace(rePropName, function (match, number, quote, string) {
                result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
        });
        function toKey(key) {
            return typeof key == 'string' || isSymbol(key) ? key : key + '';
        }
        function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {
                }
                try {
                    return func + '';
                } catch (e) {
                }
            }
            return '';
        }
        function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
                return wrapper.clone();
            }
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) {
                size = 1;
            } else {
                size = nativeMax(toInteger(size), 0);
            }
            var length = array ? array.length : 0;
            if (!length || size < 1) {
                return [];
            }
            var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
            while (index < length) {
                result[resIndex++] = baseSlice(array, index, index += size);
            }
            return result;
        }
        function compact(array) {
            var index = -1, length = array ? array.length : 0, resIndex = 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (value) {
                    result[resIndex++] = value;
                }
            }
            return result;
        }
        function concat() {
            var length = arguments.length, array = castArray(arguments[0]);
            if (length < 2) {
                return length ? copyArray(array) : [];
            }
            var args = Array(length - 1);
            while (length--) {
                args[length - 1] = arguments[length];
            }
            return arrayConcat(array, baseFlatten(args, 1));
        }
        var difference = rest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = rest(function (array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee)) : [];
        });
        var differenceWith = rest(function (array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) {
                comparator = undefined;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        function drop(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function dropRight(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        function fill(array, value, start, end) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        function findIndex(array, predicate) {
            return array && array.length ? baseFindIndex(array, getIteratee(predicate, 3)) : -1;
        }
        function findLastIndex(array, predicate) {
            return array && array.length ? baseFindIndex(array, getIteratee(predicate, 3), true) : -1;
        }
        function flatten(array) {
            var length = array ? array.length : 0;
            return length ? baseFlatten(array, 1) : [];
        }
        function flattenDeep(array) {
            var length = array ? array.length : 0;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        function flattenDepth(array, depth) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        function fromPairs(pairs) {
            var index = -1, length = pairs ? pairs.length : 0, result = {};
            while (++index < length) {
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        function head(array) {
            return array ? array[0] : undefined;
        }
        function indexOf(array, value, fromIndex) {
            var length = array ? array.length : 0;
            if (!length) {
                return -1;
            }
            fromIndex = toInteger(fromIndex);
            if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
            }
            return baseIndexOf(array, value, fromIndex);
        }
        function initial(array) {
            return dropRight(array, 1);
        }
        var intersection = rest(function (arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = rest(function (arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) {
                iteratee = undefined;
            } else {
                mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee)) : [];
        });
        var intersectionWith = rest(function (arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (comparator === last(mapped)) {
                comparator = undefined;
            } else {
                mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        function join(array, separator) {
            return array ? nativeJoin.call(array, separator) : '';
        }
        function last(array) {
            var length = array ? array.length : 0;
            return length ? array[length - 1] : undefined;
        }
        function lastIndexOf(array, value, fromIndex) {
            var length = array ? array.length : 0;
            if (!length) {
                return -1;
            }
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = (index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1)) + 1;
            }
            if (value !== value) {
                return indexOfNaN(array, index, true);
            }
            while (index--) {
                if (array[index] === value) {
                    return index;
                }
            }
            return -1;
        }
        var pull = rest(pullAll);
        function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee)) : array;
        }
        function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        var pullAt = rest(function (array, indexes) {
            indexes = arrayMap(baseFlatten(indexes, 1), String);
            var result = baseAt(array, indexes);
            basePullAt(array, indexes.sort(compareAscending));
            return result;
        });
        function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) {
                return result;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        function reverse(array) {
            return array ? nativeReverse.call(array) : array;
        }
        function slice(array, start, end) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee));
        }
        function sortedIndexOf(array, value) {
            var length = array ? array.length : 0;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }
        function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee), true);
        }
        function sortedLastIndexOf(array, value) {
            var length = array ? array.length : 0;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) {
                    return index;
                }
            }
            return -1;
        }
        function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniqBy(array, getIteratee(iteratee)) : [];
        }
        function tail(array) {
            return drop(array, 1);
        }
        function take(array, n, guard) {
            if (!(array && array.length)) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        function takeRight(array, n, guard) {
            var length = array ? array.length : 0;
            if (!length) {
                return [];
            }
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        var union = rest(function (arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = rest(function (arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee));
        });
        var unionWith = rest(function (arrays) {
            var comparator = last(arrays);
            if (isArrayLikeObject(comparator)) {
                comparator = undefined;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee)) : [];
        }
        function uniqWith(array, comparator) {
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        function unzip(array) {
            if (!(array && array.length)) {
                return [];
            }
            var length = 0;
            array = arrayFilter(array, function (group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function (index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        function unzipWith(array, iteratee) {
            if (!(array && array.length)) {
                return [];
            }
            var result = unzip(array);
            if (iteratee == null) {
                return result;
            }
            return arrayMap(result, function (group) {
                return apply(iteratee, undefined, group);
            });
        }
        var without = rest(function (array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        var xor = rest(function (arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = rest(function (arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) {
                iteratee = undefined;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee));
        });
        var xorWith = rest(function (arrays) {
            var comparator = last(arrays);
            if (isArrayLikeObject(comparator)) {
                comparator = undefined;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        var zip = rest(unzip);
        function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        var zipWith = rest(function (arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        function chain(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        function thru(value, interceptor) {
            return interceptor(value);
        }
        var wrapperAt = rest(function (paths) {
            paths = baseFlatten(paths, 1);
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function (object) {
                    return baseAt(object, paths);
                };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
                return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                'func': thru,
                'args': [interceptor],
                'thisArg': undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function (array) {
                if (length && !array.length) {
                    array.push(undefined);
                }
                return array;
            });
        });
        function wrapperChain() {
            return chain(this);
        }
        function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
            if (this.__values__ === undefined) {
                this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                'done': done,
                'value': value
            };
        }
        function wrapperToIterator() {
            return this;
        }
        function wrapperPlant(value) {
            var result, parent = this;
            while (parent instanceof baseLodash) {
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) {
                    previous.__wrapped__ = clone;
                } else {
                    result = clone;
                }
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) {
                    wrapped = new LazyWrapper(this);
                }
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    'func': thru,
                    'args': [reverse],
                    'thisArg': undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function (result, value, key) {
            hasOwnProperty.call(result, key) ? ++result[key] : result[key] = 1;
        });
        function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
            }
            return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        function find(collection, predicate) {
            predicate = getIteratee(predicate, 3);
            if (isArray(collection)) {
                var index = baseFindIndex(collection, predicate);
                return index > -1 ? collection[index] : undefined;
            }
            return baseFind(collection, predicate, baseEach);
        }
        function findLast(collection, predicate) {
            predicate = getIteratee(predicate, 3);
            if (isArray(collection)) {
                var index = baseFindIndex(collection, predicate, true);
                return index > -1 ? collection[index] : undefined;
            }
            return baseFind(collection, predicate, baseEachRight);
        }
        function flatMap(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), 1);
        }
        function flatMapDeep(collection, iteratee) {
            return baseFlatten(map(collection, iteratee), INFINITY);
        }
        function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee), depth);
        }
        function forEach(collection, iteratee) {
            return typeof iteratee == 'function' && isArray(collection) ? arrayEach(collection, iteratee) : baseEach(collection, getIteratee(iteratee));
        }
        function forEachRight(collection, iteratee) {
            return typeof iteratee == 'function' && isArray(collection) ? arrayEachRight(collection, iteratee) : baseEachRight(collection, getIteratee(iteratee));
        }
        var groupBy = createAggregator(function (result, value, key) {
            if (hasOwnProperty.call(result, key)) {
                result[key].push(value);
            } else {
                result[key] = [value];
            }
        });
        function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
                fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = rest(function (collection, path, args) {
            var index = -1, isFunc = typeof path == 'function', isProp = isKey(path), result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function (value) {
                var func = isFunc ? path : isProp && value != null ? value[path] : undefined;
                result[++index] = func ? apply(func, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        var keyBy = createAggregator(function (result, value, key) {
            result[key] = value;
        });
        function map(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
                return [];
            }
            if (!isArray(iteratees)) {
                iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined : orders;
            if (!isArray(orders)) {
                orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function (result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function () {
            return [
                [],
                []
            ];
        });
        function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            predicate = getIteratee(predicate, 3);
            return func(collection, function (value, index, collection) {
                return !predicate(value, index, collection);
            });
        }
        function sample(collection) {
            var array = isArrayLike(collection) ? collection : values(collection), length = array.length;
            return length > 0 ? array[baseRandom(0, length - 1)] : undefined;
        }
        function sampleSize(collection, n, guard) {
            var index = -1, result = toArray(collection), length = result.length, lastIndex = length - 1;
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) {
                n = 1;
            } else {
                n = baseClamp(toInteger(n), 0, length);
            }
            while (++index < n) {
                var rand = baseRandom(index, lastIndex), value = result[rand];
                result[rand] = result[index];
                result[index] = value;
            }
            result.length = n;
            return result;
        }
        function shuffle(collection) {
            return sampleSize(collection, MAX_ARRAY_LENGTH);
        }
        function size(collection) {
            if (collection == null) {
                return 0;
            }
            if (isArrayLike(collection)) {
                var result = collection.length;
                return result && isString(collection) ? stringSize(collection) : result;
            }
            if (isObjectLike(collection)) {
                var tag = getTag(collection);
                if (tag == mapTag || tag == setTag) {
                    return collection.size;
                }
            }
            return keys(collection).length;
        }
        function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
                predicate = undefined;
            }
            return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = rest(function (collection, iteratees) {
            if (collection == null) {
                return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now = Date.now;
        function after(n, func) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function () {
                if (--n < 1) {
                    return func.apply(this, arguments);
                }
            };
        }
        function ary(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        function before(n, func) {
            var result;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function () {
                if (--n > 0) {
                    result = func.apply(this, arguments);
                }
                if (n <= 1) {
                    func = undefined;
                }
                return result;
            };
        }
        var bind = rest(function (func, thisArg, partials) {
            var bitmask = BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getPlaceholder(bind));
                bitmask |= PARTIAL_FLAG;
            }
            return createWrapper(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = rest(function (object, key, partials) {
            var bitmask = BIND_FLAG | BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getPlaceholder(bindKey));
                bitmask |= PARTIAL_FLAG;
            }
            return createWrapper(key, bitmask, object, partials, holders);
        });
        function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrapper(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrapper(func, CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        function debounce(func, wait, options) {
            var lastArgs, lastThis, result, timerId, lastCallTime = 0, lastInvokeTime = 0, leading = false, maxWait = false, trailing = true;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxWait = 'maxWait' in options && nativeMax(toNumber(options.maxWait) || 0, wait);
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                lastInvokeTime = time;
                timerId = setTimeout(timerExpired, wait);
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result = wait - timeSinceLastCall;
                return maxWait === false ? result : nativeMin(result, maxWait - timeSinceLastInvoke);
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                return !lastCallTime || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxWait !== false && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) {
                    return trailingEdge(time);
                }
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                clearTimeout(timerId);
                timerId = undefined;
                if (trailing && lastArgs) {
                    return invokeFunc(time);
                }
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) {
                    clearTimeout(timerId);
                }
                lastCallTime = lastInvokeTime = 0;
                lastArgs = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) {
                        return leadingEdge(lastCallTime);
                    }
                    clearTimeout(timerId);
                    timerId = setTimeout(timerExpired, wait);
                    return invokeFunc(lastCallTime);
                }
                if (timerId === undefined) {
                    timerId = setTimeout(timerExpired, wait);
                }
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        var defer = rest(function (func, args) {
            return baseDelay(func, 1, args);
        });
        var delay = rest(function (func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        function flip(func) {
            return createWrapper(func, FLIP_FLAG);
        }
        function memoize(func, resolver) {
            if (typeof func != 'function' || resolver && typeof resolver != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            var memoized = function () {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) {
                    return cache.get(key);
                }
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result);
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
            if (typeof predicate != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            return function () {
                return !predicate.apply(this, arguments);
            };
        }
        function once(func) {
            return before(2, func);
        }
        var overArgs = rest(function (func, transforms) {
            transforms = arrayMap(baseFlatten(transforms, 1, isFlattenableIteratee), getIteratee());
            var funcsLength = transforms.length;
            return rest(function (args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while (++index < length) {
                    args[index] = transforms[index].call(this, args[index]);
                }
                return apply(func, this, args);
            });
        });
        var partial = rest(function (func, partials) {
            var holders = replaceHolders(partials, getPlaceholder(partial));
            return createWrapper(func, PARTIAL_FLAG, undefined, partials, holders);
        });
        var partialRight = rest(function (func, partials) {
            var holders = replaceHolders(partials, getPlaceholder(partialRight));
            return createWrapper(func, PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        var rearg = rest(function (func, indexes) {
            return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes, 1));
        });
        function rest(func, start) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            start = nativeMax(start === undefined ? func.length - 1 : toInteger(start), 0);
            return function () {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while (++index < length) {
                    array[index] = args[start + index];
                }
                switch (start) {
                case 0:
                    return func.call(this, array);
                case 1:
                    return func.call(this, args[0], array);
                case 2:
                    return func.call(this, args[0], args[1], array);
                }
                var otherArgs = Array(start + 1);
                index = -1;
                while (++index < start) {
                    otherArgs[index] = args[index];
                }
                otherArgs[start] = array;
                return apply(func, this, otherArgs);
            };
        }
        function spread(func, start) {
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            start = start === undefined ? 0 : nativeMax(toInteger(start), 0);
            return rest(function (args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) {
                    arrayPush(otherArgs, array);
                }
                return apply(func, this, otherArgs);
            });
        }
        function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != 'function') {
                throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
            });
        }
        function unary(func) {
            return ary(func, 1);
        }
        function wrap(value, wrapper) {
            wrapper = wrapper == null ? identity : wrapper;
            return partial(wrapper, value);
        }
        function castArray() {
            if (!arguments.length) {
                return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
        }
        function clone(value) {
            return baseClone(value, false, true);
        }
        function cloneWith(value, customizer) {
            return baseClone(value, false, true, customizer);
        }
        function cloneDeep(value) {
            return baseClone(value, true, true);
        }
        function cloneDeepWith(value, customizer) {
            return baseClone(value, true, true, customizer);
        }
        function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        function gt(value, other) {
            return value > other;
        }
        function gte(value, other) {
            return value >= other;
        }
        function isArguments(value) {
            return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
        }
        var isArray = Array.isArray;
        function isArrayBuffer(value) {
            return isObjectLike(value) && objectToString.call(value) == arrayBufferTag;
        }
        function isArrayLike(value) {
            return value != null && isLength(getLength(value)) && !isFunction(value);
        }
        function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
        }
        var isBuffer = !Buffer ? constant(false) : function (value) {
            return value instanceof Buffer;
        };
        function isDate(value) {
            return isObjectLike(value) && objectToString.call(value) == dateTag;
        }
        function isElement(value) {
            return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
        }
        function isEmpty(value) {
            if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value) || isBuffer(value))) {
                return !value.length;
            }
            if (isObjectLike(value)) {
                var tag = getTag(value);
                if (tag == mapTag || tag == setTag) {
                    return !value.size;
                }
            }
            for (var key in value) {
                if (hasOwnProperty.call(value, key)) {
                    return false;
                }
            }
            return !(nonEnumShadows && keys(value).length);
        }
        function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, customizer) : !!result;
        }
        function isError(value) {
            if (!isObjectLike(value)) {
                return false;
            }
            return objectToString.call(value) == errorTag || typeof value.message == 'string' && typeof value.name == 'string';
        }
        function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value);
        }
        function isFunction(value) {
            var tag = isObject(value) ? objectToString.call(value) : '';
            return tag == funcTag || tag == genTag;
        }
        function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value);
        }
        function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject(value) {
            var type = typeof value;
            return !!value && (type == 'object' || type == 'function');
        }
        function isObjectLike(value) {
            return !!value && typeof value == 'object';
        }
        function isMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        function isNaN(value) {
            return isNumber(value) && value != +value;
        }
        function isNative(value) {
            if (!isObject(value)) {
                return false;
            }
            var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        function isNull(value) {
            return value === null;
        }
        function isNil(value) {
            return value == null;
        }
        function isNumber(value) {
            return typeof value == 'number' || isObjectLike(value) && objectToString.call(value) == numberTag;
        }
        function isPlainObject(value) {
            if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
                return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
                return true;
            }
            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        function isRegExp(value) {
            return isObject(value) && objectToString.call(value) == regexpTag;
        }
        function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        function isSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        function isString(value) {
            return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
        }
        function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
        }
        function isTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
        }
        function isUndefined(value) {
            return value === undefined;
        }
        function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
            return isObjectLike(value) && objectToString.call(value) == weakSetTag;
        }
        function lt(value, other) {
            return value < other;
        }
        function lte(value, other) {
            return value <= other;
        }
        function toArray(value) {
            if (!value) {
                return [];
            }
            if (isArrayLike(value)) {
                return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (iteratorSymbol && value[iteratorSymbol]) {
                return iteratorToArray(value[iteratorSymbol]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
        }
        function toInteger(value) {
            if (!value) {
                return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            var remainder = value % 1;
            return value === value ? remainder ? value - remainder : value : 0;
        }
        function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber(value) {
            if (typeof value == 'number') {
                return value;
            }
            if (isSymbol(value)) {
                return NAN;
            }
            if (isObject(value)) {
                var other = isFunction(value.valueOf) ? value.valueOf() : value;
                value = isObject(other) ? other + '' : other;
            }
            if (typeof value != 'string') {
                return value === 0 ? value : +value;
            }
            value = value.replace(reTrim, '');
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
            return baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
        }
        function toString(value) {
            if (typeof value == 'string') {
                return value;
            }
            if (value == null) {
                return '';
            }
            if (isSymbol(value)) {
                return symbolToString ? symbolToString.call(value) : '';
            }
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        var assign = createAssigner(function (object, source) {
            if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for (var key in source) {
                if (hasOwnProperty.call(source, key)) {
                    assignValue(object, key, source[key]);
                }
            }
        });
        var assignIn = createAssigner(function (object, source) {
            if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keysIn(source), object);
                return;
            }
            for (var key in source) {
                assignValue(object, key, source[key]);
            }
        });
        var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObjectWith(source, keysIn(source), object, customizer);
        });
        var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
            copyObjectWith(source, keys(source), object, customizer);
        });
        var at = rest(function (object, paths) {
            return baseAt(object, baseFlatten(paths, 1));
        });
        function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties ? baseAssign(result, properties) : result;
        }
        var defaults = rest(function (args) {
            args.push(undefined, assignInDefaults);
            return apply(assignInWith, undefined, args);
        });
        var defaultsDeep = rest(function (args) {
            args.push(undefined, mergeDefaults);
            return apply(mergeWith, undefined, args);
        });
        function findKey(object, predicate) {
            return baseFind(object, getIteratee(predicate, 3), baseForOwn, true);
        }
        function findLastKey(object, predicate) {
            return baseFind(object, getIteratee(predicate, 3), baseForOwnRight, true);
        }
        function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee), keysIn);
        }
        function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee), keysIn);
        }
        function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee));
        }
        function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee));
        }
        function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        var invert = createInverter(function (result, value, key) {
            result[value] = key;
        }, constant(identity));
        var invertBy = createInverter(function (result, value, key) {
            if (hasOwnProperty.call(result, value)) {
                result[value].push(key);
            } else {
                result[value] = [key];
            }
        }, getIteratee);
        var invoke = rest(baseInvoke);
        function keys(object) {
            var isProto = isPrototype(object);
            if (!(isProto || isArrayLike(object))) {
                return baseKeys(object);
            }
            var indexes = indexKeys(object), skipIndexes = !!indexes, result = indexes || [], length = result.length;
            for (var key in object) {
                if (baseHas(object, key) && !(skipIndexes && (key == 'length' || isIndex(key, length))) && !(isProto && key == 'constructor')) {
                    result.push(key);
                }
            }
            return result;
        }
        function keysIn(object) {
            var index = -1, isProto = isPrototype(object), props = baseKeysIn(object), propsLength = props.length, indexes = indexKeys(object), skipIndexes = !!indexes, result = indexes || [], length = result.length;
            while (++index < propsLength) {
                var key = props[index];
                if (!(skipIndexes && (key == 'length' || isIndex(key, length))) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                    result.push(key);
                }
            }
            return result;
        }
        function mapKeys(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
                result[iteratee(value, key, object)] = value;
            });
            return result;
        }
        function mapValues(object, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object, function (value, key, object) {
                result[key] = iteratee(value, key, object);
            });
            return result;
        }
        var merge = createAssigner(function (object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        var omit = rest(function (object, props) {
            if (object == null) {
                return {};
            }
            props = arrayMap(baseFlatten(props, 1), toKey);
            return basePick(object, baseDifference(getAllKeysIn(object), props));
        });
        function omitBy(object, predicate) {
            predicate = getIteratee(predicate);
            return basePickBy(object, function (value, key) {
                return !predicate(value, key);
            });
        }
        var pick = rest(function (object, props) {
            return object == null ? {} : basePick(object, baseFlatten(props, 1));
        });
        function pickBy(object, predicate) {
            return object == null ? {} : basePickBy(object, getIteratee(predicate));
        }
        function result(object, path, defaultValue) {
            path = isKey(path, object) ? [path] : castPath(path);
            var index = -1, length = path.length;
            if (!length) {
                object = undefined;
                length = 1;
            }
            while (++index < length) {
                var value = object == null ? undefined : object[path[index]];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        function setWith(object, path, value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        function toPairs(object) {
            return baseToPairs(object, keys(object));
        }
        function toPairsIn(object) {
            return baseToPairs(object, keysIn(object));
        }
        function transform(object, iteratee, accumulator) {
            var isArr = isArray(object) || isTypedArray(object);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                if (isArr || isObject(object)) {
                    var Ctor = object.constructor;
                    if (isArr) {
                        accumulator = isArray(object) ? new Ctor() : [];
                    } else {
                        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                    }
                } else {
                    accumulator = {};
                }
            }
            (isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        function values(object) {
            return object ? baseValues(object, keys(object)) : [];
        }
        function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        function inRange(number, start, end) {
            start = toNumber(start) || 0;
            if (end === undefined) {
                end = start;
                start = 0;
            } else {
                end = toNumber(end) || 0;
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        function random(lower, upper, floating) {
            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                upper = floating = undefined;
            }
            if (floating === undefined) {
                if (typeof upper == 'boolean') {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == 'boolean') {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toNumber(lower) || 0;
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else {
                    upper = toNumber(upper) || 0;
                }
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function (result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
        }
        function endsWith(string, target, position) {
            string = toString(string);
            target = typeof target == 'string' ? target : target + '';
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            position -= target.length;
            return position >= 0 && string.indexOf(target, position) == position;
        }
        function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
        }
        var kebabCase = createCompounder(function (result, word, index) {
            return result + (index ? '-' : '') + word.toLowerCase();
        });
        var lowerCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst('toLowerCase');
        function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
                return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        function parseInt(string, radix, guard) {
            if (guard || radix == null) {
                radix = 0;
            } else if (radix) {
                radix = +radix;
            }
            string = toString(string).replace(reTrim, '');
            return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
        }
        function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
                n = 1;
            } else {
                n = toInteger(n);
            }
            return baseRepeat(toString(string), n);
        }
        function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function (result, word, index) {
            return result + (index ? '_' : '') + word.toLowerCase();
        });
        function split(string, separator, limit) {
            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                separator = limit = undefined;
            }
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
                return [];
            }
            string = toString(string);
            if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
                separator += '';
                if (separator == '' && reHasComplexSymbol.test(string)) {
                    return castSlice(stringToArray(string), 0, limit);
                }
            }
            return string.split(separator, limit);
        }
        var startCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + upperFirst(word);
        });
        function startsWith(string, target, position) {
            string = toString(string);
            position = baseClamp(toInteger(position), 0, string.length);
            return string.lastIndexOf(target, position) == position;
        }
        function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
                options = undefined;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, assignInDefaults);
            var imports = assignInWith({}, options.imports, settings.imports, assignInDefaults), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = '__p += \'';
            var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
            var sourceURL = '//# sourceURL=' + ('sourceURL' in options ? options.sourceURL : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
            string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                if (escapeValue) {
                    isEscaping = true;
                    source += '\' +\n__e(' + escapeValue + ') +\n\'';
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += '\';\n' + evaluateValue + ';\n__p += \'';
                }
                if (interpolateValue) {
                    source += '\' +\n((__t = (' + interpolateValue + ')) == null ? \'\' : __t) +\n\'';
                }
                index = offset + match.length;
                return match;
            });
            source += '\';\n';
            var variable = options.variable;
            if (!variable) {
                source = 'with (obj) {\n' + source + '\n}\n';
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
            source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + 'var __t, __p = \'\'' + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ', __j = Array.prototype.join;\n' + 'function print() { __p += __j.call(arguments, \'\') }\n' : ';\n') + source + 'return __p\n}';
            var result = attempt(function () {
                return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
            });
            result.source = source;
            if (isError(result)) {
                throw result;
            }
            return result;
        }
        function toLower(value) {
            return toString(value).toLowerCase();
        }
        function toUpper(value) {
            return toString(value).toUpperCase();
        }
        function trim(string, chars, guard) {
            string = toString(string);
            if (!string) {
                return string;
            }
            if (guard || chars === undefined) {
                return string.replace(reTrim, '');
            }
            if (!(chars += '')) {
                return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join('');
        }
        function trimEnd(string, chars, guard) {
            string = toString(string);
            if (!string) {
                return string;
            }
            if (guard || chars === undefined) {
                return string.replace(reTrimEnd, '');
            }
            if (!(chars += '')) {
                return string;
            }
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join('');
        }
        function trimStart(string, chars, guard) {
            string = toString(string);
            if (!string) {
                return string;
            }
            if (guard || chars === undefined) {
                return string.replace(reTrimStart, '');
            }
            if (!(chars += '')) {
                return string;
            }
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join('');
        }
        function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = 'separator' in options ? options.separator : separator;
                length = 'length' in options ? toInteger(options.length) : length;
                omission = 'omission' in options ? toString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (reHasComplexSymbol.test(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) {
                return string;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
                return omission;
            }
            var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
            if (separator === undefined) {
                return result + omission;
            }
            if (strSymbols) {
                end += result.length - end;
            }
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) {
                        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                    }
                    separator.lastIndex = 0;
                    while (match = separator.exec(substring)) {
                        var newEnd = match.index;
                    }
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(separator, end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) {
                    result = result.slice(0, index);
                }
            }
            return result + omission;
        }
        function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        var upperCase = createCompounder(function (result, word, index) {
            return result + (index ? ' ' : '') + word.toUpperCase();
        });
        var upperFirst = createCaseFirst('toUpperCase');
        function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) {
                pattern = reHasComplexWord.test(string) ? reComplexWord : reBasicWord;
            }
            return string.match(pattern) || [];
        }
        var attempt = rest(function (func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        var bindAll = rest(function (object, methodNames) {
            arrayEach(baseFlatten(methodNames, 1), function (key) {
                object[key] = bind(object[key], object);
            });
            return object;
        });
        function cond(pairs) {
            var length = pairs ? pairs.length : 0, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function (pair) {
                if (typeof pair[1] != 'function') {
                    throw new TypeError(FUNC_ERROR_TEXT);
                }
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return rest(function (args) {
                var index = -1;
                while (++index < length) {
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) {
                        return apply(pair[1], this, args);
                    }
                }
            });
        }
        function conforms(source) {
            return baseConforms(baseClone(source, true));
        }
        function constant(value) {
            return function () {
                return value;
            };
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity(value) {
            return value;
        }
        function iteratee(func) {
            return baseIteratee(typeof func == 'function' ? func : baseClone(func, true));
        }
        function matches(source) {
            return baseMatches(baseClone(source, true));
        }
        function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, true));
        }
        var method = rest(function (path, args) {
            return function (object) {
                return baseInvoke(object, path, args);
            };
        });
        var methodOf = rest(function (object, args) {
            return function (path) {
                return baseInvoke(object, path, args);
            };
        });
        function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = isObject(options) && 'chain' in options ? options.chain : true, isFunc = isFunction(object);
            arrayEach(methodNames, function (methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) {
                    object.prototype[methodName] = function () {
                        var chainAll = this.__chain__;
                        if (chain || chainAll) {
                            var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                            actions.push({
                                'func': func,
                                'args': arguments,
                                'thisArg': object
                            });
                            result.__chain__ = chainAll;
                            return result;
                        }
                        return func.apply(object, arrayPush([this.value()], arguments));
                    };
                }
            });
            return object;
        }
        function noConflict() {
            if (root._ === this) {
                root._ = oldDash;
            }
            return this;
        }
        function noop() {
        }
        function nthArg(n) {
            n = toInteger(n);
            return function () {
                return arguments[n];
            };
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
            return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
        }
        function propertyOf(object) {
            return function (path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        var range = createRange();
        var rangeRight = createRange(true);
        function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
                return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while (++index < n) {
                iteratee(index);
            }
            return result;
        }
        function toPath(value) {
            if (isArray(value)) {
                return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(value));
        }
        function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        var add = createMathOperation(function (augend, addend) {
            return augend + addend;
        });
        var ceil = createRound('ceil');
        var divide = createMathOperation(function (dividend, divisor) {
            return dividend / divisor;
        });
        var floor = createRound('floor');
        function max(array) {
            return array && array.length ? baseExtremum(array, identity, gt) : undefined;
        }
        function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee), gt) : undefined;
        }
        function mean(array) {
            return baseMean(array, identity);
        }
        function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee));
        }
        function min(array) {
            return array && array.length ? baseExtremum(array, identity, lt) : undefined;
        }
        function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee), lt) : undefined;
        }
        var multiply = createMathOperation(function (multiplier, multiplicand) {
            return multiplier * multiplicand;
        });
        var round = createRound('round');
        var subtract = createMathOperation(function (minuend, subtrahend) {
            return minuend - subtrahend;
        });
        function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee)) : 0;
        }
        lodash.after = after;
        lodash.ary = ary;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        mixin(lodash, lodash);
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.deburr = deburr;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes;
        lodash.indexOf = indexOf;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.multiply = multiply;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function () {
            var source = {};
            baseForOwn(lodash, function (func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                    source[methodName] = func;
                }
            });
            return source;
        }(), { 'chain': false });
        lodash.VERSION = VERSION;
        arrayEach([
            'bind',
            'bindKey',
            'curry',
            'curryRight',
            'partial',
            'partialRight'
        ], function (methodName) {
            lodash[methodName].placeholder = lodash;
        });
        arrayEach([
            'drop',
            'take'
        ], function (methodName, index) {
            LazyWrapper.prototype[methodName] = function (n) {
                var filtered = this.__filtered__;
                if (filtered && !index) {
                    return new LazyWrapper(this);
                }
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.clone();
                if (filtered) {
                    result.__takeCount__ = nativeMin(n, result.__takeCount__);
                } else {
                    result.__views__.push({
                        'size': nativeMin(n, MAX_ARRAY_LENGTH),
                        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                    });
                }
                return result;
            };
            LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        arrayEach([
            'filter',
            'map',
            'takeWhile'
        ], function (methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function (iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    'iteratee': getIteratee(iteratee, 3),
                    'type': type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        arrayEach([
            'head',
            'last'
        ], function (methodName, index) {
            var takeName = 'take' + (index ? 'Right' : '');
            LazyWrapper.prototype[methodName] = function () {
                return this[takeName](1).value()[0];
            };
        });
        arrayEach([
            'initial',
            'tail'
        ], function (methodName, index) {
            var dropName = 'drop' + (index ? '' : 'Right');
            LazyWrapper.prototype[methodName] = function () {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function () {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function (predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function (predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = rest(function (path, args) {
            if (typeof path == 'function') {
                return new LazyWrapper(this);
            }
            return this.map(function (value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function (predicate) {
            predicate = getIteratee(predicate, 3);
            return this.filter(function (value) {
                return !predicate(value);
            });
        };
        LazyWrapper.prototype.slice = function (start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) {
                return new LazyWrapper(result);
            }
            if (start < 0) {
                result = result.takeRight(-start);
            } else if (start) {
                result = result.drop(start);
            }
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function (predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function () {
            return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
                return;
            }
            lodash.prototype[methodName] = function () {
                var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value);
                var interceptor = function (value) {
                    var result = lodashFunc.apply(lodash, arrayPush([value], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                    isLazy = useLazy = false;
                }
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value = onlyLazy ? value : new LazyWrapper(this);
                    var result = func.apply(value, args);
                    result.__actions__.push({
                        'func': thru,
                        'args': [interceptor],
                        'thisArg': undefined
                    });
                    return new LodashWrapper(result, chainAll);
                }
                if (isUnwrapped && onlyLazy) {
                    return func.apply(this, args);
                }
                result = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result.value()[0] : result.value() : result;
            };
        });
        arrayEach([
            'pop',
            'push',
            'shift',
            'sort',
            'splice',
            'unshift'
        ], function (methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function () {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function (value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        baseForOwn(LazyWrapper.prototype, function (func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + '', names = realNames[key] || (realNames[key] = []);
                names.push({
                    'name': methodName,
                    'func': lodashFunc
                });
            }
        });
        realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{
                'name': 'wrapper',
                'func': undefined
            }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        if (iteratorSymbol) {
            lodash.prototype[iteratorSymbol] = wrapperToIterator;
        }
        return lodash;
    }
    var _ = runInContext();
    (freeWindow || freeSelf || {})._ = _;
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        define('lodash@4.10.0#lodash', function () {
            return _;
        });
    } else if (freeExports && freeModule) {
        if (moduleExports) {
            (freeModule.exports = _)._ = _;
        }
        freeExports._ = _;
    } else {
        root._ = _;
    }
}.call(this));
/*mev-normalization@0.0.1#src/main/model/NormalizationInfo.tpl.html!system-text@0.1.0#text*/
define('mev-normalization@0.0.1#src/main/model/NormalizationInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div><p>CSS: Cumulative Count Normalization: The counts slot holds the raw count data representing (along the rows) the number of reads annotated for a particular feature and (along the columns) the sample.</p>\n<p>TSS : Total Sum Scaling Normalization</p>\n<p>DEseq: Geomatric mean normalization implemented in DESeq. Given a matrix or data\nframe of count data, this function estimates the size factors as follows: Each column is\ndivided by the geometric means of the rows. The median (or, if requested, another\nlocation estimator) of these ratios (skipping the genes with a geometric mean of zero)\nis used as the size factor for this column.</p>\n<p>TMM: The trimmed mean of M-values normalization method as implemented in edgeR.\nCalculate Normalization Factors to Align Columns of a Count Matrix based on edgeR normalization.</p>\n<p>Upper-quartile: Upper quartile normalization as implemented in edgeR.</p>\n<p>VST: Variance stabilized transformation as implemented in DESeq2.</p>\n<p>PA: Presence of Absence of expression</p>\n</div>';
});
/*mev-normalization@0.0.1#src/main/model/NormalizationAnalysisType*/
define('mev-normalization@0.0.1#src/main/model/NormalizationAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/BaseParam',
    './NormalizationInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, BaseParam, infoTemplate) {
    'use strict';
    function NormalizationAnalysisType(mevAnalysisType, mevAnalysisParams, mevContext, $q, $http) {
        var normalizationType = new mevAnalysisType({
            id: 'normalization',
            name: 'Normalization',
            viewModel: 'NormalizationVM',
            params: mevAnalysisParams([
                new BaseParam({ id: 'name' }),
                new SelectParam({
                    'id': 'method',
                    'displayName': 'Method',
                    'options': [
                        'css',
                        'css2',
                        'tss',
                        'deseq',
                        'tmm',
                        'upperquantile',
                        'vst',
                        'pa'
                    ],
                    'value': 'css'
                })
            ]),
            onSuccess: function (response) {
                console.log('normalization success', response);
                if (response.status === 'SUCCESS') {
                    $http({
                        method: 'PUT',
                        url: '/dataset/' + response.params.datasetName + '/analyze/normalization/' + response.params.name + '/export',
                        data: { name: response.params.name }
                    }).then(function () {
                        $http({
                            method: 'POST',
                            url: '/annotations/' + response.params.datasetName + '/annotation/row' + '/export?destId=' + response.params.exportName
                        });
                        $http({
                            method: 'POST',
                            url: '/annotations/' + response.params.datasetName + '/annotation/column' + '/export?destId=' + response.params.exportName
                        });
                        mevContext.get('root').dataset.getAll();
                    });
                }
            },
            info: { template: infoTemplate }
        });
        function prepareParams(paramValues) {
            paramValues.name = paramValues.method;
            paramValues.exportName = mevContext.get('root').dataset.id + '--normalized-' + paramValues.name;
            return $q.when(paramValues);
        }
        normalizationType.start = function () {
            var _self = this;
            var paramValues = this.params.getValues();
            console.debug('normalization params values', paramValues);
            prepareParams(paramValues).then(function (params) {
                console.debug('normalization out params', params);
                _self.parent.start.call(_self, _self, params, {}, 'put');
            });
        };
        return normalizationType;
    }
    NormalizationAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevContext',
        '$q',
        '$http'
    ];
    NormalizationAnalysisType.$name = 'mevNormalizationAnalysisType';
    NormalizationAnalysisType.$provider = 'factory';
    return NormalizationAnalysisType;
});
/*mev-normalization@0.0.1#src/main/router/NormalizationState.tpl.html!system-text@0.1.0#text*/
define('mev-normalization@0.0.1#src/main/router/NormalizationState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div>\n\t<ul class="nav nav-tabs column-header" id="importTabs">\n\t\t<li id="normalization_tab" class="active"><a href="#normalization" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n\t\t<div class="action-menu" mui-paste="action-menu"></div>\n\t</ul>\n\n\t<div class="tab-content column-body">\n\t\t<div class="tab-pane active results-wrapper" id="normalization" >\n\t\t\t<div class="results-header clearfix"></div>\n\t\t\t<div class="results-body" >\n\t\t\t\t<div ng-if="DatasetAnalysisVM.analysis.status===\'SUCCESS\'">\n\t\t\t\t\tNormalization completed successfully. Click here to view the <a ui-sref="root.dataset.home({datasetId: DatasetAnalysisVM.analysis.params.exportName})">normalized dataset</a>.\n\t\t\t\t</div>\n\t\t\t\t<div ng-if="DatasetAnalysisVM.analysis.status===\'ERROR\'">\n\t\t\t\t\tAn error occurred while running normalization.<br>\n\t\t\t\t\t{{DatasetAnalysisVM.analysis}}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n';
});
/*mev-normalization@0.0.1#src/main/router/NormalizationState*/
define('mev-normalization@0.0.1#src/main/router/NormalizationState', ['./NormalizationState.tpl.html'], function (template) {
    'use strict';
    function NormalizationState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.normalization', {
            parent: 'root.dataset.analysisType',
            url: 'normalization/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'NormalizationVMFactory',
                function (scope, project, analysis, NormalizationVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return NormalizationVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'NormalizationVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    NormalizationState.inject = ['$stateProvider'];
    NormalizationState.provider = 'config';
    return NormalizationState;
});
/*mev-normalization@0.0.1#src/main/router/NormalizationVM*/
define('mev-normalization@0.0.1#src/main/router/NormalizationVM', ['lodash'], function (_) {
    'use strict';
    function NormalizationVM(mevAnalysisTypes) {
        function factory($scope, project, analysis) {
            var _self = this;
            _self.project = project;
            _self.analysis = analysis;
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    NormalizationVM.$inject = ['mevAnalysisTypes'];
    NormalizationVM.$name = 'NormalizationVMFactory';
    NormalizationVM.$provider = 'factory';
    return NormalizationVM;
});
/*mev-normalization@0.0.1#src/main/mev-normalization*/
define('mev-normalization@0.0.1#src/main/mev-normalization', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    './model/NormalizationAnalysisType',
    './router/NormalizationState',
    './router/NormalizationVM'
], function (ng) {
    return ng.module('mev-normalization', arguments, arguments);
});
/*mev-kmeans@0.0.1#src/main/model/KmeansAnalysisType*/
define('mev-kmeans@0.0.1#src/main/model/KmeansAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, SelectionSetParam, infoTemplate) {
    'use strict';
    function KmeansAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam) {
        var kmeansType = new mevAnalysisType({
            id: 'kmeans',
            name: 'K-Means',
            viewModel: 'KmeansVM',
            params: mevAnalysisParams([
                new SelectParam({
                    'id': 'dimension',
                    'displayName': 'Clustering Dimension',
                    'options': [
                        'column',
                        'row'
                    ],
                    'value': 'column',
                    'required': true
                }),
                new SelectParam({
                    'id': 'k',
                    'displayName': 'Clusters',
                    'options': [
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8
                    ],
                    'value': 3,
                    'required': true
                }),
                new SelectParam({
                    'id': 'metric',
                    'displayName': 'Distance Metric',
                    'options': ['euclidean'],
                    'value': 'euclidean',
                    'required': true
                }),
                new SelectParam({
                    'id': 'iterations',
                    'displayName': 'Iterations',
                    'options': [
                        100,
                        1000
                    ],
                    'value': 100,
                    'required': true
                })
            ])
        });
        kmeansType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            var urlParams = { dimension: params.dimension };
            _self.parent.start.call(_self, _self, params, urlParams, 'put');
        };
        return kmeansType;
    }
    KmeansAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam'
    ];
    KmeansAnalysisType.$name = 'mevKmeansAnalysisType';
    KmeansAnalysisType.$provider = 'factory';
    return KmeansAnalysisType;
});
/*mev-kmeans@0.0.1#src/main/router/KmeansState.tpl.html!system-text@0.1.0#text*/
define('mev-kmeans@0.0.1#src/main/router/KmeansState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<!-- <project-analysis-parameters parameters="DatasetAnalysisVM.analysis.params"></project-analysis-parameters> -->\n<div class="column-wrapper">\n    <ul class="nav nav-tabs column-header" id="importTabs">\n        <li id="clusters_tab" class="active"><a href="#clusters" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n        <li id="heatmap_tab"><a href="#heatmap" data-toggle="tab" target="_self">Heatmap</a></li>\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body">\n        <div class="tab-pane active" id="clusters" >\n            <div  class="results-wrapper">\n                <div class="results-header clearfix">\n\n                    <h3 class="analysis-results-title">{{analysis.name}} Results</h3>\n                    <div class="btn-toolbar" role="toolbar" mui-yank="action-menu">\n                        <div class="btn-group">\n                            <a class="btn btn-success pull-right" href="/dataset/{{project.dataset.datasetName}}/analysis/{{analysis.name}}?format=tsv">\n                                <i class="icon-white icon-download"></i> Download\n                            </a>\n                        </div>\n                    </div>\n\n                </div>\n                <div class="results-body">\n                    <table class="table table-striped table-bordered table-condensed">\n                        <thead>\n                        <tr>\n                            <th>Cluster Size</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        <tr ng-repeat="cluster in analysis.clusters">\n                            <td>\n                                Size: {{cluster.length}}\n                                <!--<a class="btn btn-info pull-right" ng-click="loadSelections(cluster)" data-target="#selectionAdd{{analysis.name}}" data-toggle="modal">-->\n                                    <!--<span class="glyphicon glyphicon-plus" style="color:white"></span> Add Selection-->\n                                <!--</a>-->\n                                <btn-create-selection class="pull-right" mui-target="kmeans-cluster-{{DatasetAnalysisVM.analysis.name}}-{{$index}}"\n                                                      mui-analysis="DatasetAnalysisVM.analysis"\n                                                      mui-dataset="DatasetAnalysisVM.project.dataset"\n                                                      mui-items="cluster"\n                                                      mui-dimension="{{DatasetAnalysisVM.analysis.dimension}}"\n                                                      mev-out-filtered-results="cluster">\n                                </btn-create-selection>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n        <div class="tab-pane" id="heatmap">\n            <mev-heatmap mev-dataset=\'DatasetAnalysisVM.project.dataset\' mev-heatmap-view=\'DatasetAnalysisVM.heatmapView\'></mev-heatmap>\n        </div>\n\n    </div>\n</div>\n';
});
/*mev-kmeans@0.0.1#src/main/router/KmeansState*/
define('mev-kmeans@0.0.1#src/main/router/KmeansState', ['./KmeansState.tpl.html'], function (template) {
    'use strict';
    function KmeansState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.kmeans', {
            parent: 'root.dataset.analysisType',
            url: 'kmeans/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'KmeansVMFactory',
                function (scope, project, analysis, KmeansVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return KmeansVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'KmeansVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    KmeansState.inject = ['$stateProvider'];
    KmeansState.provider = 'config';
    return KmeansState;
});
/*mev-kmeans@0.0.1#src/main/router/KmeansVM*/
define('mev-kmeans@0.0.1#src/main/router/KmeansVM', ['lodash'], function (_) {
    'use strict';
    function KmeansVM(mevAnalysisTypes) {
        function factory(scope, project, analysis) {
            var _self = this;
            this.analysisId = analysis.name;
            scope.analysis = this.analysis = analysis;
            scope.project = this.project = project;
            scope.analysisTypes = this.analysisTypes = mevAnalysisTypes.all();
            scope.selectionParams = {
                name: undefined,
                color: '#' + Math.floor(Math.random() * 16777215 << 0).toString(16),
                dimension: undefined,
                keys: undefined
            };
            scope.$watch('analysis', function (newval) {
                if (newval) {
                    scope.selectionParams.dimension = newval.dimension;
                }
            });
            var labels = traverse(scope.analysis.clusters);
            if (analysis.dimension == 'column') {
                this.heatmapView = project.generateView({
                    viewType: 'heatmapView',
                    note: analysis.name,
                    labels: {
                        row: { keys: project.dataset.row.keys },
                        column: { keys: labels }
                    },
                    expression: {
                        min: project.dataset.expression.min,
                        max: project.dataset.expression.max,
                        avg: project.dataset.expression.avg
                    },
                    panel: {
                        top: analysis,
                        side: {}
                    }
                });
            } else {
                this.heatmapView = project.generateView({
                    viewType: 'heatmapView',
                    note: analysis.name,
                    labels: {
                        column: { keys: project.dataset.column.keys },
                        row: { keys: labels }
                    },
                    expression: {
                        min: project.dataset.expression.min,
                        max: project.dataset.expression.max,
                        avg: project.dataset.expression.avg
                    },
                    panel: {
                        side: analysis,
                        top: {}
                    }
                });
            }
            function traverse(clusters) {
                var labels = [];
                for (var i = 0; i < clusters.length; i++) {
                    labels = labels.concat(clusters[i]);
                }
                ;
                return labels;
            }
            scope.loadSelections = function (clusters) {
                scope.selectionParams.keys = clusters;
            };
            scope.addSelections = function () {
                var selectionsData = {
                    name: scope.selectionParams.name,
                    properties: {
                        selectionDescription: '',
                        selectionColor: scope.selectionParams.color
                    },
                    keys: traverse(scope.selectionParams.keys)
                };
                scope.project.dataset.selection.post({
                    datasetName: scope.project.dataset.datasetName,
                    dimension: scope.selectionParams.dimension
                }, selectionsData, function (response) {
                    scope.project.dataset.resetSelections(scope.selectionParams.dimension);
                    var message = 'Added ' + scope.selectionParams.name + ' as new Selection!';
                    var header = 'Heatmap Selection Addition';
                    scope.selectionParams.color = '#' + Math.floor(Math.random() * 16777215 << 0).toString(16);
                    alertService.success(message, header);
                }, function (data, status, headers, config) {
                    var message = 'Couldn\'t add new selection. If ' + 'problem persists, please contact us.';
                    var header = 'Selection Addition Problem (Error Code: ' + status + ')';
                    alertService.error(message, header);
                });
            };
            scope.applyToHeatmap = function () {
                var labels = traverse(scope.analysis.clusters);
                if (scope.analysis.dimension == 'column') {
                    _self.heatmapView = scope.heatmapView = scope.project.generateView({
                        viewType: 'heatmapView',
                        labels: {
                            row: { keys: scope.project.dataset.row.keys },
                            column: { keys: labels }
                        },
                        expression: {
                            min: scope.project.dataset.expression.min,
                            max: scope.project.dataset.expression.max,
                            avg: scope.project.dataset.expression.avg
                        },
                        panel: { top: scope.analysis }
                    });
                } else {
                    _self.heatmapView = scope.heatmapView = scope.project.generateView({
                        viewType: 'heatmapView',
                        labels: {
                            column: { keys: scope.project.dataset.column.keys },
                            row: { keys: labels }
                        },
                        expression: {
                            min: scope.project.dataset.expression.min,
                            max: scope.project.dataset.expression.max,
                            avg: scope.project.dataset.expression.avg
                        },
                        panel: { side: scope.analysis }
                    });
                }
            };
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    KmeansVM.$inject = ['mevAnalysisTypes'];
    KmeansVM.$name = 'KmeansVMFactory';
    KmeansVM.$provider = 'factory';
    return KmeansVM;
});
/*mev-kmeans@0.0.1#src/main/mev-kmeans*/
define('mev-kmeans@0.0.1#src/main/mev-kmeans', [
    'mui',
    'angular-ui-router',
    'mev-heatmap',
    'mev-analysis',
    'mev-domain-common',
    './model/KmeansAnalysisType',
    './router/KmeansState',
    './router/KmeansVM'
], function (ng) {
    'use strict';
    return ng.module('mev-kmeans', arguments, arguments);
});
/*mev-time-function@0.0.1#src/main/view/healthVis/healthvis*/
define('mev-time-function@0.0.1#src/main/view/healthVis/healthvis', ['jquery'], function ($) {
    function HVSocket() {
        this._socket = null;
        this._requestId = 0;
        this._callbacks = {};
        this._requestsStack = [];
    }
    HVSocket.instance = new HVSocket();
    HVSocket.prototype.initialize = function (host) {
        if (host == 'None') {
            return;
        }
        try {
            var socket = new WebSocket(host);
            var self = this;
            socket.onopen = function () {
                self._onSocketOpen();
            };
            socket.onmessage = function (msg) {
                self._onSocketMsg(msg);
            };
            socket.onclose = function () {
                self._onSocketClose();
            };
            this._socket = socket;
        } catch (ex) {
            console.log(ex);
        }
    };
    HVSocket.prototype._onSocketOpen = function () {
        console.log('Socket connected\n');
        for (var i = 0; i < this._requestsStack.length; ++i) {
            this._socket.send(this._requestsStack[i]);
        }
        this._requestsStack = [];
    };
    HVSocket.prototype._onSocketClose = function () {
        this._socket = null;
    };
    HVSocket.prototype._onSocketMsg = function (msg) {
        console.log('Socket received: ' + msg.data);
        var message = JSON.parse(msg.data);
        if (message.type == 'response') {
            var callback = this._callbacks[message.id];
            delete this._callbacks[message.id];
            callback(JSON.parse(message.data));
        } else if (message.type == 'request') {
        }
    };
    HVSocket.prototype.connected = function () {
        return this._socket != null;
    };
    HVSocket.prototype._nextId = function () {
        return this._requestId++;
    };
    HVSocket.prototype.sendRequest = function (data, callback) {
        var id = this._nextId();
        this._callbacks[id] = callback;
        var message = {
            type: 'request',
            id: id,
            data: data
        };
        var msg = JSON.stringify(message);
        console.log('Socket sending');
        console.dir(message.data);
        if (this._socket.readyState) {
            this._socket.send(msg);
        } else {
            console.log('Pushed to stack');
            this._requestsStack.push(msg);
        }
    };
    function Healthvis() {
        this._renderer = null;
        this._paramsURL = null;
        this._socket = null;
        this._saved = null;
        this._elementId = null;
        this._embedIds = null;
    }
    Healthvis.instance = new Healthvis();
    Healthvis.prototype.initialize = function (saved, url, elementId, emebedIds) {
        this._saved = saved;
        this._elementId = elementId;
        this._embedIds = emebedIds;
        if (!saved) {
            this._socket = HVSocket.instance;
            this._socket.initialize(url);
        } else {
            this._paramsURL = url;
        }
    };
    Healthvis.prototype.register = function (fn) {
        this._renderer = fn;
    };
    Healthvis.prototype.visualize = function () {
        var renderer = this._renderer, self = this, elementId = this._elementId;
        var callback = function (json) {
            renderer.init(elementId, json);
            renderer.visualize();
            if (document.location.search.length) {
                var newcov = $('#covariate-form').serializeArray();
                self.update(newcov);
            }
        };
        if (this._saved) {
            d3.json(this._paramsURL, callback);
        } else {
            this._getParams(callback);
        }
    };
    Healthvis.prototype.getDimensions = function (inputWidth, inputHeight) {
        var height = inputHeight, width = inputWidth, embedIds = this._embedIds, elementId = this._elementId;
        if (embedIds) {
            var totalHeight = $(window).height();
            height = totalHeight - $(embedIds.header).height() - $(embedIds.footer).height();
            width = $(elementId).width();
            height = height > 0 && height < inputHeight ? height : inputHeight;
            width = width > 0 && width < inputWidth ? width : inputWidth;
        }
        return {
            width: width,
            height: height
        };
    };
    Healthvis.prototype.update = function (formInput) {
        this._renderer.update(formInput);
    };
    Healthvis.prototype._getParams = function (callback) {
        var message = { action: 'getParams' };
        this._socket.sendRequest(message, callback);
    };
    Healthvis.prototype._savePlot = function (url, uploadURL, query) {
        var self = this, query = query;
        var callback = function (json) {
            self._stopServer();
            var url = '/display/' + json.id + '?' + query;
            console.log(url);
            console.log(encodeURI(url));
            window.location.replace(url);
        };
        this.initialize(false, url);
        var message = {
            action: 'savePlot',
            data: uploadURL
        };
        this._socket.sendRequest(message, callback);
    };
    Healthvis.prototype._stopServer = function () {
        var message = {
            action: 'stopServer',
            data: ''
        };
        this._socket.sendRequest(message, function () {
        });
    };
    var healthvis = Healthvis.instance;
    $(document).ready(function () {
        $('#covariate-form :input').change(function () {
            if ($('#covariate-form').valid()) {
                var newcov = $('#covariate-form').serializeArray();
                healthvis.update(newcov);
            } else {
                console.log('Not valid');
            }
        });
    });
});
/*mev-time-function@0.0.1#src/main/view/healthVis/healthVis_survival*/
define('mev-time-function@0.0.1#src/main/view/healthVis/healthVis_survival', ['d3'], function (d3) {
    function init_coefs(coef_nums, coef_names) {
        var coefs = new Array(coef_names.length);
        for (var i = 0; i < coef_names.length; i++) {
            coefs[coef_names[i]] = coef_nums[i];
        }
        return coefs;
    }
    function update_hazard(data, coef, covar) {
        var tmpdata = new Array(data.length);
        var xb = 0;
        for (key in coef) {
            xb = xb + coef[key] * covar[key];
        }
        var prop = Math.exp(xb);
        for (var i = 0; i < tmpdata.length; i++) {
            var l_tmp = JSON.parse(JSON.stringify(data[i]));
            for (var j = 0; j < l_tmp.length; j++) {
                l_tmp[j].haz = Math.exp(-data[i][j].haz * prop);
            }
            tmpdata[i] = l_tmp;
        }
        return tmpdata;
    }
    function HealthvisSurvival() {
        this.w = 700;
        this.h = 400;
        this.vis = null;
        this.init_data1 = null;
        this.init_data2 = null;
        this.init_vals = null;
        this.coef_names = null;
        this.coef = null;
        this.covar = null;
        this.vtype = null;
        this.line = null;
        this.x = null;
        this.y = null;
        this.group_names = null;
        this.init = function (elementId, d3Params) {
            var dimensions = typeof healthvis != 'undefined' ? healthvis.getDimensions(this.w, this.h) : {
                height: this.h,
                width: this.w
            };
            this.w = dimensions.width;
            this.h = dimensions.height;
            this.vis = d3.select(elementId).append('svg:svg').attr('width', this.w).attr('height', this.h + 30).append('svg:g').attr('transform', 'translate(' + 40 + ',' + 10 + ')');
            this.init_data = d3Params.data;
            var coef_nums = d3Params.csort;
            this.coef_names = d3Params.cnames;
            var vlist = d3Params.vars;
            var mtype = d3Params.menutype;
            this.init_vals = new Array(this.coef_names.length);
            for (var i = 0; i < this.coef_names.length; i++) {
                this.init_vals[this.coef_names[i]] = 0;
            }
            this.coef = coef_nums;
            this.covar = this.init_vals;
            this.vtype = init_coefs(mtype, vlist);
            this.group_names = d3Params.group_names;
            this.colors = d3Params.linecol;
            this.x = d3.scale.linear().domain([
                0,
                d3Params.daymax
            ]).range([
                0,
                this.w
            ]);
            this.y = d3.scale.linear().domain([
                -0.1,
                1
            ]).range([
                this.h,
                0
            ]);
        };
        this.visualize = function () {
            var data = update_hazard(this.init_data, this.coef, this.covar);
            var xAxis = d3.svg.axis().scale(this.x).orient('bottom');
            this.vis.append('svg:g').attr('class', 'x axis').attr('transform', 'translate(0,' + (this.h - 30) + ')').call(xAxis);
            this.vis.append('text').attr('class', 'x label').attr('x', this.w / 2 - 12).attr('y', this.h + 10).text('Time');
            var yAxis = d3.svg.axis().scale(this.y).ticks(6).orient('left');
            this.vis.append('svg:g').attr('class', 'y axis').attr('transform', 'translate(-5,0)').call(yAxis);
            this.vis.append('text').attr('class', 'y label').attr('x', -200).attr('y', -30).attr('transform', 'rotate(-90)').text('Survival');
            if (typeof this.colors == 'string') {
                var colors = [this.colors];
            } else {
                var colors = this.colors;
            }
            var x = this.x;
            var y = this.y;
            this.line = d3.svg.line().x(function (d) {
                return x(d.time);
            }).y(function (d) {
                return y(d.haz);
            }).interpolate('step-after');
            this.vis.selectAll('.line').data(data).enter().append('path').attr('class', 'line').style('stroke', function (d, i) {
                return colors[i];
            }).attr('d', this.line);
            var group_names = this.group_names;
            if (!(group_names == '')) {
                var xOffset = 200;
                var xSpacing = 10;
                var legend = this.vis.append('g').attr('class', 'legend').attr('x', this.w - xOffset).attr('y', 125).attr('height', 200).attr('width', 200);
                legend.selectAll('rect').data(colors).enter().append('rect').attr('x', this.w - xOffset).attr('y', function (d, i) {
                    return i * 20;
                }).attr('width', 10).attr('height', 10).style('fill', function (d) {
                    return d;
                });
                legend.selectAll('text').data(group_names).enter().append('text').attr('x', this.w - (xOffset - xSpacing * 2)).attr('y', function (d, i) {
                    return i * 20 + 10;
                }).text(function (d) {
                    return d;
                });
            }
            return data;
        };
        this.update_covar = function (newcov) {
            for (var i = 0; i < this.coef_names.length; i++) {
                this.covar[this.coef_names[i]] = 0;
            }
            for (var j = 0; j < newcov.length; j++) {
                if (this.vtype[newcov[j].name] == 'continuous') {
                    this.covar[newcov[j].name] = parseFloat(newcov[j].value);
                } else {
                    this.covar[newcov[j].name + newcov[j].value] = 1;
                }
            }
        };
        this.update = function (newcov) {
            this.update_covar(newcov);
            var tmp = update_hazard(this.init_data, this.coef, this.covar);
            this.vis.selectAll('path.line').data(tmp).transition().duration(1800).delay(100).ease('elastic').attr('width', 0).attr('d', this.line);
            var x = this.x;
            var y = this.y;
        };
    }
    return HealthvisSurvival;
});
/*mev-time-function@0.0.1#src/main/view/timeFunctionPlot.tpl.html!system-text@0.1.0#text*/
define('mev-time-function@0.0.1#src/main/view/timeFunctionPlot.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div>\n\n<div id="survival-function-plot" class="plot"></div>\n<div class="plot-summary">\n<h1>Summary</h1>\n<table>\n<tr><td>n</td><td>{{analysis.result.n}}</td></tr>\n<tr><td>n of events</td><td>{{analysis.result.n_event}}</td></tr>\n<tr><td>coef</td><td>{{analysis.result.coef}}</td></tr>\n<tr><td>exp(coef)</td><td>{{analysis.result.exp_coef}}</td></tr>\n<tr><td>se(coef)</td><td>{{analysis.result.se_coef}}</td></tr>\n<tr><td>z</td><td>{{analysis.result.z}}</td></tr>\n<tr><td>pValue</td><td>{{analysis.result.pValue}}</td></tr>\n<tr><td>upper CI</td><td>{{analysis.result.ci_lower}}</td></tr>\n<tr><td>lower CI</td><td>{{analysis.result.ci_upper}}</td></tr>\n<tr><td>logrank</td><td>score: {{analysis.result.logrank.score}}, pValue: {{analysis.result.logrank.pValue}}</td></tr>\n</table>\n</div>\n<table ng-if="false">\n\t<th>Time</th>\n\t<th>{{analysis.params.experiment.name}}</th>\n\t<th>{{analysis.params.control.name}}</th>\n\t<tr ng-repeat="entry in plotData[0]">\n\t\t<td>{{entry.time}}</td>\n\t\t<td>{{entry.haz}}</td>\n\t\t<td>{{plotData[1][$index].haz}}</td>\n\t</tr>\n</table>\n<style>\n.plot path {\n    stroke: #000;\n    stroke-width: ", line.size ,"px;\n    fill: none;\n}\n.axis path,\n.axis line {\n    fill: none;\n    stroke: black;\n    shape-rendering: crispEdges;\n}\n\n.axis text {\n    font-family: sans-serif;\n    font-size: 12px;\n}\n</style>\n</div>\n';
});
/*mev-time-function@0.0.1#src/main/view/timeFunctionDirective*/
define('mev-time-function@0.0.1#src/main/view/timeFunctionDirective', [
    'lodash',
    './healthVis/healthvis',
    './healthVis/healthVis_survival',
    './timeFunctionPlot.tpl.html'
], function (_, healthVis, healthVisSurvival, template) {
    var directive = function () {
        return {
            restrict: 'E',
            scope: {
                analysis: '=',
                project: '=',
                isItOpen: '@'
            },
            template: template,
            link: function (scope, elem, attrs) {
                var healthVisSurvivalPlot = new healthVisSurvival();
                var maxDomain = _.maxBy(scope.analysis.params.input, 'time').time;
                var experiment = scope.analysis.result.plot.experiment;
                var control = scope.analysis.result.plot.control;
                healthVisParams = {
                    'csort': {},
                    'cnames': [],
                    'vars': [],
                    'menutype': [],
                    'daymax': maxDomain * 1.1,
                    'linecol': [
                        scope.analysis.params.experiment.properties.selectionColor,
                        scope.analysis.params.control.properties.selectionColor
                    ],
                    'group_names': [
                        scope.analysis.params.experimentName,
                        scope.analysis.params.controlName
                    ],
                    'data': [
                        experiment,
                        control
                    ]
                };
                healthVisSurvivalPlot.init('#survival-function-plot', healthVisParams);
                scope.plotData = healthVisSurvivalPlot.visualize();
            }
        };
    };
    directive.$name = 'mevTimeFunctionPlot';
    directive.$inject = [];
    directive.$provider = 'directive';
    return directive;
});
/*mev-time-function@0.0.1#src/main/mev-time-function*/
define('mev-time-function@0.0.1#src/main/mev-time-function', [
    'mui',
    './view/timeFunctionDirective'
], function (ng) {
    return ng.module('mev-time-function', arguments, arguments);
});
/*mev-survival@0.0.1#src/main/model/SurvivalInfo.tpl.html!system-text@0.1.0#text*/
define('mev-survival@0.0.1#src/main/model/SurvivalInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>Survival Analysis</p>\n<p>Fits a Cox proportional hazards regression model. Time dependent variables, time dependent strata, multiple events per subject, and other extensions are incorporated using the counting process formulation of Andersen and Gill.</p>\n<p>Reference:  <a href="https://cran.r-project.org/web/views/Survival.html">https://cran.r-project.org/web/views/Survival.html</a></p>';
});
/*mev-survival@0.0.1#src/main/model/SurvivalAnalysisType*/
define('mev-survival@0.0.1#src/main/model/SurvivalAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    'mev-analysis/src/params/model/select/SelectParam',
    'mev-analysis/src/params/model/selectionSet/SelectionSetParam',
    './SurvivalInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, SelectParam, SelectionSetParam, infoTemplate) {
    'use strict';
    function SurvivalAnalysisType(mevAnalysisType, mevAnalysisParams, mevSelectionSetParam, mevSurvivalAnalysisSrv, mevContext) {
        var SurvivalType = new mevAnalysisType({
            id: 'survival',
            name: 'Survival Analysis',
            viewModel: 'SurvivalVM',
            params: mevAnalysisParams([
                new mevSelectionSetParam({
                    'id': 'experiment',
                    'displayName': 'Experiment',
                    'dimension': 'column',
                    'display': 'name'
                }),
                new mevSelectionSetParam({
                    'id': 'control',
                    'displayName': 'Control',
                    'dimension': 'column',
                    'display': 'name'
                })
            ]),
            info: { template: infoTemplate }
        });
        SurvivalType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            mevSurvivalAnalysisSrv.getInputDataTcga(params).then(function (data) {
                var postRequest = {
                    experimentName: params.experiment.name,
                    controlName: params.control.name,
                    input: data,
                    datasetName: mevContext.get('root').name
                };
                _.assign(params, postRequest);
                console.debug('Survival params', params);
                _self.parent.start.call(_self, _self, params, {}, 'post');
            });
        };
        return SurvivalType;
    }
    SurvivalAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams',
        'mevSelectionSetParam',
        'mevSurvivalAnalysisSrv',
        'mevContext'
    ];
    SurvivalAnalysisType.$name = 'mevSurvivalAnalysisType';
    SurvivalAnalysisType.$provider = 'factory';
    return SurvivalAnalysisType;
});
/*mev-survival@0.0.1#src/main/model/SurvivalAnalysisSrv*/
define('mev-survival@0.0.1#src/main/model/SurvivalAnalysisSrv', ['lodash'], function (_) {
    'use strict';
    var SurvivalAnalysisSrv = function (mevAnnotationRepository) {
        function isNumber(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }
        this.getInputDataTcga = function (params) {
            var annotations = new mevAnnotationRepository('column');
            return annotations.getDataTable([
                'days_to_death',
                'days_to_last_followup',
                'vital_status'
            ]).then(function (data) {
                var results = [];
                if (data && data.length > 0) {
                    if (!data[0].days_to_death)
                        throw 'Missing required annotation field "days_to_death"';
                    if (!data[0].days_to_last_followup)
                        throw 'Missing required annotation field "days_to_last_followup"';
                } else {
                    throw 'Clinical annotations not loaded';
                }
                data.map(function (item) {
                    if (params.experiment.keys.indexOf(item.key) >= 0)
                        item.group = 2;
                    else if (params.control.keys.indexOf(item.key) >= 0)
                        item.group = 1;
                    if (_.isNumber(item.group)) {
                        item.days_to_death = parseFloat(item.days_to_death);
                        item.days_to_last_followup = parseFloat(item.days_to_last_followup);
                        item.status = isNumber(item.days_to_death) ? 1 : 0;
                        item.time = isNumber(item.days_to_death) ? item.days_to_death : item.days_to_last_followup;
                        results.push(item);
                    }
                });
                return results;
            });
        };
    };
    SurvivalAnalysisSrv.$inject = ['mevAnnotationRepository'];
    SurvivalAnalysisSrv.$name = 'mevSurvivalAnalysisSrv';
    SurvivalAnalysisSrv.$provider = 'service';
    return SurvivalAnalysisSrv;
});
/*mev-survival@0.0.1#src/main/model/SurvivalColumnList*/
define('mev-survival@0.0.1#src/main/model/SurvivalColumnList', ['lodash'], function (_) {
    var SurvivalColumnList = function (mevAnnotationsLocator) {
        this.get = function () {
            var results = { columns: [] };
            mevAnnotationsLocator.find('column').getFields().then(function (data) {
                if (Array.isArray(columns)) {
                    columns.map(function (column) {
                        results.columns.push(column);
                    });
                }
            });
            return results;
        };
    };
    SurvivalColumnList.$name = 'mevSurvivalColumnList';
    SurvivalColumnList.$inject = ['mevAnnotationsLocator'];
    SurvivalColumnList.$provider = 'service';
    return SurvivalColumnList;
});
/*mev-survival@0.0.1#src/main/router/SurvivalState.tpl.html!system-text@0.1.0#text*/
define('mev-survival@0.0.1#src/main/router/SurvivalState.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="column-wrapper">\n    <ul class="nav nav-tabs column-header" id="importTabs">\n        <li id="survival_tab" class="active"><a href="#survival" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}}</a></li>\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body">\n        <div class="tab-pane active results-wrapper" id="survival" >\n            <div class="results-header clearfix"></div>\n            <div class="results-body">\n                <mev-time-function-plot analysis="DatasetAnalysisVM.analysis" project="DatasetAnalysisVM.project" is-it-open="true" ></mev-time-function-plot>\n            </div>\n        </div>\n    </div>\n</div>\n';
});
/*mev-survival@0.0.1#src/main/router/SurvivalState*/
define('mev-survival@0.0.1#src/main/router/SurvivalState', ['./SurvivalState.tpl.html'], function (template) {
    'use strict';
    function SurvivalState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.survival', {
            parent: 'root.dataset.analysisType',
            url: 'survival/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'SurvivalVMFactory',
                function (scope, project, analysis, SurvivalVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return SurvivalVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'SurvivalVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    SurvivalState.inject = ['$stateProvider'];
    SurvivalState.provider = 'config';
    return SurvivalState;
});
/*mev-survival@0.0.1#src/main/router/SurvivalVM*/
define('mev-survival@0.0.1#src/main/router/SurvivalVM', ['lodash'], function (_) {
    'use strict';
    function SurvivalVM(mevAnalysisTypes, $stateParams) {
        function factory($scope, project, analysis) {
            var _self = this;
            this.analysisId = $stateParams.analysisId;
            this.analysis = analysis;
            this.project = project;
            $scope.dataset = project.dataset;
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    SurvivalVM.$inject = [
        'mevAnalysisTypes',
        '$stateParams'
    ];
    SurvivalVM.$name = 'SurvivalVMFactory';
    SurvivalVM.$provider = 'factory';
    return SurvivalVM;
});
/*mev-survival@0.0.1#src/main/mev-survival*/
define('mev-survival@0.0.1#src/main/mev-survival', [
    'mui',
    'angular-ui-router',
    'mev-analysis',
    'mev-domain-common',
    'mev-time-function',
    'mev-annotations',
    './model/SurvivalAnalysisType',
    './model/SurvivalAnalysisSrv',
    './model/SurvivalColumnList',
    './router/SurvivalState',
    './router/SurvivalVM'
], function (ng) {
    'use strict';
    return ng.module('mev-survival', arguments, arguments);
});
/*mev-genemad@0.0.1#src/main/router/GeneMAD.tpl.html!system-text@0.1.0#text*/
define('mev-genemad@0.0.1#src/main/router/GeneMAD.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<div class="column-wrapper genemad">\n    <ul class="nav nav-tabs column-header" id="importTabs">\n        <li id="genesd_top_tab" class="active"><a href="#genesd_top" data-toggle="tab" target="_self">{{DatasetAnalysisVM.analysis.name}} High</a></li>\n        <!-- \t\t<li id="heatmap_tab"><a href="#heatmap" data-toggle="tab" target="_self">Heatmap</a></li> -->\n        <div class="action-menu" mui-paste="action-menu"></div>\n    </ul>\n\n    <div class="tab-content column-body">\n        <div class="tab-pane active results-wrapper" id="genesd_top" >\n            <div class="results-header clearfix">\n                <!--      \t<div class="btn-toolbar" role="toolbar" mui-yank="action-menu"> -->\n                <div class="btn-toolbar" role="toolbar" >\n                    <div class="btn-group">\n                        <btn-create-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis"\n                                              mui-dataset="dataset" mui-items="DatasetAnalysisVM.filteredResultsTop" mui-key-name="geneId">\n                        </btn-create-selection><!--\n\t\t\t            --><btn-export-selection mui-target="Top" mui-analysis="DatasetAnalysisVM.analysis"\n                                                 mui-dataset="dataset" mui-items="DatasetAnalysisVM.filteredResultsTop" mui-key-name="geneId">\n                    </btn-export-selection>\n                    </div>\n                </div>\n            </div>\n            <div class="results-body">\n                <mev-results-table id="DatasetAnalysisVM.heatmapViewTop.id"\n                                   mev-top="{options: [20, 50, 100, 500], current: 20}"\n                                   data="DatasetAnalysisVM.sigGenesTop"\n                                   headers="DatasetAnalysisVM.headers"\n                                   ordering="value"\n                                   mev-save-as="{name: DatasetAnalysisVM.analysis.name}"\n                                   mev-out-filtered-results="DatasetAnalysisVM.filteredResultsTop"></mev-results-table>\n                <mev-heatmap mev-dataset=\'DatasetAnalysisVM.project.dataset\' mev-heatmap-view=\'DatasetAnalysisVM.heatmapViewTop\'></mev-heatmap>\n\n            </div>\n        </div>\n        <!-- \t\t<div class="tab-pane results-wrapper" id="heatmap" >\t\t\t\t\t\t\t\t\t -->\n        <!-- \t\t</div>\t\t -->\n    </div>\n</div>\n';
});
/*mev-genemad@0.0.1#src/main/model/GeneMADInfo.tpl.html!system-text@0.1.0#text*/
define('mev-genemad@0.0.1#src/main/model/GeneMADInfo.tpl.html!system-text@0.1.0#text', function (require, exports, module) {
    module.exports = '<p>MAD: Median Absolute Deviation</p>\n<p>Compute the median absolute deviation, i.e., the (lo-/hi-) median of the absolute deviations from the median, and (by default) adjust by a factor for asymptotically normal consistency</p>\n<p>Reference: <a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/mad.html">https://stat.ethz.ch/R-manual/R-devel/library/stats/html/mad.html</a></p>';
});
/*mev-genemad@0.0.1#src/main/model/GeneMADAnalysisType*/
define('mev-genemad@0.0.1#src/main/model/GeneMADAnalysisType', [
    'lodash',
    'mev-analysis/src/type/model/AnalysisType',
    'mev-analysis/src/params/model/AnalysisParamsFactory',
    '../router/GeneMAD.tpl.html',
    './GeneMADInfo.tpl.html'
], function (_, mevAnalysisType, AnalysisParamsFactory, template, infoTemplate) {
    'use strict';
    function GeneMADAnalysisType(mevAnalysisType, mevAnalysisParams) {
        var GeneMADType = new mevAnalysisType({
            id: 'genemad',
            name: 'GeneMAD',
            viewModel: 'GeneMADVM',
            template: template,
            params: mevAnalysisParams([]),
            info: { template: infoTemplate }
        });
        GeneMADType.start = function () {
            var _self = this;
            var params = this.params.getValues();
            _self.parent.start.call(_self, _self, params, {}, 'put');
        };
        return GeneMADType;
    }
    GeneMADAnalysisType.$inject = [
        'mevAnalysisType',
        'mevAnalysisParams'
    ];
    GeneMADAnalysisType.$name = 'mevGeneMADAnalysisType';
    GeneMADAnalysisType.$provider = 'factory';
    return GeneMADAnalysisType;
});
/*mev-genemad@0.0.1#src/main/router/GeneMADVM*/
define('mev-genemad@0.0.1#src/main/router/GeneMADVM', [], function () {
    'use strict';
    function GeneMADVM($stateParams) {
        function factory($scope, project, analysis) {
            function formatData(genes, values) {
                return genes.map(function (gene, i) {
                    return {
                        geneId: gene,
                        value: values[i]
                    };
                });
            }
            var _self = this;
            this.analysisId = $stateParams.analysisId;
            this.analysis = analysis;
            this.project = project;
            $scope.dataset = project.dataset;
            var TOP_N = 500;
            this.sigGenesTop = formatData(analysis.result.genes.slice(0, TOP_N), analysis.result.mad.slice(0, TOP_N));
            this.headers = [
                {
                    'name': 'MAD',
                    'field': 'geneId',
                    'icon': 'search'
                },
                {
                    'name': 'Deviation',
                    'field': 'value',
                    'icon': '>='
                }
            ];
            this.heatmapViewTop = project.generateView({
                viewType: 'heatmapView',
                note: analysis.name + '_genesMADTop',
                labels: { row: { keys: analysis.result.genes.slice(0, TOP_N) } }
            });
            this.filteredResultsTop = [];
            $scope.$on('ui:resultsTable:filteredResults', function ($event, filteredResults) {
                if ($event.targetScope.id === _self.heatmapViewTop.id) {
                    var labels = filteredResults.map(function (gene) {
                        return gene.geneId;
                    });
                    _self.heatmapViewTop = _self.heatmapViewTop.applyFilter('row', labels);
                }
            });
        }
        ;
        factory.$inject = [
            '$scope',
            'project',
            'analysis'
        ];
        return factory;
    }
    GeneMADVM.$inject = ['$stateParams'];
    GeneMADVM.$name = 'GeneMADVMFactory';
    GeneMADVM.$provider = 'factory';
    return GeneMADVM;
});
/*mev-genemad@0.0.1#src/main/router/GeneMADState*/
define('mev-genemad@0.0.1#src/main/router/GeneMADState', ['./GeneMAD.tpl.html'], function (template) {
    'use strict';
    function GeneMADState($stateProvider) {
        $stateProvider.state('root.dataset.analysisType.genemad', {
            parent: 'root.dataset.analysisType',
            url: 'genemad/{analysisId}',
            template: template,
            controller: [
                '$scope',
                'project',
                'analysis',
                'GeneMADVMFactory',
                function (scope, project, analysis, GeneMADVMFactory) {
                    scope.DatasetAnalysisVM = this;
                    return GeneMADVMFactory.call(this, scope, project, analysis);
                }
            ],
            controllerAs: 'GeneMADVM',
            displayName: '{{analysis.name}} analysis',
            resolve: {
                analysis: function ($stateParams, dataset) {
                    return _.find(dataset.analyses, function (analysis) {
                        return analysis.name === $stateParams.analysisId;
                    });
                }
            }
        });
    }
    GeneMADState.inject = ['$stateProvider'];
    GeneMADState.provider = 'config';
    return GeneMADState;
});
/*mev-genemad@0.0.1#src/main/mev-genemad*/
define('mev-genemad@0.0.1#src/main/mev-genemad', [
    'mui',
    'angular-ui-router',
    'mev-heatmap',
    'mev-results-table',
    './model/GeneMADAnalysisType',
    './router/GeneMADVM',
    './router/GeneMADState'
], function (ng) {
    'use strict';
    return ng.module('mev-genemad', arguments, arguments);
});
/*app/views/dataset/views.dataset.module*/
define('app/views/dataset/views.dataset.module', [
    'mui',
    'pouchdb',
    './_controllers/DatasetProjectViewVM',
    './_controllers/DatasetHomeVM',
    './_controllers/DatasetHeatmapVMFactory',
    './annotations/AnnotationsViewVM',
    './columnSets/views.dataset.columnSets.module',
    './rowSets/views.dataset.rowSets.module',
    './selectionSets/views.dataset.selectionSets.module',
    './analysis/views.dataset.analysis.module',
    './analyses/views.dataset.analyses.module',
    './session/views.dataset.session.module',
    'js/project/Project',
    'js/setmanager/SetManager',
    'js-data-angular',
    '../../domain/domain.module',
    '../../widgets/analysis/widgets.analysis.module',
    'ag-grid',
    'crossfilter',
    'blueimp-canvas-to-blob',
    'notific8',
    'mev-analysis',
    'mev-bs-modal',
    'mev-alert',
    'mevPathwayEnrichment',
    'mev-gsea',
    'mev-annotations',
    'mev-hcl',
    'mev-heatmap',
    'mev-domain-common',
    'mev-topgo',
    'mev-normalization',
    'mev-edger',
    'mev-wgcna',
    'mev-limma',
    'mev-ttest',
    'mev-anova',
    'mev-deseq',
    'mev-voom',
    'mev-kmeans',
    'mev-survival',
    'mev-genemad'
], function (ng, PouchDB, DatasetProjectViewVM, DatasetHomeVM, DatasetHeatmapVMFactory, AnnotationsViewVM) {
    'use strict';
    var module = ng.module('mui.views.dataset', arguments, arguments);
    module.controller('AnnotationsViewVM', AnnotationsViewVM);
    module.config([
        '$stateProvider',
        '$urlRouterProvider',
        function ($stateProvider, $urlRouterProvider) {
            $stateProvider.state('root.abstractDataset', {
                parent: 'root',
                'abstract': true,
                url: '/dataset',
                breadcrumbProxy: 'root.datasets',
                displayName: 'datasets',
                template: '<ui-view></ui-view>'
            }).state('root.dataset', {
                parent: 'root.abstractDataset',
                'abstract': true,
                url: '/:datasetId/',
                templateUrl: 'app/views/dataset/_templates/dataset.tpl.html',
                breadcrumbProxy: 'root.dataset.home',
                displayName: '{{dataset.datasetName}}',
                controller: 'DatasetProjectViewVM',
                controllerAs: 'DatasetProjectViewVM',
                data: {
                    sidemenuUrl: 'app/views/dataset/_templates/dataset.sidemenu.accordion.tpl.html',
                    footerUrl: 'app/views/dataset/_templates/dataset.footer.tpl.html',
                    headerUrl: 'app/views/dataset/_templates/dataset.header.tpl.html'
                },
                resolve: {
                    datasetResource: [
                        '$state',
                        '$stateParams',
                        'mevDatasetRest',
                        '$q',
                        '$http',
                        function ($state, $stateParams, DatasetResourceService, $q, $http) {
                            var datasetResource = DatasetResourceService.get({ datasetName: $stateParams.datasetId }, function (response) {
                                console.debug('**** Loaded Dataset', $stateParams.datasetId, response);
                            }, function (error) {
                                console.debug('**** Failed to Load Dataset', $stateParams.datasetId, error);
                                if (error.data && _.includes(error.data, 'DatasetNotFoundException'))
                                    $state.go('root.datasets.sessionTimeout');
                                else
                                    $state.go('root.datasets.error', {
                                        header: 'Parsing Error',
                                        message: 'Unable to parse data file. Two common causes are duplicate row keys or incorrect column header.',
                                        error: error
                                    });
                            });
                            return datasetResource.$promise;
                        }
                    ],
                    project: [
                        '$state',
                        '$stateParams',
                        'datasetResource',
                        'ProjectFactory',
                        function ($state, $stateParams, datasetResource, ProjectFactory) {
                            return datasetResource.$promise.then(function (response) {
                                var project = ProjectFactory($stateParams.datasetId, datasetResource);
                                console.debug('***Project', project);
                                return project;
                            });
                        }
                    ],
                    dataset: [
                        '$state',
                        '$stateParams',
                        'project',
                        'mevAnnotationRepository',
                        function ($state, $stateParams, project) {
                            console.info('***resolving dataset', $stateParams.datasetId, $stateParams, $state, project);
                            return project.dataset.loadAnalyses().then(function () {
                                console.info('***resolved dataset', project.dataset);
                                return project.dataset;
                            }).then(function (dataset) {
                                var mockORefineProject = { metadata: { customMetadata: { datasetName: dataset.id } } };
                                function handleNotFound(e) {
                                    if (e.name === 'AnnotationNotFoundOnServer');
                                    else
                                        throw e;
                                }
                                dataset.getAnnotations('column').saveAnnotations(mockORefineProject).catch(handleNotFound);
                                dataset.getAnnotations('row').saveAnnotations(mockORefineProject).catch(handleNotFound);
                                return dataset;
                            });
                        }
                    ]
                },
                onExit: [
                    'dataset',
                    function (dataset) {
                        console.log('closing ' + dataset.id);
                        dataset.close();
                    }
                ]
            }).state('root.dataset.home', {
                parent: 'root.dataset',
                url: '',
                displayName: '{{dataset.datasetName}}',
                views: {
                    '': {
                        templateUrl: 'app/views/dataset/_templates/dataset.home.tpl.html',
                        controller: 'DatasetHomeVM',
                        controllerAs: 'DatasetHomeVM'
                    },
                    '@root.dataset.analysis': {},
                    'child2@root.dataset.home': { template: '<h1>child2</h1>' }
                },
                data: {},
                resolve: {}
            }).state('dataset.annotations', {
                url: 'annotations/:dimension',
                template: '<div>{{AnnotationsViewVM.dataset.name}} - {{AnnotationsViewVM.annotations.name}}</div>',
                controller: 'AnnotationsViewVM',
                controllerAs: 'AnnotationsViewVM',
                parent: 'dataset',
                resolve: {
                    annotations: [
                        '$stateParams',
                        'dataset',
                        function ($stateParams, dataset) {
                            var annotations = dataset.annotations[$stateParams.dimension];
                            console.debug('Dataset.Annotations view resolved: ', annotations);
                            return annotations;
                        }
                    ]
                }
            });
        }
    ]);
    return module;
});